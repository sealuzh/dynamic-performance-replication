/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:31:24 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.InnerClass;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)26, (byte)26, (byte)26, (byte) (-72), (byte)49, (byte)66, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(6682, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(6840, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(6682, constantInvokeDynamic0.getClassIndex());
      assertArrayEquals(new byte[] {(byte)26, (byte)26, (byte)26, (byte) (-72), (byte)49, (byte)66, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(8, byteArray0.length);
      
      String string0 = Utility.replace("5FLKsNm", "L>87yY", "5FLKsNm");
      assertEquals("5FLKsNm", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)26, (byte)26, (byte)26, (byte) (-72), (byte)49, (byte)66, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(8, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)26, (byte)26, (byte)26, (byte) (-72), (byte)49, (byte)66, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(8, byteArray0.length);
      
      byte byte0 = byteSequence1.readByte();
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)26, (byte)26, (byte)26, (byte) (-72), (byte)49, (byte)66, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)26, byte0);
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(8, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)26, (byte)26, (byte)26, (byte) (-72), (byte)49, (byte)66, (byte)0, (byte)0}, byteArray0);
      assertEquals("daload", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = false;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      int int0 = Utility.clearBit(2602, (-305));
      assertEquals(2602, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)33, (byte)33, (byte)33, (byte)0}, byteArray0);
      assertEquals("$n$n$n$A", string0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)33, (byte)33, (byte)33, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = false;
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)33, (byte)33, (byte)33, (byte)0}, byteArray0);
      assertEquals("lload_3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      boolean boolean2 = false;
      byteSequence0.mark(2211);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)33, (byte)33, (byte)33, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)33, (byte)33, (byte)33, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(4, byteArray0.length);
      
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-46);
      byteArray0[0] = (byte) (-103);
      byteArray0[3] = (byte)75;
      byteArray0[5] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-46), (byte)0, (byte)75, (byte)0, (byte)75}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.replace("Fe~/Xn1ZtI", "Fe~/Xn1ZtI", "Fe~/Xn1ZtI");
      assertEquals("Fe~/Xn1ZtI", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-46), (byte)0, (byte)75, (byte)0, (byte)75}, byteArray0);
      assertEquals("ifeq\t\t#-11776", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-46), (byte)0, (byte)75, (byte)0, (byte)75}, byteArray0);
      assertEquals("astore_0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      
      MockFile mockFile0 = new MockFile("astore_0");
      assertNotNull(mockFile0);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "ldc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"ldc\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "FTtsn|@N/f";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)118;
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte)118}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)93, (byte)118}, byteArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(2, byteArray0.length);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte)118}, byteArray0);
      assertEquals("dup2_x1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      
      String string2 = Utility.replace("#Jl", "dup2_x1", "FTtsn|@N/f");
      assertEquals("#Jl", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte)118}, byteArray0);
      assertEquals("fneg", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, byteArray0.length);
      
      String string4 = Utility.getSignature("fneg");
      assertEquals("Lfneg;", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = Utility.methodSignatureReturnType("FTtsn|@N/f", true);
      assertEquals("float", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String[] stringArray0 = new String[0];
      String string6 = Utility.methodTypeToSignature("n'<3o73sDw:}", stringArray0);
      assertEquals("()Ln'<3o73sDw:};", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(0, stringArray0.length);
      
      int int0 = Utility.setBit((byte)118, (-314));
      assertEquals(118, int0);
      
      String string7 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)93, (byte)118}, byteArray0);
      assertEquals("5d 76", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals(2, byteArray0.length);
      
      String string8 = Utility.classOrInterface(175);
      assertEquals("class", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(cx9.gD");
      assertEquals("(cx9.gD", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.fillup("CtatValue", 4551, false, '\'');
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.accessToString(1061);
      assertEquals("public protected synchronized abstract", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-55);
      byteArray0[0] = (byte) (-55);
      byte byte1 = (byte)3;
      byteArray0[1] = (byte)3;
      byte byte2 = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-55), (byte)3, (byte) (-95)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(cx9.gD");
          assertEquals("(cx9.gD", constantUtf8_0.getBytes());
          assertEquals((byte)1, constantUtf8_0.getTag());
          assertNotNull(constantUtf8_0);
          
          boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
          assertFalse(boolean0);
          
          String string0 = Utility.fillup("CtatValue", 4551, false, '\'');
          assertNotNull(string0);
          
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          assertNotNull(fileSystemHandling0);
          
          try { 
            Utility.methodSignatureToString("(cx9.gD", string0, "(cx9.gD", false, (LocalVariableTable) null);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Invalid signature: `cx9.gD'
             //
             verifyException("org.apache.bcel.classfile.Utility", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)0, (byte) (-98), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      char char0 = byteSequence0.readChar();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)0, (byte) (-98), (byte)0}, byteArray0);
      assertEquals('\u9E00', char0);
      assertEquals(4, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.getSignature("[lAHn@4eS}lQk0[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [lAHn@4eS}lQk0[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&9.g");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("(&9.g", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("(&9.g");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("(&9.g", constantUtf8_1.getBytes());
      assertNotNull(constantUtf8_1);
      assertSame(constantUtf8_1, constantUtf8_0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(10, constantArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(&9.g");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte) (-121), (byte)101}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte) (-121), (byte)101}, byteArray0);
      assertEquals("lsub", string0);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.replace("#Jl", "NPB\"", "O'&\"8cFb;1wrHW>");
      assertEquals("#Jl", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte) (-121), (byte)101}, byteArray0);
      assertEquals("i2d", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, byteArray0.length);
      
      String string3 = Utility.getSignature("lsub");
      assertEquals("Llsub;", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Utility.accessToString(175);
      assertEquals("public private protected static synchronized transient", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = Utility.methodTypeToSignature("lsub", (String[]) null);
      assertEquals("()Llsub;", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      Signature signature0 = null;
      try {
        signature0 = new Signature((byte) (-121), (byte)101, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-46);
      byteArray0[0] = (byte) (-113);
      byteArray0[3] = (byte)55;
      byteArray0[5] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-113), (byte) (-46), (byte)0, (byte)55, (byte)0, (byte)55}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.replace("Fe~/Xn1ZtI", "Fe~/Xn1ZtI", "Fe~/Xn1ZtI");
      assertEquals("Fe~/Xn1ZtI", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-113), (byte) (-46), (byte)0, (byte)55, (byte)0, (byte)55}, byteArray0);
      assertEquals("d2l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      
      String string2 = Utility.replace("~[XTD", "short", "invokedynamic");
      assertEquals("~[XTD", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokedynamic");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-113), (byte) (-46), (byte)0, (byte)55, (byte)0, (byte)55}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-113), (byte) (-46), (byte)0, (byte)55, (byte)0, (byte)55}, byteArray0);
      assertEquals("<illegal opcode>", string3);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string4 = Utility.convertString("double");
      assertEquals("double", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-113);
      byteArray1[1] = (byte) (-46);
      byteArray1[2] = (byte) (-46);
      byteArray1[3] = (byte) (-46);
      byteArray1[4] = (byte)55;
      boolean boolean3 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-113), (byte) (-46), (byte)0, (byte)55, (byte)0, (byte)55}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte) (-46), (byte) (-46), (byte) (-46), (byte)55}, byteArray1);
      assertFalse(boolean3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string5 = Utility.format((byte)55, 196, false, '7');
      assertEquals("7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777755", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Utility.setBit((-1085), (-1085));
      assertEquals((-1077), int0);
      
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)77;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(25, byteArray0.length);
      
      char char0 = byteSequence0.readChar();
      assertEquals(2, byteSequence0.getIndex());
      assertEquals('\uFAC7', char0);
      assertEquals(25, byteArray0.length);
      
      float float0 = byteSequence0.readFloat();
      assertEquals(6, byteSequence0.getIndex());
      assertEquals((-33018.746F), float0, 0.01F);
      assertEquals(25, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(7, byteSequence0.getIndex());
      assertEquals("dconst_0", string0);
      assertNotNull(string0);
      assertEquals(25, byteArray0.length);
      
      String string1 = Utility.convertString("org.apache.bcel.classfile.Signature$MyByteArrayInputStream");
      assertEquals("org.apache.bcel.classfile.Signature$MyByteArrayInputStream", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), 61);
      assertEquals("0:    <illegal opcode>\n1:    ifnonnull\t\t#-14591\n4:    <illegal opcode>\n5:    athrow\n6:    dconst_0\n7:    astore_2\n8:    dconst_0\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n24:   nop\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(25, byteArray0.length);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(25, byteArray0.length);
      
      String string3 = Utility.format((byte) (-6), 520, true, '\uFAC7');
      assertEquals("-6\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(8, byteSequence0.getIndex());
      assertEquals("astore_2", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(25, byteArray0.length);
      
      String string5 = "public";
      try { 
        Utility.methodSignatureArgumentTypes("public");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0, (byte) (-105), (byte)86}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`5P'7<|");
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte) (-60);
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte)61;
      byteArray1[4] = (byte)61;
      byteArray1[5] = (byte)86;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)61, (byte) (-60), (byte)61, (byte)61, (byte)61, (byte)86}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray1.length);
      
      byteSequence1.reset();
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)61, (byte) (-60), (byte)61, (byte)61, (byte)61, (byte)86}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0, (byte) (-105), (byte)86}, byteArray0);
      assertEquals(196, int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = byteSequence0.readUnsignedByte();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0, (byte) (-105), (byte)86}, byteArray0);
      assertEquals(0, int1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(int1 == int0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      
      int int2 = byteSequence1.available();
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)61, (byte) (-60), (byte)61, (byte)61, (byte)61, (byte)86}, byteArray1);
      assertEquals(6, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0, (byte) (-105), (byte)86}, byteArray0);
      assertEquals("$c4$A$97V", string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)61, (byte) (-60), (byte)61, (byte)61, (byte)61, (byte)86}, byteArray1);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence2);
      assertEquals(6, byteArray1.length);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)61, (byte) (-60), (byte)61, (byte)61, (byte)61, (byte)86}, byteArray1);
      assertEquals("istore_2", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string1);
      assertEquals(6, byteArray1.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      String string0 = Utility.methodTypeToSignature("Q>a)(0pw", (String[]) null);
      assertEquals("()LQ>a)(0pw;", string0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit(938, 938);
      assertEquals(1962, int0);
      
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()LQ>a)(0pw;", false);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(1, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[6];
      int int1 = 90;
      int int2 = 95;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("ifne", "]'-X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"]'-X\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)49;
      byteArray0[4] = (byte) (-99);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), (-1381), false);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    fcmpl\n1:    irem\n2:    daload\n3:    nop\n4:    ifgt\t\t#4\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n", string0);
      assertNotNull(string0);
      assertEquals(22, byteArray0.length);
      
      int int0 = Utility.setBit((-1381), (byte)49);
      assertEquals((-1381), int0);
      
      String string1 = Utility.classOrInterface((byte) (-107));
      assertEquals("interface", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(22, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fcmpl", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(22, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(22, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Utility.setBit((-1085), (-1085));
      assertEquals((-1077), int0);
      
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-120);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)77;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byteArray0[8] = (byte)14;
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(25, byteArray0.length);
      
      char char0 = byteSequence0.readChar();
      assertEquals(2, byteSequence0.getIndex());
      assertEquals('\uFAC7', char0);
      assertEquals(25, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("l2i", string0);
      assertNotNull(string0);
      assertEquals(25, byteArray0.length);
      
      String string1 = Utility.convertString("org.apache.bcel.classfile.Signature$MyByteArrayInputStream");
      assertEquals("org.apache.bcel.classfile.Signature$MyByteArrayInputStream", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = byteSequence0.markSupported();
      assertEquals(3, byteSequence0.getIndex());
      assertTrue(boolean0);
      assertEquals(25, byteArray0.length);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), 61);
      assertEquals("0:    <illegal opcode>\n1:    ifnonnull\t\t#-30719\n4:    <illegal opcode>\n5:    athrow\n6:    dconst_0\n7:    astore_2\n8:    dconst_0\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n24:   nop\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(25, byteArray0.length);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(25, byteArray0.length);
      
      String string3 = Utility.format((byte) (-49), 520, true, '\uFAC7');
      assertEquals("-49\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("nop", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(25, byteArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("pubic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pubic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Utility.compactClassName("(&x9.gM", "(&x9.gM", false);
      assertEquals("(&x9.gM", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantUtf8.printStats();
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance(".");
      assertEquals(".", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = (ConstantUtf8)constantUtf8_0.clone();
      assertEquals(".", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals(".", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_0, constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      String string1 = Utility.compactClassName("hWDI5y<=0hN71L`C", "", false);
      assertEquals("hWDI5y<=0hN71L`C", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-105), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      ConstantUtf8.printStats();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-105), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-105), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("dcmpl", string2);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(4, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string3 = Utility.compactClassName("monitorenter", false);
      assertEquals("monitorenter", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-105), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("dcmpl", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string4);
      assertEquals(4, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Utility.setBit((-1085), (-1085));
      assertEquals((-1077), int0);
      
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)77;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(25, byteArray0.length);
      
      char char0 = byteSequence0.readChar();
      assertEquals(2, byteSequence0.getIndex());
      assertEquals('\uFAC7', char0);
      assertEquals(25, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("ifnonnull\t\t#209", string0);
      assertNotNull(string0);
      assertEquals(25, byteArray0.length);
      
      String string1 = Utility.convertString("org.apache.bcel.classfile.Signature$MyByteArrayInputStream");
      assertEquals("org.apache.bcel.classfile.Signature$MyByteArrayInputStream", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = byteSequence0.markSupported();
      assertEquals(5, byteSequence0.getIndex());
      assertTrue(boolean0);
      assertEquals(25, byteArray0.length);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), 61);
      assertEquals("0:    <illegal opcode>\n1:    ifnonnull\t\t#-14591\n4:    <illegal opcode>\n5:    athrow\n6:    dconst_0\n7:    astore_2\n8:    dconst_0\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n24:   nop\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(25, byteArray0.length);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(25, byteArray0.length);
      
      String string3 = Utility.format((byte) (-49), 520, true, '\uFAC7');
      assertEquals("-49\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals("athrow", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(25, byteArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("public");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(25, byteArray0.length);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-21979), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(9483, constantInvokeDynamic0.getClassIndex());
      assertEquals(9483, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      assertEquals(25, byteArray0.length);
      
      String string0 = Utility.replace("5FLKsNm", "L>87yY", "5FLKsNm");
      assertEquals("5FLKsNm", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte) (-72), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&9.g");
      assertEquals("(&9.g", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("(&9.g");
      assertEquals("(&9.g", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(10, constantArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-116), (byte) (-57)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-116), (byte) (-57)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(3, byteArray0.length);
      
      byteSequence0.mark(189);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-116), (byte) (-57)}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(3, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), (-5596), false);
      assertEquals(10, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-116), (byte) (-57)}, byteArray0);
      assertEquals("0:    ifle\t\t#-29497\n", string0);
      assertNotNull(string0);
      assertEquals(10, constantArray0.length);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("'=P_q(V1E3B,&}k_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `'=P_q(V1E3B,&}k_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nVMG6io";
      String string0 = Utility.methodTypeToSignature("nVMG6io", stringArray0);
      assertEquals("(LnVMG6io;)LnVMG6io;", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-91);
      String string1 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)61, (byte) (-91)}, byteArray0);
      assertEquals("22 3d a5", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-91);
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte) (-91);
      byteArray1[3] = (byte) (-91);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)34, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L5[zP&PZ5p");
      assertEquals((byte)14, byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte1 = (byte)24;
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)14;
      byteArray0[4] = (byte)14;
      byte byte2 = (byte)36;
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)24, (byte)14, (byte)14, (byte)24, (byte)14, (byte)0, (byte)0, (byte)36, (byte)14}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)24, (byte)14, (byte)14, (byte)24, (byte)14, (byte)0, (byte)0, (byte)36, (byte)14}, byteArray0);
      assertEquals("$Y$O$O$Y$O$A$A$q$O", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 234, 234);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      int int0 = Utility.clearBit((byte)34, (-2340));
      assertEquals(34, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertNotNull(byteSequence3);
      assertEquals(7, byteArray0.length);
      
      byte byte0 = byteSequence3.readByte();
      assertEquals(1, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertEquals(7, byteArray0.length);
      assertNotSame(byteSequence3, byteSequence0);
      assertNotSame(byteSequence3, byteSequence2);
      assertNotSame(byteSequence3, byteSequence1);
      
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence4.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertNotNull(byteSequence4);
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool(byteSequence4);
      assertEquals(2, byteSequence4.getIndex());
      assertEquals(0, constantPool2.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool2, true);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(2, byteSequence4.getIndex());
      assertEquals(0, constantPool2.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("nop", string0);
      assertFalse(byteSequence1.equals((Object)byteSequence4));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence3));
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence4);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence3);
      assertNotSame(byteSequence4, byteSequence1);
      assertNotSame(byteSequence4, byteSequence3);
      assertNotSame(byteSequence4, byteSequence2);
      assertNotSame(byteSequence4, byteSequence0);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)0;
      String string1 = Utility.codeToString(byteArray1, constantPool2, (-1962), 182);
      assertEquals(2, byteSequence4.getIndex());
      assertEquals(0, constantPool2.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)34, (byte)0}, byteArray1);
      assertEquals("0:    fload_0\n1:    nop\n2:    fload_0\n3:    nop\n", string1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence4, byteSequence1);
      assertNotSame(byteSequence4, byteSequence3);
      assertNotSame(byteSequence4, byteSequence2);
      assertNotSame(byteSequence4, byteSequence0);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.compactClassName("(&x9/gM", "(&x9/gM", true);
      assertEquals("(&x9.gM", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("(&x9/gM", true);
      assertEquals("(&x9.gM", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(&x9/gM");
      assertFalse(boolean0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-122), (byte) (-122));
      assertEquals((-122), constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-122), constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      String string2 = Utility.compactClassName("if_acmpne", false);
      assertEquals("if_acmpne", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockFile mockFile0 = new MockFile("if_acmpne", "(&x9.gM");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("(&x9/gM");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-58);
      byteArray1[1] = (byte) (-122);
      byteArray1[3] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-122), (byte)0, (byte) (-122)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray1.length);
      
      int int0 = Utility.setBit((byte) (-58), (byte) (-58));
      assertEquals((-58), int0);
      
      String string3 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-58), 13);
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-122), (byte)0, (byte) (-122)}, byteArray1);
      assertEquals("0:    ifnull\t\t#-31232\n3:    i2f\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string3);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      String string4 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-58), 18);
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-122), (byte)0, (byte) (-122)}, byteArray1);
      assertEquals("0:    ifnull\t\t#-31232\n3:    i2f\n", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string4);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      String string5 = Utility.compactClassName("+A#EY-+36Xul>>C}8D?", true);
      assertEquals("+A#EY-+36Xul>>C}8D?", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
          assertTrue(boolean0);
          
          boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          assertFalse(boolean1);
          assertFalse(boolean1 == boolean0);
          
          boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
          assertFalse(boolean2);
          assertFalse(boolean2 == boolean0);
          assertTrue(boolean2 == boolean1);
          
          boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
          assertFalse(boolean3);
          assertTrue(boolean3 == boolean2);
          assertFalse(boolean3 == boolean0);
          assertTrue(boolean3 == boolean1);
          
          Constant[] constantArray0 = new Constant[0];
          ConstantPool constantPool0 = new ConstantPool(constantArray0);
          assertEquals(0, constantPool0.getLength());
          assertNotNull(constantPool0);
          assertEquals(0, constantArray0.length);
          
          Float float0 = new Float((-2081.743F));
          assertEquals((-2081.743F), (float)float0, 0.01F);
          assertNotNull(float0);
          
          ConstantPool constantPool1 = constantPool0.copy();
          assertEquals(0, constantPool0.getLength());
          assertEquals(0, constantPool1.getLength());
          assertFalse(constantPool1.equals((Object)constantPool0));
          assertNotNull(constantPool1);
          assertEquals(0, constantArray0.length);
          assertNotSame(constantPool0, constantPool1);
          assertNotSame(constantPool1, constantPool0);
          
          byte[] byteArray0 = new byte[7];
          byteArray0[0] = (byte) (-92);
          byteArray0[1] = (byte) (-92);
          byteArray0[2] = (byte) (-92);
          String[] stringArray0 = new String[7];
          stringArray0[0] = "short";
          stringArray0[1] = "short";
          stringArray0[2] = "short";
          stringArray0[3] = "short";
          String string0 = Utility.compactClassName("short", "short", true);
          assertEquals("", string0);
          assertNotNull(string0);
          
          String string1 = Utility.methodTypeToSignature("short", (String[]) null);
          assertEquals("()S", string1);
          assertFalse(string1.equals((Object)string0));
          assertNotNull(string1);
          
          ByteSequence byteSequence0 = new ByteSequence(byteArray0);
          assertEquals(0, byteSequence0.getIndex());
          assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92), (byte) (-92), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
          assertNotNull(byteSequence0);
          assertEquals(7, byteArray0.length);
          
          String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
          assertEquals(3, byteSequence0.getIndex());
          assertEquals(0, constantPool0.getLength());
          assertEquals(0, constantPool1.getLength());
          assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92), (byte) (-92), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
          assertEquals("if_icmple\t\t#-23388", string2);
          assertFalse(string2.equals((Object)string0));
          assertFalse(string2.equals((Object)string1));
          assertFalse(constantPool0.equals((Object)constantPool1));
          assertFalse(constantPool1.equals((Object)constantPool0));
          assertNotNull(string2);
          assertEquals(0, constantArray0.length);
          assertEquals(7, byteArray0.length);
          assertNotSame(constantPool0, constantPool1);
          assertNotSame(constantPool1, constantPool0);
          
          String string3 = Utility.convertString("short");
          assertEquals("short", string3);
          assertFalse(string3.equals((Object)string1));
          assertFalse(string3.equals((Object)string0));
          assertFalse(string3.equals((Object)string2));
          assertNotNull(string3);
          
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          assertFalse(fileDescriptor0.valid());
          assertNotNull(fileDescriptor0);
          
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor131.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)100;
      byteArray0[0] = (byte)41;
      byteArray0[0] = (byte)95;
      Constant[] constantArray0 = new Constant[1];
      int int0 = Utility.clearBit(224, (-305));
      assertEquals(224, int0);
      
      String string0 = Utility.convertString(">bcbW5-)#j~/#^");
      assertEquals(">bcbW5-)#j~/#^", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)95, (byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)95, (byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray0.length);
      
      byte byte0 = byteSequence1.readByte();
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)95, (byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)95, byte0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)95, (byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("isub", string1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)95, (byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      
      String string2 = Utility.codeToString(byteSequence2, constantPool2, false);
      assertEquals(1, byteSequence2.getIndex());
      assertEquals(0, constantPool2.getLength());
      assertArrayEquals(new byte[] {(byte)95, (byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("swap", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      short short0 = Utility.searchOpcode("fload_1");
      assertEquals((short)35, short0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("swap", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `swap'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte)102;
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)34;
      ConstantPool constantPool0 = null;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-728), (-1591));
      assertEquals("0:    fsub\n1:    fload_0\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n", string0);
      assertNotNull(string0);
      assertEquals(19, byteArray0.length);
      
      int int0 = Utility.clearBit(194, (-735));
      assertEquals(192, int0);
      
      String string1 = Utility.getSignature("h!v");
      assertEquals("Lh!v;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(19, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fsub", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(19, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string3 = "breakpoint";
      String string4 = Utility.replace("breakpoint", "fsub", "java.lang.Cloneable");
      assertEquals("breakpoint", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 192, 165);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer integer0 = new Integer((-799));
      assertEquals((-799), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ifnonnull");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)123;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OunSInedT]");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)67;
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "impdep1");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      byteArray0[5] = (byte)96;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte) (-2), (byte)96, (byte) (-90), (byte)96, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte) (-2), (byte)96, (byte) (-90), (byte)96, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      assertEquals(9, byteArray0.length);
      
      int int1 = byteSequence0.readUnsignedByte();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte) (-2), (byte)96, (byte) (-90), (byte)96, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(123, int1);
      assertFalse(int1 == int0);
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte) (-2), (byte)96, (byte) (-90), (byte)96, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("impdep1", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, constantPool1.getLength());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte) (-2), (byte)96, (byte) (-90), (byte)96, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("iadd", string1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("IoQQx$", false);
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)127);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(127, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(5, constantArray0.length);
      
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      MockFile mockFile0 = new MockFile("IoQQx$", "IoQQx$");
      assertNotNull(mockFile0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertEquals("dstore_2", string0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      short short0 = Utility.searchOpcode("dstore_2");
      assertEquals((short)73, short0);
      
      String string1 = Utility.convertString("IoQQx$");
      assertEquals("IoQQx$", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(5, byteArray0.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertNotNull(byteSequence3);
      assertEquals(5, byteArray0.length);
      
      char char0 = byteSequence3.readChar();
      assertEquals(2, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertEquals('\u496F', char0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence3, byteSequence0);
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(byteSequence3, byteSequence2);
      
      String string2 = Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      assertEquals(3, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertEquals("fastore", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertNotNull(string2);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence3, byteSequence0);
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(byteSequence3, byteSequence2);
      
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence4.getIndex());
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertNotNull(byteSequence4);
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      
      ConstantPool constantPool3 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool3.getLength());
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertNotNull(constantPool3);
      
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence5.getIndex());
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertFalse(byteSequence5.equals((Object)byteSequence2));
      assertFalse(byteSequence5.equals((Object)byteSequence1));
      assertFalse(byteSequence5.equals((Object)byteSequence3));
      assertFalse(byteSequence5.equals((Object)byteSequence4));
      assertFalse(byteSequence5.equals((Object)byteSequence0));
      assertNotNull(byteSequence5);
      assertEquals(5, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence5, (ConstantPool) null, true);
      assertEquals(1, byteSequence5.getIndex());
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertEquals("dstore_2", string3);
      assertFalse(byteSequence5.equals((Object)byteSequence2));
      assertFalse(byteSequence5.equals((Object)byteSequence1));
      assertFalse(byteSequence5.equals((Object)byteSequence3));
      assertFalse(byteSequence5.equals((Object)byteSequence4));
      assertFalse(byteSequence5.equals((Object)byteSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence5, byteSequence2);
      assertNotSame(byteSequence5, byteSequence1);
      assertNotSame(byteSequence5, byteSequence3);
      assertNotSame(byteSequence5, byteSequence4);
      assertNotSame(byteSequence5, byteSequence0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-95);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("00$a1$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      short short0 = Utility.searchOpcode("O^,V'*Z#CW$g'>");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O^,V'*Z#CW$g'>");
      assertFalse(boolean0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("faload", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      
      String string2 = Utility.classOrInterface((byte) (-95));
      assertEquals("interface", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), (-1023), true);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    faload\n1:    faload\n2:    if_icmplt\t\t#2\n5:    nop\n6:    nop\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(7, byteArray0.length);
      
      String string4 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("faload", string4);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&9.g");
      assertEquals("(&9.g", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("(&9.g");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("(&9.g", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(10, constantArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(&9.g");
      assertFalse(boolean0);
      
      Constant constant0 = constantPool0.getConstant(7);
      assertEquals(10, constantPool0.getLength());
      assertNull(constant0);
      assertEquals(10, constantArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = false;
      String string0 = Utility.compactClassName("boolean", "boolean", false);
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-124), (byte) (-124)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(10, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-124), (byte) (-124)}, byteArray0);
      assertEquals("iinc\t\t%132\t-124", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(10, constantArray0.length);
      assertEquals(3, byteArray0.length);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string2 = Utility.replace("!_d7O-_}Vt^\"5", "athrow", "!_d7O-_}Vt^\"5");
      assertEquals("!_d7O-_}Vt^\"5", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 7, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)48, (byte) (-105), (byte)86}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)48, (byte) (-105), (byte)86}, byteArray0);
      assertEquals("wide\t(wide)", string0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), 1315);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)48, (byte) (-105), (byte)86}, byteArray0);
      assertEquals("0:    wide\t(wide)\n1:    faload\n2:    dcmpl\n3:    sastore\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)48;
      int int0 = Utility.clearBit(2, (byte) (-60));
      assertEquals(2, int0);
      
      String string0 = Utility.convertString(">bcbW5-)#j~/#^");
      assertEquals(">bcbW5-)#j~/#^", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)48, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)48, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte) (-60);
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte) (-60);
      byteArray1[6] = (byte)48;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)48, (byte) (-60), (byte)48, (byte) (-60), (byte)48}, byteArray1);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence2);
      assertEquals(7, byteArray1.length);
      
      byte byte0 = byteSequence2.readByte();
      assertEquals(1, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)48, (byte) (-60), (byte)48, (byte) (-60), (byte)48}, byteArray1);
      assertEquals((byte)48, byte0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray1.length);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteArray1, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)48, (byte)0, (byte)0}, byteArray0);
      assertEquals("wide\t(wide)", string1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)48, (byte) (-60), (byte)48, (byte) (-60), (byte)48}, byteArray1);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence3);
      assertEquals(7, byteArray1.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)48, (byte)0, (byte)0}, byteArray0);
      assertEquals("faload", string2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(byteSequence0.equals((Object)byteSequence3));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertNotNull(string2);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(byteSequence0, byteSequence3);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[8] = (byte) (-73);
      ConstantLong constantLong0 = new ConstantLong((-1L));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-1L), constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DEA~?Dbfn( !N_9%H");
      assertFalse(boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A$A$A$b7$A$A$A$A$A$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(21, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      BCELComparator bCELComparator0 = Field.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      int int0 = Utility.setBit(3329, (-1425));
      assertEquals(36097, int0);
      
      ConstantLong constantLong1 = (ConstantLong)constantPool0.getConstant((int) (byte)0);
      assertEquals(1, constantPool0.getLength());
      assertEquals((-1L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertNotNull(constantLong1);
      assertEquals(1, constantArray0.length);
      assertSame(constantLong1, constantLong0);
      
      ConstantLong constantLong2 = new ConstantLong(0L);
      assertEquals((byte)5, constantLong2.getTag());
      assertEquals(0L, constantLong2.getBytes());
      assertNotNull(constantLong2);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2613), 36097);
      assertEquals((-2613), constantMethodref0.getClassIndex());
      assertEquals(36097, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertNotNull(constantMethodref0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(21, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(21, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 214);
      assertEquals(21, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertEquals(21, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      assertEquals(21, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertEquals(21, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertEquals(21, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertEquals(21, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat(dataInputStream0);
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(constantFloat0);
      assertEquals(21, byteArray0.length);
      
      ConstantString constantString0 = new ConstantString((-2041));
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-2041), constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-2041), constantString0.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertEquals((-2041), constantString1.getStringIndex());
      assertNotNull(constantString1);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 36097, (-2613), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteArray1.length);
      
      EvoSuiteFile evoSuiteFile0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)45, (byte) (-117), (byte)41, (byte) (-104), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)45, (byte) (-117), (byte)41, (byte) (-104), (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)43, byte0);
      assertEquals(7, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      assertEquals("", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertEquals("", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_1;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(8, constantArray0.length);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(8, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)45, (byte) (-117), (byte)41, (byte) (-104), (byte)0, (byte)0}, byteArray0);
      assertEquals("aload_3", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      assertEquals(8, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)45, (byte) (-117), (byte)41, (byte) (-104), (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(8, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(8, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)45, (byte) (-117), (byte)41, (byte) (-104), (byte)0, (byte)0}, byteArray0);
      assertEquals("f2i", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence0, byteSequence1);
      
      int int0 = byteSequence0.read();
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)45, (byte) (-117), (byte)41, (byte) (-104), (byte)0, (byte)0}, byteArray0);
      assertEquals(41, int0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(7, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)45, (byte) (-117), (byte)41, (byte) (-104), (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("|)-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|)-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFile mockFile0 = new MockFile("areturn");
      assertNotNull(mockFile0);
      
      short short0 = Utility.searchOpcode("areturn");
      assertEquals((short)176, short0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)111;
      byteArray0[2] = (byte)47;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "areturn");
      assertFalse(boolean0);
      
      byteArray0[7] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123), (byte)47, (byte)127, (byte)111, (byte)0, (byte)0, (byte)127, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123), (byte)47, (byte)127, (byte)111, (byte)0, (byte)0, (byte)127, (byte)0}, byteArray0);
      assertEquals("i2l", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123), (byte)47, (byte)127, (byte)111, (byte)0, (byte)0, (byte)127, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte)14, (byte)84, (byte)0, (byte)84, (byte) (-37), (byte)118, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = Utility.decode("Kc", false);
      assertArrayEquals(new byte[] {(byte)75, (byte)99}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = Utility.fillup("ifeq", (byte) (-37), false, '%');
      assertEquals("ifeq", string0);
      assertNotNull(string0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte)14, (byte)84, (byte)0, (byte)84, (byte) (-37), (byte)118, (byte)0}, byteArray0);
      assertEquals("ret\t\t%169", string1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      String string2 = Utility.accessToString((-2469));
      assertEquals("public private static final volatile interface abstract synthetic annotation enum", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-37), 36);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)75, (byte)99}, byteArray1);
      assertEquals("0:    astore_0\n1:    dadd\n", string3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(25, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(6667, constantInvokeDynamic0.getClassIndex());
      assertEquals(6823, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(6667, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      assertEquals(25, byteArray0.length);
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      int int0 = 181;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2271, 181);
      assertEquals(2271, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(181, constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      constantInvokeDynamic0.setClassIndex((byte)66);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(66, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(6823, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(66, constantInvokeDynamic0.getClassIndex());
      assertEquals(25, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool0.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(2, constantPool1.getLength());
      assertEquals(7, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals("goto\t\t#16900", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertEquals(25, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      
      String string1 = Utility.replace("goto\t\t#16900", "goto\t\t#16900", "goto\t\t#16900");
      assertEquals("goto\t\t#16900", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureReturnType(".1OV8o%zVHGPE*dN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `.1OV8o%zVHGPE*dN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = Utility.compactClassName("S`8,V", "S`8,V", false);
      assertEquals("S`8,V", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("S`8,V", "S`8,V", false);
      assertEquals("S`8,V", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-122), (byte) (-122));
      assertEquals((-122), constantNameAndType0.getSignatureIndex());
      assertEquals((-122), constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      String string2 = Utility.compactClassName("if_acmpne", false);
      assertEquals("if_acmpne", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = Utility.signatureToString("S`8,V", true);
      assertEquals("short", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("oO6UnV");
      assertEquals("oO6UnV", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)66, (byte)104, (byte) (-75), (byte) (-94), (byte) (-94)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)66, (byte)104, (byte) (-75), (byte) (-94), (byte) (-94)}, byteArray0);
      assertEquals((byte)66, byte0);
      assertEquals(5, byteArray0.length);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("");
      assertEquals("", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      assertEquals("", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("", constantUtf8_2.getBytes());
      assertEquals((byte)1, constantUtf8_2.getTag());
      assertNotNull(constantUtf8_2);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(8, constantArray0.length);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(8, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)66, (byte)104, (byte) (-75), (byte) (-94), (byte) (-94)}, byteArray0);
      assertEquals("imul", string0);
      assertNotNull(string0);
      assertEquals(8, constantArray0.length);
      assertEquals(5, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)66, (byte)104, (byte) (-75), (byte) (-94), (byte) (-94)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(8, constantArray0.length);
      
      boolean boolean0 = true;
      ConstantPool constantPool2 = null;
      try {
        constantPool2 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -94
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("o6UnV");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("o6UnV", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)30, (byte)39}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)30, (byte)39}, byteArray0);
      assertEquals((byte)30, byte0);
      assertEquals(2, byteArray0.length);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("o6UnV");
      assertEquals("o6UnV", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      assertEquals("o6UnV", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals((byte)1, constantUtf8_2.getTag());
      assertEquals("o6UnV", constantUtf8_2.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertTrue(constantUtf8_2.equals((Object)constantUtf8_0));
      assertTrue(constantUtf8_2.equals((Object)constantUtf8_1));
      assertNotNull(constantUtf8_2);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(10, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(10, constantPool0.getLength());
      assertEquals(10, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(10, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      constantPool1.setConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertEquals(10, constantPool1.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(10, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)30, (byte)39}, byteArray0);
      assertEquals("dload_1", string0);
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)30, (byte)39}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(2, byteArray0.length);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(10, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(10, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)30, (byte)39}, byteArray0);
      assertEquals("lload_0", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(10, constantArray0.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(byteSequence1, byteSequence0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)30, (byte)39}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(2, byteArray0.length);
      
      int int0 = byteSequence2.read();
      assertEquals(1, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)30, (byte)39}, byteArray0);
      assertEquals(30, int0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertEquals(2, byteArray0.length);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)30, (byte)39}, byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertNotNull(byteSequence3);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("istor_1invokedynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `istor_1invokedynamic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte)0;
      byteArray0[20] = (byte)12;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-115);
      byteArray0[7] = (byte) (-68);
      byteArray0[20] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(21, byteArray0.length);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)88;
      byteArray1[1] = (byte) (-68);
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)88;
      byteArray1[5] = (byte) (-68);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte) (-68), (byte)12, (byte)12, (byte)88, (byte) (-68)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray1.length);
      
      byteSequence1.close();
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte) (-68), (byte)12, (byte)12, (byte)88, (byte) (-68)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(dataInputStream0);
      assertEquals(21, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(constantPool0);
      assertEquals(21, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte) (-68), (byte)12, (byte)12, (byte)88, (byte) (-68)}, byteArray1);
      assertEquals("pop2", string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(21, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(3, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte) (-68), (byte)12, (byte)12, (byte)88, (byte) (-68)}, byteArray1);
      assertEquals("newarray\t\t<void>", string1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string1);
      assertEquals(21, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string2 = Utility.getSignature("pop2");
      assertEquals("Lpop2;", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("RuntimeVisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Integer integer0 = new Integer((-799));
      assertEquals((-799), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)123;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OunSInedT]");
      assertFalse(boolean0);
      
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-90);
      short short0 = Utility.searchOpcode("OunSInedT]");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte) (-2), (byte)96, (byte) (-90), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte) (-2), (byte)96, (byte) (-90), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte) (-2), (byte)96, (byte) (-90), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("nop", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte) (-2), (byte)96, (byte) (-90), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("lshr", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      
      String string2 = Utility.replace("lshr", "Vhq@\"^.|Ox?q[Hn48\"t", "Vhq@\"^.|Ox?q[Hn48\"t");
      assertEquals("lshr", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        Utility.methodSignatureToString("OunSInedT]", ", npairs = ", ", npairs = ", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OunSInedT]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte)125, (byte)84, (byte)125, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte)125, (byte)84, (byte)125, (byte)0}, byteArray0);
      assertEquals((byte)39, byte0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      String string0 = "iload_3";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("iload_3");
      assertEquals("iload_3", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertEquals("iload_3", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("iload_3", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte)125, (byte)84, (byte)125, (byte)0}, byteArray0);
      assertEquals("dsub", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte)125, (byte)84, (byte)125, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      
      boolean boolean0 = true;
      String string2 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(1, constantPool1.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte)125, (byte)84, (byte)125, (byte)0}, byteArray0);
      assertEquals("lushr", string2);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence0, byteSequence1);
      
      int int0 = byteSequence0.read();
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte)125, (byte)84, (byte)125, (byte)0}, byteArray0);
      assertEquals(84, int0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte)125, (byte)84, (byte)125, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("arraylength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `arraylength'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 187;
      String string0 = Utility.accessToString(187);
      assertEquals("public private static final synchronized transient", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.replace("public private static final synchronized transient", "public private static final synchronized transient", "E{5+s");
      assertEquals("E{5+s", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("public private static final synchronized transient");
      assertEquals("public private static final synchronized transient", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Utility.getSignature("(x9gM");
      assertEquals("L(x9gM;", string0);
      assertNotNull(string0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-122), (byte) (-122));
      assertEquals((-122), constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-122), constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      String string1 = Utility.compactClassName("if_acmpne", false);
      assertEquals("if_acmpne", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = Utility.decode(", ", false);
      assertArrayEquals(new byte[] {(byte)44, (byte)32}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)0}, byteArray0);
      assertEquals("monitorenter", string2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      String string3 = Utility.fillup("checkcast", (-3556), true, 's');
      assertEquals("checkcast", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)44, (byte)32}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(2, byteArray1.length);
      
      String string4 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)44, (byte)32}, byteArray1);
      assertEquals("aload_2", string4);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string5 = Utility.toHexString(byteArray1);
      assertArrayEquals(new byte[] {(byte)44, (byte)32}, byteArray1);
      assertEquals("2c 20", string5);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Utility.format(1419, 163, false, '!');
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1419", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)39;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1310, (int) (byte) (-21));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Utility.setBit((-1085), (-1085));
      assertEquals((-1077), int0);
      
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)77;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byteArray0[8] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(25, byteArray0.length);
      
      char char0 = byteSequence0.readChar();
      assertEquals(2, byteSequence0.getIndex());
      assertEquals('\uFAC7', char0);
      assertEquals(25, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("i2c", string0);
      assertNotNull(string0);
      assertEquals(25, byteArray0.length);
      
      String string1 = Utility.convertString("org.apache.bcel.classfile.Signature$MyByteArrayInputStream");
      assertEquals("org.apache.bcel.classfile.Signature$MyByteArrayInputStream", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.accessToString((int) (byte) (-65));
      assertEquals("public private protected static final synchronized transient native interface abstract strictfp synthetic annotation enum", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), 61);
      assertEquals("0:    <illegal opcode>\n1:    ifnonnull\t\t#-27983\n4:    <illegal opcode>\n5:    athrow\n6:    dconst_0\n7:    astore_2\n8:    dstore_3\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n24:   nop\n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(25, byteArray0.length);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(25, byteArray0.length);
      
      String string4 = Utility.format((byte) (-49), 510, true, '\uFAC7');
      assertEquals("-49\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7\uFAC7", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("vBH<G@~Tqyow?D_");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("vBH<G@~Tqyow?D_", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-46);
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)40, (byte) (-112), (byte) (-112), (byte)40, (byte)55, (byte)40, (byte) (-46)}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      short short0 = Utility.searchOpcode("ifacmpq");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)40, (byte) (-112), (byte) (-112), (byte)40, (byte)55, (byte)40, (byte) (-46)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$l$8b$I$A$A$A$A$A$A$A");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)40, (byte) (-112), (byte) (-112), (byte)40, (byte)55, (byte)40, (byte) (-46)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)40, (byte) (-112), (byte) (-112), (byte)40, (byte)55, (byte)40, (byte) (-46)}, byteArray0);
      assertEquals("dload_2", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      
      String string2 = Utility.classOrInterface(40);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)40, (byte) (-112), (byte) (-112), (byte)40, (byte)55, (byte)40, (byte) (-46)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(7, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)40, (byte) (-112), (byte) (-112), (byte)40, (byte)55, (byte)40, (byte) (-46)}, byteArray0);
      assertEquals("d2f", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string3);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string4 = Utility.compactClassName("f", "vBH<G@~Tqyow?D_", false);
      assertEquals("f", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)40, (byte) (-112), (byte) (-112), (byte)40, (byte)55, (byte)40, (byte) (-46)}, byteArray0);
      assertEquals("d2f", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string5);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)127;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[0] = (byte)95;
      Constant[] constantArray0 = new Constant[1];
      int int0 = Utility.clearBit((-1881), (-305));
      assertEquals((-34649), int0);
      
      String string0 = Utility.convertString(">bcbW5-)#j~/#^");
      assertEquals(">bcbW5-)#j~/#^", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("l(<_3");
      assertEquals("Ll(<_3;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)95, (byte)127, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)95, (byte)127, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("swap", string2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(1, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)95, (byte)127, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = true;
      char char0 = byteSequence1.readChar();
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)95, (byte)127, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals('\u5F7F', char0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string3 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(3, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)95, (byte)127, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("dload_3", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string3);
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string4 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(4, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)95, (byte)127, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("nop", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string4);
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string5 = "6t)A5t*B*~^+[";
      try { 
        constantPool1.getConstant((-305), (byte) (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -305. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("eG*/~c,h", false);
      assertArrayEquals(new byte[] {(byte)101, (byte)71, (byte)42, (byte)47, (byte)126, (byte)99, (byte)44, (byte)104}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      
      short short0 = Utility.searchOpcode("f(w1#qnUZV");
      assertEquals((short) (-1), short0);
      
      String string0 = "dreturn";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte)71, (byte)42, (byte)47, (byte)126, (byte)99, (byte)44, (byte)104}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte)71, (byte)42, (byte)47, (byte)126, (byte)99, (byte)44, (byte)104}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(8, byteArray0.length);
      
      int int0 = byteSequence1.read();
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte)71, (byte)42, (byte)47, (byte)126, (byte)99, (byte)44, (byte)104}, byteArray0);
      assertEquals(101, int0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(8, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte)71, (byte)42, (byte)47, (byte)126, (byte)99, (byte)44, (byte)104}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(8, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte)71, (byte)42, (byte)47, (byte)126, (byte)99, (byte)44, (byte)104}, byteArray0);
      assertEquals("dstore_0", string1);
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("<illegal opcode>", false);
      assertNotNull(byteArray0);
      assertEquals(16, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(16, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 193, 160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "mj$5lw5";
      String string1 = "Invalid type: ";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Invalid type: ");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("Invalid type: ", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(87, 4664);
      assertEquals(87, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(4664, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-68), (byte)21, (byte)21, (byte)41, (byte)21}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Utility.getSignature("a_*(|PGQ7]02=:R.g");
      assertEquals("La_*(|PGQ7]02=:R/g;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("La_*(|PGQ7]02=:R/g;");
      assertEquals("a_*(|PGQ7]02=:R.g", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Constant.setComparator((BCELComparator) null);
      String string2 = Utility.compactClassName("-?F{Y38W2##QIT+", false);
      assertEquals("-?F{Y38W2##QIT+", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1660, (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("4`4lLJ(:FOPY&J(&Tn");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("4`4lLJ(:FOPY&J(&Tn", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("4`4lLJ(:FOPY&J(&Tn");
      assertEquals("4`4lLJ(:FOPY&J(&Tn", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      byte[] byteArray0 = Utility.decode("4`4lLJ(:FOPY&J(&Tn", false);
      assertNotNull(byteArray0);
      assertEquals(18, byteArray0.length);
      
      String string0 = Utility.fillup("4`4lLJ(:FOPY&J(&Tn", (byte)51, false, 'E');
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE4`4lLJ(:FOPY&J(&Tn", string0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit(89, (-219));
      assertEquals(121, int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(18, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("caload", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(18, byteArray0.length);
      
      InnerClass innerClass0 = new InnerClass(byteSequence0);
      assertEquals(9, byteSequence0.getIndex());
      assertEquals(24628, innerClass0.getInnerClassIndex());
      assertEquals(14918, innerClass0.getInnerAccessFlags());
      assertEquals(18984, innerClass0.getInnerNameIndex());
      assertEquals(27724, innerClass0.getOuterClassIndex());
      assertNotNull(innerClass0);
      assertEquals(18, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", "4`4lLJ(:FOPY&J(&Tn", "class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-86);
      boolean boolean0 = true;
      String string0 = Utility.compactClassName("0&9X[", true);
      assertEquals("0&9X[", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockFile mockFile0 = new MockFile("z'\u0000]vQx", "77 cb\";;/2ppw");
      assertNotNull(mockFile0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(25, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = Utility.decode("0&9X[", false);
      assertArrayEquals(new byte[] {(byte)48, (byte)38, (byte)57, (byte)88, (byte)91}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char char0 = byteSequence0.readChar();
      assertEquals(2, byteSequence0.getIndex());
      assertEquals('\u1A0B', char0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(25, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      String string1 = Utility.fillup(", ", 2127, false, '%');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(20, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("tableswitch\tdefault = 2, low = 0, high = 0(2)", string2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(25, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      String string3 = "java.lang.";
      String string4 = "Fe)0B%-";
      Method method0 = new Method(276, 276, (byte)26, (Attribute[]) null, constantPool0);
      assertFalse(method0.isInterface());
      assertFalse(method0.isTransient());
      assertFalse(method0.isAnnotation());
      assertFalse(method0.isStatic());
      assertEquals(276, method0.getNameIndex());
      assertTrue(method0.isFinal());
      assertFalse(method0.isVolatile());
      assertEquals(26, method0.getSignatureIndex());
      assertTrue(method0.isNative());
      assertFalse(method0.isStrictfp());
      assertTrue(method0.isProtected());
      assertEquals(276, method0.getAccessFlags());
      assertFalse(method0.isSynchronized());
      assertFalse(method0.isPublic());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isPrivate());
      assertFalse(method0.isAbstract());
      assertEquals(276, method0.getModifiers());
      assertFalse(method0.isEnum());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(method0);
      
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantClass constantClass0 = new ConstantClass(1029);
      assertEquals(1029, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      constantClass0.setNameIndex(1029);
      assertEquals(1029, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertEquals(1029, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(1029, constantClass1.getNameIndex());
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte) (-83), byte0);
      assertEquals(7, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("if_icmplt");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("if_icmplt", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("if_icmplt", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("if_icmplt", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      ConstantUtf8 constantUtf8_2 = ConstantUtf8.getInstance("double");
      assertEquals("double", constantUtf8_2.getBytes());
      assertEquals((byte)1, constantUtf8_2.getTag());
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_1));
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_2);
      assertNotSame(constantUtf8_2, constantUtf8_1);
      assertNotSame(constantUtf8_2, constantUtf8_0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("nop", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      assertNotSame(constantPool0, constantPool1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence2, constantPool1, false);
      assertEquals(1, byteSequence2.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("lreturn", string1);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte)101;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-104), (byte) (-104), (byte) (-117), (byte) (-117), (byte) (-1), (byte)57, (byte)81, (byte)101}, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("putfield");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("putfield", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8.clearStats();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("kx-");
      assertEquals("kx-", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertFalse(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-104), (byte) (-104), (byte) (-117), (byte) (-117), (byte) (-1), (byte)57, (byte)81, (byte)101}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)101, (byte) (-104), (byte) (-104), (byte) (-117), (byte) (-117), (byte) (-1), (byte)57, (byte)81, (byte)101}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_1;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(5, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)101, (byte) (-104), (byte) (-104), (byte) (-117), (byte) (-117), (byte) (-1), (byte)57, (byte)81, (byte)101}, byteArray0);
      assertEquals("lsub", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, constantArray0.length);
      assertEquals(9, byteArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("lsub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lsub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-101), (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(39835, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-101), (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantMethodType0);
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      ConstantUtf8.printStats();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-101), (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-101), (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("iflt\t\t#-25695", string0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      assertEquals(3, constantArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("o6UnV", false);
      assertArrayEquals(new byte[] {(byte)111, (byte)54, (byte)85, (byte)110, (byte)86}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2542), 2655);
      assertArrayEquals(new byte[] {(byte)111, (byte)54, (byte)85, (byte)110, (byte)86}, byteArray0);
      assertEquals("0:    ddiv\n1:    istore\t\t%85\n3:    fdiv\n4:    sastore\n", string0);
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      
      short short0 = Utility.searchOpcode("0:    ddiv\n1:    istore\t\t%85\n3:    fdiv\n4:    sastore\n");
      assertEquals((short) (-1), short0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)54, (byte)85, (byte)110, (byte)86}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)54, (byte)85, (byte)110, (byte)86}, byteArray0);
      assertEquals((byte)111, byte0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)111, (byte)54, (byte)85, (byte)110, (byte)86}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)54, (byte)85, (byte)110, (byte)86}, byteArray0);
      assertEquals("istore\t\t%85", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)54, (byte)85, (byte)110, (byte)86}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      byteSequence0.close();
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)54, (byte)85, (byte)110, (byte)86}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)54, (byte)85, (byte)110, (byte)86}, byteArray0);
      assertEquals("fdiv", string2);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string3 = Utility.classOrInterface(165);
      assertEquals("class", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)54, (byte)85, (byte)110, (byte)86}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(5, byteArray0.length);
      
      String string4 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)54, (byte)85, (byte)110, (byte)86}, byteArray0);
      assertEquals("ddiv", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertNotNull(string4);
      assertEquals(5, byteArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteSequence1, byteSequence2);
      
      String string5 = Utility.replace("o6UnV", "lT=R=", "#rF1");
      assertEquals("o6UnV", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", "ddiv", "lT=R=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("o6UnV");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("o6UnV", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3359, 924);
      assertEquals(3359, constantNameAndType0.getNameIndex());
      assertEquals(924, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(10, constantArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[2] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte) (-3), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(10, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte) (-3), (byte)0, (byte)0}, byteArray0);
      assertEquals("dup_x1", string0);
      assertNotNull(string0);
      assertEquals(10, constantArray0.length);
      assertEquals(5, byteArray0.length);
      
      String string1 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte) (-3), (byte)0, (byte)0}, byteArray0);
      assertEquals("5a 00 fd 00 00", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(10, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte) (-3), (byte)0, (byte)0}, byteArray0);
      assertEquals("nop", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(10, constantArray0.length);
      assertEquals(5, byteArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5a 00 fd 00 00";
      stringArray0[1] = "o6UnV";
      stringArray0[2] = "dup_x1";
      stringArray0[3] = "dup_x1";
      stringArray0[4] = "nop";
      stringArray0[5] = "dup_x1";
      String string3 = Utility.methodTypeToSignature("nop", stringArray0);
      assertEquals("(L5a;Lo6UnV;Ldup_x1;Ldup_x1;Lnop;Ldup_x1;)Lnop;", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(6, stringArray0.length);
      
      MockFile mockFile0 = new MockFile("dup_x1", "nop");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.printf("invokespecial", (Object[]) stringArray0);
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel/dup_x1/nop", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("nop", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel/dup_x1", mockFile0.getParent());
      assertEquals(13L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertNotNull(printStream0);
      assertEquals(6, stringArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Utility.printArray(printStream0, (Object[]) constantArray0);
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel/dup_x1/nop", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("nop", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(74L, mockFile0.length());
      assertEquals("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel/dup_x1", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(10, constantArray0.length);
      assertEquals(6, stringArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("gj=^ 7=Hzm[Y-;1E");
      assertNotNull(mockFile0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-69);
      byteArray0[3] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertEquals((byte) (-81), byte0);
      assertEquals(4, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("if_icmplt");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("if_icmplt", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("if_icmplt", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("if_icmplt", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      Constant[] constantArray0 = new Constant[8];
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_0;
      short short0 = byteSequence0.readShort();
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertEquals((short) (-17664), short0);
      assertEquals(4, byteArray0.length);
      
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_1;
      constantArray0[5] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = ConstantUtf8.getInstance("gj=^ 7=Hzm[Y-;1E");
      assertEquals("gj=^ 7=Hzm[Y-;1E", constantUtf8_2.getBytes());
      assertEquals((byte)1, constantUtf8_2.getTag());
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_0));
      assertFalse(constantUtf8_2.equals((Object)constantUtf8_1));
      assertNotNull(constantUtf8_2);
      assertNotSame(constantUtf8_2, constantUtf8_0);
      assertNotSame(constantUtf8_2, constantUtf8_1);
      
      constantArray0[7] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(8, constantArray0.length);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertEquals("$af$bb$AP", string0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(4, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(8, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(8, constantPool0.getLength());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertEquals("lastore", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence0, byteSequence1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-3);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("00$fd$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      short short0 = Utility.searchOpcode("O^,V'*Z#CW$g'>");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O^,V'*Z#CW$g'>");
      assertFalse(boolean0);
      
      byte[] byteArray1 = Utility.decode("00$fd$A$A$A$A", false);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = Utility.equals(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertTrue(boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = Utility.clearBit((-1371), (-1171));
      assertEquals((-9563), int0);
      
      byte[] byteArray2 = Utility.decode("O^,V'*Z#CW$g'>", false);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(14, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      Float float0 = new Float((-2081.743F));
      assertEquals((-2081.743F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-82), (byte)14, (byte) (-82)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-82), (byte)14, (byte) (-82)}, byteArray0);
      assertEquals("freturn", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals(0, constantArray0.length);
      assertEquals(4, byteArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      try { 
        Utility.methodSignatureArgumentTypes("freturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-3), (byte)4, (byte)51, (byte)51, (byte) (-103)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("O^,V'*Z#CW$g'>");
      assertEquals("O^,V'*Z#CW$g'>", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("O^,V'*Z#CW$g'>");
      assertEquals("O^,V'*Z#CW$g'>", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      Constant[] constantArray0 = new Constant[9];
      byte[] byteArray1 = Utility.decode("O^,V'*Z#CW$g'>", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(14, byteArray1.length);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-3), (byte)4, (byte)51, (byte)51, (byte) (-103)}, byteArray0);
      assertEquals(48, int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(9, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-3), (byte)4, (byte)51, (byte)51, (byte) (-103)}, byteArray0);
      assertEquals("faload", string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      assertEquals(9, constantArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      
      Constant[] constantArray1 = new Constant[8];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      constantArray1[0] = (Constant) constantUtf8_0;
      constantArray1[1] = (Constant) constantUtf8_1;
      constantArray1[2] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)51);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(51.0F, constantFloat0.getBytes(), 0.01F);
      assertNotNull(constantFloat0);
      
      constantArray1[3] = (Constant) constantFloat0;
      constantArray1[4] = (Constant) constantUtf8_1;
      constantArray1[5] = (Constant) constantUtf8_0;
      constantArray1[6] = (Constant) constantUtf8_0;
      constantArray1[7] = (Constant) constantUtf8_1;
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      assertEquals(8, constantPool1.getLength());
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(8, constantArray1.length);
      
      String string1 = Utility.codeToString(byteArray1, constantPool1, (int) (byte) (-3), (int) (byte) (-3));
      assertEquals(8, constantPool1.getLength());
      assertEquals("0:    iastore\n1:    land\n2:    dup2_x2\n3:    aload_2\n4:    sastore\n5:    dload_1\n6:    aload_0\n7:    dup_x1\n8:    fload_1\n9:    fstore_0\n10:   pop\n11:   iload_0\n12:   dload_1\n13:   istore_3\n", string1);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string1);
      assertEquals(8, constantArray1.length);
      assertEquals(14, byteArray1.length);
      assertNotSame(constantArray1, constantArray0);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteArray1, byteArray0);
      
      String string2 = Utility.compactClassName("char", "CfojAB}1YNCpSv", false);
      assertEquals("char", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("o6UnV");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("o6UnV", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantUtf8.clearStats();
      ConstantUtf8 constantUtf8_1 = (ConstantUtf8)constantUtf8_0.copy();
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("o6UnV", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("o6UnV", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_0, constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("o6UnV");
      assertEquals("o6UnV", constantUtf8_2.getBytes());
      assertEquals((byte)1, constantUtf8_2.getTag());
      assertTrue(constantUtf8_2.equals((Object)constantUtf8_0));
      assertTrue(constantUtf8_2.equals((Object)constantUtf8_1));
      assertNotNull(constantUtf8_2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-119);
      byteArray0[1] = (byte) (-86);
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte)0}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      
      short short0 = Utility.searchOpcode("dasItore");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(10, constantArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)51;
      byteArray0[0] = (byte)51;
      byteArray0[6] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)51, (byte)48, (byte) (-3), (byte)4, (byte)51, (byte)0, (byte) (-103)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("O^,V'*Z#CW$g'>");
      assertEquals("O^,V'*Z#CW$g'>", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("O^,V'*Z#CW$g'>");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("O^,V'*Z#CW$g'>", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      Constant[] constantArray0 = new Constant[9];
      byte[] byteArray1 = Utility.decode("O^,V'*Z#CW$g'>", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      short short0 = Utility.searchOpcode("O^,V'*Z#CW$g'>");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(14, byteArray1.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(9, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(9, constantPool0.getLength());
      assertEquals("iastore", string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(9, constantArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      
      try { 
        Utility.typeOfSignature("if_acmpne");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-799);
      Integer integer0 = new Integer((-799));
      assertEquals((-799), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      MockFile mockFile0 = new MockFile("jsr_w");
      assertNotNull(mockFile0);
      
      short short0 = Utility.searchOpcode("(NEI86P");
      assertEquals((short) (-1), short0);
      
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)126, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)126, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)126, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("iand", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)126, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("nop", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      
      String string2 = Utility.methodTypeToSignature("nop", (String[]) null);
      assertEquals("()Lnop;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("`zDlEKUhaCu9]|O\"i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `zDlEKUhaCu9]|O\"i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(cx9.gD");
      assertEquals("(cx9.gD", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("(cx9.gD");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("(cx9.gD", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      constantArray0[6] = (Constant) constantUtf8_0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-85), (byte) (-72), (byte) (-50), (byte)66, (byte) (-72), (byte) (-50), (byte)12, (byte) (-72)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((-18226), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-12629), constantInvokeDynamic0.getClassIndex());
      assertEquals((-12629), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-85), (byte) (-72), (byte) (-50), (byte)66, (byte) (-72), (byte) (-50), (byte)12, (byte) (-72)}, byteArray0);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(9, byteArray0.length);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)66, 16384);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(16384, constantMethodHandle0.getReferenceIndex());
      assertEquals(66, constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(9, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(9, constantPool0.getLength());
      assertEquals(9, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(9, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      boolean boolean0 = true;
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(9, constantPool0.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-85), (byte) (-72), (byte) (-50), (byte)66, (byte) (-72), (byte) (-50), (byte)12, (byte) (-72)}, byteArray0);
      assertEquals("lstore_3", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertEquals(9, constantArray0.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(constantPool0, constantPool1);
      
      try { 
        Utility.methodSignatureReturnType("N?j)gA[Ev*t>MZ8`bY", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `gA[Ev*t>MZ8`bY'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)58;
      Constant[] constantArray0 = new Constant[22];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)0, (byte)0);
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)92, 1);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(1, constantFieldref0.getNameAndTypeIndex());
      assertEquals(92, constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)92, (byte)58, (byte)0}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      
      short short0 = Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)92, (byte)58, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(22, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(22, constantArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(22, constantPool0.getLength());
      assertEquals(22, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(22, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(22, constantPool0.getLength());
      assertEquals(22, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)92, (byte)58, (byte)0}, byteArray0);
      assertEquals("dup2", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      assertEquals(22, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string2 = Utility.classOrInterface(124);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray1 = Utility.decode("8$(g}uS9jekN&\"3=b%M", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(18, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)92, (byte)58, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(18, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = Utility.clearBit(1, 2097);
      assertEquals(1, int0);
      
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)58;
      Constant[] constantArray0 = new Constant[22];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)0, (byte)0);
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)83, 1);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(83, constantFieldref0.getClassIndex());
      assertEquals(1, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)83, (byte)58, (byte)0}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      
      short short0 = Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)83, (byte)58, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(22, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(22, constantArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(22, constantPool0.getLength());
      assertEquals(22, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(22, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(22, constantPool0.getLength());
      assertEquals(22, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)83, (byte)58, (byte)0}, byteArray0);
      assertEquals("aastore", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      assertEquals(22, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string2 = Utility.classOrInterface(124);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray1 = Utility.decode("8$(g}uS9jekN&\"3=b%M", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(18, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)83, (byte)58, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(18, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = Utility.clearBit(1, 2097);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("o6UnV");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("o6UnV", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantUtf8.clearStats();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("o6UnV");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("o6UnV", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      constantArray0[6] = (Constant) constantUtf8_1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$7c$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      
      short short0 = Utility.searchOpcode("dasItore");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(10, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(10, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("iushr", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(10, constantArray0.length);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockFile mockFile0 = new MockFile("gj=^ 7=Hzm[Y-;1E");
      assertNotNull(mockFile0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-69);
      byteArray0[3] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertEquals((byte) (-81), byte0);
      assertEquals(4, byteArray0.length);
      
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      
      short short0 = Utility.searchOpcode("'_4'\"sss%FCl=");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      assertFalse(boolean0);
      
      byteSequence0.close();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(4, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertEquals("dreturn", string1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string2 = Utility.classOrInterface((byte)59);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-69), (byte)0, (byte)80}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[8] = (byte) (-73);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-115);
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(21, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(0, constantMethodref0.getClassIndex());
      assertEquals(3297, constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      assertEquals(21, byteArray0.length);
      
      String string0 = constantMethodref0.toString();
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(0, constantMethodref0.getClassIndex());
      assertEquals(3297, constantMethodref0.getNameAndTypeIndex());
      assertEquals("CONSTANT_Methodref[10](class_index = 0, name_and_type_index = 3297)", string0);
      assertNotNull(string0);
      assertEquals(21, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(5, constantArray0.length);
      
      String string1 = constantPool0.toString();
      assertEquals(5, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(21, byteArray0.length);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence1);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals(0, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(constantMethodType0);
      assertEquals(21, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(5, constantArray0.length);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(5, constantPool2.getLength());
      assertEquals(5, constantPool0.getLength());
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(5, constantArray0.length);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertEquals(5, constantPool3.getLength());
      assertEquals(5, constantPool0.getLength());
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertNotNull(constantPool3);
      assertEquals(5, constantArray0.length);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertEquals(5, constantPool2.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(5, constantPool0.getLength());
      assertEquals("f2d", string2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertNotNull(string2);
      assertEquals(21, byteArray0.length);
      assertEquals(5, constantArray0.length);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      
      String string3 = Utility.getSignature("CONSTANT_Methodref[10](class_index = 0, name_and_type_index = 3297)");
      assertEquals("[LCONSTANT_Methodref;", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      try { 
        Utility.decode("[I4,EK", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      
      short short0 = Utility.searchOpcode("KoP{%L_}");
      assertEquals((short) (-1), short0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KoP{%L_}");
      assertFalse(boolean0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0}, byteArray0);
      assertEquals("istore_1", string1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string2 = Utility.classOrInterface((byte)60);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = false;
      String string3 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0}, byteArray0);
      assertEquals("$3c$3c$A$A", string3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertNotNull(byteSequence3);
      assertEquals(0, byteArray1.length);
      
      try { 
        byteSequence3.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&x@.DM");
      assertEquals("(&x@.DM", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(9, constantArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      String string0 = "if_acmpq";
      short short0 = Utility.searchOpcode("if_acmpq");
      assertEquals((short) (-1), short0);
      
      ConstantPool constantPool1 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(1, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(1, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object1));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      assertEquals(7, objectArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)115, (byte)7, (byte)78, (byte) (-40), (byte)11}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)115, (byte)7, (byte)78, (byte) (-40), (byte)11}, byteArray0);
      assertEquals("drem", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = Utility.clearBit((-2715), 56);
      assertEquals((-16779931), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-63);
      byteArray1[1] = (byte)112;
      byteArray1[2] = (byte)112;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("jsr");
      assertEquals("jsr", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertEquals("jsr", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("jsr", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      Constant[] constantArray1 = new Constant[9];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      constantArray1[0] = (Constant) constantUtf8_0;
      constantArray1[1] = (Constant) constantUtf8_0;
      constantArray1[2] = (Constant) constantUtf8_0;
      constantArray1[3] = (Constant) constantUtf8_1;
      constantArray1[4] = (Constant) constantUtf8_0;
      constantArray1[5] = (Constant) constantUtf8_0;
      constantArray1[6] = (Constant) constantUtf8_0;
      constantArray1[7] = (Constant) constantUtf8_0;
      constantArray1[8] = (Constant) constantUtf8_1;
      ConstantPool constantPool2 = new ConstantPool(constantArray1);
      assertEquals(9, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertNotNull(constantPool2);
      assertEquals(9, constantArray1.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-63), (byte)112, (byte)112}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray1.length);
      
      ConstantPool constantPool3 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool3.getLength());
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertNotNull(constantPool3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 28784. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("(%6zP(o8Z7");
      assertEquals("(%6zP(o8Z7", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)117, (byte)117);
      assertEquals(117, constantNameAndType0.getSignatureIndex());
      assertEquals(117, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      String string1 = Utility.compactClassName("if_acmpne", true);
      assertEquals("if_acmpne", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertEquals(0L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      MockFile mockFile0 = new MockFile("(%6zP(o8Z7");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantNameAndType0.setNameIndex((-1247));
      assertEquals(117, constantNameAndType0.getSignatureIndex());
      assertEquals((-1247), constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      
      constantArray0[1] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(4, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(4, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("lneg", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      assertEquals(4, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string3 = Utility.accessToString((int) (byte)117, true);
      assertEquals("public protected final volatile", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)117, (int) (byte)117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer((-799));
      assertEquals((-799), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)123;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OunSInedT]");
      assertFalse(boolean0);
      
      byteArray0[2] = (byte) (-24);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-945), 82);
      assertEquals(2, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)114, (byte)123, (byte) (-24), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    frem\n1:    lshr\n2:    <illegal opcode>\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      assertNotNull(string0);
      assertEquals(10, byteArray0.length);
      assertEquals(2, constantArray0.length);
      
      int int0 = Utility.clearBit((-3473), 60);
      assertEquals((-268438929), int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)114, (byte)123, (byte) (-24), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(10, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)114, (byte)123, (byte) (-24), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(10, byteArray0.length);
      
      int int1 = byteSequence1.read();
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)114, (byte)123, (byte) (-24), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(114, int1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(int1 == int0);
      assertEquals(10, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string1 = Utility.compactClassName("0:    frem\n1:    lshr\n2:    <illegal opcode>\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", "0:    frem\n1:    lshr\n2:    <illegal opcode>\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", false);
      assertEquals("0:    frem\n1:    lshr\n2:    <illegal opcode>\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)114, (byte)123, (byte) (-24), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(10, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(2, constantArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)114, (byte)123, (byte) (-24), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("frem", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string2);
      assertEquals(10, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-87);
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte) (-124);
      byte byte1 = (byte)0;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ret\t\t%169
         // 2:    dconst_0
         // 3:    bastore
         // 4:    ret\t\t%84
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("(%6zP(o8Z7");
      assertEquals("(%6zP(o8Z7", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-122), (byte) (-122));
      assertEquals((-122), constantNameAndType0.getNameIndex());
      assertEquals((-122), constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      String string1 = Utility.compactClassName("if_acmpne", false);
      assertEquals("if_acmpne", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      MockFile mockFile0 = new MockFile("(%6zP(o8Z7");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)57, (byte) (-122), (byte)57, (byte)57, (byte) (-122), (byte) (-122)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantNameAndType0;
      constantArray0[6] = (Constant) constantNameAndType0;
      constantArray0[7] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(8, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(8, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)57, (byte) (-122), (byte)57, (byte)57, (byte) (-122), (byte) (-122)}, byteArray0);
      assertEquals("dstore\t\t%134", string2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      assertEquals(8, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String[] stringArray0 = Constants.ITEM_NAMES;
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)49;
      ConstantLong constantLong0 = new ConstantLong((byte)113);
      assertEquals(113L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      MockFile mockFile0 = new MockFile(":-", ":-");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("FTtsn|@N/f");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      short short0 = Utility.searchOpcode("FTtsn|@N/f");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte)112, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte)112, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte)112, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("lcmp", string0);
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte)112, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("irem", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
      
      String string2 = Utility.replace("newarray", "irem", (String) null);
      assertEquals("newarray", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureToString(", npairs = ", "Invalid type: ", "irem", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("");
      assertEquals("", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-108), 1024);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1024, constantMethodHandle0.getReferenceIndex());
      assertEquals((-108), constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = (ConstantMethodHandle)constantMethodHandle0.copy();
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1024, constantMethodHandle0.getReferenceIndex());
      assertEquals((-108), constantMethodHandle0.getReferenceKind());
      assertEquals(1024, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals((-108), constantMethodHandle1.getReferenceKind());
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      assertNotSame(constantMethodHandle0, constantMethodHandle1);
      assertNotSame(constantMethodHandle1, constantMethodHandle0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108)}, byteArray0);
      assertEquals("lcmp", string0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.compactClassName("B%LM", ", high = ", false);
      assertEquals("B%LM", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = Utility.isSet(1024, 0);
      assertFalse(boolean0);
      
      String string2 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108)}, byteArray0);
      assertEquals("$94$94$94$94", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(4, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108)}, byteArray0);
      assertEquals("lcmp", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, byteArray0.length);
      
      int int0 = Utility.clearBit((byte) (-108), (-65));
      assertEquals(2147483540, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("Q]Wd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q]Wd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = Utility.typeOfSignature("Lq[zE&bZ0Ep");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1394), (int) (byte)14);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("Lq[zE&bZ0Ep", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Lq[zE&bZ0Ep
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "00 00 00";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), 75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    castore
         // 2:    dload_2
         // 3:    fstore_2
         // 4:    astore_3
         // 5:    bastore
         // 6:    dadd
         // 7:    lxor
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-40);
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)80, (byte)5, (byte) (-124), (byte)51, (byte)81, (byte) (-84), (byte) (-40)}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.compactClassName("qPTNqhuXG> t^IF");
      assertEquals("qPTNqhuXG> t^IF", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.replace("$l$8b$I$A$A$A$A$A$A$A", " read ", "qPTNqhuXG> t^IF");
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[1] = "qPTNqhuXG> t^IF";
      stringArray0[2] = "qPTNqhuXG> t^IF";
      stringArray0[3] = "qPTNqhuXG> t^IF";
      stringArray0[4] = "qPTNqhuXG> t^IF";
      stringArray0[5] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[6] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[7] = "qPTNqhuXG> t^IF";
      stringArray0[8] = "$l$8b$I$A$A$A$A$A$A$A";
      String string3 = Utility.methodTypeToSignature(" read ", stringArray0);
      assertEquals("(L$l$8b$I$A$A$A$A$A$A$A;LqPTNqhuXG>;LqPTNqhuXG>;LqPTNqhuXG>;LqPTNqhuXG>;L$l$8b$I$A$A$A$A$A$A$A;L$l$8b$I$A$A$A$A$A$A$A;LqPTNqhuXG>;L$l$8b$I$A$A$A$A$A$A$A;)Lread;", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(9, stringArray0.length);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(L$l$8b$I$A$A$A$A$A$A$A;LqPTNqhuXG>;LqPTNqhuXG>;LqPTNqhuXG>;LqPTNqhuXG>;L$l$8b$I$A$A$A$A$A$A$A;L$l$8b$I$A$A$A$A$A$A$A;LqPTNqhuXG>;L$l$8b$I$A$A$A$A$A$A$A;)Lread;", false);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      byte[] byteArray1 = Utility.decode(" read ", false);
      assertArrayEquals(new byte[] {(byte)32, (byte)114, (byte)101, (byte)97, (byte)100, (byte)32}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "Lq[zE&bZ0Ep";
      // Undeclared exception!
      try { 
        Utility.decode("mj$5lw5", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5l\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.convertString("L;");
      assertEquals("L;", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 67;
      String string2 = Utility.format(67, 120, false, 'N');
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN67", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.methodSignatureReturnType("L;");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("-/)oM~^,5", "", "vFVC&n`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -/)oM~^,5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = Utility.clearBit((-2715), 56);
      assertEquals((-16779931), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)58;
      Constant[] constantArray0 = new Constant[22];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)0, (byte)0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)92, 1);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(92, constantFieldref0.getClassIndex());
      assertEquals(1, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)92, (byte)58, (byte)0}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      
      short short0 = Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)92, (byte)58, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(22, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(22, constantArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(22, constantPool0.getLength());
      assertEquals(22, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(22, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(22, constantPool0.getLength());
      assertEquals(22, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)92, (byte)58, (byte)0}, byteArray0);
      assertEquals("dup2", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      assertEquals(22, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string2 = Utility.classOrInterface(124);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray1 = Utility.decode("8$(g}uS9jekN&\"3=b%M", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(18, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)92, (byte)58, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(18, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = Utility.clearBit(1, 2097);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("double");
      assertNotNull(mockFile0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(995, (-205));
      assertEquals((-205), constantNameAndType0.getSignatureIndex());
      assertEquals(995, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      constantNameAndType0.setSignatureIndex((-1720));
      assertEquals(995, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-1720), constantNameAndType0.getSignatureIndex());
      
      constantNameAndType0.setNameIndex(995);
      assertEquals(995, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-1720), constantNameAndType0.getSignatureIndex());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)69, (byte) (-46), (byte)89, (byte)38, (byte)89}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)69, (byte) (-46), (byte)89, (byte)38, (byte)89}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(5, byteArray0.length);
      
      byteSequence1.close();
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)69, (byte) (-46), (byte)89, (byte)38, (byte)89}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      byteSequence1.reset();
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)69, (byte) (-46), (byte)89, (byte)38, (byte)89}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)69, (byte) (-46), (byte)89, (byte)38, (byte)89}, byteArray0);
      assertEquals("fstore_2", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)69, (byte) (-46), (byte)89, (byte)38, (byte)89}, byteArray0);
      assertEquals("<illegal opcode>", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string2 = Utility.replace("monitorenter", "Gky[.)1Y{", "(Z2C=[_UE");
      assertEquals("monitorenter", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)84;
      byteArray0[2] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)72, (byte)56, (byte) (-67), (byte) (-57), (byte)84, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)72, (byte)56, (byte) (-67), (byte) (-57), (byte)84, (byte)0}, byteArray0);
      assertEquals("dstore_1", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-44);
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte) (-44);
      byteArray1[3] = (byte) (-44);
      byteArray1[4] = (byte)4;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-44), (byte)4, (byte) (-2), (byte) (-44)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte)4, (byte) (-44), (byte) (-44), (byte)4}, byteArray1);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "(Z)2C=[_UE";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Z)2C=[_UE", "double", "aqsVM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2C=[_UE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "impdep2");
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName(">0MzK2JP2Z.C");
      assertEquals(">0MzK2JP2Z.C", string0);
      assertNotNull(string0);
      
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = Utility.fillup("impdep2", 40, false, 'n');
      assertEquals("nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnimpdep2", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short short0 = Utility.searchOpcode(">0MzK2JP2Z.C");
      assertEquals((short) (-1), short0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string2 = Utility.fillup("4|Nkkv\"z)3C2u", (short) (-1), true, 'n');
      assertEquals("4|Nkkv\"z)3C2u", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string3 = Utility.compactClassName("zGbO`q)", false);
      assertEquals("zGbO`q)", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      String string4 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1175), (int) (byte)64, true);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertEquals("0:    lstore_1\n", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "CodeException(start_pc = ";
      String string0 = Utility.replace("CodeException(start_pc = ", "CodeException(start_pc = ", "CodeException(start_pc = ");
      assertEquals("CodeException(start_pc = ", string0);
      assertNotNull(string0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(198, (-2488));
      assertEquals((-2488), constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(198, constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-116)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(1, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-116)}, byteArray0);
      assertEquals("f2l", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{null, CodeException(start_pc = , null}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Utility.setBit((-1085), (-1085));
      assertEquals((-1077), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte)74;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-49), 171, true);
      assertArrayEquals(new byte[] {(byte) (-26), (byte) (-57), (byte) (-110), (byte) (-80), (byte) (-49), (byte) (-65), (byte)14, (byte)77, (byte)74}, byteArray0);
      assertEquals("0:    <illegal opcode>\n1:    ifnonnull\t\t#-27983\n4:    <illegal opcode>\n5:    athrow\n6:    dconst_0\n7:    astore_2\n8:    dstore_3\n", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Utility.getSignature("org.apache.bcel.classfile.Utility$JavaWriter");
      assertEquals("Lorg/apache/bcel/classfile/Utility$JavaWriter;", string0);
      assertNotNull(string0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2490), 1968);
      assertEquals((-2490), constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1968, constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = (ConstantMethodHandle)constantArray0[1].copy();
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals((-2490), constantMethodHandle1.getReferenceKind());
      assertEquals(1968, constantMethodHandle1.getReferenceIndex());
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      assertEquals(8, constantArray0.length);
      assertNotSame(constantMethodHandle1, constantMethodHandle0);
      
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      constantArray0[5] = (Constant) constantMethodHandle0;
      constantArray0[6] = (Constant) constantMethodHandle0;
      constantArray0[7] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(8, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(8, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-96), (byte)58, (byte)57, (byte)43, (byte) (-80), (byte)121, (byte)107, (byte)70, (byte)14}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte) (-96), (byte)58, (byte)57, (byte)43, (byte) (-80), (byte)121, (byte)107, (byte)70, (byte)14}, byteArray0);
      assertEquals("if_icmpne\t\t#14905", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string1);
      assertEquals(8, constantArray0.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit(701, 701);
      assertEquals(701, int0);
      
      String string0 = Utility.methodSignatureReturnType("S(@4:.Q%{15gok(");
      assertEquals("short", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "u1Ol^'_!";
      stringArray0[2] = "S(@4:.Q%{15gok(";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)8, (byte) (-40), (byte)0, (byte) (-58), (byte) (-64), (byte)117, (byte)49, (byte)74, (byte)78}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(148373702, constantInteger0.getBytes());
      assertArrayEquals(new byte[] {(byte)8, (byte) (-40), (byte)0, (byte) (-58), (byte) (-64), (byte)117, (byte)49, (byte)74, (byte)78}, byteArray0);
      assertNotNull(constantInteger0);
      assertEquals(9, byteArray0.length);
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(148373702, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(148373702, constantInteger1.getBytes());
      assertArrayEquals(new byte[] {(byte)8, (byte) (-40), (byte)0, (byte) (-58), (byte) (-64), (byte)117, (byte)49, (byte)74, (byte)78}, byteArray0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals(9, byteArray0.length);
      
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 30001. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-78);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = Utility.clearBit((byte)116, (byte)116);
      assertEquals(116, int0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)19;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray1.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "O^,V'*Z#CW$g'>";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.getSignature(".j'");
      assertEquals("L/j';", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "O^,V'*Z#CW$g'>";
      String string2 = Utility.signatureToString("L/j';");
      assertEquals(".j'", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.replace("bVPwDl*)XDH", "uXgp$sLWyYy,bD", "L/j';");
      assertEquals("bVPwDl*)XDH", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)38;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-94);
      String string4 = Utility.replace("bVPwDl*)XDH", ".j'", "bVPwDl*)XDH");
      assertEquals("bVPwDl*)XDH", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      try { 
        Utility.methodSignatureToString("? super ", "]", "", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("4`4lLJ(:FOPY&J(&Tn");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("4`4lLJ(:FOPY&J(&Tn", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("4`4lLJ(:FOPY&J(&Tn");
      assertEquals("4`4lLJ(:FOPY&J(&Tn", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte)0);
      assertEquals(0, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(0, constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertEquals(0, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(0, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(0, constantMethodHandle1.getReferenceKind());
      assertEquals(0, constantMethodHandle1.getReferenceIndex());
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      
      constantMethodHandle0.setReferenceIndex(70);
      assertEquals(70, constantMethodHandle0.getReferenceIndex());
      assertEquals(0, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertFalse(constantMethodHandle0.equals((Object)constantMethodHandle1));
      assertNotSame(constantMethodHandle0, constantMethodHandle1);
      
      byte[] byteArray1 = Utility.decode("4`4lLJ(:FOPY&J(&Tn", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(18, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = Utility.format((byte) (-3), (byte)51, false, 'E');
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE-3", string0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit(89, (-221));
      assertEquals(89, int0);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantUtf8_1;
      constantArray0[3] = (Constant) constantMethodHandle1;
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(5, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(5, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.replace("ifnonnull", "ifnonnull", ")[;XsDJ!$Yy'S{e");
      assertEquals(")[;XsDJ!$Yy'S{e", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 70, 714);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(25, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(6667, constantInvokeDynamic0.getClassIndex());
      assertEquals(6667, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-21832), constantInvokeDynamic0.getNameAndTypeIndex());
      assertNotNull(constantInvokeDynamic0);
      assertEquals(25, byteArray0.length);
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      String string0 = Utility.getSignature("O");
      assertEquals("LO;", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(25, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(2, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("iload_0", string1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(25, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string2 = Utility.replace("iload_0", "^Ffq=a}^3vW", "athrow");
      assertEquals("iload_0", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 184, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-13), (byte) (-13)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-13), (byte) (-13)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-13), (byte) (-13)}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 62451. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)84, (byte) (-125), (byte)84, (byte) (-125), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)84, (byte) (-125), (byte)84, (byte) (-125), (byte)0}, byteArray0);
      assertEquals((byte)39, byte0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("iload_3");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("iload_3", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("iload_3", constantUtf8_0.getBytes());
      assertEquals("iload_3", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)39, (byte)84, (byte) (-125), (byte)84, (byte) (-125), (byte)0}, byteArray0);
      assertEquals("bastore", string0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)84, (byte) (-125), (byte)84, (byte) (-125), (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool0.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(1, constantPool1.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)39, (byte)84, (byte) (-125), (byte)84, (byte) (-125), (byte)0}, byteArray0);
      assertEquals("lxor", string1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(constantPool0, constantPool1);
      
      String string2 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)84, (byte) (-125), (byte)84, (byte) (-125), (byte)0}, byteArray0);
      assertEquals("dload_1", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence1, byteSequence0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)11;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(25, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(184, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(6667, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(6667, constantInvokeDynamic0.getClassIndex());
      assertNotNull(constantInvokeDynamic0);
      assertEquals(25, byteArray0.length);
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2271, 181);
      assertEquals(2271, constantMethodHandle0.getReferenceKind());
      assertEquals(181, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertNotNull(constantMethodHandle0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 16896. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(25, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      boolean boolean0 = false;
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals("iload_0", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals(25, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$g$L$aa$b8$abB$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(25, byteArray0.length);
      
      String string2 = Utility.replace("newarray", "G)BmXd", "newarray");
      assertEquals("newarray", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureToString("newarray", "newarray", "java.lang.", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: newarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.convertString("byte");
      assertEquals("byte", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-110);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-2);
      boolean boolean0 = false;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-110), (byte)0, (byte) (-93), (byte) (-45), (byte) (-2), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 37376. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(25, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((-21832), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(6667, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(6667, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertNotNull(constantInvokeDynamic0);
      assertEquals(25, byteArray0.length);
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2271, 181);
      assertEquals(2271, constantMethodHandle0.getReferenceKind());
      assertEquals(181, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertNotNull(constantMethodHandle0);
      
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(16, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals("lookupswitch\tdefault = 4, npairs = 0 ()", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals(25, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.getSignature(".j'");
      assertEquals("L/j';", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "O^,V'*Z#CW$g'>";
      String string1 = Utility.signatureToString("L/j';");
      assertEquals(".j'", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.replace("bVPwDl*)XDH", "uXgp$sLWyYy,bD", "L/j';");
      assertEquals("bVPwDl*)XDH", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte byte0 = (byte)22;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)38;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte) (-94);
      byteArray1[2] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)38, (byte) (-94), (byte) (-94)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray1.length);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)38, (byte) (-94), (byte) (-94)}, byteArray1);
      assertEquals(38, int0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)26, (byte)11, (byte) (-86), (byte) (-72), (byte) (-85), (byte)66}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(6667, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-21832), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(6667, constantInvokeDynamic0.getClassIndex());
      assertArrayEquals(new byte[] {(byte)26, (byte)11, (byte) (-86), (byte) (-72), (byte) (-85), (byte)66}, byteArray0);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(6, byteArray0.length);
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      String string0 = constantPool0.toString();
      assertEquals(2, constantPool0.getLength());
      assertEquals("1)null\n", string0);
      assertNotNull(string0);
      assertEquals(2, constantArray0.length);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)66, 182, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[4] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(16, int0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("lshl", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lshl");
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("o>Ep\"hJQ<(d][hP[^C'");
      assertNotNull(mockFile0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(9, byteArray0.length);
      
      int int1 = byteSequence0.read();
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(121, int1);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(int1 == int0);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("bipush\t\t121", string1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string2 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$Qyy$Ay$A$A$A$A", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(9, byteArray0.length);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)121;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121}, byteArray1);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence2);
      assertEquals(2, byteArray1.length);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertNotNull(byteSequence3);
      assertEquals(9, byteArray0.length);
      
      int int2 = byteSequence1.read();
      assertEquals(3, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(121, int2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(byteSequence1.equals((Object)byteSequence3));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence1, byteSequence3);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string3 = Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      assertEquals(2, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("bipush\t\t121", string3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence3, byteSequence0);
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(byteSequence3, byteSequence2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "o>Ep\"hJQ<(d][hP[^C'";
      stringArray0[1] = "o>Ep\"hJQ<(d][hP[^C'";
      stringArray0[2] = "$Qyy$Ay$A$A$A$A";
      stringArray0[3] = "lshl";
      stringArray0[4] = "bipush\t\t121";
      stringArray0[5] = "o>Ep\"hJQ<(d][hP[^C'";
      stringArray0[6] = "bipush\t\t121";
      stringArray0[7] = "bipush\t\t121";
      stringArray0[8] = "o>Ep\"hJQ<(d][hP[^C'";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("$Qyy$Ay$A$A$A$A", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[hP[^C'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      ConstantLong constantLong0 = new ConstantLong((-1L));
      assertEquals((-1L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I");
      assertNotNull(mockFileOutputStream0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(4, constantArray0.length);
      
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      ClassPath classPath1 = new ClassPath(classPath0, ":o06s2`O$5Cw:!e$%");
      assertFalse(classPath1.equals((Object)classPath0));
      assertNotNull(classPath1);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(4, constantArray0.length);
      
      String string0 = Utility.getSignature(" not found: ");
      assertEquals("Lnot;", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(4, constantPool1.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("goto_w\t\t#0", string1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      assertEquals(4, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      
      String string2 = Utility.replace(":o06s2`O$5Cw:!e$%", "Lnot;", ":o06s2`O$5Cw:!e$%");
      assertEquals(":o06s2`O$5Cw:!e$%", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$c8$A$A$A$A$A$A$A$A", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)26, (byte)11, (byte) (-86), (byte) (-72), (byte) (-85), (byte)66}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((-21832), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(6667, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(6667, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertArrayEquals(new byte[] {(byte)26, (byte)11, (byte) (-86), (byte) (-72), (byte) (-85), (byte)66}, byteArray0);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(6, byteArray0.length);
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2271, 181);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(2271, constantMethodHandle0.getReferenceKind());
      assertEquals(181, constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&9.g");
      assertEquals("(&9.g", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("(&9.g");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("(&9.g", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      constantArray0[6] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(10, constantArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(&9.g");
      assertFalse(boolean0);
      
      Constant constant0 = constantPool0.getConstant(7);
      assertEquals(10, constantPool0.getLength());
      assertNull(constant0);
      assertEquals(10, constantArray0.length);
      
      Constant constant1 = constantPool0.getConstant(7);
      assertEquals(10, constantPool0.getLength());
      assertNull(constant1);
      assertEquals(10, constantArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(&9.g");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertEquals(76, int0);
      assertEquals(6, byteArray0.length);
      
      int int1 = byteSequence0.readUnsignedByte();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertEquals(76, int1);
      assertTrue(int1 == int0);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(10, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(10, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertEquals("dastore", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals(10, constantArray0.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(constantPool1, constantPool0);
      
      Constant[] constantArray1 = new Constant[4];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      constantArray1[0] = (Constant) constantUtf8_1;
      constantArray1[1] = (Constant) constantUtf8_0;
      constantArray1[2] = null;
      constantArray1[3] = null;
      ConstantPool constantPool2 = new ConstantPool(constantArray1);
      assertEquals(4, constantPool2.getLength());
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(4, constantArray1.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(10, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertEquals("ladd", string1);
      assertFalse(constantArray0.equals((Object)constantArray1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(10, constantArray0.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(constantArray0, constantArray1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Utility.convertString("byte");
      assertEquals("byte", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-110);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)63;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-93), (int) (byte) (-45), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 37376. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Utility.fillup("N?'~}SRh", 0, true, '\"');
      assertEquals("N?'~}SRh", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("N?'~}SRh", false);
      assertEquals("N?'~}SRh", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong((-472L));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-472L), constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      MockFile mockFile0 = new MockFile("N?'~}SRh", "N?'~}SRh");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("i2b");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray0.length);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence1);
      assertEquals(4, byteSequence1.getIndex());
      assertEquals(0, constantMethodref0.getNameAndTypeIndex());
      assertEquals(0, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(constantMethodref0);
      assertEquals(6, byteArray0.length);
      
      String string2 = constantMethodref0.toString();
      assertEquals(4, byteSequence1.getIndex());
      assertEquals(0, constantMethodref0.getNameAndTypeIndex());
      assertEquals(0, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("CONSTANT_Methodref[10](class_index = 0, name_and_type_index = 0)", string2);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      ConstantMethodref constantMethodref1 = (ConstantMethodref)constantMethodref0.copy();
      assertEquals(4, byteSequence1.getIndex());
      assertEquals(0, constantMethodref0.getNameAndTypeIndex());
      assertEquals(0, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(0, constantMethodref1.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals(0, constantMethodref1.getClassIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertNotNull(constantMethodref1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(constantMethodref0, constantMethodref1);
      assertNotSame(constantMethodref1, constantMethodref0);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("nop", string3);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("nop", string4);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      byte[] byteArray1 = Utility.decode("", false);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "nop";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) constantMethodref1;
      objectArray0[5] = (Object) null;
      String string5 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"i2b\", null, \"nop\", null, \"CONSTANT_Methodref[10](class_index = 0, name_and_type_index = 0)\", null", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.getSignature(".j'");
      assertEquals("L/j';", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "O^,V'*Z#CW$g'>";
      String string1 = Utility.signatureToString("L/j';");
      assertEquals(".j'", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.replace("bVPwDl*)XDH", "uXgp$sLWyYy,bD", "L/j';");
      assertEquals("bVPwDl*)XDH", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte)0;
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2994), (int) (byte) (-94), false);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-19), (byte)22, (byte)38, (byte) (-81), (byte) (-37), (byte) (-94), (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    dload_0\n1:    <illegal opcode>\n2:    lload\t\t%38\n4:    dreturn\n5:    <illegal opcode>\n6:    if_icmpge\t\t#6\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(9, byteArray0.length);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-19), (byte)22, (byte)38, (byte) (-81), (byte) (-37), (byte) (-94), (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      
      String string4 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-19), (byte)22, (byte)38, (byte) (-81), (byte) (-37), (byte) (-94), (byte)0, (byte)0}, byteArray0);
      assertEquals("$s$ed$W$s$af$db$a2$A$A", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(9, byteArray0.length);
      
      String string5 = Utility.replace("uXgp$sLWyYy,bD", "zehXrwp1Wk", "address");
      assertEquals("uXgp$sLWyYy,bD", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('h');
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Utility.signatureToString("Fe~/Xn1ZtI", false);
      assertEquals("float", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-46);
      byteArray0[0] = (byte) (-103);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)51;
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-46), (byte)0, (byte)55, (byte)59, (byte)51}, byteArray0);
      assertEquals("$99$d2$A7$3b3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      
      short short0 = Utility.searchOpcode("if_acmpq");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-46), (byte)0, (byte)55, (byte)59, (byte)51}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-46), (byte)0, (byte)55, (byte)59, (byte)51}, byteArray0);
      assertEquals("ifeq\t\t#-11776", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      
      String string3 = Utility.classOrInterface((byte) (-103));
      assertEquals("interface", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-46), (byte)0, (byte)55, (byte)59, (byte)51}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-46), (byte)0, (byte)55, (byte)59, (byte)51}, byteArray0);
      assertEquals(55, int0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(5, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-46), (byte)0, (byte)55, (byte)59, (byte)51}, byteArray0);
      assertEquals("istore_0", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string4);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      byte[] byteArray1 = Utility.decode("s+8:,", false);
      assertArrayEquals(new byte[] {(byte)115, (byte)43, (byte)56, (byte)58, (byte)44}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("o6UnV");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("o6UnV", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-84), (byte)76, (byte)88, (byte)88, (byte)12}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(44108, constantMethodref0.getClassIndex());
      assertEquals(22616, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertArrayEquals(new byte[] {(byte) (-84), (byte)76, (byte)88, (byte)88, (byte)12}, byteArray0);
      assertNotNull(constantMethodref0);
      assertEquals(5, byteArray0.length);
      
      String string0 = constantMethodref0.toString();
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(44108, constantMethodref0.getClassIndex());
      assertEquals(22616, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertArrayEquals(new byte[] {(byte) (-84), (byte)76, (byte)88, (byte)88, (byte)12}, byteArray0);
      assertEquals("CONSTANT_Methodref[10](class_index = 44108, name_and_type_index = 22616)", string0);
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      
      ConstantMethodref constantMethodref1 = (ConstantMethodref)constantMethodref0.copy();
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(44108, constantMethodref0.getClassIndex());
      assertEquals(22616, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(22616, constantMethodref1.getNameAndTypeIndex());
      assertEquals(44108, constantMethodref1.getClassIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertArrayEquals(new byte[] {(byte) (-84), (byte)76, (byte)88, (byte)88, (byte)12}, byteArray0);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertNotNull(constantMethodref1);
      assertEquals(5, byteArray0.length);
      assertNotSame(constantMethodref0, constantMethodref1);
      assertNotSame(constantMethodref1, constantMethodref0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-84), (byte)76, (byte)88, (byte)88, (byte)12}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(5, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-84), (byte)76, (byte)88, (byte)88, (byte)12}, byteArray0);
      assertEquals("ireturn", string1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      int int0 = byteSequence1.readUnsignedByte();
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-84), (byte)76, (byte)88, (byte)88, (byte)12}, byteArray0);
      assertEquals(76, int0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(5, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-84), (byte)76, (byte)88, (byte)88, (byte)12}, byteArray0);
      assertEquals("fconst_1", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string2);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      byte[] byteArray1 = Utility.decode("goto_w", false);
      assertArrayEquals(new byte[] {(byte)103, (byte)111, (byte)116, (byte)111, (byte)95, (byte)119}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string0 = Utility.getSignature(".j'");
      assertEquals("L/j';", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L/j';";
      String string1 = Utility.methodTypeToSignature("double", stringArray0);
      assertEquals("(LL/j';;)D", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = Utility.replace("j[;.gi0Ied", "L/j';", "double");
      assertEquals("j[;.gi0Ied", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-81);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 130, 60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-72);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-72)}, byteArray0);
      assertEquals("$w$b8", string0);
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      
      short short0 = Utility.searchOpcode("(&x9/gM");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)42, (byte) (-72)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)42, (byte) (-72)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(2, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)42, (byte) (-72)}, byteArray0);
      assertEquals("aload_0", string1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string2 = Utility.accessToString((-495), false);
      assertEquals("public final interface abstract strictfp synthetic annotation enum", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("public final interface abstract strictfp synthetic annotation enum", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public final interface abstract strictfp synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("RjOw$ul", false);
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)79, (byte)119, (byte)40, (byte)108}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2549), 2655);
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)79, (byte)119, (byte)40, (byte)108}, byteArray0);
      assertEquals("0:    dastore\n1:    fmul\n2:    iastore\n3:    dneg\n4:    dload_2\n5:    idiv\n", string0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      
      short short0 = Utility.searchOpcode("Ac>\u0003CQV~m6g");
      assertEquals((short) (-1), short0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)79, (byte)119, (byte)40, (byte)108}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)79, (byte)119, (byte)40, (byte)108}, byteArray0);
      assertEquals((byte)82, byte0);
      assertEquals(6, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)79, (byte)119, (byte)40, (byte)108}, byteArray0);
      assertEquals("fmul", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)79, (byte)119, (byte)40, (byte)108}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray0.length);
      
      String string2 = Utility.getSignature("0:    dastore\n1:    fmul\n2:    iastore\n3:    dneg\n4:    dload_2\n5:    idiv\n");
      assertEquals("L0:;", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("eG*/~c,h", false);
      assertArrayEquals(new byte[] {(byte)101, (byte)71, (byte)42, (byte)47, (byte)126, (byte)99, (byte)44, (byte)104}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2549), 424);
      assertArrayEquals(new byte[] {(byte)101, (byte)71, (byte)42, (byte)47, (byte)126, (byte)99, (byte)44, (byte)104}, byteArray0);
      assertEquals("0:    lsub\n1:    dstore_0\n2:    aload_0\n3:    laload\n4:    iand\n5:    dadd\n6:    aload_2\n7:    imul\n", string0);
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      
      short short0 = Utility.searchOpcode("f(w1#qnUZV");
      assertEquals((short) (-1), short0);
      
      String string1 = "dreturn";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, " arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \" arg\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-3);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-3), (-880));
      assertEquals((-880), constantNameAndType0.getSignatureIndex());
      assertEquals((-3), constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2929, 4827);
      assertEquals(2929, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(4827, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(5629, constantMethodHandle0.getReferenceIndex());
      assertEquals(48, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantMethodHandle0);
      assertEquals(7, byteArray0.length);
      
      constantMethodHandle0.setReferenceIndex(2929);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(48, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(2929, constantMethodHandle0.getReferenceIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray1 = Utility.decode("impdep1", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)109, (byte)112, (byte)100, (byte)101, (byte)112, (byte)49}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = Utility.format(639, (-2828), false, 'p');
      assertEquals("639", string0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit(515, 88);
      assertEquals(16777731, int0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantPool0.getLength());
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(1, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("nop", string1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)109, (byte)112, (byte)100, (byte)101, (byte)112, (byte)49}, byteArray1);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = Utility.convertString("byte");
      assertEquals("byte", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-110);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)63;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-93), (int) (byte) (-45), true);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-110), (byte)0, (byte) (-93), (byte) (-45), (byte) (-2), (byte) (-61), (byte)63}, byteArray0);
      assertEquals("0:    ifnonnull\t\t#-28160\n3:    if_icmpgt\t\t#-11263\n6:    monitorexit\n7:    lstore_0\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature("byte", stringArray0);
      assertEquals("()B", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-110), (byte)0, (byte) (-93), (byte) (-45), (byte) (-2), (byte) (-61), (byte)63}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-110), (byte)0, (byte) (-93), (byte) (-45), (byte) (-2), (byte) (-61), (byte)63}, byteArray0);
      assertEquals("ifnonnull\t\t#-28160", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(8, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = Utility.signatureToString("Fe~/Xn1ZtI", false);
      assertEquals("float", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-46);
      byteArray0[0] = (byte) (-103);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)51;
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-46), (byte)0, (byte)55, (byte)59, (byte)51}, byteArray0);
      assertEquals("$99$d2$A7$3b3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      
      short short0 = Utility.searchOpcode("if_acmpq");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-46), (byte)0, (byte)55, (byte)59, (byte)51}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-46), (byte)0, (byte)55, (byte)59, (byte)51}, byteArray0);
      assertEquals("ifeq\t\t#-11776", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      
      String string3 = Utility.classOrInterface((byte) (-103));
      assertEquals("interface", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      try { 
        Utility.decode("$99$d2$A7$3b3", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)21;
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)17, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      short short0 = Utility.searchOpcode("if_icmpgt");
      assertEquals((short)163, short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)17, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)17, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("sipush\t\t5376", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      
      String string2 = Utility.accessToString(2397, true);
      assertEquals("public protected static final volatile native strictfp", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("sipush\t\t5376", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `sipush\t\t5376'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong(42);
      assertEquals(42L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantClass constantClass0 = new ConstantClass(1367);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(1367, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(1367);
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(1367, constantClass1.getNameIndex());
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-104);
      String string0 = Utility.classOrInterface(367);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString(":");
      assertEquals(":", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte) (-55);
      byteArray1[2] = (byte) (-104);
      byteArray1[3] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)85, (byte) (-55), (byte) (-104), (byte)31}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray1.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)85, (byte) (-55), (byte) (-104), (byte)31}, byteArray1);
      assertEquals("castore", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string2);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Utility.fillup("N?'~}SRh", 0, true, '\"');
      assertEquals("N?'~}SRh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      String string1 = Utility.compactClassName("N?'~}SRh", false);
      assertEquals("N?'~}SRh", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-115), (byte)58}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(581, (byte)58);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(581, constantInvokeDynamic0.getClassIndex());
      assertEquals(58, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(581, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(581, constantInvokeDynamic0.getClassIndex());
      assertEquals(58, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(581, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(58, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(581, constantInvokeDynamic1.getClassIndex());
      assertEquals(581, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      
      ConstantInvokeDynamic constantInvokeDynamic2 = (ConstantInvokeDynamic)constantInvokeDynamic0.copy();
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(581, constantInvokeDynamic0.getClassIndex());
      assertEquals(58, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(581, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(58, constantInvokeDynamic2.getNameAndTypeIndex());
      assertEquals(581, constantInvokeDynamic2.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic2.getTag());
      assertEquals(581, constantInvokeDynamic2.getBootstrapMethodAttrIndex());
      assertTrue(constantInvokeDynamic0.equals((Object)constantInvokeDynamic1));
      assertTrue(constantInvokeDynamic2.equals((Object)constantInvokeDynamic1));
      assertTrue(constantInvokeDynamic2.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic2);
      assertNotSame(constantInvokeDynamic0, constantInvokeDynamic2);
      assertNotSame(constantInvokeDynamic0, constantInvokeDynamic1);
      assertNotSame(constantInvokeDynamic2, constantInvokeDynamic0);
      assertNotSame(constantInvokeDynamic2, constantInvokeDynamic1);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(36154, constantMethodref0.getNameAndTypeIndex());
      assertEquals(0, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-115), (byte)58}, byteArray0);
      assertNotNull(constantMethodref0);
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("N?'~}SRh", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N?'~}SRh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Utility.fillup("N?'~}SRh", 0, true, '\"');
      assertEquals("N?'~}SRh", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[1];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertEquals(1L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      String string1 = "kn0-8eYXn6O1t,6\\B";
      MockFile mockFile0 = new MockFile("N?'~}SRh", "kn0-8eYXn6O1t,6B");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("dadd");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      short short0 = Utility.searchOpcode("dadd");
      assertEquals((short)99, short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)86, (byte) (-62), (byte) (-88)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)86, (byte) (-62), (byte) (-88)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)86, (byte) (-62), (byte) (-88)}, byteArray0);
      assertEquals("sastore", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, constantArray0.length);
      assertEquals(3, byteArray0.length);
      
      String string3 = Utility.classOrInterface((byte) (-88));
      assertEquals("interface", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("o6UnV");
      assertEquals("o6UnV", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[3] = (Constant) constantUtf8_0;
      String string0 = Utility.compactClassName("\tdefault = ", false);
      assertEquals("\tdefault = ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong((-472L));
      assertEquals((-472L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      MockFile mockFile0 = new MockFile("\tdefault = ", "o6UnV");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("FTtsn|@N/f");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-88);
      short short0 = Utility.searchOpcode("\tdefault = ");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-88), (byte) (-62), (byte) (-62), (byte) (-62), (byte) (-88), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$91$a8$c2$c2$c2$a8$A$A$A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-88), (byte) (-62), (byte) (-62), (byte) (-62), (byte) (-88), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-88), (byte) (-62), (byte) (-62), (byte) (-62), (byte) (-88), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(9, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-88), (byte) (-62), (byte) (-62), (byte) (-62), (byte) (-88), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(145, int0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(9, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-88), (byte) (-62), (byte) (-62), (byte) (-62), (byte) (-88), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("jsr\t\t#-15677", string2);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string3 = Utility.getSignature("(Unknown attribute ");
      assertEquals("L(Unknown;", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&x9.gM");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("(&x9.gM", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("(&x9.gM");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("(&x9.gM", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(9, constantArray0.length);
      
      ConstantLong constantLong0 = new ConstantLong((-724L));
      assertEquals((-724L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(&x9.gM");
      assertNotNull(mockFileOutputStream0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(9, constantArray0.length);
      
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      ClassPath classPath1 = new ClassPath(classPath0, " not found: ");
      assertFalse(classPath1.equals((Object)classPath0));
      assertNotNull(classPath1);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(9, constantArray0.length);
      
      String string0 = Utility.getSignature("(&x9.gM");
      assertEquals("L(&x9/gM;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-69)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(1, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool2, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&x9.gM");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("(&x9.gM", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      byte byte0 = (byte)47;
      MockFile mockFile0 = new MockFile("(&x9.gM");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-77), (byte)47, (byte) (-77), (byte)127, (byte)127, (byte)127, (byte)127}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-77), (byte)47, (byte) (-77), (byte)127, (byte)127, (byte)127, (byte)127}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(7, byteArray0.length);
      
      int int0 = byteSequence1.read();
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-77), (byte)47, (byte) (-77), (byte)127, (byte)127, (byte)127, (byte)127}, byteArray0);
      assertEquals(179, int0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(7, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      ConstantPool constantPool0 = null;
      byteSequence0.mark((byte)127);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-77), (byte)47, (byte) (-77), (byte)127, (byte)127, (byte)127, (byte)127}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(7, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-71), 1477);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(1477, constantFieldref0.getNameAndTypeIndex());
      assertEquals((-71), constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(4, constantArray0.length);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-71), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$b9$b9$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-71), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-71), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(185, int0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_InterfaceMethodref' at index 0 and got CONSTANT_Fieldref[9](class_index = -71, name_and_type_index = 1477)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertEquals(0.0, constantDouble1.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)100, (byte)7, (byte)46, (byte) (-113), (byte) (-33), (byte)7, (byte)76, (byte)46}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(19556, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(1838, constantFieldref0.getNameAndTypeIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)100, (byte)7, (byte)46, (byte) (-113), (byte) (-33), (byte)7, (byte)76, (byte)46}, byteArray0);
      assertNotNull(constantFieldref0);
      assertEquals(9, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, (int) (byte)46, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)58;
      Constant[] constantArray0 = new Constant[22];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)0, (byte)0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-127), 1);
      assertEquals(1, constantFieldref0.getNameAndTypeIndex());
      assertEquals((-127), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      
      short short0 = Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(22, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(22, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(22, constantPool0.getLength());
      assertEquals(22, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(22, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(22, constantPool0.getLength());
      assertEquals(22, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertEquals("lor", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      assertEquals(22, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string2 = Utility.classOrInterface(124);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray1 = Utility.decode("8$(g}uS9jekN&\"3=b%M", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(18, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(18, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)34;
      int int0 = (-1591);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-728), (-1591));
      assertEquals("0:    fstore_1\n1:    fload_0\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n", string0);
      assertNotNull(string0);
      assertEquals(19, byteArray0.length);
      
      int int1 = Utility.clearBit(194, (-735));
      assertEquals(192, int1);
      assertFalse(int1 == int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(19, byteArray0.length);
      
      int int2 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(68, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(19, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("fload_0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(19, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("fload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((byte)7);
      assertEquals(7.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)7, (byte)100, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(0, constantFieldref0.getNameAndTypeIndex());
      assertEquals(1892, constantFieldref0.getClassIndex());
      assertArrayEquals(new byte[] {(byte)7, (byte)100, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantFieldref0);
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)100, (int) (byte)100, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Constant[] constantArray0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byte byte0 = (byte) (-30);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 244, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(48, int0);
      assertEquals(7, byteArray0.length);
      
      byteSequence0.mark((byte)48);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(7, byteArray0.length);
      
      byte byte0 = byteSequence1.readByte();
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)48, byte0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(7, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("iload\t\t%253", string0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string1 = Utility.classOrInterface((byte)48);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, 1019);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte)14, (byte)84, (byte) (-87), (byte)84, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte)14, (byte)84, (byte) (-87), (byte)84, (byte)0, (byte)0}, byteArray0);
      assertEquals(169, int0);
      assertEquals(8, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte)14, (byte)84, (byte) (-87), (byte)84, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte) (-87), byte0);
      assertEquals(8, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte)14, (byte)84, (byte) (-87), (byte)84, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(8, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte)14, (byte)84, (byte) (-87), (byte)84, (byte)0, (byte)0}, byteArray0);
      assertEquals("ret\t\t%169", string0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string1 = Utility.classOrInterface((byte) (-87));
      assertEquals("interface", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1617), 44);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte)14, (byte)84, (byte) (-87), (byte)84, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    ret\t\t%169\n2:    dconst_0\n3:    bastore\n4:    ret\t\t%84\n6:    nop\n7:    nop\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)118;
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)118);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("o6UnV");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("o6UnV", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[3] = (Constant) constantUtf8_0;
      String string0 = Utility.compactClassName("\tdefault = ", false);
      assertEquals("\tdefault = ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong((-472L));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-472L), constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      MockFile mockFile0 = new MockFile("\tdefault = ", "o6UnV");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("FTtsn|@N/f");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(4, 47);
      assertEquals(4, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(47, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(4, constantInvokeDynamic0.getClassIndex());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals(4, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(47, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(4, constantInvokeDynamic0.getClassIndex());
      assertEquals(4, constantInvokeDynamic1.getClassIndex());
      assertEquals(47, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(4, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      
      ConstantInvokeDynamic constantInvokeDynamic2 = (ConstantInvokeDynamic)constantInvokeDynamic0.copy();
      assertEquals(4, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(47, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(4, constantInvokeDynamic0.getClassIndex());
      assertEquals(4, constantInvokeDynamic2.getBootstrapMethodAttrIndex());
      assertEquals(4, constantInvokeDynamic2.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic2.getTag());
      assertEquals(47, constantInvokeDynamic2.getNameAndTypeIndex());
      assertTrue(constantInvokeDynamic0.equals((Object)constantInvokeDynamic1));
      assertTrue(constantInvokeDynamic2.equals((Object)constantInvokeDynamic1));
      assertTrue(constantInvokeDynamic2.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic2);
      assertNotSame(constantInvokeDynamic0, constantInvokeDynamic1);
      assertNotSame(constantInvokeDynamic0, constantInvokeDynamic2);
      assertNotSame(constantInvokeDynamic2, constantInvokeDynamic1);
      assertNotSame(constantInvokeDynamic2, constantInvokeDynamic0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(22616, constantMethodref0.getNameAndTypeIndex());
      assertEquals(22616, constantMethodref0.getClassIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88}, byteArray0);
      assertNotNull(constantMethodref0);
      assertEquals(7, byteArray0.length);
      
      ConstantMethodref constantMethodref1 = (ConstantMethodref)constantMethodref0.copy();
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(22616, constantMethodref0.getNameAndTypeIndex());
      assertEquals(22616, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals(22616, constantMethodref1.getClassIndex());
      assertEquals(22616, constantMethodref1.getNameAndTypeIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88}, byteArray0);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertNotNull(constantMethodref1);
      assertEquals(7, byteArray0.length);
      assertNotSame(constantMethodref0, constantMethodref1);
      assertNotSame(constantMethodref1, constantMethodref0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(5, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88}, byteArray0);
      assertEquals("pop2", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[4] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(16, int0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("lshl", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.classOrInterface((byte) (-111));
      assertEquals("interface", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.getSignature("lshl");
      assertEquals("Llshl;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = Utility.setBit(5530, (byte)121);
      assertEquals(33559962, int1);
      assertFalse(int1 == int0);
      
      String string3 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte)121, (byte)0, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("10 79 79 00 79 00 00 00 00", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)4;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)4, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0$V$fd$E$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.format((-368), 687, false, 'n');
      assertEquals("nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn-368", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantLong constantLong0 = new ConstantLong((-1262L));
      assertEquals((-1262L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      String string2 = constantPool0.toString();
      assertEquals(2, constantPool0.getLength());
      assertEquals("1)CONSTANT_Long[5](bytes = -1262)\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, constantArray0.length);
      
      String string3 = constantPool0.toString();
      assertEquals(2, constantPool0.getLength());
      assertEquals("1)CONSTANT_Long[5](bytes = -1262)\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(2, constantArray0.length);
      
      String string4 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)4, (int) (byte)48, false);
      assertEquals(2, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)4, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("5:    nop\n6:    nop\n", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(7, byteArray0.length);
      assertEquals(2, constantArray0.length);
      
      try { 
        Utility.methodSignatureArgumentTypes("if_icmple");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmple
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)51, (byte) (-103), (byte)48, (byte) (-86), (byte)4}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("lstore_0");
      assertEquals("lstore_0", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)51, (byte) (-103), (byte)48, (byte) (-86), (byte)4}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)51, (byte) (-103), (byte)48, (byte) (-86), (byte)4}, byteArray0);
      assertEquals("baload", string0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string1 = Utility.accessToString(214);
      assertEquals("private protected final volatile transient", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.printArray((Object[]) null, false, false);
      assertNull(string2);
      
      String string3 = Utility.compactClassName("lstore_0", false);
      assertEquals("lstore_0", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string0 = Utility.getSignature(".8jS'");
      assertEquals("L/8jS';", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L/8jS';";
      String string1 = Utility.methodSignatureReturnType("L/8jS';", true);
      assertEquals(".8jS'", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte byte0 = (byte)118;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (int) (byte)38);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("o6UnV");
      assertEquals("o6UnV", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[3] = (Constant) constantUtf8_0;
      String string0 = Utility.compactClassName("\tdefault = ", false);
      assertEquals("\tdefault = ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o6UnV");
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong((-472L));
      assertEquals((-472L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      MockFile mockFile0 = new MockFile("\tdefault = ", "o6UnV");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("FTtsn|@N/f");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-88);
      short short0 = Utility.searchOpcode("\tdefault = ");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-88), (byte) (-62), (byte) (-62), (byte) (-62), (byte) (-88), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-5686), (-5686));
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-88), (byte) (-62), (byte) (-62), (byte) (-62), (byte) (-88), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    i2b\n1:    jsr\t\t#-15677\n4:    monitorenter\n5:    jsr\t\t#5\n8:    nop\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = Utility.replace("(3Z&x9/gM", "(3Z&x9/gM", "(3Z&x9/gM");
      assertEquals("(3Z&x9/gM", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-73);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(377, (byte) (-73));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-73), constantFieldref0.getNameAndTypeIndex());
      assertEquals(377, constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte) (-122));
      assertEquals((-122L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" not found: ");
      assertNotNull(mockFileOutputStream0);
      
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      ClassPath classPath1 = new ClassPath(classPath0, "(3Z&x9/gM");
      assertFalse(classPath1.equals((Object)classPath0));
      assertNotNull(classPath1);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      
      String string1 = Utility.getSignature("Ly;V");
      assertEquals("LLy;V;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(15, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("invokespecial\t-122 (0)", string2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(15, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      
      String string3 = Utility.replace("wZ", "wZ", "CONSTANT_MethodType");
      assertEquals("CONSTANT_MethodType", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Utility.compactClassName("(&x9/gM");
      assertEquals("(&x9.gM", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.replace("(&x9/gM", "(&x9.gM", "(&x9/gM");
      assertEquals("(&x9/gM", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-122), (byte) (-122));
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-122), constantNameAndType0.getNameIndex());
      assertEquals((-122), constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      String string2 = Utility.compactClassName("if_acmpne", false);
      assertEquals("if_acmpne", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertEquals(0L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      MockFile mockFile0 = new MockFile("(&x9/gM");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("(&x9/gM");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-122));
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    i2f\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(6, byteArray0.length);
      
      String string4 = "i2s";
      // Undeclared exception!
      Utility.replace("Ds.Qlb", "", "i2s");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string0 = Utility.getSignature(".8jS'");
      assertEquals("L/8jS';", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L/8jS';";
      String string1 = Utility.methodTypeToSignature(".8jS'", stringArray0);
      assertEquals("(LL/8jS';;)L/8jS';", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = Utility.replace("j[;.gi0Ied", "L/8jS';", ".8jS'");
      assertEquals("j[;.gi0Ied", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      MockFile mockFile0 = new MockFile("static syn");
      assertNotNull(mockFile0);
      
      short short0 = Utility.searchOpcode("L/8jS';");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(1, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertEquals("dload_0", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(1, byteArray0.length);
      
      String string4 = Utility.classOrInterface((short) (-1));
      assertEquals("interface", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = Utility.classOrInterface((-1));
      assertEquals("interface", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = Utility.compactClassName("static syn");
      assertEquals("static syn", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray1.length);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("|nY@;");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("|nY@;", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("|nY@;");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("|nY@;", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals("f2i", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertEquals(9, byteArray1.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteArray1, byteArray0);
      
      String string1 = Utility.accessToString(9);
      assertEquals("public static", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.printArray((Object[]) null, false, false);
      assertNull(string2);
      
      String string3 = Utility.compactClassName("public static", true);
      assertEquals("public static", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      assertTrue(boolean0);
      
      int int0 = (-592);
      boolean boolean1 = Utility.isSet((-592), (-961));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = "goto_w";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("static", "static", "goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong(42);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(42L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      ConstantClass constantClass0 = new ConstantClass(1367);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(1367, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(1367, constantClass0.getNameIndex());
      assertEquals(1367, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte)59;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte) (-104);
      byteArray1[4] = (byte) (-56);
      byteArray1[5] = (byte)31;
      byteArray1[6] = (byte)31;
      byteArray1[7] = (byte) (-104);
      byteArray1[8] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)31, 680);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&x9.gM");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("(&x9.gM", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("(&x9.gM");
      assertEquals("(&x9.gM", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      constantArray0[6] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(10, constantArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(&x9.gM");
      assertFalse(boolean0);
      
      Constant constant0 = constantPool0.getConstant(7);
      assertEquals(10, constantPool0.getLength());
      assertNull(constant0);
      assertEquals(10, constantArray0.length);
      
      Constant constant1 = constantPool0.getConstant(7);
      assertEquals(10, constantPool0.getLength());
      assertNull(constant1);
      assertEquals(10, constantArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(&x9.gM");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertEquals(76, int0);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)97, 1739);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-77);
      MockFile mockFile0 = new MockFile("BootstrapMethod(");
      assertNotNull(mockFile0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)0, (byte)0}, byteArray0);
      assertEquals(111, int0);
      assertEquals(6, byteArray0.length);
      
      int int1 = byteSequence0.readUnsignedByte();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)0, (byte)0}, byteArray0);
      assertEquals(127, int1);
      assertFalse(int1 == int0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)0, (byte)0}, byteArray0);
      assertEquals("laload", string0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      
      byte byte0 = Utility.typeOfSignature("BootstrapMethod(");
      assertEquals((byte)8, byte0);
      
      String string1 = Utility.classOrInterface((byte)111);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.convertString("BootstrapMethod(");
      assertEquals("BootstrapMethod(", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)0, (byte)0}, byteArray0);
      assertEquals("ddiv", string3);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("igsHyG");
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) byteSequence1;
      objectArray0[2] = (Object) (byte) (-77);
      objectArray0[3] = (Object) "class";
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "arraylength", objectArray0);
      assertNotNull(printStream0);
      assertEquals(4, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      
      Utility.printArray(printStream0, objectArray0);
      assertEquals(4, objectArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Utility.signatureToString("Fe~/Xn1ZtI", true);
      assertEquals("float", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)51;
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-46), (byte) (-103), (byte)55, (byte)59, (byte)51}, byteArray0);
      assertEquals("$90$d2$997$3b3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      
      short short0 = Utility.searchOpcode("if_acmpeq");
      assertEquals((short)165, short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-46), (byte) (-103), (byte)55, (byte)59, (byte)51}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-46), (byte) (-103), (byte)55, (byte)59, (byte)51}, byteArray0);
      assertEquals("d2f", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      
      String string3 = Utility.classOrInterface((byte) (-103));
      assertEquals("interface", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      try { 
        Utility.decode("$90$d2$997$3b3", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&x9.gM");
      assertEquals("(&x9.gM", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("(&x9.gM");
      assertEquals("(&x9.gM", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      constantArray0[6] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(10, constantArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(&x9.gM");
      assertFalse(boolean0);
      
      Constant constant0 = constantPool0.getConstant(7);
      assertEquals(10, constantPool0.getLength());
      assertNull(constant0);
      assertEquals(10, constantArray0.length);
      
      Constant constant1 = constantPool0.getConstant(7);
      assertEquals(10, constantPool0.getLength());
      assertNull(constant1);
      assertEquals(10, constantArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(&x9.gM");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertEquals(76, int0);
      assertEquals(6, byteArray0.length);
      
      int int1 = byteSequence0.readUnsignedByte();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertEquals(76, int1);
      assertTrue(int1 == int0);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(10, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(10, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertEquals("dastore", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals(10, constantArray0.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(constantPool1, constantPool0);
      
      try { 
        Utility.typeOfMethodSignature("%>UKtB\"pDQX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %>UKtB\"pDQX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-125);
      byteArray0[4] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)108, (byte) (-125), (byte)0, (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)108, (byte) (-125), (byte)0, (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(16, int0);
      assertEquals(9, byteArray0.length);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)108, (byte) (-125), (byte)0, (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)108, byte0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)108, (byte) (-125), (byte)0, (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("lxor", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.classOrInterface((byte) (-111));
      assertEquals("interface", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte)108);
      assertArrayEquals(new byte[] {(byte)16, (byte)108, (byte) (-125), (byte)0, (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    bipush\t\t108\n2:    lxor\n3:    nop\n4:    monitorenter\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      MockFile mockFile0 = new MockFile("multianewarray", "multianewarray");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("9@9");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)0}, byteArray0);
      assertEquals(70, int0);
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte)70, (byte)0}, byteArray0);
      assertEquals("fstore_3", string0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      
      short short0 = Utility.searchOpcode("<`HlGgN[`<8;Q?P[");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&x9.gM");
      assertEquals("(&x9.gM", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("(&x9.gM");
      assertEquals("(&x9.gM", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      constantArray0[6] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(10, constantArray0.length);
      
      Constant constant0 = constantPool0.getConstant(7);
      assertEquals(10, constantPool0.getLength());
      assertNull(constant0);
      assertEquals(10, constantArray0.length);
      
      Constant constant1 = constantPool0.getConstant(7);
      assertEquals(10, constantPool0.getLength());
      assertNull(constant1);
      assertEquals(10, constantArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(&x9.gM");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertEquals(76, int0);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(10, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(10, constantPool1.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)82, (byte)97, (byte)76, (byte)76}, byteArray0);
      assertEquals("astore_1", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals(10, constantArray0.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(constantPool1, constantPool0);
      
      try { 
        Utility.typeOfMethodSignature("%>UKtB\"pDQX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %>UKtB\"pDQX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "IoQQx$";
      byte[] byteArray0 = Utility.decode("IoQQx$", false);
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string1 = Utility.replace("IoQQx$", "IoQQx$", "w8rryFWf");
      assertEquals("w8rryFWf", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.methodSignatureReturnType("D-D_y 6c#mLw", true);
      assertEquals("double", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte byte0 = (byte)0;
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-37), (int) (byte)118);
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertEquals("0:    dstore_2\n1:    ddiv\n2:    fastore\n3:    fastore\n4:    ishl\n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(5, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertEquals("dstore_2", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(5, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-77);
      MockFile mockFile0 = new MockFile("BootstrapMethod(");
      assertNotNull(mockFile0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)0, (byte)0}, byteArray0);
      assertEquals(111, int0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)0, (byte)0}, byteArray0);
      assertEquals("land", string0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      
      byte byte0 = Utility.typeOfSignature("BootstrapMethod(");
      assertEquals((byte)8, byte0);
      
      String string1 = Utility.classOrInterface((byte)111);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.convertString("BootstrapMethod(");
      assertEquals("BootstrapMethod(", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)0, (byte)0}, byteArray0);
      assertEquals("ddiv", string3);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)103;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertEquals(0L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      MockFile mockFile0 = new MockFile("impdep1", "impdep1");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("impdep1");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      long long0 = byteSequence0.skip((-1364L));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(39, int0);
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("dload_1", string0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      short short0 = Utility.searchOpcode("1*JQ");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte) (-125), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte) (-125), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(39, int0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)39, (byte)103, (byte) (-125), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("dsub", string0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("dsub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dsub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("IoQQx$", false);
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.replace("IoQQx$", "IoQQx$", "w8rryFWf");
      assertEquals("w8rryFWf", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureReturnType("D-D_y 6c#mLw", true);
      assertEquals("double", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-37), (int) (byte)118);
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertEquals("0:    dstore_2\n1:    ddiv\n2:    fastore\n3:    fastore\n4:    ishl\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(5, byteArray0.length);
      
      int int0 = Utility.clearBit((byte) (-37), (byte)0);
      assertEquals((-38), int0);
      
      String string3 = Utility.accessToString(179, true);
      assertEquals("public private final transient", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Utility.convertString("w8rryFWf");
      assertEquals("w8rryFWf", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = Utility.compactClassName("=xEOO>}\"Ufzt[", "EN%z$5#/61KW`_mo=_", true);
      assertEquals("=xEOO>}\"Ufzt[", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = Utility.convertString("void");
      assertEquals("void", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)55, (byte)34}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("void");
      assertEquals("void", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("void");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("void", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)55, (byte)34}, byteArray0);
      assertEquals("7$o", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      
      String string2 = Utility.format(170, (-1751), true, '[');
      assertEquals("170", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ConstantLong constantLong0 = new ConstantLong(1148L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1148L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      String string3 = constantPool0.toString();
      assertEquals(3, constantPool0.getLength());
      assertEquals("1)null\n2)null\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(3, constantArray0.length);
      
      String string4 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)55, (byte)34}, byteArray0);
      assertEquals("lstore\t\t%34", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(2, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      String string5 = Utility.classOrInterface(170);
      assertEquals("class", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = Utility.compactClassName("170", true);
      assertEquals("170", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-77);
      byte byte0 = (byte)14;
      byteArray0[4] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)14, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)14, (byte)0}, byteArray0);
      assertEquals(111, int0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)14, (byte)0}, byteArray0);
      assertEquals("land", string0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("land");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: land
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-19);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V");
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), 893);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte) (-19)}, byteArray0);
      assertEquals("0:    iaload\n1:    iaload\n2:    <illegal opcode>\n", string0);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte) (-19)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte) (-19)}, byteArray0);
      assertEquals("iaload", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte) (-19)}, byteArray0);
      assertEquals("iaload", string2);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, byteArray0.length);
      assertNotSame(constantPool1, constantPool0);
      
      String string3 = Utility.accessToString(40);
      assertEquals("static synchronized", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Utility.printArray((Object[]) null, false, false);
      assertNull(string4);
      
      String string5 = Utility.compactClassName("", true);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)20}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(1, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureArgumentTypes("(Z2C=[_UE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2C=[_UE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("IoQQx$", false);
      assertArrayEquals(new byte[] {(byte)73, (byte)111, (byte)81, (byte)81, (byte)120}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.replace("IoQQx$", "IoQQx$", "w8rryFWf");
      assertEquals("w8rryFWf", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureReturnType("D-D_y 6c#mLw", true);
      assertEquals("double", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("w8rryFWf");
      assertEquals("w8rryFWf", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
      
      String string3 = Utility.getSignature("? super ");
      assertEquals("L?;", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Utility.classOrInterface(1612);
      assertEquals("interface", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)21;
      byte byte0 = (byte) (-3);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)51;
      byte byte1 = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)4, (byte)51, (byte) (-86), (byte) (-103)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte)21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Utility.convertString("void");
      assertEquals("void", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)55, (byte)34}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("void");
      assertEquals("void", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("void");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("void", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)55, (byte)34}, byteArray0);
      assertEquals("7$o", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      
      String string2 = Utility.format(170, (-1751), true, '[');
      assertEquals("170", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ConstantLong constantLong0 = new ConstantLong(1148L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1148L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      String string3 = constantPool0.toString();
      assertEquals(3, constantPool0.getLength());
      assertEquals("1)null\n2)null\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 193, 170, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string0 = Utility.getSignature(".8jS'");
      assertEquals("L/8jS';", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L/8jS';";
      String string1 = Utility.methodTypeToSignature("double", stringArray0);
      assertEquals("(LL/8jS';;)D", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = Utility.replace("j[;.gi0Ied", "L/8jS';", "double");
      assertEquals("j[;.gi0Ied", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 168, 60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)14, (byte) (-1)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)111, (byte)127, (byte)47, (byte) (-77), (byte)14, (byte) (-1)}, byteArray0);
      assertEquals("ddiv", string0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.printArray((Object[]) constantArray0, true, true);
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Utility.replace("(3Z&x9/gM", "(3Z&x9/gM", "(3Z&x9/gM");
      assertEquals("(3Z&x9/gM", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-73);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(377, (byte) (-73));
      assertEquals(377, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-73), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte) (-122));
      assertEquals((-122L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      ClassPath classPath1 = new ClassPath(classPath0, "(3Z&x9/gM");
      assertFalse(classPath1.equals((Object)classPath0));
      assertNotNull(classPath1);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      assertFalse(classPath0.equals((Object)classPath1));
      assertFalse(classPath1.equals((Object)classPath0));
      assertNotNull(classPathRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isAbstract());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isEnum());
      assertFalse(classPath0.equals((Object)classPath1));
      assertFalse(classPath1.equals((Object)classPath0));
      assertNotNull(javaClass0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotSame(classPath0, classPath1);
      assertNotSame(classPath1, classPath0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isAbstract());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isEnum());
      assertFalse(classPath0.equals((Object)classPath1));
      assertFalse(classPath1.equals((Object)classPath0));
      assertNotNull(descendingVisitor0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      boolean boolean0 = true;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, (int) (byte)3, true);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(21, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)12, 36);
      assertEquals(12, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(12, constantInvokeDynamic0.getClassIndex());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals(12, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(12, constantInvokeDynamic0.getClassIndex());
      assertEquals(12, constantInvokeDynamic1.getClassIndex());
      assertEquals(36, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(12, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      
      ConstantInvokeDynamic constantInvokeDynamic2 = (ConstantInvokeDynamic)constantInvokeDynamic1.copy();
      assertEquals(12, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(12, constantInvokeDynamic0.getClassIndex());
      assertEquals(12, constantInvokeDynamic1.getClassIndex());
      assertEquals(36, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(12, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic2.getTag());
      assertEquals(12, constantInvokeDynamic2.getClassIndex());
      assertEquals(12, constantInvokeDynamic2.getBootstrapMethodAttrIndex());
      assertEquals(36, constantInvokeDynamic2.getNameAndTypeIndex());
      assertTrue(constantInvokeDynamic0.equals((Object)constantInvokeDynamic1));
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertTrue(constantInvokeDynamic2.equals((Object)constantInvokeDynamic0));
      assertTrue(constantInvokeDynamic2.equals((Object)constantInvokeDynamic1));
      assertNotNull(constantInvokeDynamic2);
      assertNotSame(constantInvokeDynamic0, constantInvokeDynamic1);
      assertNotSame(constantInvokeDynamic0, constantInvokeDynamic2);
      assertNotSame(constantInvokeDynamic1, constantInvokeDynamic0);
      assertNotSame(constantInvokeDynamic1, constantInvokeDynamic2);
      assertNotSame(constantInvokeDynamic2, constantInvokeDynamic0);
      assertNotSame(constantInvokeDynamic2, constantInvokeDynamic1);
      
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-115), (byte)58);
      assertEquals((-115), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(58, constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      constantArray0[2] = (Constant) constantMethodref0;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$a3$86$M$e1$8da$3a$acX$A$A$A$A$A$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(21, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$A$A$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      ConstantLong constantLong0 = new ConstantLong((byte) (-20));
      assertEquals((-20L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      constantLong0.setBytes((byte)0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong0.getBytes());
      
      ConstantString constantString0 = new ConstantString((byte)0);
      assertEquals(0, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertNotNull(constantString0);
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertEquals(0, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(0, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertTrue(constantString1.equals((Object)constantString0));
      assertNotNull(constantString1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("nop", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      
      String string2 = Utility.classOrInterface((byte)0);
      assertEquals("class", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Code code0 = null;
      try {
        code0 = new Code(232, (-1221), byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.ConstantDouble");
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("org.apache.bcel.classfile.ConstantDouble");
      assertNotNull(mockFile0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-114);
      byteArray1[1] = (byte) (-114);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-114)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(2, byteArray1.length);
      
      int int0 = byteSequence1.read();
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-114)}, byteArray1);
      assertEquals(142, int0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-114)}, byteArray1);
      assertEquals("d2i", string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
      
      String string1 = Utility.classOrInterface(197);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string0 = Utility.getSignature(".8jS'");
      assertEquals("L/8jS';", string0);
      assertNotNull(string0);
      
      byte byte0 = (byte) (-81);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L/8jS';";
      String string1 = Utility.methodTypeToSignature("double", stringArray0);
      assertEquals("(LL/8jS';;)D", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = "j[;.gi0Ied";
      String string3 = Utility.replace("j[;.gi0Ied", "L/8jS';", "double");
      assertEquals("j[;.gi0Ied", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-81);
      byte byte1 = (byte)18;
      byteArray0[4] = (byte)18;
      byte byte2 = (byte) (-94);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte) (-81);
      int int0 = 60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 168, 60, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)25;
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte) (-81);
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte) (-108);
      byteArray1[6] = (byte)38;
      byteArray1[7] = (byte) (-81);
      byteArray1[8] = (byte) (-19);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 145, (int) (byte) (-108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.fillup("N?'~}Sh", 0, true, '\u001B');
      assertEquals("N?'~}Sh", string0);
      assertNotNull(string0);
      
      byte byte0 = (byte) (-62);
      MockFile mockFile0 = new MockFile("48_vbeR+R9fl^>Kn");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[5];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "N?'~}Sh";
      stringArray0[1] = "[kga1c4*ZGn5x^";
      stringArray0[2] = "N?'~}Sh";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("48_vbeR+R9fl^>Kn", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [kga1c4*ZGn5x^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)76;
      String string0 = "short";
      String string1 = Utility.compactClassName("short", "short", false);
      assertEquals("short", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte)116;
      byteArray1[3] = (byte) (-80);
      byteArray1[4] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)116, (byte) (-80), (byte)116, (byte) (-80), (byte)116}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray1.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)116, (byte) (-78), (byte)76, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(9, byteArray0.length);
      
      int int0 = byteSequence1.read();
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)116, (byte) (-78), (byte)76, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(176, int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string2 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)116, (byte) (-78), (byte)76, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("ineg", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string2);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence1, byteSequence0);
      
      try { 
        Utility.typeOfSignature("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)118;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)118);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte)14, (byte)84, (byte) (-1), (byte)84, (byte) (-37), (byte)118, (byte)0}, byteArray0);
      assertEquals("0:    ret\t\t%169\n2:    dconst_0\n3:    bastore\n4:    impdep2\n5:    bastore\n6:    <illegal opcode>\n7:    fneg\n8:    nop\n", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      int int0 = Utility.clearBit(179, (byte)0);
      assertEquals(178, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)53;
      int int0 = 82;
      String string0 = Utility.fillup("new", 82, true, 'p');
      assertEquals("newppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("monitorenter");
      assertNotNull(mockFile0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      int int1 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(43, int1);
      assertFalse(int1 == int0);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("saload", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertEquals(7, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals(1, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)43, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("aload_1", string2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      
      try { 
        Utility.typeOfSignature("dup");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(21, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)12, 36);
      assertEquals(12, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(12, constantInvokeDynamic0.getClassIndex());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals(12, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(12, constantInvokeDynamic0.getClassIndex());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(36, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(12, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(12, constantInvokeDynamic1.getClassIndex());
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      
      ConstantInvokeDynamic constantInvokeDynamic2 = (ConstantInvokeDynamic)constantInvokeDynamic1.copy();
      assertEquals(12, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(12, constantInvokeDynamic0.getClassIndex());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(36, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(12, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(12, constantInvokeDynamic1.getClassIndex());
      assertEquals(12, constantInvokeDynamic2.getBootstrapMethodAttrIndex());
      assertEquals(36, constantInvokeDynamic2.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic2.getTag());
      assertEquals(12, constantInvokeDynamic2.getClassIndex());
      assertTrue(constantInvokeDynamic0.equals((Object)constantInvokeDynamic1));
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertTrue(constantInvokeDynamic2.equals((Object)constantInvokeDynamic1));
      assertTrue(constantInvokeDynamic2.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic2);
      assertNotSame(constantInvokeDynamic0, constantInvokeDynamic2);
      assertNotSame(constantInvokeDynamic0, constantInvokeDynamic1);
      assertNotSame(constantInvokeDynamic1, constantInvokeDynamic0);
      assertNotSame(constantInvokeDynamic1, constantInvokeDynamic2);
      assertNotSame(constantInvokeDynamic2, constantInvokeDynamic1);
      assertNotSame(constantInvokeDynamic2, constantInvokeDynamic0);
      
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(3297, constantMethodref0.getNameAndTypeIndex());
      assertEquals(183, constantMethodref0.getClassIndex());
      assertEquals(4, byteSequence0.getIndex());
      assertNotNull(constantMethodref0);
      assertEquals(21, byteArray0.length);
      
      constantArray0[2] = (Constant) constantMethodref0;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("f2d", string0);
      assertNotNull(string0);
      assertEquals(21, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "java.lang.}";
      String string1 = "V";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-75);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-108), (-1381), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lcmp
         // 1:    irem
         // 2:    dup_x1
         // 3:    pop2
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte byte0 = (byte)20;
      try { 
        Utility.typeOfSignature("/0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-125);
      byteArray0[4] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)108, (byte) (-125), (byte)0, (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)108, (byte) (-125), (byte)0, (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(16, int0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)108, (byte) (-125), (byte)0, (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("idiv", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.classOrInterface((byte) (-111));
      assertEquals("interface", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string0 = Utility.getSignature(".8jS'");
      assertEquals("L/8jS';", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility$JavaWriter");
      assertFalse(boolean0);
      
      String string1 = null;
      MockFile mockFile0 = new MockFile("L/8jS';");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-78), (byte)46, (byte) (-23), (byte)7, (byte)76, (byte)76}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-78), (byte)46, (byte) (-23), (byte)7, (byte)76, (byte)76}, byteArray0);
      assertEquals(142, int0);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = Utility.clearBit(180, 1366);
      assertEquals(180, int0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-63), (byte)71, (byte)71, (byte)71, (byte)71, (byte)71, (byte)71, (byte)71}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "H~oR";
      stringArray0[1] = "\n\ty\tthrows";
      stringArray0[2] = "\n\ty\tthrows";
      stringArray0[3] = "\n\ty\tthrows";
      stringArray0[4] = "H~oR";
      stringArray0[5] = "<yQ>|9=i_=Hu, ";
      String string0 = Utility.compactClassName("N`Y}4Ue", "H~oR", false);
      assertEquals("N`Y}4Ue", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodTypeToSignature("\n\ty\tthrows", stringArray0);
      assertEquals("(LH~oR;Ly;Ly;Ly;LH~oR;L<yQ>|9=i_=Hu,;)Ly;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, stringArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-3);
      String string2 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-3)}, byteArray0);
      assertEquals("1$fd", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, byteArray0.length);
      
      short short0 = Utility.searchOpcode("/I)_#VyJLuL9m%>HT");
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 913, (-2379));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5X!\")t|f$AHTn=o");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = Utility.clearBit((-1934), (-3478));
      assertEquals((-1934), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)102;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)102, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Utility.replace("(3Z&x9/gM", "(3Z&x9/gM", "(3Z&x9/gM");
      assertEquals("(3Z&x9/gM", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-73);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(377, (byte) (-73));
      assertEquals(377, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-73), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte) (-122));
      assertEquals((-122L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      ClassPath classPath1 = new ClassPath(classPath0, "(3Z&x9/gM");
      assertFalse(classPath1.equals((Object)classPath0));
      assertNotNull(classPath1);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      assertFalse(classPath0.equals((Object)classPath1));
      assertFalse(classPath1.equals((Object)classPath0));
      assertNotNull(classPathRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertTrue(javaClass0.isAbstract());
      assertEquals("java.io", javaClass0.getPackageName());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isProtected());
      assertFalse(classPath0.equals((Object)classPath1));
      assertFalse(classPath1.equals((Object)classPath0));
      assertNotNull(javaClass0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertNotSame(classPath0, classPath1);
      assertNotSame(classPath1, classPath0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      assertTrue(javaClass0.isAbstract());
      assertEquals("java.io", javaClass0.getPackageName());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isProtected());
      assertFalse(classPath0.equals((Object)classPath1));
      assertFalse(classPath1.equals((Object)classPath0));
      assertNotNull(descendingVisitor0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, 2441, true);
      assertEquals(1, constantPool0.getLength());
      assertEquals("5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(15, byteArray0.length);
      assertEquals(1, constantArray0.length);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Utility.equals(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertTrue(boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = Utility.clearBit((-2206), (byte) (-73));
      assertEquals((-8390814), int0);
      
      String string2 = Utility.convertString("xLp");
      assertEquals("xLp", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.getSignature("5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n");
      assertEquals("L5:;", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = Utility.clearBit((byte)1, (byte) (-73));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      try { 
        Utility.typeOfMethodSignature("TOh~M@<j]{9.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: TOh~M@<j]{9.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)100;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byteArray0[7] = (byte) (-23);
      MockFile mockFile0 = new MockFile("x~{7");
      assertNotNull(mockFile0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)118, (byte) (-78), (byte)76, (byte)7, (byte)100, (byte)0, (byte) (-23), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)118, (byte) (-78), (byte)76, (byte)7, (byte)100, (byte)0, (byte) (-23), (byte)0}, byteArray0);
      assertEquals(176, int0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)118, (byte) (-78), (byte)76, (byte)7, (byte)100, (byte)0, (byte) (-23), (byte)0}, byteArray0);
      assertEquals("fneg", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      String string1 = Utility.classOrInterface((byte)46);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.convertString("fneg");
      assertEquals("fneg", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5X!\")t|f$AHTn=o");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.compactClassName("5X!\")t|f$AHTn=o");
      assertEquals("5X!\")t|f$AHTn=o", string0);
      assertNotNull(string0);
      
      int int0 = Utility.clearBit((-1934), (-3478));
      assertEquals((-1934), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)102, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = Utility.fillup("N?'~}SRh", 0, true, '\u001B');
      assertEquals("N?'~}SRh", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("48_vbeR+R9fl^>Kn");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(145, int0);
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte) (-111));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-111L), constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      constantArray0[0] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-1040187392), constantInteger0.getBytes());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantInteger0);
      assertEquals(5, byteArray0.length);
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-1040187392), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals((-1040187392), constantInteger1.getBytes());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals(5, byteArray0.length);
      
      constantArray0[1] = (Constant) constantInteger1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("boolean");
      assertEquals("boolean", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      String string1 = Utility.getSignature("N?'~}SRh");
      assertEquals("LN?'~}SRh;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, 0, 185);
      assertEquals(3, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    i2b\n1:    monitorenter\n2:    nop\n3:    nop\n4:    nop\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantPool2.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(3, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(5, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("i2b", string3);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string4 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$91$c2$A$A$A", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(5, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("$91$c2$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$91$c2$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong(3049L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(3049L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      ConstantClass constantClass0 = new ConstantClass((-3361));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-3361), constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-3361), constantClass0.getNameIndex());
      assertEquals((-3361), constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)31, (byte)85, (byte) (-56), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)31, (byte)85, (byte) (-56), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("dcmpg", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)31, (byte)85, (byte) (-56), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 65, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[3] = (byte)21;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)51;
      byte byte0 = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte) (-3), (byte)4, (byte)51, (byte) (-86), (byte) (-103)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("O^,V'*Z#CW$g'>");
      assertEquals("O^,V'*Z#CW$g'>", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-103), 87);
      assertEquals(87, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-103), constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertEquals(87, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-103), constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(87, constantMethodHandle1.getReferenceIndex());
      assertEquals((-103), constantMethodHandle1.getReferenceKind());
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-103), (-200), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    faload
         // 1:    nop
         // 2:    <illegal opcode>
         // 3:    iconst_1
         // 4:    baload
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = Utility.fillup("N?'~}SRh", 0, true, '\"');
      assertEquals("N?'~}SRh", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("48_vbeR+R9fl^>Kn");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62)}, byteArray0);
      assertEquals(145, int0);
      assertEquals(2, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("N?'~}SRh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N?'~}SRh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Utility.fillup("org.apache.commons.io.filefilter.RegexFileFilter", 42, true, 'r');
      assertEquals("org.apache.commons.io.filefilter.RegexFileFilter", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-15);
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)99;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("5j$ec$C$f1$A$f5bc$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(24, byteArray0.length);
      
      String string2 = Utility.compactClassName("5j$ec$C$f1$A$f5bc$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", "5j$ec$C$f1$A$f5bc$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", false);
      assertEquals("5j$ec$C$f1$A$f5bc$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-20);
      String string3 = Utility.compactClassName("5j$ec$C$f1$A$f5bc$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", "m-k&wr`4u(PYPSu", false);
      assertEquals("5j$ec$C$f1$A$f5bc$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Utility.accessToString((int) (byte) (-15));
      assertEquals("public final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xbew_lKp|-DC", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xbew_lKp|-DC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong(3049L);
      assertEquals(3049L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2173, 2173);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Utility.methodSignatureReturnType("Illegal type: ", false);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteArray0.length);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      try { 
        byteSequence0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = Utility.fillup("N?'~}SRh", 0, true, '\"');
      assertEquals("N?'~}SRh", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("48_vbeR+R9fl^>Kn");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62)}, byteArray0);
      assertEquals(145, int0);
      assertEquals(2, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-62)}, byteArray0);
      assertEquals("monitorenter", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("monitorenter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-62);
      byte byte0 = (byte) (-111);
      MockFile mockFile0 = new MockFile("org.apache.bcel.classfile.MethodParameters");
      assertNotNull(mockFile0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte) (-125), (byte) (-106), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte) (-125), (byte) (-106), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(16, int0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte) (-125), (byte) (-106), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("lshl", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("lshl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lshl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)58;
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)0, (byte)0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-42), (-2206));
      assertEquals((-42), constantFieldref0.getClassIndex());
      assertEquals((-2206), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      MockFile mockFile0 = new MockFile("H|+aIR1:07#|o huvh", "U,e*/?-J'");
      assertNotNull(mockFile0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockFile mockFile1 = new MockFile("boolean");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertEquals(129, int0);
      assertEquals(3, byteArray0.length);
      
      int int1 = byteSequence0.available();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(3, byteArray0.length);
      
      byteSequence0.close();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertEquals("astore\t\t%0", string0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string1 = Utility.convertString("boolean");
      assertEquals("boolean", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Utility.compactClassName("(&x9/gM", "(&x9/gM", true);
      assertEquals("(&x9.gM", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("(&x9/gM");
      assertEquals("L(&x9/gM;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-122), (byte) (-122));
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-122), constantNameAndType0.getNameIndex());
      assertEquals((-122), constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      String string2 = Utility.compactClassName("if_acmpne", false);
      assertEquals("if_acmpne", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      MockFile mockFile0 = new MockFile("if_acmpne", "(&x9.gM");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("(&x9/gM");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122)}, byteArray0);
      assertEquals(134, int0);
      assertEquals(6, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122)}, byteArray0);
      assertEquals("i2f", string3);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string4 = Utility.replace("aKd!@/My,f!Wj-", "if_acmpne", "?7x)'x'");
      assertEquals("aKd!@/My,f!Wj-", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.replace("(3Z&x9/gM", "(3Z&x9/gM", "(3Z&x9/gM");
      assertEquals("(3Z&x9/gM", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[5] = (byte) (-73);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-115);
      String string1 = "multianewarray";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("multianewarray");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("multianewarray", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("multianewarray", constantUtf8_0.getBytes());
      assertEquals("multianewarray", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-48), (int) (byte)12, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "H~oR";
      stringArray0[1] = "\n\ty\tthrows ";
      stringArray0[2] = "\n\ty\tthrows ";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      stringArray0[3] = "\n\ty\tthrows ";
      stringArray0[4] = "H~oR";
      stringArray0[5] = "<yQ>|9=i_=Hu, ";
      String string0 = Utility.methodTypeToSignature("\n\ty\tthrows ", stringArray0);
      assertEquals("(LH~oR;Ly;Ly;Ly;LH~oR;L<yQ>|9=i_=Hu,;)Ly;", string0);
      assertNotNull(string0);
      assertEquals(6, stringArray0.length);
      
      MockFile mockFile0 = new MockFile("H~oR", "H~oR");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("boolean");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-52), (byte)61}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-52), (byte)61}, byteArray0);
      assertEquals(70, int0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1525, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = Utility.signatureToString("Fe~/Xn1ZtI", true);
      assertEquals("float", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)51;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-46), (byte) (-103), (byte)55, (byte) (-112), (byte)51}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-46), (byte) (-103), (byte)55, (byte) (-112), (byte)51}, byteArray0);
      assertEquals("d2f", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      try { 
        Utility.typeOfSignature("d2f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ConstantLong constantLong0 = new ConstantLong(3049L);
      assertEquals(3049L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantClass constantClass0 = new ConstantClass((-3361));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-3361), constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-3361), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals((-3361), constantClass1.getNameIndex());
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)31, (byte)85, (byte) (-56), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)31, (byte)85, (byte) (-56), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("dcmpg", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)31, (byte)85, (byte) (-56), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(7, byteArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)31, (byte)85, (byte) (-56), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("lload_1", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence0, byteSequence1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-77);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(145);
      assertEquals(145, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 62, 145);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Fieldref' at index 0 and got CONSTANT_MethodType[16](descriptor_index = 145)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7Ix>d9kg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7Ix>d9kg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)95, (byte)127, (byte)47, (byte) (-77), (byte)14, (byte) (-1)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)95, (byte)127, (byte)47, (byte) (-77), (byte)14, (byte) (-1)}, byteArray0);
      assertEquals("swap", string0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Utility.convertString("void");
      assertEquals("void", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)59;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 862, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = 0;
      String string0 = Utility.fillup("N?'~}SRh", 0, true, '\"');
      assertEquals("N?'~}SRh", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-25), (byte) (-34), (byte) (-75), (byte)45, (byte)52, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool2, true);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool2.getLength());
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-25), (byte) (-34), (byte) (-75), (byte)45, (byte)52, (byte)0, (byte)0}, byteArray0);
      assertEquals("lcmp", string1);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, constantArray0.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      try { 
        Utility.typeOfSignature("-#80,f$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -#80,f$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Utility.replace("(3Z&x9/gM", "(3Z&x9/gM", "(3Z&x9/gM");
      assertEquals("(3Z&x9/gM", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-122);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(3Z&x9/gM");
      assertEquals("(3Z&x9/gM", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = (ConstantUtf8)constantUtf8_0.copy();
      assertEquals("(3Z&x9/gM", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("(3Z&x9/gM", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_0, constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("(3Z&x9/gM");
      assertEquals((byte)1, constantUtf8_2.getTag());
      assertEquals("(3Z&x9/gM", constantUtf8_2.getBytes());
      assertTrue(constantUtf8_2.equals((Object)constantUtf8_1));
      assertTrue(constantUtf8_2.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_2);
      
      boolean boolean0 = true;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(21, byteArray0.length);
      
      short short0 = Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(21, byteArray0.length);
      
      String string2 = "\t\t<";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "\t\t<", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "H~oR";
      stringArray0[1] = "\n\ty\tthrows ";
      stringArray0[2] = "\n\ty\tthrows ";
      stringArray0[3] = "\n\ty\tthrows ";
      stringArray0[4] = "H~oR";
      stringArray0[5] = "<yQ>|9=i_=Hu, ";
      String string0 = Utility.methodTypeToSignature("\n\ty\tthrows ", stringArray0);
      assertEquals("(LH~oR;Ly;Ly;Ly;LH~oR;L<yQ>|9=i_=Hu,;)Ly;", string0);
      assertNotNull(string0);
      assertEquals(6, stringArray0.length);
      
      MockFile mockFile0 = new MockFile("H~oR", "H~oR");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("boolean");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-52), (byte)61}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-52), (byte)61}, byteArray0);
      assertEquals(70, int0);
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte) (-52), (byte)61}, byteArray0);
      assertEquals("<illegal opcode>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("H~oR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H~oR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)58;
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)0, (byte)0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-42), (-2206));
      assertEquals((-42), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2206), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      constantArray0[2] = (Constant) constantFieldref0;
      boolean boolean0 = false;
      String string0 = Utility.fillup("=T~CV#|?60u", (byte) (-127), false, 'J');
      assertEquals("=T~CV#|?60u", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("7ECDg", "6 \"BxZbw6O9#V", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte) (-125);
      byteArray1[3] = (byte) (-106);
      byteArray1[4] = (byte) (-62);
      byteArray1[5] = (byte) (-111);
      byteArray1[6] = (byte) (-94);
      byteArray1[7] = (byte) (-46);
      byteArray1[8] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte) (-125), (byte) (-106), (byte) (-62), (byte) (-111), (byte) (-94), (byte) (-46), (byte)97}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray1.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)121, (byte) (-125), (byte) (-106), (byte) (-62), (byte) (-111), (byte) (-94), (byte) (-46), (byte)97}, byteArray1);
      assertEquals("bipush\t\t121", string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean boolean0 = Utility.equals(byteArray2, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertTrue(boolean0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      String string1 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ConstantLong constantLong0 = new ConstantLong(3049L);
      assertEquals(3049L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantClass constantClass0 = new ConstantClass((-3361));
      assertEquals((-3361), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertEquals((-3361), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-3361), constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)31, (byte)31, (byte) (-56), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)31, (byte)31, (byte) (-56), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("dcmpg", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.compactClassName("dcmpg", "dcmpg", true);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("()L;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = "5]iF*;m";
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      try { 
        MockFile.createTempFile("dcmpg", "5]iF*;m", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(&x9.gM");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("(&x9.gM", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(9, constantArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1714), 1739, false);
      assertEquals(9, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertEquals("0:    return\n", string0);
      assertNotNull(string0);
      assertEquals(9, constantArray0.length);
      assertEquals(1, byteArray0.length);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      int int0 = Utility.clearBit((byte) (-79), 193);
      assertEquals((-79), int0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)86, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ConstantLong constantLong0 = new ConstantLong(3049L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(3049L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      ConstantClass constantClass0 = new ConstantClass((-3361));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-3361), constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-3361), constantClass0.getNameIndex());
      assertEquals((-3361), constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)31, (byte)85, (byte) (-56), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)31, (byte)85, (byte) (-56), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("dcmpg", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      
      String string1 = Utility.compactClassName("dcmpg", "dcmpg", true);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = Utility.isSet((byte)31, (-2023));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.convertString("=g<8htd6zTL<}2jv)G");
      assertEquals("=g<8htd6zTL<}2jv)G", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      try { 
        Utility.typeOfSignature("=g<8htd6zTL<}2jv)G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =g<8htd6zTL<}2jv)G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      try { 
        Utility.typeOfSignature("AK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)58;
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)0, (byte)0);
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-42), (-2206));
      assertEquals((-42), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2206), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-32768), 156, true);
      assertEquals(3, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertEquals("0:    lor\n1:    astore\t\t%0\n", string0);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      int int0 = Utility.clearBit((-1515), (-2653));
      assertEquals((-1515), int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(3, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)58, (byte)0}, byteArray0);
      assertEquals("lor", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "(&x9.gM";
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&x9.gM");
      assertEquals("(&x9.gM", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("(&x9.gM");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("(&x9.gM", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      constantArray0[6] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(9, constantArray0.length);
      
      Constant constant0 = constantPool0.getConstant(7);
      assertEquals(9, constantPool0.getLength());
      assertNull(constant0);
      assertEquals(9, constantArray0.length);
      
      String string1 = "mX*$8";
      String string2 = Utility.fillup("mX*$8", 193, false, 'J');
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJmX*$8", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-100), (byte)45}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)20}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      ConstantLong constantLong0 = new ConstantLong((byte)20);
      assertEquals(20L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      ConstantClass constantClass0 = new ConstantClass((byte)20);
      assertEquals(20, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      constantArray0[2] = (Constant) constantClass0;
      ConstantLong constantLong1 = new ConstantLong(16L);
      assertEquals(16L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      
      constantLong1.setBytes((byte)20);
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(20L, constantLong1.getBytes());
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotSame(constantLong1, constantLong0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      String string0 = constantPool0.toString();
      assertEquals(3, constantPool0.getLength());
      assertEquals("1)CONSTANT_Long[5](bytes = 20)\n2)CONSTANT_Class[7](name_index = 20)\n", string0);
      assertNotNull(string0);
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, 1154, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Utility.replace("(3Z&x9/gM", "(3Z&x9/gM", "(3Z&x9/gM");
      assertEquals("(3Z&x9/gM", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("&");
      assertEquals("&", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.fillup("&cI5~~RNviZJKt$kL", (byte) (-73), false, '5');
      assertEquals("&cI5~~RNviZJKt$kL", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("(3Z&x9/gM", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3Z&x9/gM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Utility.fillup("iastore", 82, true, 'z');
      assertEquals("iastorezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", string0);
      assertNotNull(string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$A$A$A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      
      short short0 = Utility.searchOpcode("dastore");
      assertEquals((short)82, short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("nop", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("^w]E");
      assertEquals("^w]E", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = (ConstantUtf8)constantUtf8_0.copy();
      assertEquals("^w]E", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("^w]E", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_0, constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("^w]E");
      assertEquals((byte)1, constantUtf8_2.getTag());
      assertEquals("^w]E", constantUtf8_2.getBytes());
      assertTrue(constantUtf8_2.equals((Object)constantUtf8_0));
      assertTrue(constantUtf8_2.equals((Object)constantUtf8_1));
      assertNotNull(constantUtf8_2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)74, (byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
      assertEquals("$89J$89$89$89", string0);
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      
      short short0 = Utility.searchOpcode("^w]E");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-119), (byte)74, (byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-119), (byte)74, (byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
      assertEquals(137, int0);
      assertEquals(5, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-119), (byte)74, (byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
      assertEquals("dstore_3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)0, (byte)0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(0, constantNameAndType0.getNameIndex());
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-42), (-2206));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2206), constantFieldref0.getNameAndTypeIndex());
      assertEquals((-42), constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 145);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n", string0);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Utility.fillup("org.apache.commons.io.filefilter.RegexFileFilter", 42, true, 'r');
      assertEquals("org.apache.commons.io.filefilter.RegexFileFilter", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-15);
      String string1 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)53, (byte)106, (byte) (-20), (byte)2, (byte) (-15), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      
      short short0 = Utility.searchOpcode("dastore");
      assertEquals((short)82, short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)53, (byte)106, (byte) (-20), (byte)2, (byte) (-15), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)53, (byte)106, (byte) (-20), (byte)2, (byte) (-15), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("saload", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(21, byteArray0.length);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte) (-122);
      byteArray1[3] = (byte) (-84);
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte) (-31);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte) (-122), (byte) (-84), (byte)12, (byte) (-31)}, byteArray1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence1);
      assertEquals(6, byteArray1.length);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&x9.gM");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("(&x9.gM", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = (ConstantUtf8)constantUtf8_0.copy();
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("(&x9.gM", constantUtf8_0.getBytes());
      assertEquals("(&x9.gM", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_0, constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("(&x9.gM");
      assertEquals("(&x9.gM", constantUtf8_2.getBytes());
      assertEquals((byte)1, constantUtf8_2.getTag());
      assertTrue(constantUtf8_2.equals((Object)constantUtf8_1));
      assertTrue(constantUtf8_2.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_2);
      
      constantArray0[6] = (Constant) constantUtf8_2;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)74;
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)74}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      
      short short0 = Utility.searchOpcode("dastore");
      assertEquals((short)82, short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-119), (byte)74}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-119), (byte)74}, byteArray0);
      assertEquals("l2f", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)76;
      String string0 = Utility.compactClassName("short", "short", false);
      assertEquals("short", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)116, (byte) (-78), (byte)76, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)116, (byte) (-78), (byte)76, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("areturn", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string2 = Utility.compactClassName("H18l}~c", "H18l}~c", true);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = Utility.replace("(3Z&x9/gM", "(3Z&x9/gM", "(3Z&x9/gM");
      assertEquals("(3Z&x9/gM", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(26, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[16];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(3Z&x9/gM");
      assertEquals("(3Z&x9/gM", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)12, 36);
      assertEquals(12, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(12, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals(12, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals(36, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(12, constantInvokeDynamic1.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(12, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(12, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      assertEquals(46982, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(3297, constantMethodref0.getNameAndTypeIndex());
      assertEquals(4, byteSequence0.getIndex());
      assertNotNull(constantMethodref0);
      assertEquals(26, byteArray0.length);
      
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertEquals((-3.951367E-31F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(8, byteSequence0.getIndex());
      assertNotNull(constantFloat0);
      assertEquals(26, byteArray0.length);
      
      constantArray0[3] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString((byte) (-84));
      assertEquals((-84), constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertNotNull(constantString0);
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertEquals((-84), constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-84), constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertTrue(constantString1.equals((Object)constantString0));
      assertNotNull(constantString1);
      
      constantArray0[4] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(16, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(16, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(16, constantPool0.getLength());
      assertEquals(16, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(16, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      short short0 = Utility.searchOpcode("R]N97'");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.methodSignatureToString("R]N97'", (String) null, "R]N97'", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R]N97'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = Utility.fillup("org.apache.commons.io.filefilter.RegexFileFilter", 42, true, 'r');
      assertEquals("org.apache.commons.io.filefilter.RegexFileFilter", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 55, 56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = Utility.convertString("void");
      assertEquals("void", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)68, (byte)34}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("void");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("void", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("void");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("void", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)34, 1024);
      assertEquals(34, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1024, constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      ConstantClass constantClass0 = new ConstantClass(53);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(53, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(53, constantClass0.getNameIndex());
      assertEquals(53, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1024, (-1518), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&x9.gM");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("(&x9.gM", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("(&x9.gM");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("(&x9.gM", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      constantArray0[6] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(9, constantArray0.length);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(9, constantArray0.length);
      
      String string0 = constantPool1.toString();
      assertEquals(9, constantPool1.getLength());
      assertEquals("1)null\n2)null\n3)CONSTANT_Utf8[1](\"(&x9.gM\")\n4)null\n5)null\n6)CONSTANT_Utf8[1](\"(&x9.gM\")\n7)null\n8)null\n", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals(9, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.convertString("1)null\n2)null\n3)CONSTANT_Utf8[1](\"(&x9.gM\")\n4)null\n5)null\n6)CONSTANT_Utf8[1](\"(&x9.gM\")\n7)null\n8)null\n");
      assertEquals("1)null\\n2)null\\n3)CONSTANT_Utf8[1](\\\"(&x9.gM\\\")\\n4)null\\n5)null\\n6)CONSTANT_Utf8[1](\\\"(&x9.gM\\\")\\n7)null\\n8)null\\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.fillup("mX*$8", 170, false, 'J');
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJmX*$8", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("6 \"BxZbw6O9#V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6 \"BxZbw6O9#V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)100;
      byteArray0[4] = (byte) (-113);
      byteArray0[7] = (byte) (-23);
      byteArray0[8] = (byte)46;
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-113));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-113.0), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-113.0), constantDouble0.getBytes(), 0.01);
      assertEquals((-113.0), constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertNotNull(constantDouble1);
      
      constantArray0[0] = (Constant) constantDouble1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)116, (byte) (-78), (byte)76, (byte) (-113), (byte)100, (byte)0, (byte) (-23), (byte)46}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(45644, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(45172, constantFieldref0.getClassIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte)116, (byte) (-78), (byte)76, (byte) (-113), (byte)100, (byte)0, (byte) (-23), (byte)46}, byteArray0);
      assertNotNull(constantFieldref0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 62, 71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 19599. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "U!j$";
      try { 
        Utility.typeOfSignature("U!j$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U!j$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.convertString("void");
      assertEquals("void", string0);
      assertNotNull(string0);
      
      byte byte0 = (byte) (-101);
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      byte byte1 = (byte) (-112);
      try { 
        Utility.typeOfSignature("@idl+%N7eVI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @idl+%N7eVI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(78);
      assertEquals(78, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertEquals(78, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(78, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("(&x9.gM");
      assertEquals("(&x9.gM", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("(&x9.gM");
      assertEquals("(&x9.gM", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      
      constantArray0[6] = (Constant) constantUtf8_1;
      constantArray0[7] = (Constant) constantMethodType0;
      constantArray0[8] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(9, constantArray0.length);
      
      ConstantLong constantLong0 = new ConstantLong(78);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(78L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      constantLong0.setBytes(78);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(78L, constantLong0.getBytes());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(9, constantArray0.length);
      
      String string0 = constantPool1.toString();
      assertEquals(9, constantPool1.getLength());
      assertEquals("1)CONSTANT_MethodType[16](descriptor_index = 78)\n2)CONSTANT_MethodType[16](descriptor_index = 78)\n3)CONSTANT_Utf8[1](\"(&x9.gM\")\n4)CONSTANT_MethodType[16](descriptor_index = 78)\n5)CONSTANT_MethodType[16](descriptor_index = 78)\n6)CONSTANT_Utf8[1](\"(&x9.gM\")\n7)CONSTANT_MethodType[16](descriptor_index = 78)\n8)CONSTANT_MethodType[16](descriptor_index = 78)\n", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals(9, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5704, 5704, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ifnull");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[1] = (byte)16;
      byte byte0 = (byte)65;
      byteArray0[2] = (byte)65;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)16, (byte)65}, byteArray0);
      assertEquals("$ff$QA", string0);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.format((byte)65, 33, true, '%');
      assertEquals("65%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Constant[] constantArray0 = new Constant[8];
      ConstantLong constantLong0 = new ConstantLong(33);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(33L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      constantArray0[0] = (Constant) constantLong0;
      MockFile mockFile0 = new MockFile("ifnull", "ifnull");
      assertNotNull(mockFile0);
      
      try { 
        MockFile.createTempFile("Ca[:<Z<ae5l4bb", "$ff$QA", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-2852L));
      assertEquals((-2852L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertEquals((-2852L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-2852L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      assertEquals((-2852L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-2852L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((byte)5, constantLong2.getTag());
      assertEquals((-2852L), constantLong2.getBytes());
      assertTrue(constantLong0.equals((Object)constantLong1));
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertTrue(constantLong2.equals((Object)constantLong0));
      assertTrue(constantLong2.equals((Object)constantLong1));
      assertNotNull(constantLong2);
      
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantLong0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1430));
      assertEquals((-1430), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertEquals((-1430), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals((-1430), constantMethodType1.getDescriptorIndex());
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      
      constantArray0[2] = (Constant) constantMethodType1;
      constantArray0[3] = (Constant) constantLong2;
      constantArray0[4] = (Constant) constantLong1;
      constantArray0[5] = (Constant) constantLong2;
      constantArray0[6] = (Constant) constantLong0;
      constantArray0[7] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(8, constantArray0.length);
      
      constantLong2.setBytes(2569L);
      assertEquals((-2852L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-2852L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((byte)5, constantLong2.getTag());
      assertEquals(2569L, constantLong2.getBytes());
      assertFalse(constantLong0.equals((Object)constantLong2));
      assertTrue(constantLong0.equals((Object)constantLong1));
      assertFalse(constantLong1.equals((Object)constantLong2));
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertFalse(constantLong2.equals((Object)constantLong0));
      assertFalse(constantLong2.equals((Object)constantLong1));
      assertNotSame(constantLong0, constantLong2);
      assertNotSame(constantLong0, constantLong1);
      assertNotSame(constantLong1, constantLong0);
      assertNotSame(constantLong1, constantLong2);
      assertNotSame(constantLong2, constantLong0);
      assertNotSame(constantLong2, constantLong1);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(8, constantArray0.length);
      
      String string0 = constantPool0.toString();
      assertEquals(8, constantPool0.getLength());
      assertEquals("1)CONSTANT_Long[5](bytes = -2852)\n2)CONSTANT_MethodType[16](descriptor_index = -1430)\n3)CONSTANT_Long[5](bytes = 2569)\n4)CONSTANT_Long[5](bytes = -2852)\n5)CONSTANT_Long[5](bytes = 2569)\n6)CONSTANT_Long[5](bytes = -2852)\n7)CONSTANT_Long[5](bytes = -2852)\n", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertEquals(8, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 5704, (int) (byte)36, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 16959. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(';');
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("<l<AW");
      assertEquals("L<l<AW;", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("MD6w4IXVZf", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MD6w4IXVZf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Utility.replace("(3Z&x9/gM", "(3Z&x9/gM", "(3Z&x9/gM");
      assertEquals("(3Z&x9/gM", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertEquals(26, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(3Z&x9/gM");
      assertEquals("(3Z&x9/gM", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)12, 36);
      assertEquals(12, constantInvokeDynamic0.getClassIndex());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(12, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(12, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals(12, constantInvokeDynamic1.getClassIndex());
      assertEquals(36, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(12, constantInvokeDynamic0.getClassIndex());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(12, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      assertEquals(46982, constantMethodref0.getClassIndex());
      assertEquals(3297, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(4, byteSequence0.getIndex());
      assertNotNull(constantMethodref0);
      assertEquals(26, byteArray0.length);
      
      constantArray0[2] = (Constant) constantMethodref0;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Tqe17a5TZE", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Tqe17a5TZE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureToString("arraylength", "OIJe", "arraylength", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = Utility.fillup("N?'~}SRh", 0, true, '\"');
      assertEquals("N?'~}SRh", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)45;
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)45, 114, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 11520. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 203, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GexcNlB{Hs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GexcNlB{Hs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-42);
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)58, (byte) (-42)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      ConstantString constantString0 = new ConstantString(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(34874, constantString0.getStringIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)58, (byte) (-42)}, byteArray0);
      assertNotNull(constantString0);
      assertEquals(3, byteArray0.length);
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(34874, constantString0.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertEquals(34874, constantString1.getStringIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)58, (byte) (-42)}, byteArray0);
      assertTrue(constantString1.equals((Object)constantString0));
      assertNotNull(constantString1);
      assertEquals(3, byteArray0.length);
      
      constantArray0[0] = (Constant) constantString1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-42), (byte) (-42));
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-42), constantNameAndType0.getNameIndex());
      assertEquals((-42), constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-42), (-2206));
      assertEquals((-2206), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-42), constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      String string0 = constantPool0.toString();
      assertEquals(3, constantPool0.getLength());
      assertEquals("1)CONSTANT_NameAndType[12](name_index = -42, signature_index = -42)\n2)CONSTANT_Fieldref[9](class_index = -42, name_and_type_index = -2206)\n", string0);
      assertNotNull(string0);
      assertEquals(3, constantArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-884), (-379), true);
      assertEquals(3, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)58, (byte) (-42)}, byteArray0);
      assertEquals("0:    l2i\n1:    astore\t\t%214\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantPool0.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(3, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      
      String string2 = Utility.codeToString(byteArray1, constantPool1, (int) (byte) (-42), 163, true);
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantPool0.getLength());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals("", string2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string2);
      assertEquals(0, byteArray1.length);
      assertEquals(3, constantArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Illegal type: ", false);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)0, (byte)10, (byte)10, (byte)91, (byte)10, (byte)28}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      double double0 = byteSequence0.readDouble();
      assertEquals(8, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)0, (byte)10, (byte)10, (byte)91, (byte)10, (byte)28}, byteArray0);
      assertEquals(2.6461783587353677E-260, double0, 0.01);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(9, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)0, (byte)10, (byte)10, (byte)91, (byte)10, (byte)28}, byteArray0);
      assertEquals("iload_2", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("5|Ah4l7-*FI4;J$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5|Ah4l7-*FI4;J$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)60;
      int int0 = (-3765);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (-3765));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = Utility.convertString("void");
      assertEquals("void", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(2569L);
      assertEquals(2569L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertEquals(2569L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(2569L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      constantLong1.setBytes(0L);
      assertEquals(2569L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(0L, constantLong1.getBytes());
      assertFalse(constantLong0.equals((Object)constantLong1));
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertNotSame(constantLong0, constantLong1);
      assertNotSame(constantLong1, constantLong0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-2);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-61), (int) (byte)122, true);
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-101), (byte)122, (byte) (-101), (byte) (-61), (byte) (-102), (byte) (-2), (byte) (-2)}, byteArray0);
      assertEquals("0:    iflt\t\t#31387\n3:    monitorexit\n4:    ifne\t\t#-254\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, constantArray0.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = Utility.signatureToString("Fe~/Xn1ZtI", true);
      assertEquals("float", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)51;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1545), 102, false);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-46), (byte) (-103), (byte)55, (byte)59, (byte)51}, byteArray0);
      assertEquals("0:    d2f\n1:    <illegal opcode>\n2:    ifeq\t\t#14141\n5:    baload\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3311, 617, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-9);
      byteArray0[8] = (byte)10;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-9), 774, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)29, (byte) (-9), (byte)123, (byte)10, (byte)123, (byte) (-9), (byte)0, (byte)10}, byteArray0);
      assertEquals("0:    nop\n1:    iload_3\n2:    <illegal opcode>\n3:    lshr\n4:    lconst_1\n5:    lshr\n6:    <illegal opcode>\n7:    nop\n8:    lconst_1\n", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('w');
      assertTrue(boolean0);
      
      try { 
        Utility.methodSignatureReturnType("<$tI5lrglt'[j9>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<$tI5lrglt'[j9>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Illegal type: ", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 478, 478);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = Utility.convertString("void");
      assertEquals("void", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(2569L);
      assertEquals(2569L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertEquals(2569L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(2569L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-2);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-61), (int) (byte)122, true);
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-110), (byte)122, (byte) (-110), (byte) (-61), (byte) (-102), (byte) (-2), (byte) (-2)}, byteArray0);
      assertEquals("0:    i2c\n1:    ishr\n2:    i2c\n3:    monitorexit\n4:    ifne\t\t#-254\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, constantArray0.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = Utility.convertString("=g<8htd6zTL<}2jv)G");
      assertEquals("=g<8htd6zTL<}2jv)G", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)120, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Synthetic attribute with length > 0");
      assertEquals("Synthetic attribute with length > 0", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("4G-O*zGGG<|9W");
      assertEquals("4G-O*zGGG<|9W", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertFalse(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2025), 1823);
      assertEquals((-2025), constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1823, constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertEquals((-2025), constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1823, constantMethodHandle0.getReferenceIndex());
      assertEquals(1823, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals((-2025), constantMethodHandle1.getReferenceKind());
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      
      ConstantMethodHandle constantMethodHandle2 = (ConstantMethodHandle)constantMethodHandle1.copy();
      assertEquals((-2025), constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1823, constantMethodHandle0.getReferenceIndex());
      assertEquals(1823, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals((-2025), constantMethodHandle1.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle2.getTag());
      assertEquals((-2025), constantMethodHandle2.getReferenceKind());
      assertEquals(1823, constantMethodHandle2.getReferenceIndex());
      assertTrue(constantMethodHandle0.equals((Object)constantMethodHandle1));
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertTrue(constantMethodHandle2.equals((Object)constantMethodHandle1));
      assertTrue(constantMethodHandle2.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle2);
      assertNotSame(constantMethodHandle0, constantMethodHandle1);
      assertNotSame(constantMethodHandle0, constantMethodHandle2);
      assertNotSame(constantMethodHandle1, constantMethodHandle2);
      assertNotSame(constantMethodHandle1, constantMethodHandle0);
      assertNotSame(constantMethodHandle2, constantMethodHandle0);
      assertNotSame(constantMethodHandle2, constantMethodHandle1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)120, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)120, (byte)0, (byte)0}, byteArray0);
      assertEquals("ishl", string1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string2 = Utility.compactClassName("ishl", "4G-O*zGGG<|9W", true);
      assertEquals("ishl", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)60;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte) (-69));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantLong constantLong0 = new ConstantLong(3049L);
      assertEquals(3049L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantClass constantClass0 = new ConstantClass((-3361));
      assertEquals((-3361), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertEquals((-3361), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-3361), constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)45;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-26), (-351), false);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-104), (byte)31, (byte)85, (byte) (-26), (byte) (-126), (byte)60, (byte)45}, byteArray0);
      assertEquals("0:    dcmpg\n1:    lload_1\n2:    castore\n3:    <illegal opcode>\n4:    ixor\n5:    istore_1\n6:    aload_3\n", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("-]", false);
      assertArrayEquals(new byte[] {(byte)45, (byte)93}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)93}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      int int0 = Utility.setBit((-2068), 200);
      assertEquals((-2068), int0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "P,}Y#N2GDnUqf";
      byte byte0 = (byte) (-61);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 955, 2648);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)4, (byte)51, (byte) (-86), (byte) (-103)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("O^,V'*Z#CW$g'>");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("O^,V'*Z#CW$g'>", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("O^,V'*Z#CW$g'>");
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("O^,V'*Z#CW$g'>", constantUtf8_1.getBytes());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-103), 87);
      assertEquals((-103), constantMethodHandle0.getReferenceKind());
      assertEquals(87, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertEquals((-103), constantMethodHandle0.getReferenceKind());
      assertEquals(87, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-103), constantMethodHandle1.getReferenceKind());
      assertEquals(87, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle1;
      constantArray0[5] = (Constant) constantMethodHandle1;
      constantArray0[6] = (Constant) constantUtf8_1;
      constantArray0[7] = (Constant) constantMethodHandle1;
      constantArray0[8] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(9, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(9, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)21, (byte) (-3), (byte)4, (byte)51, (byte) (-86), (byte) (-103)}, byteArray0);
      assertEquals("faload", string0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      assertEquals(9, constantArray0.length);
      
      String string1 = Utility.accessToString(67);
      assertEquals("public private volatile", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.printArray((Object[]) constantArray0, false, false);
      assertEquals("CONSTANT_MethodHandle[15](reference_kind = -103, reference_index = 87), CONSTANT_MethodHandle[15](reference_kind = -103, reference_index = 87), CONSTANT_MethodHandle[15](reference_kind = -103, reference_index = 87), CONSTANT_MethodHandle[15](reference_kind = -103, reference_index = 87), CONSTANT_MethodHandle[15](reference_kind = -103, reference_index = 87), CONSTANT_MethodHandle[15](reference_kind = -103, reference_index = 87), CONSTANT_Utf8[1](\"O^,V'*Z#CW$g'>\"), CONSTANT_MethodHandle[15](reference_kind = -103, reference_index = 87), CONSTANT_Utf8[1](\"O^,V'*Z#CW$g'>\")", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(9, constantArray0.length);
      
      String string3 = Utility.compactClassName("O^,V'*Z#CW$g'>", false);
      assertEquals("O^,V'*Z#CW$g'>", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = Utility.convertString("YY1wzHOhM\"OAl,;E}");
      assertEquals("YY1wzHOhM\\\"OAl,;E}", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("RjOw$ul", false);
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)79, (byte)119, (byte)40, (byte)108}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2162), (-2162));
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)79, (byte)119, (byte)40, (byte)108}, byteArray0);
      assertEquals("0:    dastore\n1:    fmul\n2:    iastore\n3:    dneg\n4:    dload_2\n5:    idiv\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "RjOw$ul");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"RjOw$ul\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)28, (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.getSignature(".8jS'");
      assertEquals("L/8jS';", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte) (-19);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), 1540);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-81), (byte)38, (byte) (-81), (byte)46, (byte) (-19), (byte)38, (byte) (-19)}, byteArray0);
      assertEquals("0:    <illegal opcode>\n1:    dreturn\n2:    dload_0\n3:    dreturn\n4:    iaload\n5:    <illegal opcode>\n6:    dload_0\n7:    <illegal opcode>\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ifge", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)103, (byte)101}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(4, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 227, (-499));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-2162), (int) (byte)67);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = Utility.convertString("YY1wzHOhM\"OAl,;E}");
      assertEquals("YY1wzHOhM\\\"OAl,;E}", string0);
      assertNotNull(string0);
      
      String string1 = "RjOw$ul";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("RjOw$ul", false);
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)79, (byte)119, (byte)40, (byte)108}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(6, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2162), 1);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Illegal type: ", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 478, 478);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-42);
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)58, (byte) (-42)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      ConstantString constantString0 = new ConstantString(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(34874, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)58, (byte) (-42)}, byteArray0);
      assertNotNull(constantString0);
      assertEquals(3, byteArray0.length);
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(34874, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(34874, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)58, (byte) (-42)}, byteArray0);
      assertTrue(constantString1.equals((Object)constantString0));
      assertNotNull(constantString1);
      assertEquals(3, byteArray0.length);
      
      constantArray0[0] = (Constant) constantString1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-42), (byte) (-42));
      assertEquals((-42), constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-42), constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-42), (-2206));
      assertEquals((-42), constantFieldref0.getClassIndex());
      assertEquals((-2206), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 196, (int) (byte) (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("The li%t-ow names must nothbL null", true);
      assertNotNull(mockFileWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      assertNotNull(bufferedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte byte0 = Utility.typeOfSignature("The li%t-ow names must nothbL null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
      
      String string1 = "Illegal type: ";
      try { 
        Utility.typeOfSignature("&x9/g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &x9/g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = Utility.replace("(3Z&x9/gM", "(3Z&x9/gM", "(3Z&x9/gM");
      assertEquals("(3Z&x9/gM", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-122), (byte)12, (byte) (-31), (byte) (-115), (byte)0, (byte)58, (byte) (-84), (byte)88}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(3Z&x9/gM");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("(3Z&x9/gM", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)12, 36);
      assertEquals(12, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(12, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals(36, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(12, constantInvokeDynamic1.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(12, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals(12, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(36, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(12, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(3297, constantMethodref0.getNameAndTypeIndex());
      assertEquals(46982, constantMethodref0.getClassIndex());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-122), (byte)12, (byte) (-31), (byte) (-115), (byte)0, (byte)58, (byte) (-84), (byte)88}, byteArray0);
      assertNotNull(constantMethodref0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertEquals((-3.951367E-31F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(8, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-122), (byte)12, (byte) (-31), (byte) (-115), (byte)0, (byte)58, (byte) (-84), (byte)88}, byteArray0);
      assertNotNull(constantFloat0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[3] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString((byte) (-84));
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-84), constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-84), constantString0.getStringIndex());
      assertEquals((-84), constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertTrue(constantString1.equals((Object)constantString0));
      assertNotNull(constantString1);
      
      constantArray0[4] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(5, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(5, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertEquals(9, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-122), (byte)12, (byte) (-31), (byte) (-115), (byte)0, (byte)58, (byte) (-84), (byte)88}, byteArray0);
      assertEquals("pop2", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
      assertEquals(5, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      try { 
        Utility.typeOfSignature("OIJe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OIJe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("\n");
      assertEquals("\\n", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        Utility.typeOfSignature("07NopT)LT*BJy#,.,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 07NopT)LT*BJy#,.,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = Utility.getSignature("LOIJe;");
      assertEquals("LLOIJe;;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)106}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      String string1 = Utility.convertString(", ");
      assertEquals(", ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("X7M!G1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X7M!G1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)126, (byte)65, (byte)67}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)126, (byte)65, (byte)67}, byteArray0);
      assertEquals("iand", string0);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 858, (-937), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("OIJe", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OIJe'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = Utility.replace("\n", ")ir_Rw", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("a*9#~J");
      assertEquals("a*9#~J", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.convertString("a*9#~J");
      assertEquals("a*9#~J", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.replace(")ir_Rw", "a*9#~J", "\n");
      assertEquals(")ir_Rw", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      String[] stringArray0 = new String[0];
      String string4 = Utility.methodTypeToSignature("d2i", stringArray0);
      assertEquals("()Ld2i;", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byte byte0 = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)112;
      Constant[] constantArray0 = new Constant[7];
      ConstantClass constantClass0 = new ConstantClass((byte)75);
      assertEquals(75, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantInvokeDynamic constantInvokeDynamic0 = null;
      try {
        constantInvokeDynamic0 = new ConstantInvokeDynamic((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInvokeDynamic", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = Utility.fillup("OIJe", (-2135), false, '4');
      assertEquals("OIJe", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = Utility.compactClassName("(&x9.gM", "(&x9.gM", false);
      assertEquals("(&x9.gM", string0);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString(869, false);
      assertEquals("public protected synchronized volatile native interface", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfMethodSignature("(&x9.gM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (&x9.gM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = "(&x9.gM";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(&x9.gM", "(&x9.gM", "(&x9.gM", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&x9.gM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VVMx#");
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("VVMx#");
      assertEquals("void", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = Utility.getSignature("LYE;V");
      assertEquals("LLYE;V;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("LYE;V", false);
      assertEquals("YE", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LLYE;V;";
      stringArray0[1] = "LLYE;V;";
      stringArray0[2] = ".1!2lrFN2bFa~";
      stringArray0[3] = "ldiv";
      stringArray0[4] = "LYE;V";
      stringArray0[5] = "LLYE;V;";
      stringArray0[6] = "LLYE;V;";
      stringArray0[7] = "YE";
      String string2 = Utility.methodTypeToSignature(".1!2lrFN2bFa~", stringArray0);
      assertEquals("(LLLYE;V;;LLLYE;V;;L/1!2lrFN2bFa~;Lldiv;LLYE;V;LLLYE;V;;LLLYE;V;;LYE;)L/1!2lrFN2bFa~;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(8, stringArray0.length);
      
      String string3 = Utility.classOrInterface(131);
      assertEquals("class", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = Utility.convertString("VC");
      assertEquals("VC", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = Utility.fillup("@", 170, false, '\"');
      assertEquals("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"@", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      try { 
        Utility.methodSignatureArgumentTypes(", handler_pc = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , handler_pc = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "*0";
      try { 
        Utility.typeOfSignature("*0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h29r2w+'<;e45");
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("S.aG&xuuFb;#H7qJ;X");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(3Z&x9/gM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3Z&x9/gM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("java.lang.}", "V", false);
      assertEquals("java.lang.}", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("V", true);
      assertEquals("void", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.signatureToString("JrB43", true);
      assertEquals("long", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.decode("n[HI>k2", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = "Y";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("dreturn", false);
      assertEquals("dreturn", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("K]7bZ0Gj{(N:66D$~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K]7bZ0Gj{(N:66D$~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3wy|9==Oe?(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3wy|9==Oe?(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = Utility.convertString("byte");
      assertEquals("byte", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)63;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 293, (int) (byte) (-45), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Integer integer0 = new Integer(73);
      assertEquals(73, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)76;
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)42, (byte)11, (byte)75, (byte) (-88), (byte)76}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      
      byte byte0 = Utility.typeOfSignature("ZK,J_7WU8V8d^");
      assertEquals((byte)4, byte0);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1^)sQH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1^)sQH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\b");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)38;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)122, (byte) (-20), (byte)38}, byteArray0);
      assertEquals("$5c$Az$ec$s", string0);
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("$5c$Az$ec$s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $5c$Az$ec$s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-42);
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)58, (byte) (-42)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      ConstantString constantString0 = new ConstantString(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(34874, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)58, (byte) (-42)}, byteArray0);
      assertNotNull(constantString0);
      assertEquals(3, byteArray0.length);
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(34874, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(34874, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)58, (byte) (-42)}, byteArray0);
      assertTrue(constantString1.equals((Object)constantString0));
      assertNotNull(constantString1);
      assertEquals(3, byteArray0.length);
      
      constantArray0[0] = (Constant) constantString1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-42), (byte) (-42));
      assertEquals((-42), constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-42), constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-42), (-2206));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2206), constantFieldref0.getNameAndTypeIndex());
      assertEquals((-42), constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      String string0 = constantPool0.toString();
      assertEquals(3, constantPool0.getLength());
      assertEquals("1)CONSTANT_NameAndType[12](name_index = -42, signature_index = -42)\n2)CONSTANT_Fieldref[9](class_index = -42, name_and_type_index = -2206)\n", string0);
      assertNotNull(string0);
      assertEquals(3, constantArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-884), (-379), true);
      assertEquals(3, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)58, (byte) (-42)}, byteArray0);
      assertEquals("0:    l2i\n1:    astore\t\t%214\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      String string2 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_String[8](string_index = 34874), CONSTANT_NameAndType[12](name_index = -42, signature_index = -42), CONSTANT_Fieldref[9](class_index = -42, name_and_type_index = -2206)}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.format((-1876), (-1876), false, 'z');
      assertEquals("-1876", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-55);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)107, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.}", "V", false);
      assertEquals("java.lang.}", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "V", "@84#t13H=_3Vh", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('4');
      assertTrue(boolean0);
      
      String string0 = "2M>Cw]MI;W!y+WGy";
      File file0 = MockFile.createTempFile("2M>Cw]MI;W!y+WGy", "2M>Cw]MI;W!y+WGy");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/2M>Cw]MI;W!y+WGy02M>Cw]MI;W!y+WGy", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("2M>Cw]MI;W!y+WGy02M>Cw]MI;W!y+WGy", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "2M>Cw]MI;W!y+WGy");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 2M>Cw]MI;W!y+WGy
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = Utility.compactClassName("Bh'");
      assertEquals("Bh'", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, objectArray0.length);
      
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte)25;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-2), (byte) (-90), (byte)43, (byte)43}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)43, (byte)43, (byte)25}, byteArray1);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.replace("WcIF8__`FjA+|H", "WcIF8__`FjA+|H", "WcIF8__`FjA+|H");
      assertEquals("WcIF8__`FjA+|H", string0);
      assertNotNull(string0);
      
      String string1 = "Q]Wd";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q]Wd", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q]Wd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = Utility.convertString("YY1wzHOhM\"OAl,;E}");
      assertEquals("YY1wzHOhM\\\"OAl,;E}", string0);
      assertNotNull(string0);
      
      String string1 = "RjOw$ul";
      byte[] byteArray0 = Utility.decode("RjOw$ul", false);
      assertArrayEquals(new byte[] {(byte)82, (byte)106, (byte)79, (byte)119, (byte)40, (byte)108}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string2 = "{";
      String string3 = "putstatic";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("{", "putstatic");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // putstatic
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "\"NmCp";
      try { 
        Utility.typeOfSignature("\"NmCp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"NmCp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("GkiooS", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GkiooS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = Utility.convertString("void");
      assertEquals("void", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)68, (byte)34}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("void");
      assertEquals("void", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("void");
      assertEquals("void", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)34, 1024);
      assertEquals(34, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1024, constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertEquals(34, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1024, constantMethodHandle0.getReferenceIndex());
      assertEquals(1024, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(34, constantMethodHandle1.getReferenceKind());
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)68, (byte)34}, byteArray0);
      assertEquals("fstore_1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      String string2 = Utility.accessToString(618);
      assertEquals("private static synchronized volatile interface", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = Utility.fillup("org.apache.commons.io.filefilter.RegexFileFilter", 42, true, 'r');
      assertEquals("org.apache.commons.io.filefilter.RegexFileFilter", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte) (-17);
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)53, (byte)106, (byte) (-20), (byte)2, (byte) (-15), (byte)99, (byte) (-11), (byte)98, (byte) (-17)}, byteArray0);
      assertEquals("5j$ec$C$f1c$f5b$ef", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Integer integer0 = new Integer(21);
      assertEquals(21, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hd2LM'$09", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hd2LM'$09'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      int int0 = (-1350);
      try { 
        Utility.typeOfSignature("91#AT-m#WBd0>f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 91#AT-m#WBd0>f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      
      String string1 = Utility.compactClassName(", ");
      assertEquals(", ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          boolean boolean0 = Utility.isJavaIdentifierPart('Z');
          assertTrue(boolean0);
          
          String string0 = "g*)'g@_";
          String string1 = Utility.getSignature("g*)'g@_");
          assertEquals("Lg*)'g@_;", string1);
          assertFalse(string1.equals((Object)string0));
          assertNotNull(string1);
          
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          assertFalse(fileDescriptor0.valid());
          assertNotNull(fileDescriptor0);
          
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor131.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Integer integer0 = new Integer(41);
      assertEquals(41, (int)integer0);
      assertNotNull(integer0);
      
      try { 
        Utility.typeOfSignature("#=V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #=V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Illegal type: ", false);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)91, (byte)10, (byte)28}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)91, (byte)10, (byte)28}, byteArray0);
      assertEquals("lconst_1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("Dj;=eF|ORt.\"&", false);
      assertEquals("double", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Dj;=eF|ORt.\"&");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.signatureToString("B", true);
      assertEquals("byte", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = false;
      byte byte0 = Utility.typeOfSignature("[;HKwY?@~s$xk{");
      assertEquals((byte)13, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("L:/@%R7q9m+A&=.PF", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L:/@%R7q9m+A&=.PF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.methodSignatureReturnType("M", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = Utility.replace("\n", ")ir_Rw", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("a*9#~J");
      assertEquals("a*9#~J", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.convertString("a*9#~J");
      assertEquals("a*9#~J", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.replace(")ir_Rw", "a*9#~J", "\n");
      assertEquals(")ir_Rw", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      LocalVariableTable localVariableTable0 = new LocalVariableTable(0, 78, localVariableArray0, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, localVariableTable0.getTableLength());
      assertEquals(78, localVariableTable0.getLength());
      assertEquals(0, localVariableTable0.getNameIndex());
      assertEquals((byte)5, localVariableTable0.getTag());
      assertNotNull(localVariableTable0);
      assertEquals(0, localVariableArray0.length);
      assertEquals(0, constantArray0.length);
      
      try { 
        Utility.methodSignatureToString("t!o]?U8fqu", "d2i", ")ir_Rw", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: t!o]?U8fqu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      try { 
        Utility.typeOfSignature("':r,l7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ':r,l7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit(40, 37);
      assertEquals(8, int0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("E'A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E'A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      try { 
        Utility.methodSignatureReturnType("Eu:k[t^M-RrM", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Eu:k[t^M-RrM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = Utility.signatureToString("Fe~/Xn1ZtI", true);
      assertEquals("float", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)5;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1545), 102, false);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-46), (byte) (-103), (byte)55, (byte)59, (byte)5}, byteArray0);
      assertEquals("0:    d2f\n1:    <illegal opcode>\n2:    ifeq\t\t#14141\n5:    iconst_2\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Utility.compactClassName("Dj;=eF|ORt.\"&", "Dj;=eF|ORt.\"&", false);
      assertEquals("Dj;=eF|ORt.\"&", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("PNNEHT@1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PNNEHT@1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = Utility.compactClassName("java.laFg.short", "'", true);
      assertEquals("java.laFg.short", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = Utility.replace("L:/@%R7q9m+A&=.PF", "L:/@%R7q9m+A&=.PF", "L:/@%R7q9m+A&=.PF");
      assertEquals("L:/@%R7q9m+A&=.PF", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("L:/@%R7q9m+A&=.PF", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L:/@%R7q9m+A&=.PF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Illegal type: ", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface(915);
      assertEquals("interface", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.getSignature("':r,l7 a#o0I3E8v}q");
      assertEquals("L':r,l7;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-19);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 915, 2121);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = Utility.compactClassName("Illegal type: ", "Illegal type: ", false);
      assertEquals("Illegal type: ", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("Illegal type: ", true);
      assertEquals("int", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.printArray((Object[]) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)127, (byte)59, (byte) (-13), (byte) (-91), (byte) (-32), (byte)0, (byte)101, (byte)71, (byte)73}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)127, (byte)59, (byte) (-13), (byte) (-91), (byte) (-32), (byte)0, (byte)101, (byte)71, (byte)73}, byteArray0);
      assertEquals("land", string0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = Utility.compactClassName(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)0;
      String string1 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte) (-30), (byte)0}, byteArray0);
      assertEquals("00 00 01 e2 00", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, byteArray0.length);
      
      int int0 = Utility.clearBit(0, (byte)1);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) (byte) (-30);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      String string2 = Utility.printArray(objectArray0, true, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(5, objectArray0.length);
      
      String string3 = Utility.accessToString((int) (byte)0, false);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = Utility.printArray(objectArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(5, objectArray0.length);
      
      String string5 = Utility.fillup("", (byte)0, false, '~');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = new Integer((-762));
      assertEquals((-762), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2162), (-2162));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2d
         // 1:    lshr
         // 2:    <illegal opcode>
         // 3:    iadd
         // 4:    if_acmpne\t\t#17390
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = Utility.getSignature("vCOv2{zI=\"~p");
      assertEquals("LvCOv2{zI=\"~p;", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P,}Y#N2GDnUqf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P,}Y#N2GDnUqf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.typeOfSignature("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("Ot~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ot~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("[9lAHn@4enS}lQ[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9lAHn@4enS}lQ['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.}", "V", false);
      assertEquals("java.lang.}", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("V", true);
      assertEquals("void", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = Utility.format(1378, (-541), true, 'M');
      assertEquals("1378", string0);
      
      int int0 = Utility.clearBit((-541), 1378);
      assertEquals((-541), int0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!{Wo/Jw7,71n]e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {Wo/Jw7,71n]e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 2372;
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Utility.compactClassName("Illegal type: ", "Illegal type: ", false);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-388), (-388));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantString constantString0 = new ConstantString((-388));
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Utility.compactClassName("java.Mang.shtrt", "", true);
      int int0 = 56;
      Utility.fillup("~[S`:", 56, true, '|');
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "~[S`:";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "~[S`:|||||||||||||||||||||||||||||||||||||||||||||||||||";
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{java.lang.Object@1ba05f6a, , ~[S`:, , ~[S`:|||||||||||||||||||||||||||||||||||||||||||||||||||}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{java.lang.Object@1ba05f6a, , ~[S`:, , ~[S`:|||||||||||||||||||||||||||||||||||||||||||||||||||}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      int int0 = 47;
      Utility.compactClassName("Exceptions");
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Utility.classOrInterface(77);
      try { 
        Utility.typeOfSignature("?X*qJOtu|\"bR_#rsR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?X*qJOtu|\"bR_#rsR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-40);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1817), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Utility.classOrInterface(4551);
      try { 
        Utility.typeOfSignature(";[:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;[:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)72;
      byte byte0 = (byte)75;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)78;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.encode(byteArray0, false);
      Utility.typeOfSignature("J$t$b9P$b4HKN");
      Utility.typeOfSignature("J$t$b9P$b4HKN");
      try { 
        Utility.methodSignatureArgumentTypes("\t\t<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-86);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte)33;
      byteArray1[3] = (byte) (-122);
      byteArray1[4] = (byte) (-57);
      Utility.equals(byteArray0, byteArray1);
      Utility.accessToString((-279), false);
      Utility.isJavaIdentifierPart('B');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "anewarray";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("APPEND ", "anewarray", "public static synchronized volatile transient interface abstract strictfp synthetic annotation enum", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: APPEND 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = Utility.signatureToString("InnerClasses");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = Utility.convertString("<ZP?z;%b/5zW");
      assertEquals("<ZP?z;%b/5zW", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-40);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1817), (int) (byte)102);
      assertEquals("0:    fsub\n1:    <illegal opcode>\n", string1);
      
      String string2 = Utility.accessToString((-1));
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*RKX-DzjBcE&x97U+E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RKX-DzjBcE&x97U+E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Utility.clearBit(445, 445);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L:/@%R7q9m+A&=.PFu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L:/@%R7q9m+A&=.PFu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Utility.compactClassName(">\t", "b~a(", false);
      Utility.signatureToString("CH", false);
      try { 
        Utility.typeOfMethodSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-42);
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-42), (byte) (-42));
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-42), (-2206));
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-884), (-379), true);
      assertEquals("0:    lor\n1:    astore\t\t%214\n", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ",%mG-Mc4REY\"G%";
      try { 
        Utility.typeOfSignature(",%mG-Mc4REY\"G%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,%mG-Mc4REY\"G%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = "J";
      String string1 = "t`|9(@!]Q\"k()+uok\\";
      Utility.compactClassName("J", "t`|9(@!]Q\"k()+uok", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Utility.compactClassName("\t\t%", "java.lang.check7cast", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("WWa1IW]e>X:tmLYN;u", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WWa1IW]e>X:tmLYN;u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "RuntimeInvisibleAnnotations";
      Utility.compactClassName("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
      Utility.compactClassName("RuntimeInvisibleAnnotations", "", false);
      try { 
        Utility.methodSignatureArgumentTypes("Invalid signature: `", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.short", "'", false);
      assertEquals("java.lang.short", string0);
      
      String string1 = Utility.signatureToString("Dj6TIn'-N", false);
      assertEquals("double", string1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-85);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte)28;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte)43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CONSTANT_Utf8");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Utility.getSignature(">\t");
      Utility.typeOfSignature("L>;");
      Utility.signatureToString("L>;");
      Utility.classOrInterface((byte)14);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8Cq.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8Cq.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 669, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(jh+g.7mPX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (jh+g.7mPX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      Utility.compactClassName("");
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = Utility.replace("Fab/R`KBB% ylmQPgEv", "~6h8ZrV1Rf5cBQ?", "~6h8ZrV1Rf5cBQ?");
      assertEquals("Fab/R`KBB% ylmQPgEv", string0);
      
      int int0 = Utility.clearBit((-3702), (-3702));
      assertEquals((-3702), int0);
      
      int int1 = Utility.clearBit(59, 1218);
      assertEquals(59, int1);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t<");
      String string1 = Utility.accessToString((-130));
      assertEquals("private protected static final synchronized volatile native interface abstract strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.methodSignatureReturnType("Fab/R`KBB% ylmQPgEv");
      assertEquals("float", string2);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-67);
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("00 bd");
      int int0 = 612;
      Utility.isSet(612, (byte) (-67));
      try { 
        Utility.typeOfSignature("2muL2J\"&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2muL2J\"&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Utility.isJavaIdentifierPart('-');
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature("\n\t\tthrows ");
      assertEquals("Lthrows;", string0);
      
      int int0 = Utility.clearBit(153, 1417);
      assertEquals(153, int0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      int int0 = 141;
      Utility.clearBit(141, 141);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yg~_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yg~_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Utility.searchOpcode("R]N97'");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "R]N97'";
      objectArray0[1] = (Object) "R]N97'";
      objectArray0[2] = (Object) "R]N97'";
      objectArray0[3] = (Object) "R]N97'";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)76;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-97), 4054);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Utility.clearBit(5, 5);
      // Undeclared exception!
      try { 
        Utility.signatureToString("HBTK!\"03-u3}<m.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HBTK!\"03-u3}<m.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Utility.replace("Fab/R`KBB% ylmQPgEv", "~6h8ZrV1Rf5cBQ?", "~6h8ZrV1Rf5cBQ?");
      Utility.typeOfSignature("Fab/R`KBB% ylmQPgEv");
      try { 
        Utility.methodSignatureArgumentTypes("{rtu%)5yP-EcFe09", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {rtu%)5yP-EcFe09
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = Utility.replace("WB*oQ$H%iX", "astore_2", "scA&vt(@_soyJj:}");
      assertEquals("WB*oQ$H%iX", string0);
      
      String string1 = Utility.accessToString((-2468), true);
      assertEquals("protected static final volatile abstract synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ev");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ev
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = Utility.convertString(">\t");
      assertEquals(">\t", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      int int0 = Utility.setBit(107, 107);
      assertEquals(2155, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)41;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Utility.clearBit(76, 76);
      String string0 = "RH~An odmKb-<&eE";
      try { 
        Utility.typeOfSignature("RH~An odmKb-<&eE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RH~An odmKb-<&eE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)28;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (int) (byte)43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Utility.clearBit(76, 76);
      Utility.typeOfSignature("T,apLnG!");
      String string0 = "invokestatic";
      Utility.compactClassName("invokestatic", true);
      Utility.typeOfSignature("T,apLnG!");
      String string1 = "@";
      String string2 = "org.apache.bcel.classfile.ConstantMethodType";
      boolean boolean0 = true;
      int int0 = (-2459);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Df3;h3K", "org.apache.bcel.classfile.ConstantMethodType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"org.apache.bcel.classfile.ConstantMethodType\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      int int0 = Utility.clearBit(76, 76);
      assertEquals(76, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('O');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = "W2[";
      try { 
        Utility.typeOfSignature("W2[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W2[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Utility.signatureToString("VVMx#");
      Utility.clearBit((-1), 4096);
      try { 
        Utility.methodSignatureArgumentTypes("(&x9/gM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&x9/gM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Z2C=[_UE", "double", "aqsVM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2C=[_UE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = "Yg~_";
      try { 
        Utility.typeOfSignature("Yg~_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yg~_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Utility.replace("\n", "\n", "\n");
      try { 
        Utility.typeOfSignature("6=H[GmnH]|H$Ux");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6=H[GmnH]|H$Ux
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("RuntimeInvisibleAnnotations", "Invalid signature: `", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeInvisibleAnnotations", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      Utility.compactClassName("", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(1689);
      Utility.accessToString(42, true);
      Utility.clearBit(3283, 591);
      String string1 = "%Zgte39YF^WWTC\\+N2";
      try { 
        Utility.typeOfMethodSignature("%Zgte39YF^WWTC+N2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %Zgte39YF^WWTC+N2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("za@PAZp%I/p5bcY");
      Utility.searchOpcode("za@PAZp%I/p5bcY");
      Utility.isJavaIdentifierPart('^');
      Utility.isJavaIdentifierPart('^');
      Utility.accessToString((-882), false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "private protected static transient abstract strictfp synthetic annotation enum";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", (String) null, "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("&lYPViCQ=HmV8$n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &lYPViCQ=HmV8$n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = Utility.replace("\n", "\n", "\n");
      assertEquals("\n", string0);
      
      String string1 = Utility.convertString("\n");
      assertEquals("\\n", string1);
      
      String string2 = Utility.format(1094, 523, false, '7');
      assertEqualsstring2);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = Utility.compactClassName(" R]N97' 2`g|h(d1&?", " R]N97' 2`g|h(d1&?", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      int int0 = Utility.clearBit(174, (byte)0);
      assertEquals(174, int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = Utility.compactClassName("v)");
      String string1 = Utility.format((-119), 193, false, 'c');
      assertEquals("ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc-119", string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "v)";
      String string2 = Utility.printArray(objectArray0, false);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      Utility.getSignature("42F]5}_g");
      try { 
        Utility.typeOfSignature("42F]5}_g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 42F]5}_g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Utility.replace("\n", "\n", "\n");
      Utility.convertString("\n");
      // Undeclared exception!
      try { 
        Utility.compactClassName("\n", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "";
      Utility.getSignature("");
      Utility.encode(byteArray0, false);
      Utility.setBit(1403, 1403);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L;");
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "L;";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "L;";
      objectArray0[6] = (Object) null;
      Utility.printArray(objectArray0);
      Utility.searchOpcode("");
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Utility.convertString("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "$019kkn!";
      Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Utility.replace("\n", "\n", "\n");
      Utility.convertString("\n");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      int int0 = Utility.clearBit((byte) (-70), (-1444));
      assertEquals((-268435526), int0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Utility.getSignature(":");
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = "56>iA^m%?hhEpw}F}_";
      try { 
        Utility.typeOfSignature("56>iA^m%?hhEpw}F}_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 56>iA^m%?hhEpw}F}_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = Utility.replace("\n", "\n", "\n");
      String string1 = Utility.replace("<", "\n", "<");
      assertEquals("<", string1);
      
      String string2 = Utility.compactClassName("\n");
      assertTrue(string2.equals((Object)string0));
      
      String string3 = Utility.methodSignatureReturnType("S]jj8z>B{=W0");
      assertEquals("short", string3);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.replace("[ ", ">", (String) null);
      Utility.compactClassName("rc}ZnmTw@7Y*i}851.y");
      try { 
        Utility.methodSignatureReturnType("[ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.methodSignatureReturnType("BtFN>V|o{$");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "byte");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("BtFN>V|o{$", "Lq[zE&bZ0p", ">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BtFN>V|o{$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = Utility.replace("\n", "\n", "\n");
      assertEquals("\n", string0);
      
      String string1 = Utility.convertString("\n");
      assertEquals("\\n", string1);
      
      byte byte0 = Utility.typeOfSignature("Lq[zE&bZ0Ep");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Utility.getSignature(">\t");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L>;", ">\t", ">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L>;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = Utility.convertString("=yd'|5s?|2e");
      assertEquals("=yd\\'|5s?|2e", string0);
      
      String string1 = Utility.getSignature("=yd'|5s?|2e");
      assertEquals("L=yd'|5s?|2e;", string1);
      
      byte[] byteArray0 = Utility.decode("(-suQD?", false);
      assertArrayEquals(new byte[] {(byte)40, (byte)45, (byte)115, (byte)117, (byte)81, (byte)68, (byte)63}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmple");
      Utility.getSignature("if_icmple");
      String string0 = Utility.methodSignatureReturnType("Lif_icmple;", true);
      assertEquals("if_icmple", string0);
      
      String string1 = Utility.getSignature("Lif_icmple;");
      assertEquals("LLif_icmple;;", string1);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isSet((-1690), (-1141));
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("N!&Aw5[xW");
      assertEquals("N!&Aw5[xW", string0);
      
      String string1 = Utility.accessToString((-1141), false);
      assertEquals("public private static transient native interface strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      Utility.clearBit(557, 557);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = "(7[smkEef";
      String string1 = "org.apache.bcel.classfile.ConstantInterfaceMethodref";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" 1[\"&m!l", "(7[smkEef", "org.apache.bcel.classfile.ConstantInterfaceMethodref", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  1[\"&m!l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("}%wJd@zy!R[_A", (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-13);
      Utility.signatureToString("VVMx#");
      int int0 = Utility.clearBit(174, (byte) (-13));
      assertEquals(174, int0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet((-1679), (-1141));
      try { 
        Utility.methodSignatureReturnType("Kudzh9C5_J`CTtD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kudzh9C5_J`CTtD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.getSignature(" 1[\"&m!l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[\"&m!l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Utility.replace("fvG;17}aRQ0m", "fvG;17}aRQ0m", "interface");
      Utility.compactClassName("interface");
      Utility.convertString("U\"a8!");
      // Undeclared exception!
      try { 
        Utility.signatureToString("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[4] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = Utility.getSignature("a_*(|PGQ7]02=:R.g");
      assertEquals("La_*(|PGQ7]02=:R/g;", string0);
      
      boolean boolean0 = Utility.isSet(60, 60);
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface(60);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "CodeException(start_pc = ";
      String string0 = Utility.getSignature("CodeException(start_pc = ");
      assertEquals("LCodeException(start_pc;", string0);
      
      String string1 = Utility.compactClassName("", "LCodeException(start_pc;", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = "MDG)Up";
      try { 
        Utility.methodSignatureReturnType("MDG)Up", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Up'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Utility.replace("\n", ")ir_Rw", "\n");
      Utility.convertString("a*9#~J");
      Utility.replace("%'Gq}", "`HbCnB<", ")ir_Rw");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      
      int int0 = Utility.setBit((byte) (-70), 2747);
      assertEquals((-70), int0);
      
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.replace("\n", ")ir_Rw", "\n");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-13);
      Utility.getSignature("new");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "new";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "new";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Utility.replace("\n", ")ir_Rw", "\n");
      Utility.convertString("a*9#~J");
      // Undeclared exception!
      try { 
        Utility.getSignature("Lq[zE&bZ0Ep");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[zE&bZ0Ep
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = "d,aZ6oTuT";
      String string1 = "N?'~}SRh";
      int int0 = 1175;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 1175, true, '');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = "\\n";
      byte byte0 = (byte)0;
      String string1 = "invokeinterface";
      try { 
        Utility.methodSignatureReturnType("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Utility.getSignature("boolean");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Z", "H4T4=M}7Y<x=", "H4T4=M}7Y<x=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-13);
      String string0 = Utility.signatureToString("VVMx#");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = Utility.getSignature("fBE%C!_V");
      assertEquals("LfBE%C!_V;", string0);
      
      String string1 = Utility.format(834, 834, false, 'w');
      assertEquals("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww834", string1);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = Utility.isSet(834, 834);
      Utility.getSignature("if_icmplt");
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String string0 = Utility.accessToString(1328, true);
      assertEquals("final native abstract", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte) (-7);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      Utility.searchOpcode("short");
      Utility.replace("invokestatic", "h(`$Q", "invokestatic");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "h(`$Q";
      objectArray0[2] = (Object) "invokestatic";
      objectArray0[3] = (Object) "invokestatic";
      Utility.printArray(objectArray0, true);
      try { 
        Utility.methodSignatureReturnType("gE6UQEt!G@)yl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `yl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.classOrInterface((byte) (-13));
      assertEquals("interface", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) (byte) (-70);
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("interface, -70", string1);
      
      String string2 = Utility.compactClassName("acnAb", false);
      assertEquals("acnAb", string2);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      try { 
        Utility.typeOfSignature("$S.1HnNUtdA W-;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $S.1HnNUtdA W-;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      short short0 = Utility.searchOpcode("void");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)3);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool2);
      assertEquals("iconst_0", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = Utility.replace("\n", ")ir_Rw", "\n");
      assertEquals("\n", string0);
      
      String string1 = Utility.convertString("a*9#~J");
      assertEquals("a*9#~J", string1);
      
      Object[] objectArray0 = new Object[0];
      int int0 = Utility.setBit(3, (-1620241918));
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      String string0 = Utility.fillup("N?'~}SRh", (-644), false, '_');
      assertEquals("N?'~}SRh", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Utility.printArray(objectArray0, false, true);
      String string1 = Utility.replace(", low = ", "qmGV+", "J0ArWH'Ov]ir~^id");
      assertEquals(", low = ", string1);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "d,aZ6oTuT";
      objectArray0[1] = (Object) "CodeException(start_pc = ";
      Utility.getSignature("CodeException(start_pc = ");
      try { 
        Utility.methodSignatureReturnType("<illegal opcode>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      String string0 = Utility.printArray((Object[]) constantArray0, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfMethodSignature("$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.classOrInterface((byte) (-13));
      try { 
        Utility.methodSignatureArgumentTypes("interface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.accessToString((-1019));
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      constantPool0.toString();
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-118);
      objectArray0[1] = (Object) (byte) (-118);
      objectArray0[2] = (Object) (byte) (-118);
      try { 
        Utility.methodSignatureArgumentTypes("$8a$A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $8a$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("-]", false);
      Utility.equals(byteArray0, byteArray0);
      Utility.setBit((-2068), 200);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = "address";
      byte[] byteArray0 = Utility.decode("address", false);
      Utility.accessToString((-1019));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 61646472
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      Utility.searchOpcode("U#]U\"j|A&");
      Utility.replace("org.apache.bcel.classfile.ElementValuePair", "U#]U\"j|A&", "Byte code error: ");
      try { 
        Utility.typeOfSignature("%CWpSw%.0jV>#lfO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %CWpSw%.0jV>#lfO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-118);
      objectArray0[2] = (Object) (byte) (-118);
      try { 
        Utility.methodSignatureReturnType("$8a$A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$8a$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Utility.accessToString(3130, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<x");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "private static final synchronized abstract strictfp");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "private static final synchronized abstract strictfp";
      printStream0.println();
      objectArray0[2] = (Object) printStream0;
      Utility.printArray(printStream0, objectArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = '1';
      charArray0[2] = 'w';
      mockPrintStream0.println(charArray0);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(43, 43);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 43, (-2297), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-118);
      objectArray0[1] = (Object) (byte) (-118);
      objectArray0[2] = (Object) (byte) (-118);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Utility.searchOpcode("dup_x1");
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object2;
      objectArray0[1] = object1;
      objectArray0[2] = object2;
      objectArray0[3] = object1;
      objectArray0[4] = object1;
      Object object3 = new Object();
      objectArray0[5] = object1;
      Object object4 = new Object();
      objectArray0[6] = object4;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Utility.searchOpcode("\n");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object1;
      Object object2 = new Object();
      objectArray0[1] = object2;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Utility.searchOpcode("\n");
      Utility.replace("\n", "a*9#~J", "a*9#~J");
      Utility.convertString("\n");
      try { 
        Utility.methodSignatureArgumentTypes("y[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: y[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-42);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g[9WM-DX` ");
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("nop", string0);
      
      String string1 = Utility.convertString("putstatic");
      assertEquals("putstatic", string1);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = Utility.fillup("N?'~}SRh", 0, true, '\"');
      assertEquals("N?'~}SRh", string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("lcmp", string1);
      
      String string2 = Utility.convertString("frem");
      assertEquals("frem", string2);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Utility.printArray(objectArray0, true);
      String string0 = "?O37x";
      try { 
        Utility.typeOfMethodSignature("?O37x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?O37x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = Utility.accessToString(84);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "protected final volatile";
      stringArray0[1] = "protected final volatile";
      stringArray0[2] = "7>.kK";
      stringArray0[3] = "7>.kK";
      stringArray0[4] = "protected final volatile";
      stringArray0[5] = "7>.kK";
      stringArray0[6] = "7>.kK";
      stringArray0[7] = "protected final volatile";
      String string1 = Utility.methodTypeToSignature("7>.kK", stringArray0);
      assertEquals("(Lprotected;Lprotected;L7>/kK;L7>/kK;Lprotected;L7>/kK;L7>/kK;Lprotected;)L7>/kK;", string1);
      
      String string2 = Utility.compactClassName("protected final volatile", "0sy46T;i7`4_", false);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      boolean boolean0 = true;
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      try { 
        Utility.typeOfSignature("dup_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup_x1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.replace("a*9#~J", "2z(`", "<illegal opcode>");
      assertEquals("a*9#~J", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)75;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$bb$ff$81$82$80$XK", string1);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.accessToString(3137, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<x");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "public volatile abstract strictfp");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "public volatile abstract strictfp";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) printStream0;
      Utility.printArray(printStream0, objectArray0);
      assertSame(printStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      short short0 = Utility.searchOpcode(":");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.replace("8&]Fg", "astore_2", (String) null);
      assertNotNull(string0);
      assertEquals("8&]Fg", string0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Utility.classOrInterface((-1859));
      String string0 = "\"Eg}~ddmuAk<";
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"Eg}~ddmuAk<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"Eg}~ddmuAk<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 62211. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      int int0 = 0;
      String string0 = "N?'~}SRh";
      int int1 = (-644);
      Utility.fillup("N?'~}SRh", 0, true, '\"');
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.compactClassName(" ");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)0;
      int int0 = Utility.clearBit(0, (byte)1);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " ";
      String string0 = Utility.accessToString((int) (byte)0);
      assertEquals("", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('.');
      assertFalse(boolean0);
      
      String string1 = Utility.format(0, 31, true, ':');
      assertEquals("0::::::::::::::::::::::::::::::", string1);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Utility.fillup("N?'~}SRh", 54, true, '+');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) null;
      Object object2 = new Object();
      objectArray0[8] = object2;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      char char0 = '_';
      Utility.isJavaIdentifierPart('_');
      byte[] byteArray0 = null;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte)99;
      byteArray1[2] = (byte) (-79);
      byteArray1[3] = (byte)99;
      byteArray1[4] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      Utility.clearBit((-766), 197);
      byte byte0 = (byte) (-53);
      byte byte1 = (byte)124;
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$8a$A", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-118);
      objectArray0[1] = (Object) (byte) (-118);
      objectArray0[2] = (Object) (byte) (-118);
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"-118\", \"-118\", \"-118\"}", string1);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      String string0 = "<l<AW";
      Utility.getSignature("<l<AW");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)115;
      try { 
        Utility.typeOfSignature("<l<AW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <l<AW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Utility.getSignature("2/5dVM= =s,");
      Utility.methodTypeToSignature("dstore_1", (String[]) null);
      int int0 = (-1402);
      Utility.fillup("", (-1402), false, ':');
      Utility.isJavaIdentifierPart('{');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.reset();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Utility.searchOpcode("\n");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\n", "", "a*9#~J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String string0 = Utility.replace("", "ZxmPzZCA!JQi.", "");
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte)59;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00 5a 00 00 96 2f 39 65 3b", string1);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      int int0 = (-17);
      Utility.isSet((-17), (-17));
      String string0 = "|Do91ZZs'g.";
      boolean boolean0 = true;
      try { 
        Utility.decode("|Do91ZZs'g.", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Utility.format(0, 0, true, '\"');
      Utility.compactClassName("X(( zP;W-FI", true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      String string0 = "?O37x";
      try { 
        Utility.typeOfMethodSignature("?O37x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?O37x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.bcel.classfile.ConstantMethodref", "org.apache.bcel.classfile.ConstantMethodref");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "org.apache.bcel.classfile.ConstantMethodref";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) file0;
      mockPrintStream0.print('V');
      objectArray0[3] = (Object) "org.apache.bcel.classfile.ConstantMethodref";
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "org.apache.bcel.classfile.ConstantMethodref";
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) file0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string0 = "";
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString("", "", "org.apache.bcel.classfile.ConstantMethodref", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      boolean boolean0 = true;
      char char0 = 'T';
      Utility.format(93, 93, true, 'T');
      byte[] byteArray0 = Utility.decode("93TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", false);
      Utility.clearBit(93, 93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 84
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)14;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      Utility.getSignature("<l<AW");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFully(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = "address";
      try { 
        Utility.decode("address", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("i?", " extends ", "{\"java.lang.Object@2575a1ec\", \"java.lang.Object@1326b9a5\", \"java.lang.Object@7ef8f70f\", \"java.lang.Object@fe00c06\", \"java.lang.Object@712a6d7\", \"java.lang.Object@21dfdc01\", \"java.lang.Object@18a617ba\", \"java.lang.Object@17a9a894\", \"java.lang.Object@51f80a8\"}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      Utility.fillup("N?'~}SRh", (-644), false, '_');
      URI uRI0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = "fvG;17}aRQ0m";
      String string1 = "interface";
      Utility.replace("fvG;17}aRQ0m", "fvG;17}aRQ0m", "interface");
      Utility.compactClassName("interface");
      try { 
        Utility.typeOfMethodSignature("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = "bQgaji0'5";
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("bQgaji0'5", "}f|_SRs", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bQgaji0'5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Utility.convertString("=g<8htd6zTL<}2jv)G");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)86;
      byteArray1[3] = (byte)120;
      byteArray1[4] = (byte)120;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)86, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) charArrayWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) charArrayWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = "dstore_1";
      boolean boolean0 = false;
      String string1 = Utility.fillup("dstore_1", 2397, false, '/');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string1, "dstore_1", string1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signaturedstore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = "vay4r[:@AN";
      try { 
        Utility.methodSignatureArgumentTypes("vay4r[:@AN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vay4r[:@AN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-118);
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)99;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "T/L=o|sXQ.@RhL";
      try { 
        Utility.methodSignatureReturnType("T/L=o|sXQ.@RhL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T/L=o|sXQ.@RhL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String string0 = "tHKDbV";
      try { 
        Utility.typeOfMethodSignature("tHKDbV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tHKDbV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = Utility.format((-211), 2623, false, '/');
      // Undeclared exception!
      try { 
        Utility.signatureToString(string0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "QKs*7N<d1~%d4Rw", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("+P<Noo{A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+P<Noo{A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      int int0 = Utility.setBit(123, 1019);
      assertEquals(134217851, int0);
      
      String string0 = Utility.replace(".9", ".9", ".9");
      assertEquals(".9", string0);
      
      String string1 = Utility.compactClassName("");
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte)0, 0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-5));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)88;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "~y4`hmDu_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      int int0 = 14;
      Utility.setBit(14, 547);
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.Object@48af5a86, java.lang.Object@3c414f8d, java.lang.Object@5cfc20bf, java.lang.Object@4bac74e6", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@48af5a86, java.lang.Object@3c414f8d, java.lang.Object@5cfc20bf, java.lang.Object@4bac74e6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, (-46), true);
      assertEquals("0:    i2s\n1:    iastore\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      String string0 = ">XU[X$&r<e";
      // Undeclared exception!
      try { 
        Utility.signatureToString(">XU[X$&r<e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>XU[X$&r<e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
