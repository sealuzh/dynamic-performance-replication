/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 01:23:29 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.SmartContentSelector;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FFUV[R:Iw");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setUUID("FFUV[R:Iw");
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertNotNull(spider2);
      
      Spider spider3 = spider2.setExitWhenComplete(false);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertNotNull(spider3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "FFUV[R:Iw";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertNotNull(spider_StatusArray0);
      assertEquals(3, spider_StatusArray0.length);
      
      String string0 = "3k-:b\\kU#K\\`v";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3k-:bkU#K`v");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      // Undeclared exception!
      try { 
        spider0.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "//<= [_";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("//<= [_");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("//<= [_");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      Spider spider2 = new Spider(simplePageProcessor0);
      assertFalse(spider2.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider0));
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertNotNull(spider2);
      
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "'fkL6g)\"3lcq[]^v");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.scheduler((Scheduler) null);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertNotNull(spider2);
      
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      assertEquals("/data/webmagic/", jsonFilePipeline0.getPath());
      assertNotNull(jsonFilePipeline0);
      
      Spider spider3 = spider2.addPipeline(jsonFilePipeline0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals("/data/webmagic/", jsonFilePipeline0.getPath());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertNotNull(spider3);
      
      Page page0 = new Page();
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertNotNull(page0);
      
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status cod error, page { , code: {}");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      spider0.sleep(41);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FFUV[R:Iw");
      //  // Unstable assertion: assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertNotNull(spider0);
      
      Spider spider1 = spider0.setUUID("FFUV[R:Iw");
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      //  // Unstable assertion: assertNotNull(spider1);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      //  // Unstable assertion: assertNotNull(queueScheduler0);
      
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider1, spider2);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider2.getStatus());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertNotNull(spider2);
      
      Spider spider3 = spider2.setExitWhenComplete(false);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider1, spider2);
      //  // Unstable assertion: assertSame(spider1, spider3);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertSame(spider2, spider3);
      //  // Unstable assertion: assertSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertSame(spider3, spider2);
      //  // Unstable assertion: assertSame(spider3, spider1);
      //  // Unstable assertion: assertSame(spider3, spider0);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertFalse(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      //  // Unstable assertion: assertFalse(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertFalse(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider2.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider3.isSpawnUrl());
      //  // Unstable assertion: assertFalse(spider3.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider3.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider3.getPageCount());
      //  // Unstable assertion: assertNotNull(spider3);
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      //  // Unstable assertion: assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, spider0, "FFUV[R:Iw");
      //  // Unstable assertion: assertNotNull(mockThread0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertFalse(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      //  // Unstable assertion: assertNotNull(thread_UncaughtExceptionHandler0);
      
      Spider spider4 = spider0.addPipeline((Pipeline) null);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider4);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider4, spider1);
      //  // Unstable assertion: assertSame(spider4, spider0);
      //  // Unstable assertion: assertSame(spider4, spider3);
      //  // Unstable assertion: assertSame(spider4, spider2);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertFalse(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertEquals(0L, spider4.getPageCount());
      //  // Unstable assertion: assertFalse(spider4.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider4.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider4.getStatus());
      //  // Unstable assertion: assertNotNull(spider4);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2001, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, false);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertFalse(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      //  // Unstable assertion: assertNotNull(forkJoinPool0);
      
      Spider spider5 = spider1.setExecutorService(forkJoinPool0);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider4);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider0, spider5);
      //  // Unstable assertion: assertSame(spider1, spider2);
      //  // Unstable assertion: assertSame(spider1, spider4);
      //  // Unstable assertion: assertSame(spider1, spider3);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertSame(spider1, spider5);
      //  // Unstable assertion: assertSame(spider5, spider0);
      //  // Unstable assertion: assertSame(spider5, spider1);
      //  // Unstable assertion: assertSame(spider5, spider3);
      //  // Unstable assertion: assertSame(spider5, spider2);
      //  // Unstable assertion: assertSame(spider5, spider4);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertFalse(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      //  // Unstable assertion: assertFalse(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider5.getStatus());
      //  // Unstable assertion: assertFalse(spider5.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider5.getPageCount());
      //  // Unstable assertion: assertTrue(spider5.isSpawnUrl());
      //  // Unstable assertion: assertNotNull(spider5);
      
      List<SpiderListener> list0 = spider5.getSpiderListeners();
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider4);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider0, spider5);
      //  // Unstable assertion: assertSame(spider1, spider2);
      //  // Unstable assertion: assertSame(spider1, spider4);
      //  // Unstable assertion: assertSame(spider1, spider3);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertSame(spider1, spider5);
      //  // Unstable assertion: assertSame(spider5, spider0);
      //  // Unstable assertion: assertSame(spider5, spider1);
      //  // Unstable assertion: assertSame(spider5, spider3);
      //  // Unstable assertion: assertSame(spider5, spider2);
      //  // Unstable assertion: assertSame(spider5, spider4);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertFalse(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      //  // Unstable assertion: assertFalse(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider5.getStatus());
      //  // Unstable assertion: assertFalse(spider5.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider5.getPageCount());
      //  // Unstable assertion: assertTrue(spider5.isSpawnUrl());
      //  // Unstable assertion: assertNull(list0);
      
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("BuXl8clkC'k");
       //  fail("Expecting exception: NoClassDefFoundError");
       // Unstable assertion
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FFUV[R:Iw");
      //  // Unstable assertion: assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertNotNull(spider0);
      
      Spider spider1 = spider0.setUUID("FFUV[R:Iw");
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertTrue(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      //  // Unstable assertion: assertNotNull(spider1);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      //  // Unstable assertion: assertNotNull(queueScheduler0);
      
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertSame(spider1, spider2);
      //  // Unstable assertion: assertSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertTrue(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider2.getStatus());
      //  // Unstable assertion: assertNotNull(spider2);
      
      Spider spider3 = spider2.setExitWhenComplete(true);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertSame(spider1, spider3);
      //  // Unstable assertion: assertSame(spider1, spider2);
      //  // Unstable assertion: assertSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertSame(spider2, spider3);
      //  // Unstable assertion: assertSame(spider3, spider1);
      //  // Unstable assertion: assertSame(spider3, spider0);
      //  // Unstable assertion: assertSame(spider3, spider2);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertTrue(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider2.getStatus());
      //  // Unstable assertion: assertTrue(spider3.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider3.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider3.getPageCount());
      //  // Unstable assertion: assertTrue(spider3.isExitWhenComplete());
      //  // Unstable assertion: assertNotNull(spider3);
      
      String[] stringArray0 = new String[18];
      stringArray0[0] = "FFUV[R:Iw";
      Spider spider4 = spider2.clearPipeline();
      //  // Unstable assertion: assertSame(spider0, spider4);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertSame(spider1, spider3);
      //  // Unstable assertion: assertSame(spider1, spider2);
      //  // Unstable assertion: assertSame(spider1, spider4);
      //  // Unstable assertion: assertSame(spider2, spider4);
      //  // Unstable assertion: assertSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertSame(spider2, spider3);
      //  // Unstable assertion: assertSame(spider4, spider0);
      //  // Unstable assertion: assertSame(spider4, spider1);
      //  // Unstable assertion: assertSame(spider4, spider3);
      //  // Unstable assertion: assertSame(spider4, spider2);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertTrue(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider2.getStatus());
      //  // Unstable assertion: assertTrue(spider4.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider4.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider4.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider4.getPageCount());
      //  // Unstable assertion: assertNotNull(spider4);
      
      spider3.start();
      //  // Unstable assertion: assertSame(spider0, spider4);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertSame(spider1, spider3);
      //  // Unstable assertion: assertSame(spider1, spider2);
      //  // Unstable assertion: assertSame(spider1, spider4);
      //  // Unstable assertion: assertSame(spider2, spider4);
      //  // Unstable assertion: assertSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertSame(spider2, spider3);
      //  // Unstable assertion: assertSame(spider3, spider1);
      //  // Unstable assertion: assertSame(spider3, spider0);
      //  // Unstable assertion: assertSame(spider3, spider4);
      //  // Unstable assertion: assertSame(spider3, spider2);
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertTrue(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider1.getStatus());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider2.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider3.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider3.getStatus());
      //  // Unstable assertion: assertEquals(0L, spider3.getPageCount());
      //  // Unstable assertion: assertTrue(spider3.isExitWhenComplete());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      //  // Unstable assertion: assertNotNull(forkJoinPool0);
      
      // Undeclared exception!
      try { 
        spider4.thread((ExecutorService) forkJoinPool0, 3271);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = " stop fail!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      assertNotNull(multiPagePipeline0);
      
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "Init");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Request request0 = new Request("&F!l>H<&9");
      assertEquals(0L, request0.getPriority());
      assertEquals("&F!l>H<&9", request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertNotNull(request0);
      
      Request request1 = request0.setCharset("&F!l>H<&9");
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertEquals(0L, request0.getPriority());
      assertEquals("&F!l>H<&9", request0.getCharset());
      assertEquals("&F!l>H<&9", request0.getUrl());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals(0L, request1.getPriority());
      assertEquals("&F!l>H<&9", request1.getCharset());
      assertEquals("&F!l>H<&9", request1.getUrl());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getMethod());
      assertNotNull(request1);
      
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download(request0, (Task) spider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-1859));
      assertSame(phantomJSDownloader0, phantomJSDownloader1);
      assertSame(phantomJSDownloader1, phantomJSDownloader0);
      assertEquals((-1859), phantomJSDownloader0.getRetryNum());
      assertEquals((-1859), phantomJSDownloader1.getRetryNum());
      assertNotNull(phantomJSDownloader1);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        spider1.thread((-1859));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FFUV[R:Iw");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      Spider spider3 = spider1.setExitWhenComplete(false);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertNotNull(spider3);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "FFUV[R:Iw";
      stringArray0[1] = ".dF~o sw=X9j=I7";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "FFUV[R:Iw";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.MultiPagePipeline");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      assertEquals(0, requestArray0.length);
      
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0, linkedList0.size());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertNotNull(spider2);
      assertEquals(0, requestArray0.length);
      
      Spider spider3 = Spider.create(simplePageProcessor0);
      assertNotSame(spider3, spider0);
      assertNotSame(spider3, spider1);
      assertNotSame(spider3, spider2);
      assertFalse(spider3.equals((Object)spider0));
      assertFalse(spider3.equals((Object)spider1));
      assertFalse(spider3.equals((Object)spider2));
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertNotNull(spider3);
      
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      // Undeclared exception!
      try { 
        spider3.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      assertEquals(0, stringArray0.length);
      
      Request request0 = new Request("");
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getCharset());
      assertNotNull(request0);
      
      Request request1 = request0.setPriority(786L);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals("", request0.getUrl());
      assertNull(request0.getCharset());
      assertEquals(786L, request0.getPriority());
      assertNull(request1.getCharset());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals(786L, request1.getPriority());
      assertNotNull(request1);
      
      Request request2 = request1.setUrl("t\ta{b7~0");
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals("t\ta{b7~0", request0.getUrl());
      assertNull(request0.getCharset());
      assertEquals(786L, request0.getPriority());
      assertNull(request1.getCharset());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getMethod());
      assertEquals("t\ta{b7~0", request1.getUrl());
      assertEquals(786L, request1.getPriority());
      assertEquals(786L, request2.getPriority());
      assertEquals("t\ta{b7~0", request2.getUrl());
      assertNull(request2.getMethod());
      assertNull(request2.getCharset());
      assertFalse(request2.isBinaryContent());
      assertNotNull(request2);
      
      Request request3 = request2.setBinaryContent(true);
      assertSame(request0, request1);
      assertSame(request0, request3);
      assertSame(request0, request2);
      assertSame(request1, request2);
      assertSame(request1, request3);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertSame(request2, request3);
      assertSame(request3, request0);
      assertSame(request3, request1);
      assertSame(request3, request2);
      assertNull(request0.getMethod());
      assertEquals("t\ta{b7~0", request0.getUrl());
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertEquals(786L, request0.getPriority());
      assertNull(request1.getCharset());
      assertTrue(request1.isBinaryContent());
      assertNull(request1.getMethod());
      assertEquals("t\ta{b7~0", request1.getUrl());
      assertEquals(786L, request1.getPriority());
      assertEquals(786L, request2.getPriority());
      assertEquals("t\ta{b7~0", request2.getUrl());
      assertNull(request2.getMethod());
      assertNull(request2.getCharset());
      assertTrue(request2.isBinaryContent());
      assertTrue(request3.isBinaryContent());
      assertNull(request3.getMethod());
      assertEquals("t\ta{b7~0", request3.getUrl());
      assertEquals(786L, request3.getPriority());
      assertNull(request3.getCharset());
      assertNotNull(request3);
      
      // Undeclared exception!
      try { 
        spider1.onSuccess(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FnUV[RCIw");
      assertNotNull(simplePageProcessor0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      boolean boolean0 = true;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertNotNull(spider1);
      
      // Undeclared exception!
      try { 
        spider1.thread((-1223));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      Date date0 = spider0.getStartTime();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNull(date0);
      
      Request request0 = new Request();
      assertNull(request0.getCharset());
      assertEquals(0L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertNotNull(request0);
      
      // Undeclared exception!
      try { 
        spider0.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.MultiPagePipeline");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      assertEquals(0, requestArray0.length);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "us.codecraft.webmagic.pipeline.MultiPagePipeline");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertNotNull(spider2);
      assertEquals(0, requestArray0.length);
      
      Spider spider3 = spider1.setPipelines((List<Pipeline>) null);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertNotNull(spider3);
      assertEquals(0, requestArray0.length);
      
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      Spider spider4 = spider0.setExecutorService((ExecutorService) null);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertNotNull(spider4);
      
      Spider spider5 = spider2.clearPipeline();
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider1, spider5);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider3);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertNotNull(spider5);
      assertEquals(0, requestArray0.length);
      
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("B&h;*yjU`U", "e");
      assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      assertEquals(0, phantomJSDownloader1.getRetryNum());
      assertNotNull(phantomJSDownloader1);
      
      Spider spider6 = spider0.setDownloader(phantomJSDownloader1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertNotSame(phantomJSDownloader1, phantomJSDownloader0);
      assertSame(spider6, spider4);
      assertSame(spider6, spider2);
      assertSame(spider6, spider1);
      assertSame(spider6, spider5);
      assertSame(spider6, spider0);
      assertSame(spider6, spider3);
      assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader1.getRetryNum());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertNotNull(spider6);
      
      Spider spider7 = spider0.setDownloader(phantomJSDownloader1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider7);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertNotSame(phantomJSDownloader1, phantomJSDownloader0);
      assertSame(spider7, spider1);
      assertSame(spider7, spider3);
      assertSame(spider7, spider0);
      assertSame(spider7, spider5);
      assertSame(spider7, spider2);
      assertSame(spider7, spider6);
      assertSame(spider7, spider4);
      assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader1.getRetryNum());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertTrue(spider7.isSpawnUrl());
      assertEquals(0L, spider7.getPageCount());
      assertTrue(spider7.isExitWhenComplete());
      assertNotNull(spider7);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("t7=6@");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 1);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      Request request0 = new Request("t7=6@");
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertEquals("t7=6@", request0.getUrl());
      assertNull(request0.getCharset());
      assertNotNull(request0);
      
      Request request1 = request0.setMethod("t7=6@");
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertEquals(0L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertEquals("t7=6@", request0.getUrl());
      assertEquals("t7=6@", request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals(0L, request1.getPriority());
      assertEquals("t7=6@", request1.getUrl());
      assertEquals("t7=6@", request1.getMethod());
      assertNull(request1.getCharset());
      assertFalse(request1.isBinaryContent());
      assertNotNull(request1);
      
      ResultItems resultItems0 = new ResultItems();
      assertFalse(resultItems0.isSkip());
      assertNotNull(resultItems0);
      
      Map<String, Object> map0 = resultItems0.getAll();
      assertFalse(resultItems0.isSkip());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Request request2 = request1.setExtras(map0);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertEquals(0L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertEquals("t7=6@", request0.getUrl());
      assertEquals("t7=6@", request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals(0L, request1.getPriority());
      assertEquals("t7=6@", request1.getUrl());
      assertEquals("t7=6@", request1.getMethod());
      assertNull(request1.getCharset());
      assertFalse(request1.isBinaryContent());
      assertFalse(resultItems0.isSkip());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("t7=6@", request2.getMethod());
      assertEquals(0L, request2.getPriority());
      assertEquals("t7=6@", request2.getUrl());
      assertNull(request2.getCharset());
      assertFalse(request2.isBinaryContent());
      assertNotNull(request2);
      
      Request request3 = request2.setPriority(10L);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request0, request3);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request1, request3);
      assertSame(request2, request3);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertSame(request3, request1);
      assertSame(request3, request2);
      assertSame(request3, request0);
      assertEquals(10L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertEquals("t7=6@", request0.getUrl());
      assertEquals("t7=6@", request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals("t7=6@", request1.getUrl());
      assertEquals("t7=6@", request1.getMethod());
      assertNull(request1.getCharset());
      assertEquals(10L, request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertFalse(resultItems0.isSkip());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("t7=6@", request2.getMethod());
      assertEquals("t7=6@", request2.getUrl());
      assertNull(request2.getCharset());
      assertFalse(request2.isBinaryContent());
      assertEquals(10L, request2.getPriority());
      assertEquals("t7=6@", request3.getUrl());
      assertEquals(10L, request3.getPriority());
      assertFalse(request3.isBinaryContent());
      assertNull(request3.getCharset());
      assertEquals("t7=6@", request3.getMethod());
      assertNotNull(request3);
      
      Request request4 = request3.putExtra("", map0);
      assertSame(request0, request4);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request0, request3);
      assertSame(request1, request0);
      assertSame(request1, request4);
      assertSame(request1, request2);
      assertSame(request1, request3);
      assertSame(request2, request3);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertSame(request2, request4);
      assertSame(request3, request1);
      assertSame(request3, request2);
      assertSame(request3, request4);
      assertSame(request3, request0);
      assertSame(request4, request2);
      assertSame(request4, request3);
      assertSame(request4, request1);
      assertSame(request4, request0);
      assertEquals(10L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertEquals("t7=6@", request0.getUrl());
      assertEquals("t7=6@", request0.getMethod());
      assertNull(request0.getCharset());
      assertEquals("t7=6@", request1.getUrl());
      assertEquals("t7=6@", request1.getMethod());
      assertNull(request1.getCharset());
      assertEquals(10L, request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertFalse(resultItems0.isSkip());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("t7=6@", request2.getMethod());
      assertEquals("t7=6@", request2.getUrl());
      assertNull(request2.getCharset());
      assertFalse(request2.isBinaryContent());
      assertEquals(10L, request2.getPriority());
      assertEquals("t7=6@", request3.getUrl());
      assertEquals(10L, request3.getPriority());
      assertFalse(request3.isBinaryContent());
      assertNull(request3.getCharset());
      assertEquals("t7=6@", request3.getMethod());
      assertEquals("t7=6@", request4.getUrl());
      assertEquals("t7=6@", request4.getMethod());
      assertNull(request4.getCharset());
      assertEquals(10L, request4.getPriority());
      assertFalse(request4.isBinaryContent());
      assertNotNull(request4);
      
      // Undeclared exception!
      try { 
        spider0.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "c\\(5_OAt'!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("c(5_OAt'!");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.thread(39);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("|aRgR", "");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotNull(spider2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("|aRgR"));
      assertNotNull(linkedHashSet0);
      
      List<Request> list0 = spider2.getAll((Collection<String>) linkedHashSet0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedHashSet0.contains("|aRgR"));
      assertNotNull(list0);
      
      Spider spider3 = spider0.startRequest(list0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(linkedHashSet0.contains("|aRgR"));
      assertNotNull(spider3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Spider is already running!";
      stringArray0[2] = "Spider is already running!";
      stringArray0[3] = "|aRgR";
      stringArray0[5] = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Spider is already running!");
      assertFalse(boolean0);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(linkedHashSet1.contains("|aRgR"));
      assertNotNull(linkedHashSet1);
      
      List<FilePipeline> list1 = spider3.getAll((Collection<String>) linkedHashSet1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedHashSet0.contains("|aRgR"));
      assertFalse(linkedHashSet1.contains("|aRgR"));
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",E");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",E", ",E");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      assertEquals("/data/webmagic/", jsonFilePipeline0.getPath());
      assertNotNull(jsonFilePipeline0);
      
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals("/data/webmagic/", jsonFilePipeline0.getPath());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals("/data/webmagic/", jsonFilePipeline0.getPath());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      Spider spider3 = spider0.setSpawnUrl(false);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertNotNull(spider3);
      
      Spider spider4 = spider3.clearPipeline();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertNotNull(spider4);
      
      Spider spider5 = spider2.downloader(phantomJSDownloader0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals("/data/webmagic/", jsonFilePipeline0.getPath());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertNotNull(spider5);
      
      Spider spider6 = spider4.setDownloader(phantomJSDownloader0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider6);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider6);
      assertSame(spider6, spider4);
      assertSame(spider6, spider1);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider6, spider5);
      assertSame(spider6, spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertFalse(spider6.isSpawnUrl());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertNotNull(spider6);
      
      Spider spider7 = spider6.thread(1753);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider6);
      assertSame(spider3, spider5);
      assertSame(spider3, spider7);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
      assertSame(spider4, spider7);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider6);
      assertSame(spider6, spider4);
      assertSame(spider6, spider1);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider6, spider7);
      assertSame(spider6, spider5);
      assertSame(spider6, spider2);
      assertSame(spider7, spider4);
      assertSame(spider7, spider6);
      assertSame(spider7, spider3);
      assertSame(spider7, spider0);
      assertSame(spider7, spider5);
      assertSame(spider7, spider1);
      assertSame(spider7, spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertFalse(spider6.isSpawnUrl());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertFalse(spider7.isSpawnUrl());
      assertTrue(spider7.isExitWhenComplete());
      assertEquals(0L, spider7.getPageCount());
      assertNotNull(spider7);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("z`)Dl|VL:|J5:\"");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider8 = spider4.setScheduler(fileCacheQueueScheduler0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider8);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider6);
      assertSame(spider3, spider5);
      assertSame(spider3, spider7);
      assertSame(spider3, spider8);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
      assertSame(spider4, spider7);
      assertSame(spider4, spider8);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider6);
      assertSame(spider8, spider7);
      assertSame(spider8, spider3);
      assertSame(spider8, spider5);
      assertSame(spider8, spider0);
      assertSame(spider8, spider4);
      assertSame(spider8, spider1);
      assertSame(spider8, spider6);
      assertSame(spider8, spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertFalse(spider8.isSpawnUrl());
      assertTrue(spider8.isExitWhenComplete());
      assertEquals(0L, spider8.getPageCount());
      assertEquals(Spider.Status.Init, spider8.getStatus());
      assertNotNull(spider8);
      
      List<SpiderListener> list0 = spider8.getSpiderListeners();
      assertSame(spider0, spider2);
      assertSame(spider0, spider8);
      assertSame(spider0, spider1);
      assertSame(spider0, spider6);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider7);
      assertSame(spider0, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider6);
      assertSame(spider3, spider5);
      assertSame(spider3, spider7);
      assertSame(spider3, spider8);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider1);
      assertSame(spider4, spider7);
      assertSame(spider4, spider8);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider6);
      assertSame(spider8, spider7);
      assertSame(spider8, spider3);
      assertSame(spider8, spider5);
      assertSame(spider8, spider0);
      assertSame(spider8, spider4);
      assertSame(spider8, spider1);
      assertSame(spider8, spider6);
      assertSame(spider8, spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertFalse(spider8.isSpawnUrl());
      assertTrue(spider8.isExitWhenComplete());
      assertEquals(0L, spider8.getPageCount());
      assertEquals(Spider.Status.Init, spider8.getStatus());
      assertNull(list0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      int int0 = 3;
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",E";
      // Undeclared exception!
      try { 
        spider7.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      Spider spider1 = Spider.create(simplePageProcessor0);
      assertNotSame(spider1, spider0);
      assertFalse(spider1.equals((Object)spider0));
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      
      spider1.sleep(0);
      assertNotSame(spider1, spider0);
      assertFalse(spider1.equals((Object)spider0));
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FFUV[R:Iw");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "4ugqlK");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      Spider spider2 = spider0.clearPipeline();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotNull(spider2);
      
      spider0.setEmptySleepTime(1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      
      Locale locale0 = Locale.forLanguageTag("FFUV[R:Iw");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("4ugqlK"));
      assertNotNull(set0);
      
      List<OutputStreamWriter> list0 = spider0.getAll((Collection<String>) set0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(set0.contains("4ugqlK"));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8qT8k|cQIWd2Q[Q0");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      Page page0 = new Page();
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertNotNull(page0);
      
      Page page1 = page0.setRawText("us.codecraft.webmagic.downloader.HttpClientDownloader");
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertEquals("us.codecraft.webmagic.downloader.HttpClientDownloader", page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertEquals("us.codecraft.webmagic.downloader.HttpClientDownloader", page1.getRawText());
      assertNotNull(page1);
      
      spider0.extractAndAddRequests(page1, false);
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals("us.codecraft.webmagic.downloader.HttpClientDownloader", page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertTrue(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertNull(page1.getCharset());
      assertEquals("us.codecraft.webmagic.downloader.HttpClientDownloader", page1.getRawText());
      
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1672, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, true);
      assertNotNull(forkJoinPool0);
      
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.thread(1922);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      assertNotNull(multiPagePipeline0);
      
      Spider spider2 = spider1.pipeline(multiPagePipeline0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      Spider spider3 = spider2.setUUID("");
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertNotNull(spider3);
      
      spider2.checkIfRunning();
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":name=");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setUUID(".Qt5vl");
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spider spider2 = spider1.setPipelines(linkedList0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertNotNull(spider2);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider3 = spider0.downloader((Downloader) null);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertNotNull(spider3);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider4 = spider3.thread((ExecutorService) scheduledThreadPoolExecutor0, 2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertNotNull(spider4);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = null;
      try {
        fileCacheQueueScheduler0 = new FileCacheQueueScheduler((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "WebMagic";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("WebMagic");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.clearPipeline();
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertNotNull(spider1);
      
      FilePipeline filePipeline0 = new FilePipeline();
      assertEquals("/data/webmagic/", filePipeline0.getPath());
      assertNotNull(filePipeline0);
      
      Spider spider2 = spider1.addPipeline(filePipeline0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals("/data/webmagic/", filePipeline0.getPath());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      String[] stringArray0 = new String[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stringArray0[0] = "WebMagic";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "WebMagic");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider3 = spider1.setDownloader(phantomJSDownloader0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertNotNull(spider3);
      
      // Undeclared exception!
      try { 
        spider2.get("/");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Uk](I)_");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.pipeline((Pipeline) null);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      assertNotNull(smartContentSelector0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FFUV[R:Iw");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setUUID("FFUV[R:Iw");
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      Spider spider3 = spider2.setExitWhenComplete(false);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertNotNull(spider3);
      
      Page page0 = Page.fail();
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      assertNotNull(page0);
      
      spider1.checkIfRunning();
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3271);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(3271, scheduledThreadPoolExecutor0);
      assertEquals(3271, countableThreadPool0.getThreadNum());
      assertNotNull(countableThreadPool0);
      
      spider2.threadPool = countableThreadPool0;
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(3271, countableThreadPool0.getThreadNum());
      assertEquals(3271, spider2.threadPool.getThreadNum());
      
      spider2.extractAndAddRequests(page0, false);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getRawText());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      String string0 = spider3.getUUID();
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertEquals("FFUV[R:Iw", string0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertNotNull(string0);
      
      Spider spider4 = spider3.clearPipeline();
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertNotNull(spider4);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.clearPipeline();
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.setSpawnUrl(true);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      Json json0 = new Json("");
      assertNotNull(json0);
      
      Class<SpiderListener> class0 = SpiderListener.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "Spider is already running!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.thread(39);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertNotNull(spider1);
      
      String string1 = "|aRgR";
      String string2 = "";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("|aRgR", "");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertNotNull(spider2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("Spider is already running!"));
      assertNotNull(linkedHashSet0);
      
      List<Request> list0 = spider2.getAll((Collection<String>) linkedHashSet0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedHashSet0.contains("Spider is already running!"));
      assertNotNull(list0);
      
      Spider spider3 = spider0.startRequest(list0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
      assertFalse(linkedHashSet0.contains("Spider is already running!"));
      assertNotNull(spider3);
      
      String[] stringArray0 = new String[7];
      Request request0 = new Request("Spider is already running!");
      assertEquals("Spider is already running!", request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertNotNull(request0);
      
      Request request1 = request0.setPriority(39);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertEquals("Spider is already running!", request0.getUrl());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertEquals(39L, request0.getPriority());
      assertNull(request0.getMethod());
      assertEquals("Spider is already running!", request1.getUrl());
      assertEquals(39L, request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertNotNull(request1);
      
      Request request2 = request1.setMethod("96:<0iA4N<1NmV");
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request1);
      assertSame(request2, request0);
      assertEquals("Spider is already running!", request0.getUrl());
      assertNull(request0.getCharset());
      assertEquals("96:<0iA4N<1NmV", request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertEquals(39L, request0.getPriority());
      assertEquals("Spider is already running!", request1.getUrl());
      assertEquals(39L, request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertEquals("96:<0iA4N<1NmV", request1.getMethod());
      assertNull(request1.getCharset());
      assertEquals(39L, request2.getPriority());
      assertFalse(request2.isBinaryContent());
      assertNull(request2.getCharset());
      assertEquals("96:<0iA4N<1NmV", request2.getMethod());
      assertEquals("Spider is already running!", request2.getUrl());
      assertNotNull(request2);
      
      Request request3 = request2.setBinaryContent(false);
      assertSame(request0, request3);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request3);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request1);
      assertSame(request2, request3);
      assertSame(request2, request0);
      assertSame(request3, request0);
      assertSame(request3, request2);
      assertSame(request3, request1);
      assertEquals("Spider is already running!", request0.getUrl());
      assertNull(request0.getCharset());
      assertEquals("96:<0iA4N<1NmV", request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertEquals(39L, request0.getPriority());
      assertEquals("Spider is already running!", request1.getUrl());
      assertEquals(39L, request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertEquals("96:<0iA4N<1NmV", request1.getMethod());
      assertNull(request1.getCharset());
      assertEquals(39L, request2.getPriority());
      assertFalse(request2.isBinaryContent());
      assertNull(request2.getCharset());
      assertEquals("96:<0iA4N<1NmV", request2.getMethod());
      assertEquals("Spider is already running!", request2.getUrl());
      assertEquals("Spider is already running!", request3.getUrl());
      assertFalse(request3.isBinaryContent());
      assertEquals(39L, request3.getPriority());
      assertEquals("96:<0iA4N<1NmV", request3.getMethod());
      assertNull(request3.getCharset());
      assertNotNull(request3);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Request request4 = request3.setExtras(hashMap0);
      assertSame(request4, request2);
      assertSame(request4, request0);
      assertSame(request4, request1);
      assertSame(request4, request3);
      assertSame(request0, request3);
      assertSame(request0, request4);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request3);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request1, request4);
      assertSame(request2, request4);
      assertSame(request2, request1);
      assertSame(request2, request3);
      assertSame(request2, request0);
      assertSame(request3, request0);
      assertSame(request3, request2);
      assertSame(request3, request4);
      assertSame(request3, request1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("96:<0iA4N<1NmV", request4.getMethod());
      assertFalse(request4.isBinaryContent());
      assertEquals("Spider is already running!", request4.getUrl());
      assertNull(request4.getCharset());
      assertEquals(39L, request4.getPriority());
      assertEquals("Spider is already running!", request0.getUrl());
      assertNull(request0.getCharset());
      assertEquals("96:<0iA4N<1NmV", request0.getMethod());
      assertFalse(request0.isBinaryContent());
      assertEquals(39L, request0.getPriority());
      assertEquals("Spider is already running!", request1.getUrl());
      assertEquals(39L, request1.getPriority());
      assertFalse(request1.isBinaryContent());
      assertEquals("96:<0iA4N<1NmV", request1.getMethod());
      assertNull(request1.getCharset());
      assertEquals(39L, request2.getPriority());
      assertFalse(request2.isBinaryContent());
      assertNull(request2.getCharset());
      assertEquals("96:<0iA4N<1NmV", request2.getMethod());
      assertEquals("Spider is already running!", request2.getUrl());
      assertEquals("Spider is already running!", request3.getUrl());
      assertFalse(request3.isBinaryContent());
      assertEquals(39L, request3.getPriority());
      assertEquals("96:<0iA4N<1NmV", request3.getMethod());
      assertNull(request3.getCharset());
      assertNotNull(request4);
      
      // Undeclared exception!
      try { 
        spider3.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_+ O`w&$>T,X+");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      FilePipeline filePipeline0 = new FilePipeline();
      assertEquals("/data/webmagic/", filePipeline0.getPath());
      assertNotNull(filePipeline0);
      
      Spider spider1 = spider0.addPipeline(filePipeline0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals("/data/webmagic/", filePipeline0.getPath());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.setSpawnUrl(false);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals("/data/webmagic/", filePipeline0.getPath());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertNotNull(spider2);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Page page0 = Page.fail();
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertNotNull(page0);
      
      List<Request> list0 = page0.getTargetRequests();
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      spider2.startRequests = list0;
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals("/data/webmagic/", filePipeline0.getPath());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertNull(page0.getRawText());
      assertEquals(200, page0.getStatusCode());
      assertFalse(page0.isDownloadSuccess());
      assertNull(page0.getCharset());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, spider2.startRequests.size());
      assertTrue(spider2.startRequests.isEmpty());
      
      Spider spider3 = spider2.setPipelines(linkedList0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals("/data/webmagic/", filePipeline0.getPath());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertNotNull(spider3);
      
      Spider spider4 = spider3.setExitWhenComplete(true);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals("/data/webmagic/", filePipeline0.getPath());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertNotNull(spider4);
      
      boolean boolean0 = spider4.isSpawnUrl();
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertFalse(boolean0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals("/data/webmagic/", filePipeline0.getPath());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("//<= [_");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("//<= [_");
      assertNotNull(fileCacheQueueScheduler0);
      
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      
      Spider spider2 = new Spider(simplePageProcessor0);
      assertFalse(spider2.equals((Object)spider0));
      assertFalse(spider2.equals((Object)spider1));
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotNull(spider2);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains("//<= [_"));
      assertNotNull(list0);
      
      Spider spider3 = spider0.startUrls(list0);
      assertSame(spider0, spider3);
      assertNotSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertNotSame(spider3, spider2);
      assertFalse(spider0.equals((Object)spider2));
      assertFalse(spider3.equals((Object)spider2));
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(list0.contains("//<= [_"));
      assertNotNull(spider3);
      
      Spider spider4 = spider3.setExitWhenComplete(false);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertNotSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertNotSame(spider3, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertNotSame(spider4, spider2);
      assertFalse(spider0.equals((Object)spider2));
      assertFalse(spider3.equals((Object)spider2));
      assertFalse(spider4.equals((Object)spider2));
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(list0.contains("//<= [_"));
      assertNotNull(spider4);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "//<= [_";
      stringArray0[1] = "//<= [_";
      stringArray0[2] = "//<= [_";
      stringArray0[3] = "//<= [_";
      stringArray0[4] = "//<= [_";
      stringArray0[5] = "//<= [_";
      stringArray0[6] = "//<= [_";
      boolean boolean0 = linkedList0.add((Locale.LanguageRange) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      stringArray0[7] = "//<= [_";
      stringArray0[8] = "//<= [_";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(" {%a3!1-~");
      assertNotNull(fileCacheQueueScheduler0);
      
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      assertNotNull(hashSetDuplicateRemover0);
      
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, fileCacheQueueScheduler0);
      assertNotNull(duplicateRemovedScheduler0);
      
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      assertSame(spider0, spider1);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, fileCacheQueueScheduler0);
      assertSame(spider1, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.thread(39);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, fileCacheQueueScheduler0);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      Request request0 = ((FileCacheQueueScheduler) duplicateRemovedScheduler0).poll(spider0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, fileCacheQueueScheduler0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNull(request0);
      
      Request request1 = fileCacheQueueScheduler0.poll(spider0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNull(request1);
      
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      spider0.stop();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      
      Request[] requestArray0 = new Request[8];
      Request request0 = new Request();
      assertFalse(request0.isBinaryContent());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertNotNull(request0);
      
      Request request1 = request0.setBinaryContent(true);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertEquals(0L, request0.getPriority());
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertEquals(0L, request1.getPriority());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertTrue(request1.isBinaryContent());
      assertNull(request1.getUrl());
      assertNotNull(request1);
      
      requestArray0[0] = request1;
      Request request2 = request1.setPriority(2838L);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request1);
      assertSame(request2, request0);
      assertEquals(2838L, request0.getPriority());
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertTrue(request1.isBinaryContent());
      assertEquals(2838L, request1.getPriority());
      assertNull(request1.getUrl());
      assertNull(request2.getCharset());
      assertEquals(2838L, request2.getPriority());
      assertTrue(request2.isBinaryContent());
      assertNull(request2.getMethod());
      assertNull(request2.getUrl());
      assertNotNull(request2);
      
      requestArray0[1] = request2;
      Request request3 = request0.setPriority(2838L);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request0, request3);
      assertSame(request3, request1);
      assertSame(request3, request2);
      assertSame(request3, request0);
      assertEquals(2838L, request0.getPriority());
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertEquals(2838L, request3.getPriority());
      assertNull(request3.getCharset());
      assertTrue(request3.isBinaryContent());
      assertNull(request3.getUrl());
      assertNull(request3.getMethod());
      assertNotNull(request3);
      
      requestArray0[2] = request3;
      Request request4 = request1.setBinaryContent(true);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request0, request4);
      assertSame(request0, request3);
      assertSame(request1, request3);
      assertSame(request1, request4);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request4, request3);
      assertSame(request4, request1);
      assertSame(request4, request2);
      assertSame(request4, request0);
      assertEquals(2838L, request0.getPriority());
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertTrue(request1.isBinaryContent());
      assertEquals(2838L, request1.getPriority());
      assertNull(request1.getUrl());
      assertNull(request4.getCharset());
      assertTrue(request4.isBinaryContent());
      assertEquals(2838L, request4.getPriority());
      assertNull(request4.getUrl());
      assertNull(request4.getMethod());
      assertNotNull(request4);
      
      requestArray0[3] = request4;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Request request5 = priorityScheduler0.poll(spider0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNull(request5);
      
      requestArray0[4] = null;
      Request request6 = request1.addHeader("_cycle_tried_times", "_cycle_tried_times");
      assertSame(request6, request3);
      assertSame(request6, request1);
      assertSame(request6, request2);
      assertSame(request6, request0);
      assertSame(request6, request4);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request0, request4);
      assertSame(request0, request3);
      assertSame(request0, request6);
      assertSame(request1, request3);
      assertSame(request1, request6);
      assertSame(request1, request4);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertNull(request6.getUrl());
      assertTrue(request6.isBinaryContent());
      assertNull(request6.getMethod());
      assertEquals(2838L, request6.getPriority());
      assertNull(request6.getCharset());
      assertEquals(2838L, request0.getPriority());
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertTrue(request1.isBinaryContent());
      assertEquals(2838L, request1.getPriority());
      assertNull(request1.getUrl());
      assertNotNull(request6);
      
      requestArray0[5] = request6;
      Request request7 = request1.putExtra("_cycle_tried_times", priorityScheduler0);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertSame(request7, request4);
      assertSame(request7, request6);
      assertSame(request7, request0);
      assertSame(request7, request1);
      assertSame(request7, request2);
      assertSame(request7, request3);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request0, request4);
      assertSame(request0, request3);
      assertSame(request0, request7);
      assertSame(request0, request6);
      assertSame(request1, request3);
      assertSame(request1, request6);
      assertSame(request1, request4);
      assertSame(request1, request7);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertNull(request7.getUrl());
      assertTrue(request7.isBinaryContent());
      assertNull(request7.getMethod());
      assertNull(request7.getCharset());
      assertEquals(2838L, request7.getPriority());
      assertEquals(2838L, request0.getPriority());
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertTrue(request1.isBinaryContent());
      assertEquals(2838L, request1.getPriority());
      assertNull(request1.getUrl());
      assertNotNull(request7);
      
      requestArray0[6] = request7;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Request request8 = queueScheduler0.poll(spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNull(request8);
      
      requestArray0[7] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      //  // Unstable assertion: assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertNotNull(spider0);
      
      Spider spider1 = spider0.thread(39);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      //  // Unstable assertion: assertNotNull(spider1);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("$aRgR", "");
      //  // Unstable assertion: assertEquals(0, phantomJSDownloader0.getRetryNum());
      //  // Unstable assertion: assertNotNull(phantomJSDownloader0);
      
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "");
      //  // Unstable assertion: assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      //  // Unstable assertion: assertEquals(0, phantomJSDownloader1.getRetryNum());
      //  // Unstable assertion: assertNotNull(phantomJSDownloader1);
      
      Spider spider2 = spider1.downloader(phantomJSDownloader1);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertSame(spider1, spider2);
      //  // Unstable assertion: assertNotSame(phantomJSDownloader1, phantomJSDownloader0);
      //  // Unstable assertion: assertSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      //  // Unstable assertion: assertEquals(0, phantomJSDownloader1.getRetryNum());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider2.getStatus());
      //  // Unstable assertion: assertNotNull(spider2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertTrue(linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertFalse(linkedHashSet0.contains(""));
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      
      List<Request> list0 = spider2.getAll((Collection<String>) linkedHashSet0);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertSame(spider1, spider2);
      //  // Unstable assertion: assertNotSame(phantomJSDownloader1, phantomJSDownloader0);
      //  // Unstable assertion: assertSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Stopped, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertEquals(Spider.Status.Stopped, spider1.getStatus());
      //  // Unstable assertion: assertEquals(0, phantomJSDownloader1.getRetryNum());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Stopped, spider2.getStatus());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertTrue(linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertTrue(list0.isEmpty());
      //  // Unstable assertion: assertEquals(0, list0.size());
      //  // Unstable assertion: assertFalse(linkedHashSet0.contains(""));
      //  // Unstable assertion: assertNotNull(list0);
      
      Spider spider3 = spider0.startRequest(list0);
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertSame(spider1, spider3);
      //  // Unstable assertion: assertSame(spider1, spider0);
      //  // Unstable assertion: assertSame(spider1, spider2);
      //  // Unstable assertion: assertNotSame(phantomJSDownloader1, phantomJSDownloader0);
      //  // Unstable assertion: assertSame(spider2, spider1);
      //  // Unstable assertion: assertSame(spider2, spider3);
      //  // Unstable assertion: assertSame(spider2, spider0);
      //  // Unstable assertion: assertSame(spider3, spider0);
      //  // Unstable assertion: assertSame(spider3, spider2);
      //  // Unstable assertion: assertSame(spider3, spider1);
      //  // Unstable assertion: assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Stopped, spider0.getStatus());
      //  // Unstable assertion: assertTrue(spider1.isSpawnUrl());
      //  // Unstable assertion: assertTrue(spider1.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider1.getPageCount());
      //  // Unstable assertion: assertEquals(Spider.Status.Stopped, spider1.getStatus());
      //  // Unstable assertion: assertEquals(0, phantomJSDownloader1.getRetryNum());
      //  // Unstable assertion: assertEquals(0L, spider2.getPageCount());
      //  // Unstable assertion: assertTrue(spider2.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(Spider.Status.Stopped, spider2.getStatus());
      //  // Unstable assertion: assertTrue(spider2.isSpawnUrl());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertTrue(linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertTrue(list0.isEmpty());
      //  // Unstable assertion: assertEquals(0, list0.size());
      //  // Unstable assertion: assertTrue(spider3.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider3.getPageCount());
      //  // Unstable assertion: assertTrue(spider3.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Stopped, spider3.getStatus());
      //  // Unstable assertion: assertFalse(linkedHashSet0.contains(""));
      //  // Unstable assertion: assertNotNull(spider3);
      
      String[] stringArray0 = new String[6];
      spider0.start();
      //  // Unstable assertion: assertSame(spider0, spider2);
      //  // Unstable assertion: assertSame(spider0, spider1);
      //  // Unstable assertion: assertSame(spider0, spider3);
      //  // Unstable assertion: assertTrue(spider0.isExitWhenComplete());
      //  // Unstable assertion: assertEquals(0L, spider0.getPageCount());
      //  // Unstable assertion: assertTrue(spider0.isSpawnUrl());
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider0.getStatus());
      
      stringArray0[0] = "Spider is already running!";
      stringArray0[1] = "$aRgR";
      stringArray0[2] = "Spider is already running!";
      stringArray0[3] = "$aRgR";
      stringArray0[4] = "";
      stringArray0[5] = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      //  // Unstable assertion: assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedHashSet0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      spider0.runAsync();
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.MultiPagePipeline");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      assertEquals(0, requestArray0.length);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "us.codecraft.webmagic.pipeline.MultiPagePipeline");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotNull(spider2);
      assertEquals(0, requestArray0.length);
      
      Spider spider3 = spider2.setScheduler((Scheduler) null);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertNotNull(spider3);
      assertEquals(0, requestArray0.length);
      
      Spider spider4 = spider3.setExitWhenComplete(false);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertNotNull(spider4);
      assertEquals(0, requestArray0.length);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0, requestArray0.length);
      assertEquals(0, stringArray0.length);
      
      spider4.close();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(0, requestArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.thread(30000);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("$aRgR", "$aRgR");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "");
      assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      assertEquals(0, phantomJSDownloader1.getRetryNum());
      assertNotNull(phantomJSDownloader1);
      
      Spider spider2 = spider1.downloader(phantomJSDownloader1);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertNotSame(phantomJSDownloader1, phantomJSDownloader0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader1.getRetryNum());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertNotSame(phantomJSDownloader1, phantomJSDownloader0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader1.getRetryNum());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0, stringArray0.length);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      List<FilePipeline> list0 = spider2.getAll((Collection<String>) linkedHashSet0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertNotSame(phantomJSDownloader1, phantomJSDownloader0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertFalse(phantomJSDownloader1.equals((Object)phantomJSDownloader0));
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0, phantomJSDownloader1.getRetryNum());
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setSpawnUrl(true);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertNotNull(spider_StatusArray0);
      assertEquals(3, spider_StatusArray0.length);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Q*Ml");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Q*Ml", "Q*Ml");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.setSpawnUrl(false);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertNotNull(spider2);
      
      Spider spider3 = spider2.clearPipeline();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertNotNull(spider3);
      
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertNotNull(spider4);
      
      Spider spider5 = spider4.thread(1753);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertNotNull(spider5);
      
      List<SpiderListener> list0 = spider5.getSpiderListeners();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider2, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertNull(list0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      Spider spider6 = spider5.thread((ExecutorService) forkJoinPool0, 3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider5);
      assertSame(spider2, spider3);
      assertSame(spider2, spider6);
      assertSame(spider3, spider6);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider6);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider6);
      assertSame(spider5, spider3);
      assertSame(spider6, spider5);
      assertSame(spider6, spider4);
      assertSame(spider6, spider2);
      assertSame(spider6, spider1);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider6.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertNotNull(spider6);
      
      spider3.initComponent();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider5);
      assertSame(spider2, spider3);
      assertSame(spider2, spider6);
      assertSame(spider3, spider6);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      
      List<SpiderListener> list1 = spider5.getSpiderListeners();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider6);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider0);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider5);
      assertSame(spider2, spider3);
      assertSame(spider2, spider6);
      assertSame(spider3, spider6);
      assertSame(spider3, spider5);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider4, spider5);
      assertSame(spider4, spider6);
      assertSame(spider4, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider6);
      assertSame(spider5, spider3);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertNull(list1);
      
      Json json0 = new Json("_cycle_tried_times");
      assertNotNull(json0);
      
      Class<Request> class0 = Request.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNull(list0);
      
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      int int0 = spider2.getThreadAlive();
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0, int0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      List<SpiderListener> list0 = spider2.getSpiderListeners();
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertNull(list0);
      
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertNotNull(spider3);
      
      int int0 = spider3.getThreadAlive();
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertEquals(0, int0);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      assertNotNull(consolePipeline0);
      
      Spider spider1 = spider0.pipeline(consolePipeline0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(" stop fail!");
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertNotNull(simplePageProcessor1);
      
      Spider spider2 = new Spider(simplePageProcessor1);
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider2.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider0));
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      boolean boolean0 = spider2.isExitWhenComplete();
      assertNotSame(simplePageProcessor1, simplePageProcessor0);
      assertNotSame(spider2, spider1);
      assertNotSame(spider2, spider0);
      assertTrue(boolean0);
      assertFalse(simplePageProcessor1.equals((Object)simplePageProcessor0));
      assertFalse(spider2.equals((Object)spider1));
      assertFalse(spider2.equals((Object)spider0));
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertNotNull(spider1);
      
      FilePipeline filePipeline0 = new FilePipeline("us.codecraft.webmagic.Spider$1");
      assertEquals("us.codecraft.webmagic.Spider$1/", filePipeline0.getPath());
      assertNotNull(filePipeline0);
      
      Spider spider2 = spider1.pipeline(filePipeline0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals("us.codecraft.webmagic.Spider$1/", filePipeline0.getPath());
      assertFalse(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotNull(spider2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "us.codecraft.webmagic.Spider$1";
      stringArray0[1] = "us.codecraft.webmagic.Spider$1";
      stringArray0[2] = "us.codecraft.webmagic.Spider$1";
      stringArray0[3] = "us.codecraft.webmagic.Spider$1";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FFUV[R:Iw");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setUUID("FFUV[R:Iw");
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotNull(spider2);
      
      Spider spider3 = spider2.setExitWhenComplete(false);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertNotNull(spider3);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      Spider spider4 = spider2.downloader((Downloader) null);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider4, spider1);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertNotNull(spider4);
      
      long long0 = spider1.getPageCount();
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertEquals(0L, long0);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      long long1 = spider0.getPageCount();
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      
      Request request0 = new Request();
      assertEquals(0L, request0.getPriority());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getMethod());
      assertNull(request0.getUrl());
      assertNotNull(request0);
      
      // Undeclared exception!
      try { 
        spider0.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertNotNull(spider_StatusArray0);
      assertEquals(3, spider_StatusArray0.length);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Q*Ml");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Q*Ml", "Q*Ml");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.setSpawnUrl(false);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertNotNull(spider2);
      
      Spider spider3 = spider2.clearPipeline();
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertNotNull(spider3);
      
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertNotNull(spider4);
      
      int int0 = 1753;
      Spider spider5 = spider4.thread(1753);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider5);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider5.isSpawnUrl());
      assertNotNull(spider5);
      
      List<SpiderListener> list0 = spider5.getSpiderListeners();
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider5);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider5.isSpawnUrl());
      assertNull(list0);
      
      Spider spider6 = spider3.setScheduler((Scheduler) null);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider5);
      assertSame(spider2, spider4);
      assertSame(spider2, spider6);
      assertSame(spider2, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider5);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider3, spider6);
      assertSame(spider6, spider5);
      assertSame(spider6, spider3);
      assertSame(spider6, spider0);
      assertSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider4);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertFalse(spider6.isSpawnUrl());
      assertTrue(spider6.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
      assertNotNull(spider6);
      
      Spider spider7 = spider1.setExitWhenComplete(true);
      assertSame(spider0, spider2);
      assertSame(spider0, spider7);
      assertSame(spider0, spider4);
      assertSame(spider0, spider6);
      assertSame(spider0, spider5);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider1, spider7);
      assertSame(spider1, spider2);
      assertSame(spider1, spider5);
      assertSame(spider1, spider4);
      assertSame(spider1, spider0);
      assertSame(spider7, spider0);
      assertSame(spider7, spider3);
      assertSame(spider7, spider1);
      assertSame(spider7, spider2);
      assertSame(spider7, spider5);
      assertSame(spider7, spider4);
      assertSame(spider7, spider6);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0L, spider7.getPageCount());
      assertEquals(Spider.Status.Init, spider7.getStatus());
      assertFalse(spider7.isSpawnUrl());
      assertTrue(spider7.isExitWhenComplete());
      assertNotNull(spider7);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Q*Ml";
      stringArray0[2] = "WFWg";
      stringArray0[3] = "Q*Ml";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "Spider {} started!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} started!");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      int int0 = (-856);
      // Undeclared exception!
      try { 
        spider0.thread((-856));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertNotNull(spider_StatusArray0);
      assertEquals(3, spider_StatusArray0.length);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Q*Ml");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Q*Ml", "Q*Ml");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.setSpawnUrl(false);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      Spider spider3 = spider0.downloader(phantomJSDownloader0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertNotNull(spider3);
      
      List<SpiderListener> list0 = spider3.getSpiderListeners();
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
      assertNull(list0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      boolean boolean0 = spider3.isExitWhenComplete();
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertSame(spider3, spider1);
      assertTrue(boolean0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(" {%a3!1-~");
      assertNotNull(fileCacheQueueScheduler0);
      
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      assertNotNull(hashSetDuplicateRemover0);
      
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, fileCacheQueueScheduler0);
      assertNotNull(duplicateRemovedScheduler0);
      
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      assertSame(spider0, spider1);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, fileCacheQueueScheduler0);
      assertSame(spider1, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.thread(39);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(fileCacheQueueScheduler0, duplicateRemovedScheduler0);
      assertSame(duplicateRemovedScheduler0, fileCacheQueueScheduler0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertNotNull(spider2);
      
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":name=");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setUUID(".html");
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertNotNull(spider1);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spider spider2 = spider1.setPipelines(linkedList0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertNotNull(spider3);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider4 = spider3.thread((ExecutorService) scheduledThreadPoolExecutor0, 2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider4);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertSame(spider3, spider4);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, linkedList0.size());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertNotNull(spider4);
      
      FileCacheQueueScheduler fileCacheQueueScheduler0 = null;
      try {
        fileCacheQueueScheduler0 = new FileCacheQueueScheduler((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "[YuMwtJ:*";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[YuMwtJ:*");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertNotNull(spider_StatusArray0);
      assertEquals(3, spider_StatusArray0.length);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Q*Ml");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Q*Ml", "Q*Ml");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertNotNull(phantomJSDownloader0);
      
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.setSpawnUrl(false);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertNotNull(spider2);
      
      Spider spider3 = spider0.downloader(phantomJSDownloader0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertNotNull(spider3);
      
      List<SpiderListener> list0 = spider3.getSpiderListeners();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertNull(list0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      Spider spider4 = spider0.thread((ExecutorService) forkJoinPool0, 3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertNotNull(spider4);
      
      spider2.initComponent();
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider4);
      assertSame(spider2, spider1);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(3);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      Date date0 = spider3.getStartTime();
      assertSame(spider0, spider2);
      assertSame(spider0, spider4);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0, phantomJSDownloader0.getRetryNum());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(622);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      spider0.stop();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setSpawnUrl(true);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      
      String string0 = spider0.getUUID();
      assertSame(spider0, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertNull(string0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(1309);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      Page page0 = new Page();
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertTrue(page0.isDownloadSuccess());
      assertNotNull(page0);
      
      Page page1 = page0.setRawText("k=~hkWFlj");
      assertSame(page0, page1);
      assertSame(page1, page0);
      assertEquals("k=~hkWFlj", page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertEquals("k=~hkWFlj", page1.getRawText());
      assertNull(page1.getCharset());
      assertNotNull(page1);
      
      Page page2 = page1.setSkip(false);
      assertSame(page0, page1);
      assertSame(page0, page2);
      assertSame(page1, page0);
      assertSame(page1, page2);
      assertSame(page2, page0);
      assertSame(page2, page1);
      assertEquals("k=~hkWFlj", page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertEquals("k=~hkWFlj", page1.getRawText());
      assertNull(page1.getCharset());
      assertEquals("k=~hkWFlj", page2.getRawText());
      assertEquals(200, page2.getStatusCode());
      assertTrue(page2.isDownloadSuccess());
      assertNull(page2.getCharset());
      assertNotNull(page2);
      
      Json json0 = page2.getJson();
      assertSame(page0, page1);
      assertSame(page0, page2);
      assertSame(page1, page0);
      assertSame(page1, page2);
      assertSame(page2, page0);
      assertSame(page2, page1);
      assertEquals("k=~hkWFlj", page0.getRawText());
      assertNull(page0.getCharset());
      assertEquals(200, page0.getStatusCode());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
      assertTrue(page1.isDownloadSuccess());
      assertEquals("k=~hkWFlj", page1.getRawText());
      assertNull(page1.getCharset());
      assertEquals("k=~hkWFlj", page2.getRawText());
      assertEquals(200, page2.getStatusCode());
      assertTrue(page2.isDownloadSuccess());
      assertNull(page2.getCharset());
      assertNotNull(json0);
      
      Class<Request> class0 = Request.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("t7=6@");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      Request request0 = new Request("t7=6@");
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertEquals("t7=6@", request0.getUrl());
      assertNotNull(request0);
      
      Request request1 = request0.setBinaryContent(true);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getMethod());
      assertNull(request0.getCharset());
      assertTrue(request0.isBinaryContent());
      assertEquals("t7=6@", request0.getUrl());
      assertEquals("t7=6@", request1.getUrl());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertTrue(request1.isBinaryContent());
      assertEquals(0L, request1.getPriority());
      assertNotNull(request1);
      
      // Undeclared exception!
      try { 
        spider0.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FFUV[R:Iw");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setUUID("FFUV[R:Iw");
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      Spider spider3 = spider2.setExitWhenComplete(true);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider2, spider1);
      assertSame(spider3, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider2);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertNotNull(spider3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "FFUV[R:Iw";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Request[] requestArray0 = new Request[0];
      Spider.Status spider_Status0 = Spider.Status.fromValue(2);
      assertEquals(Spider.Status.Stopped, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&.'.u(okOvI?}(");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setExitWhenComplete(true);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.setUUID((String) null);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertNotNull(spider2);
      
      Spider spider3 = spider2.setSpawnUrl(true);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertNotNull(spider3);
      
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      Spider spider4 = spider3.setExecutorService(scheduledThreadPoolExecutor0);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider3);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertNotNull(spider4);
      
      Spider spider5 = spider4.startRequest((List<Request>) null);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider3, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider5);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertNotNull(spider5);
      
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("&.'.u(okOvI?}(");
      assertEquals("&.'.u(okOvI?}(/", jsonFilePipeline0.getPath());
      assertNotNull(jsonFilePipeline0);
      
      Spider spider6 = spider5.pipeline(jsonFilePipeline0);
      assertSame(spider0, spider4);
      assertSame(spider0, spider3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider5);
      assertSame(spider0, spider6);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider6);
      assertSame(spider1, spider3);
      assertSame(spider2, spider5);
      assertSame(spider2, spider6);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider6);
      assertSame(spider3, spider5);
      assertSame(spider3, spider4);
      assertSame(spider3, spider2);
      assertSame(spider4, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider6);
      assertSame(spider4, spider5);
      assertSame(spider5, spider4);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider1);
      assertSame(spider5, spider6);
      assertSame(spider6, spider5);
      assertSame(spider6, spider3);
      assertSame(spider6, spider4);
      assertSame(spider6, spider1);
      assertSame(spider6, spider2);
      assertSame(spider6, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertEquals("&.'.u(okOvI?}(/", jsonFilePipeline0.getPath());
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertTrue(spider6.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertNotNull(spider6);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("tv4Ww!4?7p;>?*");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.setSpawnUrl(false);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertFalse(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotNull(spider2);
      
      Spider spider3 = spider2.thread(9);
      assertSame(spider0, spider1);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertNotNull(spider3);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      Spider spider4 = spider3.thread((ExecutorService) forkJoinPool0, 9);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider0);
      assertSame(spider4, spider2);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertFalse(spider3.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertFalse(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertNotNull(spider4);
      
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request();
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertNotNull(request0);
      
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("_cycle_tried_times");
      assertEquals("_cycle_tried_times/", jsonFilePipeline0.getPath());
      assertNotNull(jsonFilePipeline0);
      
      Request request1 = request0.putExtra("tv4Ww!4?7p;>?*", jsonFilePipeline0);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertNull(request0.getUrl());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertNull(request0.getMethod());
      assertEquals("_cycle_tried_times/", jsonFilePipeline0.getPath());
      assertNull(request1.getUrl());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertFalse(request1.isBinaryContent());
      assertEquals(0L, request1.getPriority());
      assertNotNull(request1);
      
      Request request2 = request1.setUrl("/");
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertEquals("/", request0.getUrl());
      assertNull(request0.getMethod());
      assertEquals("_cycle_tried_times/", jsonFilePipeline0.getPath());
      assertEquals("/", request1.getUrl());
      assertNull(request1.getMethod());
      assertNull(request1.getCharset());
      assertFalse(request1.isBinaryContent());
      assertEquals(0L, request1.getPriority());
      assertEquals("/", request2.getUrl());
      assertFalse(request2.isBinaryContent());
      assertEquals(0L, request2.getPriority());
      assertNull(request2.getMethod());
      assertNull(request2.getCharset());
      assertNotNull(request2);
      
      Request request3 = request2.setMethod("_cycle_tried_times");
      assertSame(request0, request3);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request1, request2);
      assertSame(request1, request3);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertSame(request2, request3);
      assertSame(request3, request0);
      assertSame(request3, request1);
      assertSame(request3, request2);
      assertEquals(0L, request0.getPriority());
      assertEquals("_cycle_tried_times", request0.getMethod());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertEquals("/", request0.getUrl());
      assertEquals("_cycle_tried_times/", jsonFilePipeline0.getPath());
      assertEquals("/", request1.getUrl());
      assertNull(request1.getCharset());
      assertFalse(request1.isBinaryContent());
      assertEquals(0L, request1.getPriority());
      assertEquals("_cycle_tried_times", request1.getMethod());
      assertEquals("/", request2.getUrl());
      assertFalse(request2.isBinaryContent());
      assertEquals(0L, request2.getPriority());
      assertEquals("_cycle_tried_times", request2.getMethod());
      assertNull(request2.getCharset());
      assertEquals(0L, request3.getPriority());
      assertEquals("/", request3.getUrl());
      assertNull(request3.getCharset());
      assertFalse(request3.isBinaryContent());
      assertEquals("_cycle_tried_times", request3.getMethod());
      assertNotNull(request3);
      
      Request request4 = request3.addCookie("_cycle_tried_times", "_cycle_tried_times");
      assertSame(request0, request3);
      assertSame(request0, request4);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request1, request4);
      assertSame(request1, request2);
      assertSame(request1, request3);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertSame(request2, request3);
      assertSame(request2, request4);
      assertSame(request3, request4);
      assertSame(request3, request0);
      assertSame(request3, request1);
      assertSame(request3, request2);
      assertSame(request4, request3);
      assertSame(request4, request1);
      assertSame(request4, request0);
      assertSame(request4, request2);
      assertEquals(0L, request0.getPriority());
      assertEquals("_cycle_tried_times", request0.getMethod());
      assertNull(request0.getCharset());
      assertFalse(request0.isBinaryContent());
      assertEquals("/", request0.getUrl());
      assertEquals("_cycle_tried_times/", jsonFilePipeline0.getPath());
      assertEquals("/", request1.getUrl());
      assertNull(request1.getCharset());
      assertFalse(request1.isBinaryContent());
      assertEquals(0L, request1.getPriority());
      assertEquals("_cycle_tried_times", request1.getMethod());
      assertEquals("/", request2.getUrl());
      assertFalse(request2.isBinaryContent());
      assertEquals(0L, request2.getPriority());
      assertEquals("_cycle_tried_times", request2.getMethod());
      assertNull(request2.getCharset());
      assertEquals(0L, request3.getPriority());
      assertEquals("/", request3.getUrl());
      assertNull(request3.getCharset());
      assertFalse(request3.isBinaryContent());
      assertEquals("_cycle_tried_times", request3.getMethod());
      assertNull(request4.getCharset());
      assertFalse(request4.isBinaryContent());
      assertEquals("/", request4.getUrl());
      assertEquals("_cycle_tried_times", request4.getMethod());
      assertEquals(0L, request4.getPriority());
      assertNotNull(request4);
      
      Request request5 = request4.setBinaryContent(true);
      assertSame(request0, request3);
      assertSame(request0, request4);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request0, request5);
      assertSame(request1, request4);
      assertSame(request1, request2);
      assertSame(request1, request5);
      assertSame(request1, request3);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request5);
      assertSame(request2, request1);
      assertSame(request2, request3);
      assertSame(request2, request4);
      assertSame(request3, request4);
      assertSame(request3, request0);
      assertSame(request3, request1);
      assertSame(request3, request5);
      assertSame(request3, request2);
      assertSame(request4, request3);
      assertSame(request4, request1);
      assertSame(request4, request0);
      assertSame(request4, request5);
      assertSame(request4, request2);
      assertSame(request5, request0);
      assertSame(request5, request3);
      assertSame(request5, request2);
      assertSame(request5, request1);
      assertSame(request5, request4);
      assertEquals(0L, request0.getPriority());
      assertEquals("_cycle_tried_times", request0.getMethod());
      assertNull(request0.getCharset());
      assertTrue(request0.isBinaryContent());
      assertEquals("/", request0.getUrl());
      assertEquals("_cycle_tried_times/", jsonFilePipeline0.getPath());
      assertTrue(request1.isBinaryContent());
      assertEquals("/", request1.getUrl());
      assertNull(request1.getCharset());
      assertEquals(0L, request1.getPriority());
      assertEquals("_cycle_tried_times", request1.getMethod());
      assertEquals("/", request2.getUrl());
      assertEquals(0L, request2.getPriority());
      assertTrue(request2.isBinaryContent());
      assertEquals("_cycle_tried_times", request2.getMethod());
      assertNull(request2.getCharset());
      assertEquals(0L, request3.getPriority());
      assertEquals("/", request3.getUrl());
      assertNull(request3.getCharset());
      assertTrue(request3.isBinaryContent());
      assertEquals("_cycle_tried_times", request3.getMethod());
      assertNull(request4.getCharset());
      assertTrue(request4.isBinaryContent());
      assertEquals("/", request4.getUrl());
      assertEquals("_cycle_tried_times", request4.getMethod());
      assertEquals(0L, request4.getPriority());
      assertEquals("/", request5.getUrl());
      assertEquals("_cycle_tried_times", request5.getMethod());
      assertTrue(request5.isBinaryContent());
      assertEquals(0L, request5.getPriority());
      assertNull(request5.getCharset());
      assertNotNull(request5);
      
      requestArray0[0] = request5;
      Request request6 = request3.putExtra("_cycle_tried_times", jsonFilePipeline0);
      assertSame(request6, request4);
      assertSame(request6, request3);
      assertSame(request6, request2);
      assertSame(request6, request5);
      assertSame(request6, request1);
      assertSame(request6, request0);
      assertSame(request0, request3);
      assertSame(request0, request6);
      assertSame(request0, request4);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request0, request5);
      assertSame(request1, request4);
      assertSame(request1, request6);
      assertSame(request1, request2);
      assertSame(request1, request5);
      assertSame(request1, request3);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request5);
      assertSame(request2, request6);
      assertSame(request2, request1);
      assertSame(request2, request3);
      assertSame(request2, request4);
      assertSame(request3, request6);
      assertSame(request3, request4);
      assertSame(request3, request0);
      assertSame(request3, request1);
      assertSame(request3, request5);
      assertSame(request3, request2);
      assertNull(request6.getCharset());
      assertTrue(request6.isBinaryContent());
      assertEquals(0L, request6.getPriority());
      assertEquals("_cycle_tried_times", request6.getMethod());
      assertEquals("/", request6.getUrl());
      assertEquals(0L, request0.getPriority());
      assertEquals("_cycle_tried_times", request0.getMethod());
      assertNull(request0.getCharset());
      assertTrue(request0.isBinaryContent());
      assertEquals("/", request0.getUrl());
      assertEquals("_cycle_tried_times/", jsonFilePipeline0.getPath());
      assertTrue(request1.isBinaryContent());
      assertEquals("/", request1.getUrl());
      assertNull(request1.getCharset());
      assertEquals(0L, request1.getPriority());
      assertEquals("_cycle_tried_times", request1.getMethod());
      assertEquals("/", request2.getUrl());
      assertEquals(0L, request2.getPriority());
      assertTrue(request2.isBinaryContent());
      assertEquals("_cycle_tried_times", request2.getMethod());
      assertNull(request2.getCharset());
      assertEquals(0L, request3.getPriority());
      assertEquals("/", request3.getUrl());
      assertNull(request3.getCharset());
      assertTrue(request3.isBinaryContent());
      assertEquals("_cycle_tried_times", request3.getMethod());
      assertNotNull(request6);
      
      requestArray0[1] = request6;
      Request request7 = new Request();
      assertFalse(request7.equals((Object)request4));
      assertFalse(request7.equals((Object)request6));
      assertFalse(request7.equals((Object)request2));
      assertFalse(request7.equals((Object)request5));
      assertFalse(request7.equals((Object)request3));
      assertFalse(request7.equals((Object)request1));
      assertFalse(request7.equals((Object)request0));
      assertNull(request7.getMethod());
      assertNull(request7.getCharset());
      assertEquals(0L, request7.getPriority());
      assertNull(request7.getUrl());
      assertFalse(request7.isBinaryContent());
      assertNotNull(request7);
      
      requestArray0[2] = request7;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertNotNull(priorityScheduler0);
      
      Request request8 = priorityScheduler0.poll(spider2);
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
      assertSame(spider0, spider1);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider1, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider3);
      assertEquals(0L, spider0.getPageCount());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider1.isSpawnUrl());
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNull(request8);
      
      requestArray0[3] = null;
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.MultiPagePipeline");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(spider0);
      
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      assertEquals(0, requestArray0.length);
      
      Spider spider2 = spider0.setExitWhenComplete(false);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertNotNull(spider2);
      
      spider2.extractAndAddRequests((Page) null, false);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider2.setUUID("}aqhD^YBzd|VbUfci");
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider2, spider3);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertFalse(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertFalse(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      assertNotNull(spider3);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      assertNotNull(queueScheduler0);
      
      Spider spider4 = spider0.setScheduler(queueScheduler0);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider4, spider0);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider2);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider4.isSpawnUrl());
      assertFalse(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertNotNull(spider4);
      
      Spider spider5 = spider1.setExitWhenComplete(false);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider5);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider1, spider5);
      assertSame(spider1, spider3);
      assertSame(spider1, spider0);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider4);
      assertSame(spider5, spider0);
      assertSame(spider5, spider3);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
      assertFalse(spider5.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertNotNull(spider5);
      assertEquals(0, requestArray0.length);
      
      // Undeclared exception!
      try { 
        spider1.sleep((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertNotNull(spider_StatusArray0);
      assertEquals(3, spider_StatusArray0.length);
      
      Request request0 = new Request();
      assertFalse(request0.isBinaryContent());
      assertEquals(0L, request0.getPriority());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertNotNull(request0);
      
      Request request1 = request0.setPriority((-2612L));
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertFalse(request0.isBinaryContent());
      assertEquals((-2612L), request0.getPriority());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertNull(request1.getUrl());
      assertNull(request1.getCharset());
      assertEquals((-2612L), request1.getPriority());
      assertNull(request1.getMethod());
      assertFalse(request1.isBinaryContent());
      assertNotNull(request1);
      
      Request request2 = request1.setBinaryContent(true);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request1, request2);
      assertSame(request1, request0);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertEquals((-2612L), request0.getPriority());
      assertTrue(request0.isBinaryContent());
      assertNull(request0.getCharset());
      assertNull(request0.getUrl());
      assertNull(request0.getMethod());
      assertNull(request1.getUrl());
      assertNull(request1.getCharset());
      assertTrue(request1.isBinaryContent());
      assertEquals((-2612L), request1.getPriority());
      assertNull(request1.getMethod());
      assertTrue(request2.isBinaryContent());
      assertEquals((-2612L), request2.getPriority());
      assertNull(request2.getCharset());
      assertNull(request2.getMethod());
      assertNull(request2.getUrl());
      assertNotNull(request2);
      
      // Undeclared exception!
      try { 
        spider0.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertNotNull(spider0);
      
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FilePipeline filePipeline0 = new FilePipeline("Xnd=WxB?_@:aS'X%5:|");
      assertEquals("Xnd=WxB?_@:aS'X%5:|/", filePipeline0.getPath());
      assertNotNull(filePipeline0);
      
      boolean boolean0 = linkedList0.add((Pipeline) filePipeline0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("Xnd=WxB?_@:aS'X%5:|/", filePipeline0.getPath());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Spider spider1 = spider0.setPipelines(linkedList0);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(1, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.thread(3);
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider2);
      assertSame(spider1, spider0);
      assertSame(spider2, spider0);
      assertSame(spider2, spider1);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(1, linkedList0.size());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotNull(spider2);
      
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      assertNotNull(simplePageProcessor0);
      
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertNotNull(spider0);
      
      Spider spider1 = spider0.scheduler((Scheduler) null);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertNotNull(spider1);
      
      Spider spider2 = spider1.clearPipeline();
      assertSame(spider0, spider2);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertNotNull(spider2);
      
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      Spider spider3 = spider2.setExecutorService((ExecutorService) null);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider2, spider1);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertNotNull(spider3);
      
      Spider spider4 = spider3.setPipelines((List<Pipeline>) null);
      assertSame(spider0, spider4);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertNotNull(spider4);
      
      Page page0 = new Page();
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      assertNotNull(page0);
      
      List<Request> list0 = page0.getTargetRequests();
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Spider spider5 = spider4.startRequest(list0);
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider5);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider5);
      assertSame(spider4, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertNotNull(spider5);
      
      List<SpiderListener> list1 = spider5.getSpiderListeners();
      assertSame(spider0, spider4);
      assertSame(spider0, spider5);
      assertSame(spider0, spider2);
      assertSame(spider0, spider3);
      assertSame(spider0, spider1);
      assertSame(spider1, spider0);
      assertSame(spider1, spider3);
      assertSame(spider1, spider5);
      assertSame(spider1, spider2);
      assertSame(spider1, spider4);
      assertSame(spider2, spider1);
      assertSame(spider2, spider4);
      assertSame(spider2, spider5);
      assertSame(spider2, spider0);
      assertSame(spider2, spider3);
      assertSame(spider3, spider0);
      assertSame(spider3, spider1);
      assertSame(spider3, spider2);
      assertSame(spider3, spider4);
      assertSame(spider3, spider5);
      assertSame(spider4, spider2);
      assertSame(spider4, spider3);
      assertSame(spider4, spider1);
      assertSame(spider4, spider5);
      assertSame(spider4, spider0);
      assertSame(spider5, spider3);
      assertSame(spider5, spider4);
      assertSame(spider5, spider1);
      assertSame(spider5, spider2);
      assertSame(spider5, spider0);
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider3.getPageCount());
      assertEquals(Spider.Status.Init, spider3.getStatus());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider4.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(200, page0.getStatusCode());
      assertNull(page0.getRawText());
      assertNull(page0.getCharset());
      assertTrue(page0.isDownloadSuccess());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("t7=6@");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("t7=6@");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID(" _RT;<bPf+$%}q]");
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.pipeline(consolePipeline0);
      Spider spider3 = spider2.setScheduler(fileCacheQueueScheduler0);
      Spider spider4 = spider3.setDownloader((Downloader) null);
      Spider spider5 = spider4.thread(6);
      spider5.setScheduler(fileCacheQueueScheduler0);
      int int0 = (-273);
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-273));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FFUV[R:Iw");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("FFUV[R:Iw");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider2.setSpawnUrl(false);
      spider3.setUUID("wN2");
      spider3.checkIfRunning();
      assertFalse(spider2.isSpawnUrl());
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "s'@@~xAOY|~V3&h";
      stringArray0[2] = "";
      stringArray0[3] = "s'@@~xAOY|~V3&h";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      spider0.startUrls(linkedList0);
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue((-629));
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.MultiPagePipeline");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      Spider spider2 = spider0.setExitWhenComplete(false);
      spider2.setUUID("}aqhD^YBzd|VbUfci");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.setScheduler(queueScheduler0);
      spider1.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider1.sleep((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.MultiPagePipeline");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.setUUID("}aqhD^YBzd|VbUfci");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider0.setScheduler(queueScheduler0);
      spider0.setExitWhenComplete(false);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        spider2.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider1.scheduler(duplicateRemovedScheduler0);
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "us.codecraft.webmagic.pipeline.MultiPagePipeline";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Spider.Status.fromValue(0);
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("isx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.isx
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request();
      Request request1 = request0.setPriority(2813L);
      boolean boolean0 = false;
      Request request2 = request1.setBinaryContent(false);
      requestArray0[0] = request2;
      Request request3 = request0.setPriority(2813L);
      requestArray0[1] = request3;
      Request request4 = request0.addCookie("_cycle_tried_times", "");
      requestArray0[2] = request4;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "~xOx\\6.5'o1";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~xOx\u0006.5'o1");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-1678));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "OoJDP9'^j#Qmy}I;r'P";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("OoJDP9'^j#Qmy}I;r'P");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(41);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      Locale locale0 = new Locale("OoJDP9'^j#Qmy}I;r'P", "OoJDP9'^j#Qmy}I;r'P");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "WebMagic";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("WebMagic");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.addPipeline(filePipeline0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "WebMagic";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(39);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("$aRgR", "");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "");
      Spider spider2 = spider1.downloader(phantomJSDownloader1);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<Request> list0 = spider2.getAll((Collection<String>) linkedHashSet0);
      Spider spider3 = spider0.startRequest(list0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Spider is already running!";
      stringArray0[1] = "$aRgR";
      stringArray0[2] = "Spider is already running!";
      stringArray0[3] = "$aRgR";
      stringArray0[4] = "";
      stringArray0[5] = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("OoJDP9'^j#Qmy}I;r'P");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("OoJDP9'^j#Qmy}I;r'P");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2, threadFactory0);
      spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 127);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      Spider spider4 = spider3.scheduler(duplicateRemovedScheduler0);
      Spider spider5 = Spider.create(simplePageProcessor0);
      spider5.getStartTime();
      spider4.setUUID("Q~[Hh2d?rV@hX");
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("y+6md-ua3M8&\":&-/");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("t.[zv", "pSv)i");
      Spider spider3 = spider0.downloader(phantomJSDownloader0);
      Spider spider4 = spider3.thread(30000);
      spider2.getSpiderListeners();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      ForkJoinPool forkJoinPool1 = new ForkJoinPool();
      Spider spider5 = spider4.thread((ExecutorService) forkJoinPool1, 1753);
      spider1.initComponent();
      spider2.getSpiderListeners();
      Json json0 = new Json("&a");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Json json1 = new Json(linkedList0);
      Class<Request> class0 = Request.class;
      json1.toList(class0);
      Spider spider6 = spider1.startRequest((List<Request>) null);
      Spider spider7 = spider6.startRequest((List<Request>) null);
      spider5.setEmptySleepTime(1080);
      spider7.getCollectorPipeline();
      spider5.thread((ExecutorService) forkJoinPool1, 1159);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      spider1.setUUID("");
      spider1.checkIfRunning();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "7ObXv(i5}`MBwv";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7ObXv(i5}`MBwv");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider2 = spider1.startRequest(list0);
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) null, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("abs:href");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = ":z)7";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":z)7");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Request[] requestArray0 = new Request[2];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider1);
      requestArray0[0] = null;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("6NMr%q*S");
      fileCacheQueueScheduler0.poll(spider0);
      requestArray0[1] = null;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("t7=6@");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Q*Ml");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Q*Ml", "Q*Ml");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      Spider spider5 = spider4.thread(1753);
      spider5.getSpiderListeners();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider6 = spider5.thread((ExecutorService) forkJoinPool0, 3);
      spider3.initComponent();
      spider5.getSpiderListeners();
      Json json0 = new Json("_cycle_tried_times");
      spider6.getThreadAlive();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Q*Ml";
      stringArray0[1] = "Q*Ml";
      stringArray0[2] = "_cycle_tried_times";
      // Undeclared exception!
      try { 
        spider6.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.addPipeline((Pipeline) null);
      String string0 = "jO";
      ReplaceSelector replaceSelector0 = new ReplaceSelector("jO", "");
      // Undeclared exception!
      try { 
        replaceSelector0.selectList("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider2 = spider0.setUUID("");
      Spider spider3 = spider2.setExitWhenComplete(false);
      spider3.checkIfRunning();
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider0.setEmptySleepTime(838);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FFUV[R:Iw");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("FFUV[R:Iw");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      spider2.setExitWhenComplete(false);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, spider0, "FFUV[R:Iw");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2001, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, false);
      Spider spider3 = spider1.setExecutorService(forkJoinPool0);
      spider3.getSpiderListeners();
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("BuXl8clkC'k");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.clearPipeline();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider2.setDownloader(phantomJSDownloader0);
      spider1.thread((ExecutorService) forkJoinPool0, 200);
      spider0.initComponent();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider2.stop();
      Request request0 = new Request();
      Request request1 = request0.setPriority((-1L));
      // Undeclared exception!
      try { 
        spider2.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("A");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSite();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-1859));
      Spider spider1 = spider0.downloader(phantomJSDownloader1);
      Spider spider2 = new Spider(simplePageProcessor0);
      spider2.getSpiderListeners();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider1.thread((ExecutorService) forkJoinPool0, 200);
      ForkJoinPool.commonPool();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<Request> list0 = spider1.getAll((Collection<String>) linkedHashSet0);
      linkedHashSet0.add("");
      Spider spider2 = spider1.startRequest(list0);
      spider0.close();
      spider1.getThreadAlive();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      Spider spider3 = spider2.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      Spider spider4 = spider3.setDownloader(phantomJSDownloader0);
      Spider spider5 = spider4.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider5.thread((-1770));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("],qWycE6qY+XgR$8");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("],qWycE6qY+XgR$8");
      ForkJoinTask.getPool();
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      spider0.getSpiderListeners();
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      assertTrue(spider3.isSpawnUrl());
      
      Spider spider4 = spider3.setSpawnUrl(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("],qWycE6qY+XgR$8", "Running");
      Spider spider5 = spider4.setDownloader(phantomJSDownloader0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider5.startUrls(list0);
      FilePipeline filePipeline0 = new FilePipeline("invalid regex");
      spider0.addPipeline(filePipeline0);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      System.setCurrentTimeMillis((-1297L));
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("");
      Page page2 = page1.setSkip(true);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page2, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(39);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("|aRgR", "");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("|aRgR", "");
      Spider spider2 = spider1.downloader(phantomJSDownloader1);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<Request> list0 = spider2.getAll((Collection<String>) linkedHashSet0);
      spider0.startRequest(list0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Spider is already running!";
      stringArray0[2] = "Spider is already running!";
      stringArray0[3] = "|aRgR";
      stringArray0[5] = "";
      spider1.isExitWhenComplete();
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider2.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider$1";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("//<= [_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("//<= [_");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider2 = new Spider(simplePageProcessor0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      Spider spider3 = spider0.startUrls(list0);
      Spider spider4 = spider3.setExitWhenComplete(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "//<= [_";
      stringArray0[1] = "//<= [_";
      stringArray0[2] = "//<= [_";
      stringArray0[3] = "//<= [_";
      stringArray0[4] = "//<= [_";
      stringArray0[5] = "//<= [_";
      stringArray0[6] = "//<= [_";
      linkedList0.add((Locale.LanguageRange) null);
      stringArray0[7] = "//<= [_";
      stringArray0[8] = "//<= [_";
      spider1.setSpawnUrl(true);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider3.thread((ExecutorService) forkJoinPool0, 127);
      spider4.getUUID();
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      Request request1 = request0.setUrl(" ):T:NM]4[41Z *K");
      Request request2 = request1.setCharset("");
      Request request3 = request2.setMethod(" ):T:NM]4[41Z *K");
      Request request4 = request3.setBinaryContent(true);
      // Undeclared exception!
      try { 
        spider0.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\r~,v=k$.)_Mmvt:8RQ");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "UNwMl");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.clearPipeline();
      spider0.setEmptySleepTime((-856));
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      Locale.forLanguageTag("");
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      spider1.getAll((Collection<String>) set0);
      spider0.setDownloader(phantomJSDownloader0);
      spider0.getStatus();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      Request request1 = request0.setUrl("Spider is already running!");
      requestArray0[0] = request1;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":name=");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID(".html");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider3 = spider2.pipeline(collectorPipeline0);
      spider3.setScheduler(queueScheduler0);
      spider2.setExitWhenComplete(false);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.MultiPagePipeline");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "\"5T");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider2.startRequest(list0);
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.setUUID("");
      Spider spider3 = spider2.startRequest((List<Request>) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider4 = spider3.setScheduler(priorityScheduler0);
      Spider spider5 = spider4.clearPipeline();
      // Undeclared exception!
      try { 
        spider5.thread((-1770));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FFUV[R:Iw");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("FFUV[R:Iw");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      assertTrue(spider2.isExitWhenComplete());
      
      Spider spider3 = spider2.setExitWhenComplete(false);
      Page page0 = Page.fail();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3271);
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(3271, scheduledThreadPoolExecutor0);
      spider2.threadPool = countableThreadPool0;
      spider2.extractAndAddRequests(page0, false);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider3.getUUID();
      assertFalse(spider2.isExitWhenComplete());
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("FFUV[R:Iw");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("FFUV[R:Iw");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      assertTrue(spider2.isExitWhenComplete());
      
      Spider spider3 = spider2.setExitWhenComplete(false);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider3.getUUID();
      spider3.getScheduler();
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider0.isExitWhenComplete());
  }
}
