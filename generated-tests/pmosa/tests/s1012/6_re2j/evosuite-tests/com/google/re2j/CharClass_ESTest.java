/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 23:16:48 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(0, (-1037));
      CharClass charClass2 = charClass1.negateClass();
      CharClass charClass3 = charClass2.appendRange(0, 0);
      int[][] intArray0 = new int[5][7];
      int[] intArray1 = new int[7];
      intArray1[0] = (-1037);
      intArray1[1] = 1556;
      intArray1[2] = (-1037);
      intArray1[3] = (-1037);
      intArray1[4] = 0;
      intArray1[5] = (-1037);
      intArray1[6] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 0;
      intArray2[1] = 1556;
      intArray2[2] = 1556;
      intArray2[3] = 1556;
      intArray2[4] = (-1037);
      intArray2[5] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      intArray3[0] = 1556;
      intArray3[1] = (-1037);
      intArray3[2] = 0;
      intArray3[3] = 1556;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = (-1037);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      CharClass charClass4 = charClass3.appendNegatedTable(intArray0);
      int int0 = (-29);
      CharClass charClass5 = charClass4.appendClassWithSign(intArray2, int0);
      charClass5.appendTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass0.appendRange(1155, 1155);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[3];
      intArray1[2] = 1066;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange((-2), 1);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(120353, 120353);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][7];
      charClass0.appendTableWithSign(intArray0, (-887));
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange((-2096), (-2096));
      int[][] intArray0 = new int[3][3];
      int[] intArray1 = new int[4];
      intArray1[0] = (-2096);
      intArray1[1] = (-2096);
      intArray1[2] = (-2096);
      intArray1[3] = (-2096);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = (-2096);
      intArray2[1] = (-2096);
      intArray2[2] = (-2096);
      intArray2[3] = (-2096);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      intArray3[0] = (-2096);
      int int0 = 0;
      intArray3[1] = 0;
      intArray3[2] = (-2096);
      intArray3[3] = (-2096);
      intArray0[2] = intArray3;
      CharClass charClass2 = charClass1.appendTable(intArray0);
      CharClass charClass3 = charClass2.appendFoldedRange(intArray3[1], intArray2[3]);
      int int1 = 0;
      CharClass charClass4 = charClass3.appendTableWithSign(intArray0, int1);
      int[] intArray4 = new int[1];
      intArray4[0] = int0;
      int int2 = 761;
      CharClass charClass5 = charClass4.appendClassWithSign(intArray4, int2);
      charClass5.appendTableWithSign(intArray0, intArray3[3]);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[5];
      intArray1[2] = 619;
      intArray0[0] = intArray1;
      charClass1.appendTableWithSign(intArray0, 43018);
      int[] intArray2 = charClass0.toArray();
      assertArrayEquals(new int[] {0, 1114111}, intArray2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(2974, (-1691));
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[4];
      intArray1[0] = (-1691);
      intArray1[1] = (-1691);
      intArray1[2] = 66640;
      intArray1[3] = 2974;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = (-356);
      intArray2[1] = 0;
      intArray2[2] = (-1691);
      intArray2[3] = 66640;
      intArray2[4] = 2974;
      intArray2[5] = 66640;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 0;
      intArray3[1] = (-356);
      intArray3[2] = 0;
      intArray3[3] = (-1691);
      intArray3[4] = 0;
      intArray3[5] = (-356);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      intArray4[0] = (-1691);
      intArray4[1] = 2974;
      intArray4[2] = (-1691);
      intArray4[3] = 4255;
      intArray4[4] = 0;
      intArray4[5] = 275;
      intArray0[3] = intArray4;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      CharClass charClass3 = charClass2.appendClass(intArray3);
      CharClass charClass4 = charClass3.appendTable(intArray0);
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0[3]);
      charClass5.appendRange(intArray4[1], intArray2[3]);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 120;
      intArray0[0] = 120;
      CharClass charClass0 = new CharClass(intArray0);
      int int1 = 2282;
      CharClass charClass1 = charClass0.appendRange(120, 2282);
      CharClass charClass2 = charClass1.appendLiteral((-1533), (-862));
      int int2 = 3655;
      CharClass charClass3 = charClass2.appendFoldedRange(3655, 3266);
      // Undeclared exception!
      try { 
        charClass3.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(2730, 2730);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      int[] intArray1 = new int[0];
      CharClass charClass1 = charClass0.appendClass(intArray1);
      CharClass charClass2 = charClass1.appendLiteral(1475, 1475);
      charClass0.appendFoldedClass(intArray1);
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass3);
      
      CharClass charClass4 = charClass2.negateClass();
      CharClass charClass5 = charClass4.cleanClass();
      assertSame(charClass4, charClass5);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(4744, 405);
      String string0 = charClass1.toString();
      assertEquals("[0x1288]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 42739;
      intArray0[1] = 6450;
      intArray0[2] = (-2375);
      intArray0[3] = 250;
      intArray0[4] = (-499);
      intArray0[5] = 368;
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][2];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 250);
      // Undeclared exception!
      try { 
        charClass1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      charClass0.appendClassWithSign(intArray0, (-863));
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-741);
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass0.cleanClass();
      charClass2.appendClass(intArray0);
      CharClass.charClassToString(intArray0, (-3661));
      int int0 = 1114111;
      charClass1.negateClass();
      charClass0.appendLiteral((-741), (-741));
      int[][] intArray1 = new int[5][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 3906;
      intArray0[1] = 0;
      intArray0[2] = 2485;
      intArray0[3] = (-61);
      intArray0[4] = (-334);
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 686);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(2722, 2722);
      int[] intArray0 = new int[6];
      intArray0[0] = 2722;
      intArray0[1] = 0;
      intArray0[2] = 2722;
      intArray0[3] = 2722;
      intArray0[4] = 2722;
      intArray0[5] = 2722;
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      CharClass charClass3 = charClass2.cleanClass();
      int[][] intArray1 = new int[9][1];
      charClass3.appendClass(intArray0);
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, (-140));
      charClass4.appendClass(intArray0);
      CharClass charClass5 = charClass2.appendClassWithSign(intArray0, 0);
      charClass5.toString();
      charClass3.toString();
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 799);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[0] = 4334;
      intArray0[1] = 56;
      intArray0[2] = (-1507);
      intArray0[3] = 297;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1001;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 1001;
      intArray1[1] = 56;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 1001;
      intArray1[5] = 0;
      intArray1[6] = 1001;
      intArray1[7] = 0;
      CharClass charClass2 = charClass1.appendClassWithSign(intArray1, (-2211));
      int[][] intArray2 = new int[5][7];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      intArray2[4] = intArray1;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray2);
      CharClass charClass4 = charClass3.cleanClass();
      CharClass charClass5 = charClass4.appendTable(intArray2);
      CharClass charClass6 = charClass5.appendTableWithSign(intArray2, 0);
      assertSame(charClass0, charClass6);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 448;
      intArray0[1] = 3286;
      intArray0[2] = 1414;
      intArray0[3] = 72;
      charClass0.appendClassWithSign(intArray0, 2565);
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(2722, 2722);
      int[] intArray0 = new int[6];
      intArray0[0] = 2722;
      intArray0[1] = 0;
      intArray0[2] = 2722;
      intArray0[3] = 2722;
      intArray0[4] = 2722;
      CharClass charClass2 = charClass1.appendClass(intArray0);
      CharClass charClass3 = charClass2.appendLiteral(2722, 2279);
      charClass2.appendFoldedClass(intArray0);
      CharClass charClass4 = charClass3.cleanClass();
      assertSame(charClass4, charClass0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[9][3];
      int[] intArray1 = new int[4];
      intArray1[0] = 5902;
      intArray1[1] = 0;
      intArray1[2] = 0;
      int int0 = 2;
      intArray1[3] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      int[] intArray3 = new int[6];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 5902;
      intArray3[3] = 5902;
      intArray3[4] = 0;
      int int1 = 8466;
      intArray3[5] = 8466;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray3);
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendClass(intArray2);
      charClass3.appendTableWithSign(intArray0, 186);
      CharClass charClass4 = charClass0.appendClass(intArray1);
      int int2 = 2502;
      charClass3.appendClassWithSign(intArray0[0], int2);
      charClass1.toString();
      charClass1.toString();
      int int3 = 3;
      CharClass.charClassToString(intArray2, int3);
      int int4 = (-5841);
      charClass4.appendLiteral(int1, int4);
      charClass3.appendLiteral(int0, intArray1[1]);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[24];
      intArray0[0] = 1324;
      intArray0[1] = 12315;
      intArray0[2] = 0;
      intArray0[3] = (-1465);
      intArray0[4] = (-3289);
      intArray0[5] = 0;
      intArray0[6] = 1473;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      charClass1.toString();
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, (-2));
      CharClass charClass3 = charClass2.appendLiteral(840, 0);
      int[] intArray1 = charClass0.toArray();
      int[] intArray2 = charClass0.toArray();
      int[][] intArray3 = new int[7][8];
      intArray3[0] = intArray1;
      intArray3[1] = intArray1;
      intArray3[2] = intArray0;
      intArray3[3] = intArray0;
      intArray3[4] = intArray2;
      intArray3[5] = intArray0;
      intArray3[6] = intArray2;
      charClass3.appendNegatedTable(intArray3);
      charClass0.appendClass(intArray0);
      charClass3.appendClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(120362, 120362);
      int[] intArray0 = new int[8];
      intArray0[0] = 120362;
      intArray0[1] = 120362;
      intArray0[2] = 120362;
      intArray0[3] = 120362;
      intArray0[4] = 120362;
      intArray0[1] = 120362;
      intArray0[6] = 120362;
      intArray0[7] = 120362;
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[2][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      CharClass charClass4 = charClass3.appendFoldedRange(120362, 120362);
      CharClass charClass5 = charClass4.appendRange((-2651), 66639);
      int[] intArray2 = charClass5.toArray();
      CharClass charClass6 = charClass1.appendNegatedClass(intArray2);
      charClass6.appendNegatedClass(intArray2);
      assertArrayEquals(new int[] {(-2651), 1114111}, intArray2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[9];
      intArray1[0] = (-887);
      intArray1[1] = (-1139);
      intArray1[2] = 1;
      intArray1[3] = 1701;
      intArray1[4] = 93;
      intArray1[5] = 2946;
      intArray1[6] = 1114111;
      intArray1[7] = (-887);
      intArray1[8] = 1292;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      charClass1.appendFoldedRange(93, 268);
      CharClass charClass2 = charClass1.cleanClass();
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[8];
      intArray1[0] = (-10365851);
      intArray1[1] = 55216;
      intArray1[2] = 1;
      intArray1[3] = 2398;
      intArray1[4] = 0;
      intArray1[5] = 1745;
      intArray1[6] = 308;
      intArray1[7] = 1114111;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      charClass1.toString();
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendRange(1, 1);
      CharClass charClass1 = charClass0.appendRange(1, (-35579283));
      int[] intArray0 = new int[10];
      intArray0[0] = 1;
      intArray0[1] = 1114111;
      intArray0[2] = 1;
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass3 = charClass1.appendRange(1114111, (-1));
      int[][] intArray1 = new int[4][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      charClass0.appendNegatedTable(intArray1);
      charClass2.appendClassWithSign(intArray0, 1114111);
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
