/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 08:25:22 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-176), "ConstantValue", "", (String) null, "ConstantValue");
      classWriter0.version = 4096;
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-176), "ConstantValue", "", (String) null, "ConstantValue");
      classWriter0.version = 4096;
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-673));
      classWriter0.index = (-673);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "ConstantValue", "rmim)7", "ConstantValue", "LocalVariableTable");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-176));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3213), "Synthetic", "org.apache.commons.io.filefilter.FalseFileFilter", "", "org.apache.commons.io.filefilter.FalseFileFilter");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-176));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "void", "void", "void", "Li_.*K'Ra3");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 8, "T0&|\"", "", "", "T0&|\"");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-176));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "void", "void", "void", "Li_.*K'Ra3");
      ByteVector byteVector0 = classWriter0.pool;
      Attribute attribute0 = new Attribute("o7j");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-176), "ConsantValFue", "ConsantValFue", (String) null, "ConsantValFue");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-176));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-176), "", "", "LocalVariableTable", "ConstantValue");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("LocalVariableTable", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-176), "ConsantValFue", "ConsantValFue", (String) null, "ConsantValFue");
      classWriter0.version = 49;
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-673));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-673), "", "", "boolean", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-176), "ConsantValFue", "ConsantValFue", (String) null, "ConsantValFue");
      classWriter0.version = 49;
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 8, "T0&|\"", "", "", "T0&|\"");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-176), "ConsantValFue", "ConsantValFue", (String) null, "ConsantValFue");
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-176));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-176), "", "", "LocalVariableTable", "ConstantValue");
      fieldWriter0.visitAnnotation("LocalVariableTable", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-176), "ConsantValFue", "ConsantValFue", (String) null, "ConsantValFue");
      fieldWriter0.visitAnnotation("", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-673));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-673), "", "", "boolean", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(64);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3362), "I4gLvE@U)FtEM>", "pYmnP h<~6m-:Q=c", "pYmnP h<~6m-:Q=c", "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 2, "F3SD?^cK~u)QyZcb@", "-8XHQ'NE5", "Li_.*K'Ra3", bufferedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.BufferedInputStream@fae89e3
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-176), "ConstantValue", "", (String) null, "ConstantValue");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-673));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "ConstantValue", "rmim)7", (String) null, "LocalVariableTable");
      Attribute attribute0 = new Attribute("ConstantValue");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
