/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:09:55 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Iterator;
import java.util.Locale;
import java.util.Random;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      CCSMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("Can not decode CompressedVector from the given byte array.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1543, 1543, 1543);
      cCSMatrix0.swapRows(1543, 1543);
      cCSMatrix0.iteratorOfColumn(1543);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Matrix.identity(2386);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      mockRandom0.nextDouble();
      CCSMatrix cCSMatrix0 = new CCSMatrix(2386, 2386);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.PRC;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2386, 0.0);
      int int0 = 1000;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2386).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.updateAt(2386, 1000, matrixFunction0);
      cCSMatrix1.minInColumn(1796);
      CCSMatrix cCSMatrix2 = CCSMatrix.from2DArray((double[][]) null);
      cCSMatrix0.determinant();
      cCSMatrix2.rotate();
      cCSMatrix2.nonZeroIteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2428);
      double double0 = cCSMatrix0.maxInColumn(38);
      int int0 = (-2346);
      int int1 = 2;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2428).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt((-2346), 2, matrixFunction0);
      cCSMatrix0.minInRow((-2021161079));
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int0, double0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(int1, vectorProcedure0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      Double double0 = new Double((-1175.302129));
      cCSMatrix0.equals((Object) double0);
      cCSMatrix0.trace();
      int int0 = 976;
      // Undeclared exception!
      try { 
        CCSMatrix.diagonal((-2374), (-20.2036885937689));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2161, 2161);
      cCSMatrix1.getOrElse(333, 357, 357);
      int[] intArray0 = new int[2];
      intArray0[0] = 2161;
      intArray0[1] = 357;
      cCSMatrix1.select(intArray0, intArray0);
      cCSMatrix0.nonZeroRowMajorIterator();
      int int0 = 7;
      cCSMatrix0.minInColumn(int0);
      MockRandom mockRandom0 = new MockRandom(intArray0[0]);
      int int1 = 1740;
      int int2 = 201;
      int int3 = (-88);
      CCSMatrix.zero(int2, int3);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-62);
      byteArray0[0] = byte0;
      byte byte1 = (byte)3;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-83);
      byteArray0[2] = byte2;
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      cCSMatrix2.determinant();
      int int4 = 2078;
      int int5 = 2079;
      cCSMatrix0.nonZeroAt(int4, int5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom1 = new MockRandom();
      int int6 = 32;
      mockRandom1.ints(int6, (int) byte0);
      double double0 = (-115.0);
      CCSMatrix.randomSymmetric(int1, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow((-1));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 280;
      MockRandom mockRandom0 = new MockRandom(505L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(280, 280, (-1747.3051375911425), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(339, 1252, 10);
      assertEquals(1252, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(339, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.columnMajorIterator();
      assertEquals(1252, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(339, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(columnMajorMatrixIterator0);
      
      VectorIterator vectorIterator0 = cCSMatrix0.nonZeroIteratorOfColumn(10);
      assertEquals(1252, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(339, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(vectorIterator0);
      
      Iterator<Integer> iterator0 = cCSMatrix0.iteratorOrNonZeroColumns();
      assertEquals(1252, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(339, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1000;
      MockRandom mockRandom0 = new MockRandom(48);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(48, 1000, (double) 48, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(182L);
      assertNotNull(mockRandom0);
      
      DenseVector denseVector0 = DenseVector.random(5, mockRandom0);
      assertEquals(5, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertEquals(5, denseVector0.length());
      assertEquals(1, matrix0.columns());
      assertEquals(5, matrix0.rows());
      assertNotNull(matrix0);
      
      Vector vector0 = Vector.random(2025, mockRandom0);
      assertEquals(2025, vector0.length());
      assertNotNull(vector0);
      assertFalse(vector0.equals((Object)denseVector0));
      assertNotSame(vector0, denseVector0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)5, (double)182L, (double)182L, (double)5, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transform(matrixFunction0);
      assertEquals(5, denseVector0.length());
      assertEquals(1, matrix0.columns());
      assertEquals(5, matrix0.rows());
      assertEquals(5, matrix1.rows());
      assertEquals(1, matrix1.columns());
      assertNotNull(matrix1);
      assertFalse(denseVector0.equals((Object)vector0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotSame(denseVector0, vector0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1289;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(1289);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1289, cRSMatrix0.rows());
      assertEquals(7.757951900698216E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1289, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1289, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1290' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-1685.31914));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      double double0 = denseMatrix0.infinityNorm();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      DenseVector denseVector0 = DenseVector.fromCSV("");
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      boolean boolean0 = cCSMatrix0.isColumnMajor();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertTrue(boolean0);
      
      Vector vector0 = cCSMatrix0.multiply((Vector) denseVector0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, denseVector0.length());
      assertEquals(0, vector0.length());
      assertNotNull(vector0);
      assertTrue(vector0.equals((Object)denseVector0));
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      
      int int0 = 3;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(3, 3);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(3, cCSMatrix1.rows());
      assertEquals(3.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.3333333333333333, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(3, cCSMatrix1.columns());
      assertEquals(3, cCSMatrix1.cardinality());
      assertNotNull(cCSMatrix1);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix1.getRow(0);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(3, cCSMatrix1.rows());
      assertEquals(3.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.3333333333333333, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(3, cCSMatrix1.columns());
      assertEquals(3, cCSMatrix1.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      int int1 = (-777);
      int int2 = (-2938);
      int int3 = 8;
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse((-2938), 8, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2938' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[12][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (-4971.5373885231);
      doubleArray1[1] = (-4971.5373885231);
      doubleArray1[2] = 3863.7733377874497;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-4971.5373885231);
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(12, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.nonZeroColumnMajorIterator();
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(12, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(columnMajorMatrixIterator0);
      
      int int0 = 1737;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1737, 2.0);
      cCSMatrix1.getOrElse(1453, 1453, (-4971.5373885231));
      cCSMatrix0.setAll((-4971.5373885231));
      cCSMatrix0.getRow(2759);
      int[] intArray0 = new int[4];
      intArray0[0] = 1737;
      intArray0[1] = 1737;
      intArray0[2] = 1453;
      intArray0[3] = 2759;
      cCSMatrix1.select(intArray0, intArray0);
      int int1 = 1000;
      CCSMatrix.zero(int1, int0, intArray0[2]);
      cCSMatrix0.nonZeroIteratorOfColumn(intArray0[1]);
      int int2 = 1;
      int int3 = 2;
      CCSMatrix.zero(int2, int3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      Spliterator<Double> spliterator0 = cCSMatrix0.spliterator();
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(spliterator0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      int int0 = 2386;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(2386);
      assertEquals(2386, cRSMatrix0.cardinality());
      assertEquals(2386, cRSMatrix0.rows());
      assertEquals(2386, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4.1911148365465214E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = new CCSMatrix(2386, 2386);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2386, cCSMatrix0.rows());
      assertEquals(2386, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      int int1 = 37;
      double double0 = cCSMatrix0.maxInColumn(37);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2386, cCSMatrix0.rows());
      assertEquals(2386, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, double0, 0.01);
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 90.6;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      assertArrayEquals(new double[] {1.0, 90.6, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int[] intArray0 = new int[0];
      int int0 = 2780;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2780, 38, 1305, doubleArray0, intArray0, intArray0);
      assertEquals(2780, cCSMatrix0.rows());
      assertEquals(1305, cCSMatrix0.cardinality());
      assertEquals(38, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.012353275274517229, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.toBinary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.to(matrixFactory0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertNotNull(cCSMatrix1);
      assertSame(cCSMatrix0, cCSMatrix1);
      assertSame(cCSMatrix1, cCSMatrix0);
      
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      int int0 = 1762;
      CCSMatrix.from1DArray(1762, 1279, doubleArray0);
      cCSMatrix1.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(2617);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2617
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Matrix.identity(2386);
      CCSMatrix cCSMatrix0 = new CCSMatrix(2386, 2386);
      int int0 = 37;
      cCSMatrix0.maxInColumn(37);
      cCSMatrix0.getColumn(37);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt((-1687), 2347, matrixFunction0);
      int int1 = 1796;
      cCSMatrix0.minInColumn(1000);
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Integer integer0 = new Integer(1290);
      Matrix.identity(1290);
      cCSMatrix0.transpose();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1290;
      doubleArray0[1] = (double) 1290;
      doubleArray0[2] = (double) 1290;
      int[] intArray0 = new int[3];
      intArray0[0] = 1290;
      intArray0[1] = 1290;
      intArray0[2] = 1290;
      CCSMatrix cCSMatrix1 = new CCSMatrix(1290, 1290, 1290, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cCSMatrix1.transpose();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1290' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 3862.64557;
      doubleArray0[3] = 3862.64557;
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      intArray1[1] = 2395;
      intArray1[2] = 2395;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2395, 3, 3, doubleArray0, intArray0, intArray1);
      cCSMatrix0.divide(3862.64557);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      Matrix matrix0 = cCSMatrix0.rotate();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.setAll(3305.5330894);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (-4971.5373885231);
      doubleArray1[1] = (-4971.5373885231);
      doubleArray1[2] = 3863.7733377874497;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1737, 2.0);
      cCSMatrix1.getOrElse(1479, 1479, (-1.0));
      cCSMatrix0.setAll((-4971.5373885231));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 13;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(13, Double.POSITIVE_INFINITY);
      cCSMatrix0.setAll(1070.8564114);
      CCSMatrix.identity(13);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1413;
      int[] intArray0 = new int[2];
      intArray0[0] = 1413;
      intArray0[1] = 13;
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix((-1377), 1403, 13, doubleArray0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1377x1403
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      int int0 = 2386;
      Matrix.identity(2386);
      CCSMatrix cCSMatrix0 = new CCSMatrix(2386, 2386);
      int int1 = 37;
      cCSMatrix0.copyOfShape(37, 48);
      String string0 = "Given vector should have the same length as number of columns in the given matrix: ";
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("Given vector should have the same length as number of columns in the given matrix: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2386);
      cCSMatrix0.copyOfRows(16);
      cCSMatrix0.maxInColumn(37);
      double double0 = 1.9563783675569038;
      int int0 = 94;
      MockRandom mockRandom0 = new MockRandom(2386);
      mockRandom0.doubles((long) 2386);
      mockRandom0.ints(1306, 37);
      CCSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.copyOfShape(2873, 2873);
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(182L);
      mockRandom0.ints();
      DenseVector.random(5, mockRandom0);
      Vector.random(5, mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom1 = new MockRandom(5);
      mockRandom1.doubles((double) 5, (double) 182L);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 434);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 905.362307;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int int0 = 831;
      cCSMatrix0.sum();
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("][");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[12][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = 3863.7733377874497;
      doubleArray1[4] = 0.0;
      int int0 = 1609;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1609, 2.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.nonZeroRowMajorIterator();
      cCSMatrix0.each(matrixProcedure0);
      String string0 = "Given vector should have the same length as number of columns in the given matrix: ";
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV(string0);
      int int1 = (-3483);
      int int2 = 1283;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(int1, int2, (double) int0, (Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      int int3 = 1517;
      double double0 = 918.0;
      ColumnMajorSparseMatrix.randomSymmetric(int3, double0, (Random) mockRandom1);
      int int4 = (-1);
      cCSMatrix1.nonZeroIteratorOfColumn(int4);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      Matrix.identity(2386);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(2382, 0.0, (Random) mockRandom0);
      cCSMatrix0.transpose();
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.PRC;
      locale1.getScript();
      NumberFormat.getIntegerInstance(locale0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2382;
      intArray0[1] = 2382;
      intArray0[2] = 1512;
      intArray0[3] = 1512;
      intArray0[4] = 2386;
      intArray0[5] = 1512;
      CCSMatrix cCSMatrix1 = new CCSMatrix(1512, 2386);
      double[][] doubleArray1 = new double[7][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix1.isZeroAt(2386, 2376);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, Double.POSITIVE_INFINITY, (Random) mockRandom0);
      cCSMatrix0.setRow(996, 1.0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      int int0 = 3735;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(0, 0);
      cCSMatrix1.toBinary();
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) 0, (long) 3735, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2505);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      int int0 = 3970;
      CCSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.norm();
      Matrix.identity(1290);
      cCSMatrix0.transpose();
      Locale locale0 = Locale.TAIWAN;
      locale0.getScript();
      NumberFormat.getIntegerInstance(locale0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1290;
      doubleArray0[1] = (double) 1290;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 1290;
      intArray0[1] = 1290;
      intArray0[2] = 1290;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 1290;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 1290;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 1290;
      doubleArray1[6] = (double) 1290;
      doubleArray1[7] = (double) 3;
      int[] intArray1 = new int[4];
      intArray1[0] = 1290;
      intArray1[1] = 1290;
      intArray1[2] = 1290;
      intArray1[3] = 1290;
      CCSMatrix cCSMatrix1 = new CCSMatrix(1290, 1290, 3, doubleArray1, intArray1, intArray1);
      cCSMatrix1.setAll(0.0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Integer integer0 = new Integer(1308);
      Matrix.identity(1308);
      cCSMatrix0.multiplyByItsTranspose();
      Locale locale0 = Locale.TAIWAN;
      cCSMatrix0.toCSV();
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      NumberFormat.getNumberInstance();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1308, 1308);
      cCSMatrix0.transpose();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1308;
      doubleArray0[1] = (double) 1308;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(905, 905, doubleArray0);
      inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      cCSMatrix0.max();
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setDecimalSeparatorAlwaysShown(false);
      cCSMatrix0.mkString((NumberFormat) decimalFormat0);
      int int0 = (-2511);
      org.evosuite.runtime.Random.setNextRandom((-2511));
      cCSMatrix0.columnMajorIterator();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2511);
      intArray0[1] = 7;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2511' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toColumnVector();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.rotate();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom(1324);
      int int0 = 2371;
      DenseVector denseVector0 = DenseVector.random(2371, mockRandom0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Vector.random(1324, mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix1, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = 3863.7733377874497;
      doubleArray1[4] = 0.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int int0 = 1609;
      CCSMatrix.diagonal(1609, 2.0);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(1609, 1451);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1451, 3241.685692851192, (double)1451, (double)1609, 2241.67).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      int int1 = 151;
      CCSMatrix cCSMatrix2 = CCSMatrix.from1DArray((-579), 652, doubleArray1);
      Matrix matrix0 = null;
      CCSMatrix.identity(int1);
      String string0 = "Sides of blocks are incompatible!";
      CCSMatrix.fromMatrixMarket(string0);
      CCSMatrix cCSMatrix3 = CCSMatrix.block(matrix0, cCSMatrix1, matrix0, cCSMatrix2);
      int int2 = 471;
      cCSMatrix1.minInColumn(int1);
      int int3 = (-2680);
      CCSMatrix cCSMatrix4 = new CCSMatrix(int2, int3);
      MatrixFactory<Matrix> matrixFactory0 = null;
      cCSMatrix3.to(matrixFactory0);
      CCSMatrix cCSMatrix5 = CCSMatrix.identity(int3);
      cCSMatrix5.nonZeroIteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.norm();
      Matrix.identity(1290);
      cCSMatrix0.transpose();
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getScript();
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 2395;
      doubleArray1[1] = (double) 2395;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 2395;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1290, 0.0);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(2563, 1.0);
      cCSMatrix2.minInColumn(2395);
      int[] intArray0 = new int[8];
      intArray0[1] = (-2663);
      intArray0[2] = 1290;
      intArray0[3] = 2563;
      intArray0[4] = 284;
      intArray0[5] = 2395;
      intArray0[6] = 1;
      intArray0[7] = 2395;
      cCSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[12][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[4] = 0.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1737, 2.0);
      cCSMatrix0.toColumnVector();
      cCSMatrix1.getOrElse(1453, 1453, 0.0);
      cCSMatrix0.getRow(1737);
      int[] intArray0 = new int[1];
      intArray0[0] = 1453;
      cCSMatrix1.select(intArray0, intArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Matrix.identity(2386);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      CCSMatrix cCSMatrix0 = new CCSMatrix(2386, 2382);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.PRC;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2382, Double.NEGATIVE_INFINITY);
      int int0 = (-2310);
      int int1 = 1000;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2386).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.updateAt(2382, 1000, matrixFunction0);
      cCSMatrix1.minInColumn(1000);
      CCSMatrix.from2DArray((double[][]) null);
      CCSMatrix cCSMatrix2 = new CCSMatrix();
      CCSMatrix.identity(int0);
      org.evosuite.runtime.Random.setNextRandom(int1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[][] doubleArray0 = new double[12][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[4] = (-0.4541583039458632);
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1737, 2.0);
      cCSMatrix0.toColumnVector();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, true, true, true, true).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.is(matrixPredicate0);
      cCSMatrix1.getOrElse(1453, 1453, 0.0);
      cCSMatrix0.getRow(1737);
      int[] intArray0 = new int[1];
      intArray0[0] = 1453;
      cCSMatrix1.select(intArray0, intArray0);
      CCSMatrix.identity(744);
      org.evosuite.runtime.Random.setNextRandom(1737);
      cCSMatrix1.updateAt(4, 4, (MatrixFunction) null);
      int int0 = (-1285);
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.each(matrixProcedure0);
      int int1 = (-1013);
      int int2 = (-2045222520);
      cCSMatrix0.set(int2, int0, int1);
      int int3 = 48;
      CCSMatrix.diagonal(int3, int3);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(1290);
      mockRandom0.ints(2428L);
      CCSMatrix cCSMatrix1 = CCSMatrix.random(1290, 1290, (double) 0L, (Random) mockRandom0);
      cCSMatrix1.determinant();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(182L);
      DenseVector denseVector0 = DenseVector.random(5, mockRandom0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Vector.random(5, mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)5, (double)182L, 1.0, (double)5, (-2029.399638)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.transform(matrixFunction0);
      int int0 = 1000;
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(5, 1.0, (Random) mockRandom0);
      int int1 = 8;
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(8, 5, matrixFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1323, 1323);
      cCSMatrix0.maxInColumn(1266);
      CCSMatrix.diagonal(1266, 0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 10;
      CCSMatrix cCSMatrix0 = new CCSMatrix(10, 10);
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        Matrix.fromCSV("SQUARE_ROOT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1282;
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(26, 1282);
      int int1 = 1451;
      cCSMatrix0.max();
      MatrixFactory<Matrix> matrixFactory1 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory1).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[][] doubleArray0 = new double[12][8];
      double[] doubleArray1 = new double[6];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int int0 = 1737;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1737, 2.0);
      cCSMatrix0.toColumnVector();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, true, true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.is(matrixPredicate0);
      int int1 = 1453;
      cCSMatrix1.getOrElse(1453, 1453, 0.0);
      cCSMatrix0.getRow(1737);
      int[] intArray0 = new int[1];
      intArray0[0] = 1453;
      Matrix matrix0 = cCSMatrix1.select(intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      cCSMatrix1.divide((-1901.544962123483));
      int int2 = (-710);
      cCSMatrix1.min();
      cCSMatrix1.iteratorOfColumn(int0);
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int2);
      org.evosuite.runtime.Random.setNextRandom(int1);
      MatrixFunction matrixFunction1 = null;
      int int3 = 1551;
      cCSMatrix1.updateAt(int3, int3, matrixFunction1);
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix2.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(974L);
      DenseVector denseVector0 = DenseVector.random(2362, mockRandom0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = denseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix1, matrix1, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[][] doubleArray0 = new double[12][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[4] = 0.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(1737, 1737);
      cCSMatrix0.toColumnVector();
      int int0 = 1453;
      cCSMatrix1.getOrElse(1453, 1453, 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1453;
      Matrix matrix0 = cCSMatrix1.select(intArray0, intArray0);
      matrix0.minInRow(1573);
      int int1 = 479;
      int int2 = (-3758);
      cCSMatrix1.copyOfShape(int1, int2);
      matrix0.blank();
      int int3 = 2835;
      CCSMatrix cCSMatrix2 = new CCSMatrix(int0, int3);
      MatrixFactory<Matrix> matrixFactory0 = null;
      cCSMatrix0.to(matrixFactory0);
      cCSMatrix0.nonZeroIteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1687.0);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.eachNonZeroInRow((-4713), vectorProcedure0);
      int int0 = (-345);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn((-345));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -345
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[][] doubleArray0 = new double[12][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[4] = (-0.4541583039458632);
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1737, 2.0);
      cCSMatrix0.toColumnVector();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, true, true, true, true).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.is(matrixPredicate0);
      cCSMatrix1.getOrElse(1453, 1453, 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1453;
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix1.select(intArray0, intArray0);
      cCSMatrix2.nonZeroRowMajorIterator();
      double double0 = new Double((-0.4541583039458632));
      MockRandom mockRandom0 = new MockRandom(1453);
      org.evosuite.runtime.Random.setNextRandom(37);
      cCSMatrix1.nonZeroAt(1453, 1453);
      CCSMatrix cCSMatrix3 = CCSMatrix.from1DArray(3, 1280, doubleArray1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix3.update(matrixFunction0);
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix cCSMatrix4 = new CCSMatrix();
      int int0 = 2408;
      cCSMatrix4.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 2428;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2428);
      cCSMatrix0.maxInColumn(38);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2428).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(38, 2, matrixFunction0);
      cCSMatrix0.minInRow(2);
      int int1 = (-4653);
      int int2 = 8;
      DenseVector denseVector0 = DenseVector.zero(2);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      int int3 = 1522;
      MockRandom mockRandom0 = new MockRandom();
      Vector.random(960, mockRandom0);
      Matrix matrix1 = cCSMatrix0.shuffle();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix0, matrix1, matrix0, matrix0);
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int2);
      int int4 = 752;
      int int5 = (-1451);
      cCSMatrix0.copyOfShape(int4, int5);
      CCSMatrix.zero(int3, int4, int1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachInColumn(int0, vectorProcedure0);
      int int6 = 1492;
      VectorProcedure vectorProcedure1 = null;
      cCSMatrix1.eachInColumn(int6, vectorProcedure1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = 36;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(32);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(273, 273, 1.0, (Random) mockRandom0);
      int int1 = (-431);
      int int2 = 8;
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix.randomSymmetric(int2, (double) int1, (Random) mockRandom1);
      int int3 = (-976);
      cCSMatrix1.minInColumn(int3);
      CCSMatrix cCSMatrix2 = new CCSMatrix();
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 1287;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1287);
      Matrix matrix0 = cCSMatrix0.copy();
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.multiply(matrix0);
      CCSMatrix cCSMatrix1 = cCSMatrix0.to(matrixFactory0);
      cCSMatrix1.iterator();
      int int1 = 1288;
      int int2 = (-574);
      Matrix matrix1 = cCSMatrix0.insert((Matrix) cCSMatrix1, int1, int1, int0, int2);
      Matrix matrix2 = cCSMatrix0.removeFirstColumn();
      MockRandom mockRandom0 = new MockRandom();
      int int3 = (-4920);
      mockRandom0.ints(int3, int3);
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(string0);
      Matrix matrix3 = rowMajorSparseMatrix0.transpose();
      CCSMatrix cCSMatrix2 = CCSMatrix.block(matrix0, matrix2, matrix1, matrix3);
      cCSMatrix2.toSparseMatrix();
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix0.each(matrixProcedure0);
      int[] intArray0 = null;
      matrix0.select(intArray0, intArray0);
      int int4 = 419;
      double double0 = 3882.0;
      CCSMatrix.diagonal(int4, double0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.rotate();
      double double0 = 2.0;
      cCSMatrix0.divide(2.0);
      cCSMatrix0.iterator();
      cCSMatrix0.min();
      int int0 = 1180;
      double double1 = 1647.0;
      MockRandom mockRandom0 = new MockRandom(1180);
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(1180, 1647.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1392400.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Matrix.identity(2386);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      mockRandom0.nextDouble();
      CCSMatrix cCSMatrix0 = new CCSMatrix(2386, 2386);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.PRC;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2386, 0.0);
      Matrix matrix0 = cCSMatrix0.blankOfColumns(2386);
      matrix0.toColumnVector();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2386).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)2386).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      cCSMatrix1.updateAt(2386, 1000, matrixFunction0);
      cCSMatrix0.multiply(Double.NEGATIVE_INFINITY);
      cCSMatrix0.minInRow(1573);
      Matrix matrix1 = cCSMatrix0.blank();
      CCSMatrix cCSMatrix2 = new CCSMatrix(385, 1000);
      matrix1.divide((-4354.5));
      cCSMatrix2.iterator();
      CCSMatrix cCSMatrix3 = CCSMatrix.randomSymmetric(1000, 0.0, (Random) mockRandom0);
      cCSMatrix2.iteratorOrNonZeroColumns();
      CCSMatrix.zero(357, 385, 1573);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix3.eachNonZeroInColumn(86, vectorProcedure0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }
}
