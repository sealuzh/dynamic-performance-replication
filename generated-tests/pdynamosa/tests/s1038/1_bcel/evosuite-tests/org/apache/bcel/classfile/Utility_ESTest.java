/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 07:41:17 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.typeOfSignature("Linvokestatic;V");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("lstore_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lstore_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("RX8OX7.2]");
      Utility.replace("RX8OX7.2]", "Z]HkUQCE 5)", "RX8OX7.2]");
      int int0 = (-3645);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "RX8OX7.2]", (-3645), (-3645));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t";
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(193, 978);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      constantArray0[5] = (Constant) constantMethodHandle0;
      constantArray0[6] = (Constant) constantMethodHandle0;
      constantArray0[7] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-121);
      int int0 = (-24);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-717), (-24));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 27015. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 86;
      Utility.isSet(86, 86);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong((-1987L));
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodType0.clone();
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = (-2859);
      Utility.setBit((-2859), (-2725));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("s!nfK/mC", "s!nfK/mC", "s!nfK/mC", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s!nfK/mC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("Linvokstatic;V", "Linvokstatic;V", "Linvokstatic;V");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(719, 719);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(719, 719);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Utility.typeOfSignature("MwS*YX/F^5a9q-J2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MwS*YX/F^5a9q-J2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("FyJ3][#");
      assertEquals((byte)6, byte0);
      
      Utility.signatureToString("FyJ3][#", false);
      Utility.isSet((byte)6, (-2558));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)30;
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "['~Svsg";
      try { 
        Utility.methodSignatureReturnType("['~Svsg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `'~Svsg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.fillup("c@{n W", (-7), true, 'Y');
      assertEquals("c@{n W", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)53;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1410), 997);
      assertEquals("0:    pop2\n1:    saload\n", string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte byte0 = (byte)73;
      Utility.isSet((byte) (-51), (byte) (-51));
      // Undeclared exception!
      try { 
        Utility.signatureToString("A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)119;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)111;
      objectArray0[1] = (Object) (byte)119;
      objectArray0[2] = (Object) (byte) (-56);
      objectArray0[3] = (Object) (byte)111;
      String string0 = Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.isJavaIdentifierPart('#');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.read();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = Utility.clearBit(0, 0);
      assertEquals(0, int0);
      
      String string0 = Utility.accessToString(0);
      assertEquals("", string0);
      
      short short0 = Utility.searchOpcode("<Lf");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-128);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)32;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.convertString("");
      try { 
        Utility.methodSignatureReturnType("T63x^Fmy?=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T63x^Fmy?=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.isJavaIdentifierPart('@');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)82;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.classOrInterface(869);
      Utility.compactClassName("interface");
      Utility.accessToString((-918));
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.replace("ry8#(3nBw\"EwxK", "ry8#(3nBw\"EwxK", (String) null);
      Utility.searchOpcode("null");
      Utility.clearBit((short) (-1), (short) (-1));
      Utility.classOrInterface(204);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_acmpeq\t\t#18568", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.typeOfSignature("Linvokestatic;V");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)14;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "void";
      stringArray0[1] = "org.apache.bcel.classfile.Utility$JavaReader";
      stringArray0[2] = "Linvokestatic;V";
      stringArray0[3] = "Linvokestatic;V";
      stringArray0[4] = "Linvokestatic;V";
      stringArray0[5] = "Linvokestatic;V";
      try { 
        Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$JavaReader", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('/');
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("~;.jT|6'$]", false);
      assertArrayEquals(new byte[] {(byte)126, (byte)59, (byte)46, (byte)106, (byte)84, (byte)124, (byte)54, (byte)39, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(176, 3397);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodHandle0;
      byteSequence0.skipBytes((byte) (-107));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.typeOfSignature("Invalid method signature: ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid method signature: ", "Invalid method signature: ", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = Utility.clearBit((-79), 122);
      assertEquals((-67108943), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Qo&,MiIj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qo&,MiIj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)77;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1056, 934);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 845, (int) (byte)101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedShort();
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)72;
      byteArray0[3] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_3", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)72;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"72\"}", string1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      Utility.isJavaIdentifierPart('~');
      String string0 = "\t";
      String string1 = ">-AZlQr{\\)@}^g(Em4";
      Utility.classOrInterface(90);
      try { 
        Utility.methodSignatureArgumentTypes("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6U-DM;8 d6(g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6U-DM;8 d6(g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)56;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$7f$bb9pQK8", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.compactClassName(">\t");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ">\t";
      objectArray0[1] = (Object) ">\t";
      objectArray0[2] = (Object) ">\t";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.isJavaIdentifierPart('S');
      // Undeclared exception!
      try { 
        Utility.signatureToString("GWTtn7/ 4?<}Wg@_wz", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GWTtn7/ 4?<}Wg@_wz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('|');
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-7);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (int) (byte)13, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-82);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      Utility.isJavaIdentifierPart('~');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)27);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@4acffa79, java.lang.Object@22febfb7, java.lang.Object@2732b960", false);
      MockFile mockFile0 = new MockFile("-e('ah]uNbcsYoj;s1A");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('o');
      Utility.printArray(printStream0, (Object[]) null);
      assertSame(printStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ">irGx6Y";
      objectArray0[1] = (Object) ">irGx6Y";
      objectArray0[2] = (Object) ">irGx6Y";
      String string0 = Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Linvokestatic;V");
      assertEquals("invokestatic", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "invokestatic";
      objectArray0[1] = (Object) "Linvokestatic;V";
      objectArray0[2] = (Object) "Linvokestatic;V";
      objectArray0[3] = (Object) "invokestatic";
      objectArray0[4] = (Object) "Linvokestatic;V";
      objectArray0[5] = (Object) "invokestatic";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.readFloat();
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("invokestatic");
      assertEquals((short)184, short0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-84);
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte) (-84);
      byteArray1[3] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "dastore";
      try { 
        Utility.typeOfSignature("dastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "'b$cb()v";
      try { 
        Utility.methodSignatureToString("'b$cb()v", "", "cNbyte", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'b$cb()v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DX1DH}#4Ewy[F,);!J");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.signatureToString("DX1DH}#4Ewy[F,);!J", false);
      assertEquals("double", string0);
      
      boolean boolean0 = Utility.isSet(9, 166);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sun.boot.class.path");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)16;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("ab 10", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)66;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)59;
      Utility.searchOpcode("");
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-87));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ret\t\t%12", "wDBL-%V\"=$b", "wDBL-%V\"=$b", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ret\t\t%12
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-86));
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifge\t\t#16571", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Utility.compactClassName(">\t");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ">\t";
      objectArray0[1] = (Object) ">\t";
      objectArray0[2] = (Object) ">\t";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.compactClassName(", npairs = ", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aaload", ", npairs = ", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "g";
      stringArray0[1] = "U5p[v{sHR?f2G8-_";
      stringArray0[2] = "g";
      stringArray0[3] = "U5p[v{sHR?f2G8-_";
      stringArray0[4] = "U5p[v{sHR?f2G8-_";
      stringArray0[5] = "g";
      stringArray0[6] = "U5p[v{sHR?f2G8-_";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("g", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[v{sHR?f2G8-_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, 3350, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.isJavaIdentifierPart('.');
      // Undeclared exception!
      try { 
        Utility.signatureToString(";jiFa'H", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;jiFa'H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Utility.signatureToString("J41<`L>N)'X'c>", false);
      assertEquals("long", string0);
      
      byte[] byteArray0 = Utility.decode("", false);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("T::");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)34;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)32;
      byteArray1[7] = (byte)32;
      byteArray1[8] = (byte)32;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-123);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("12 00 2a e3 c1 00 5c 00 85", string0);
      
      boolean boolean0 = Utility.isSet((byte) (-29), (byte)0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)18;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte) (-123);
      objectArray0[3] = (Object) (byte)92;
      Object object0 = new Object();
      objectArray0[4] = object0;
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.getSignature("float");
      assertEquals("F", string2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore\t\t%63", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.methodTypeToSignature("ret", (String[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)28;
      Utility.equals(byteArray0, byteArray0);
      String string0 = Utility.format(4216, (byte) (-50), true, '@');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.searchOpcode("istore_1");
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      Utility.methodTypeToSignature("ymlJP", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y3Sg@KY5z{+/ 5-3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y3Sg@KY5z{+/ 5-3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-126);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), (int) (byte) (-126), false);
      try { 
        Utility.typeOfSignature("k|{yHEa+dAWBt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k|{yHEa+dAWBt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip(0L);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte)39;
      byteArray1[4] = (byte)73;
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)73;
      byteArray2[1] = (byte)73;
      byteArray2[2] = (byte) (-85);
      byteArray2[3] = (byte) (-12);
      byteArray2[4] = (byte) (-111);
      byteArray2[5] = (byte) (-12);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, (-1551), (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_2
         // 1:    dstore_2
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantLong constantLong0 = new ConstantLong((-3694L));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodType0.clone();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = Utility.accessToString((-2832), false);
      assertEquals("final synchronized volatile transient abstract synthetic annotation enum", string0);
      
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.format((byte)46, (-1530), false, 'N');
      assertEquals("46", string1);
      
      String string2 = Utility.compactClassName("dmul", "final synchronized volatile transient abstract synthetic annotation enum", false);
      assertEquals("dmul", string2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence1, constantPool1);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.signatureToString("L5;mc%Q'mD;s${h");
      Utility.compactClassName("L5;mc%Q'mD;s${h", false);
      Utility.signatureToString("L5;mc%Q'mD;s${h", true);
      String string0 = Utility.compactClassName("short");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.methodSignatureReturnType("Linvokestatic;V");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byte byte0 = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte) (-80);
      String string0 = "P]@Y.Hae\\upC-w[shou";
      try { 
        Utility.methodSignatureToString("[I0^;sA", (String) null, string0, false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [I0^;sA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("N['Z~FSg");
      assertEquals("N['Z~FSg", string0);
      
      byte byte0 = Utility.typeOfSignature("IR;");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)10);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.compactClassName(">\t");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ">\t";
      objectArray0[1] = (Object) ">\t";
      objectArray0[2] = (Object) ">\t";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)86;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), 2, false);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-3413), (-3413));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant constant0 = constantFieldref1.copy();
      constantArray0[0] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3413), (-1833), true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)65;
      byteArray1[4] = (byte)65;
      Utility.codeToString(byteArray1, (ConstantPool) null, (-1449320404), 2864);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1261, (-433));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, true, true);
      Utility.getSignature("3~;R^k2RU#");
      boolean boolean0 = false;
      try { 
        Utility.typeOfMethodSignature("y{FS&v#&L n+~*T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: y{FS&v#&L n+~*T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("", "x<Kak`V~", true);
      String string1 = "E{AB9;7%f=l";
      boolean boolean0 = true;
      int int0 = 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      MockFile mockFile0 = new MockFile("\"G/=cB\"%Zh:");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"W\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-95);
      byteArray0[8] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)86;
      byteArray1[2] = (byte) (-103);
      byteArray1[3] = (byte) (-95);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Linvokestatic;V");
      assertEquals("invokestatic", string0);
      
      String string1 = Utility.methodSignatureReturnType("I3", false);
      assertEquals("int", string1);
      
      short short0 = Utility.searchOpcode("int");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('4');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "invokestatic";
      objectArray0[1] = (Object) "Linvokestatic;V";
      objectArray0[2] = (Object) "int";
      objectArray0[3] = (Object) "Linvokestatic;V";
      String string2 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"invokestatic\", \"Linvokestatic;V\", \"int\", \"Linvokestatic;V\"", string2);
      
      boolean boolean1 = Utility.isSet((short) (-1), 98);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.setBit(96, 0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(934, 1056);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantNameAndType1;
      constantArray0[1] = (Constant) constantNameAndType1;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)101;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)66;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      String string0 = "zI";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("zI", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `zI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.format((byte)122, (byte)122, true, 'j');
      assertEquals("122jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", string0);
      
      String string1 = Utility.fillup("122jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", (byte)122, true, 'j');
      assertEquals("122jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.typeOfSignature("JcS");
      try { 
        Utility.methodSignatureReturnType("astore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `astore_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      Utility.encode(byteArray0, false);
      Utility.printArray((Object[]) null, false, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte) (-95);
      byteArray1[4] = (byte)65;
      byteArray1[5] = (byte)91;
      byteArray1[6] = (byte) (-95);
      byteArray1[7] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.compactClassName("iuQ.k,kAZP(< c-");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)101;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 750, 750);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)113;
      byteArray0[8] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iflt\t\t#15021", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.classOrInterface(869);
      Utility.compactClassName("");
      String string0 = "$ikk2J{EcN";
      try { 
        Utility.typeOfMethodSignature("$ikk2J{EcN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $ikk2J{EcN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmplt\t\t#-18776", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iconst_3");
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.getSignature("U5p[v{sHR?f2G8-_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[v{sHR?f2G8-_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.signatureToString("T{'`Xr>8)wr;+");
      assertEquals("{'`Xr>8)wr", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-101);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("astore\t\t%155");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-105));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.setBit((-3008), 106);
      try { 
        Utility.methodSignatureToString("Q:x>sEEx~u", "Illegally nested brackets:", "Illegally nested brackets:", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q:x>sEEx~u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("CUYGFn>: ;ny*(", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CUYGFn>: ;ny*(");
      try { 
        Utility.decode("$lJ$8b$I$A$A$AA$$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("AAA", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "i2b";
      stringArray0[1] = "1MyB&^BRRz :,,l5j";
      stringArray0[2] = "AAA";
      String string1 = Utility.methodTypeToSignature("1MyB&^BRRz :,,l5j", stringArray0);
      assertEquals("(Li2b;L1MyB&^BRRz;LAAA;)L1MyB&^BRRz;", string1);
      
      String string2 = Utility.compactClassName("1MyB&^BRRz :,,l5j", false);
      assertEquals("1MyB&^BRRz :,,l5j", string2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("", false);
      Utility.clearBit(4289, 255);
      Utility.format((-2329), 255, false, '.');
      int int0 = (-175);
      boolean boolean0 = true;
      Utility.fillup("", (-175), true, '$');
      String string1 = "4L'-BcB";
      int int1 = (-2234);
      int int2 = 0;
      LocalVariable[] localVariableArray0 = new LocalVariable[5];
      int int3 = 90;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "YuK$C\\aJ<m";
      try { 
        Utility.typeOfSignature("YuK$CaJ<m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YuK$CaJ<m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      File file0 = MockFile.createTempFile("Xi-nUJr%{1%", "Xi-nUJr%{1%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 46
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Utility.typeOfSignature(" reaching EOF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  reaching EOF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = ", high = ";
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.compactClassName("java.`ang.wX", true);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = (-1533);
      Utility.codeToString(byteArray0, constantPool0, (-1533), (-1533));
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid me");
      assertEquals("int", string0);
      
      Utility.compactClassName(", high = ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-121);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("4a 54 ef 30 d6 2e 87", string1);
      
      String string2 = Utility.compactClassName("8G-(<ligQ", "!/", true);
      assertEquals("8G-(<ligQ", string2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence4, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("aload_2");
      assertEquals((short)44, short0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifnull\t\t#-14653", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 159, (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("TXnXrRa)w1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TXnXrRa)w1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.compactClassName("\t");
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "\t";
      objectArray0[2] = (Object) "\t";
      String string0 = Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)69;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      try { 
        Constant.readConstant(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 81
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Utility.accessToString(327);
      assertEquals("public private protected volatile native", string0);
      
      String string1 = Utility.compactClassName("public private protected volatile native", "public private protected volatile native", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifnonnull\t\t#4627", string0);
      
      String string1 = Utility.accessToString(3484, true);
      assertEquals("protected static final transient native abstract strictfp", string1);
      
      String string2 = Utility.accessToString((int) (byte)18);
      assertEquals("private final", string2);
      
      int int0 = Utility.setBit(1677, 154);
      assertEquals(67110541, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.replace("NE;(l5p6", "NE;(l5p6", "NE;(l5p6");
      try { 
        Utility.typeOfSignature("NE;(l5p6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NE;(l5p6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-515), (-1633));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip((byte) (-71));
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 14655. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "94aAXVL@=E]p";
      Utility.compactClassName("94aAXVL@=E]p", false);
      try { 
        Utility.typeOfMethodSignature("94aAXVL@=E]p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 94aAXVL@=E]p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 23;
      Utility.accessToString(23, false);
      boolean boolean0 = false;
      Utility.decode("public private protected final", false);
      Utility.accessToString(23, false);
      MockFile mockFile0 = new MockFile("public private protected final");
      MockFile mockFile1 = new MockFile(mockFile0, "public private protected final");
      mockFile0.getCanonicalPath();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile1, "public private protected final");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // public private protected final
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.typeOfSignature("CUYGFn>: ;ny*(");
      Utility.typeOfSignature("Z");
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[9];
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[0] = (Constant) constantLong0;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("dadd", "hR)Y-L-LuU82&_;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"hR)Y-L-LuU82&_;\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.getSignature("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("sUR", "", true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[2] = "sUR";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("rxdN0T*6@@[9q0zG`F^", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[9q0zG`F^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Linvokestatic;V", "Linvokestatic;V", "Linvokestatic;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Linvokestatic;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)28;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.format(167, (byte)28, true, 'J');
      assertEquals("167JJJJJJJJJJJJJJJJJJJJJJJJJ", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence1);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(726, 726);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)28, (byte)28);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)28, 187);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, 0, 723);
      assertEquals("0:    iload_2\n1:    iload_2\n2:    iload_2\n3:    iload_2\n4:    iload_2\n5:    iload_2\n6:    iload_2\n7:    iload_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[2];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("org.apache.bcel.classfile.MethodParameter", "org.apache.bcel.classfile.MethodParameter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"org.apache.bcel.classfile.MethodParameter\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.isJavaIdentifierPart('2');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      try { 
        Utility.typeOfSignature("71Rm&P_bK)$EceLcD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 71Rm&P_bK)$EceLcD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-27);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.setBit((byte) (-27), (byte) (-2));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-27);
      objectArray0[1] = (Object) (byte) (-2);
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.isJavaIdentifierPart('.');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.methodTypeToSignature("ret", (String[]) null);
      Utility.printArray((Object[]) null);
      byte byte0 = (byte)43;
      byte byte1 = (byte)48;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 4173, (int) (byte) (-23), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char char0 = ';';
      Utility.isJavaIdentifierPart(';');
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("3}O[f'i1-", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[f'i1-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "R";
      Utility.compactClassName("R");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("R", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Utility.getSignature("c@{n W");
      assertEquals("Lc@{n;", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("FyJ3][#");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.signatureToString("FyJ3][#", false);
      assertEquals("float", string0);
      
      boolean boolean0 = Utility.isSet((byte)6, (-2558));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[2] = (byte)30;
      Constant[] constantArray0 = new Constant[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2949, 152);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)6, true);
      assertEquals("0:    iconst_3\n1:    nop\n2:    lload_0\n", string1);
      
      String string2 = Utility.accessToString(152, true);
      assertEquals("static final transient", string2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Utility.convertString(">\t");
      assertEquals(">\t", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(';');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-86));
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.classOrInterface((-493));
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte) (-108);
      byteArray1[4] = (byte)60;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-107);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("z$F$9a4$95", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("");
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)91;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("java.lang.TXgU4r.Q");
      assertEquals("java.lang.TXgU4r.Q", string0);
      
      byte byte0 = Utility.typeOfSignature("SHk");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFully(byteArray0);
      byteSequence0.read();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantFloat constantFloat0 = new ConstantFloat((-5267.802F));
      ConstantFloat constantFloat1 = new ConstantFloat(byteSequence0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.typeOfSignature("SourceFile: ");
      try { 
        Utility.methodSignatureToString("SourceFile: ", "SourceFile: ", "SourceFile: ", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SourceFile: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("=R+_", stringArray0);
      Utility.compactClassName("^-b!\u0001hb(qGA/Dd|z", true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 57, 2451);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "? super ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "? super ", "? super ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.isJavaIdentifierPart('d');
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Utility.compactClassName("ojz", "ojz", false);
      Utility.setBit((-816), (-1428));
      Utility.replace("ojz", "ojz", "ojz");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-114));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2709), (-2709));
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      try { 
        Utility.typeOfSignature("94#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 94#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("X%NV7q?>5oN0{S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X%NV7q?>5oN0{S'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.accessToString((-929));
      try { 
        Utility.methodSignatureToString("", "", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.replace("TXnXrRa)wr1", "TXnXrRa)wr1", "TXnXrRa)wr1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString(";jiFa'H", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;jiFa'H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.format(0, 0, true, '=');
      assertEquals("0", string0);
      
      Utility.fillup("N.96Z1>='(?hfuQ_$", (-17), false, '%');
      String string1 = Utility.accessToString((-17));
      assertEquals("public private protected static synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.classOrInterface(100);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte) (-121);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(71, 56);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 105, 417);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = Utility.fillup("St", 91, true, 'M');
      assertEquals("StMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "f-=2";
      Utility.compactClassName("f-=2");
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#=U3y20-%;wq@D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #=U3y20-%;wq@D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("fload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) (byte)94;
      objectArray0[1] = (Object) (byte)94;
      objectArray0[2] = (Object) (byte)94;
      objectArray0[4] = (Object) (byte)94;
      objectArray0[5] = (Object) (byte)94;
      String string0 = Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "*+[o[tfs%/R!V27";
      // Undeclared exception!
      try { 
        Utility.getSignature("*+[o[tfs%/R!V27");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[o[tfs%/R!V27
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[0];
      byte[] byteArray1 = new byte[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Constant.setComparator((BCELComparator) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 1949, 634, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.accessToString(76);
      assertEquals("protected static volatile", string0);
      
      String string1 = Utility.accessToString(0, false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Utility.format(159, (-1614), true, '>');
      assertEquals("159", string0);
      
      String string1 = Utility.getSignature("");
      assertEquals("L;", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.classOrInterface(100);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.isJavaIdentifierPart('W');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte)105;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)105;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-27);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.setBit((byte) (-27), (byte) (-2));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-27);
      objectArray0[1] = (Object) (byte) (-2);
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfMethodSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = Utility.clearBit(13, 13);
      assertEquals(13, int0);
      
      String string0 = Utility.getSignature("Unrecognized attribute type tag parsed: ");
      assertEquals("LUnrecognized;", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Y0UjuJl$4GXK=I{r";
      stringArray0[1] = "Unrecognized attribute type tag parsed: ";
      stringArray0[2] = "\"1XX6@n5:y1-zB8VS";
      stringArray0[3] = "Y0UjuJl$4GXK=I{r";
      stringArray0[4] = "Unrecognized attribute type tag parsed: ";
      stringArray0[5] = "\"1XX6@n5:y1-zB8VS";
      stringArray0[6] = "\"1XX6@n5:y1-zB8VS";
      stringArray0[7] = "Unrecognized attribute type tag parsed: ";
      stringArray0[8] = "Y0UjuJl$4GXK=I{r";
      String string1 = Utility.methodTypeToSignature("Unrecognized attribute type tag parsed: ", stringArray0);
      assertEquals("(LY0UjuJl$4GXK=I{r;LUnrecognized;L\"1XX6@n5:y1-zB8VS;LY0UjuJl$4GXK=I{r;LUnrecognized;L\"1XX6@n5:y1-zB8VS;L\"1XX6@n5:y1-zB8VS;LUnrecognized;LY0UjuJl$4GXK=I{r;)LUnrecognized;", string1);
      
      int int1 = Utility.setBit(0, 125);
      assertEquals(536870912, int1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('J');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.printArray((Object[]) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%u6y$:%~4kqX<>;}35");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %u6y$:%~4kqX<>;}35
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Utility.signatureToString("CUYGFn>: ;ny*(", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(76);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      mockPrintWriter0.print((Object) pushbackInputStream0);
      mockPrintWriter0.print(0.0F);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X%.NV7q?>5oN0{S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X%.NV7q?>5oN0{S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.classOrInterface(54);
      try { 
        Utility.typeOfSignature("/i!Ts&>rg[pv]lH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /i!Ts&>rg[pv]lH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)98, (int) (byte)98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.compactClassName("LzOs|:oh?},IH#W0}");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<illegal opcode>", "", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "w_-zevgz}";
      boolean boolean0 = false;
      Utility.compactClassName("w_-zevgz}", "w_-zevgz}", false);
      try { 
        Utility.methodSignatureReturnType("&h){N!TX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{N!TX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ifgt\t\t#-3398", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)97;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("$t$ta");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $t$ta
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat1 = new ConstantFloat(byteSequence1);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat1;
      constantArray0[2] = (Constant) constantFloat1;
      constantArray0[3] = (Constant) constantFloat0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[4] = (Constant) constantNameAndType0;
      constantArray0[5] = (Constant) constantFloat0;
      constantArray0[6] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-79), 1622);
      constantArray0[7] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("TXnXrRa)wr1");
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, ">LUW(,", "getstatic", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.replace("invokespecial", "invokespecial", "invokespecial");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(45, 80);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("WwBca>E?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WwBca>E?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "bM&T|Y#h<ie*rRQ`e";
      boolean boolean0 = false;
      Utility.compactClassName("bM&T|Y#h<ie*rRQ`e", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "bM&T|Y#h<ie*rRQ`e";
      objectArray0[1] = (Object) "bM&T|Y#h<ie*rRQ`e";
      objectArray0[2] = (Object) "bM&T|Y#h<ie*rRQ`e";
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("bM&T|Y#h<ie*rRQ`e", "java.lang.", "bM&T|Y#h<ie*rRQ`e", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bM&T|Y#h<ie*rRQ`e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.compactClassName("LzOs|:oh?}");
      byte byte0 = Utility.typeOfSignature("LzOs|:oh?}");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.compactClassName("(bytes = ", false);
      assertEquals("(bytes = ", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("goto\t\t#-28720", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.isSet(3504, 3504);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byte byte0 = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)73;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("HEm*$){cn 8G<BA0#7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HEm*$){cn 8G<BA0#7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("BV");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.replace("org.apache.bcel.classfile.Utility$1", "org.apache.bcel.classfile.Utility$1", "org.apache.bcel.classfile.Utility$1");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Utility$1", (String) null, "<=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      String string0 = Utility.getSignature("N}'LnG`N(XcWzr");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "N}'LnG`N(XcWzr";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LocalVariableTable");
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lstore\t\t%119", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false, true);
      Utility.convertString("\"java.lang.Object@78bf87a1\", \"java.lang.Object@4afa564e\", \"java.lang.Object@2e76c53f\", \"java.lang.Object@5791e888\"");
      try { 
        Utility.typeOfSignature("\"java.lang.Object@78bf87a1\", \"java.lang.Object@4afa564e\", \"java.lang.Object@2e76c53f\", \"java.lang.Object@5791e888\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@78bf87a1\", \"java.lang.Object@4afa564e\", \"java.lang.Object@2e76c53f\", \"java.lang.Object@5791e888\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("RuntimeVisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("e`i|");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "monitorexit", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      String string0 = Utility.replace("monitorexit", "e`i|", "@4");
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("FU-D=;8 d6(g");
      assertEquals((byte)6, byte0);
      
      int int0 = Utility.clearBit((byte)6, (byte)6);
      assertEquals(6, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte)92;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      ByteSequence byteSequence6 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence6, (ConstantPool) null, true);
      assertEquals("bipush\t\t-66", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
      
      boolean boolean0 = Utility.isSet((byte)36, (byte) (-45));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-77);
      byteArray1[1] = (byte)97;
      byteArray1[2] = (byte)97;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence0.read();
      byteSequence1.close();
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      Utility.isJavaIdentifierPart('~');
      try { 
        Utility.typeOfSignature("-@9Nx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -@9Nx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("dneg", "jWc/(F^G)5U@8P", false);
      assertTrue(string1.equals((Object)string0));
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("00 77 00 00 00", string2);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte) (-61);
      byteArray0[8] = (byte) (-61);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), 3263, false);
      assertEquals("0:    dstore_0\n1:    monitorexit\n2:    dstore_0\n3:    dstore_0\n4:    monitorexit\n5:    if_icmpne\t\t#6088\n8:    monitorexit\n", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-113);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      short short0 = Utility.searchOpcode("ViHaQ7*,?vHw/-=z<9)");
      assertEquals((short) (-1), short0);
      
      byte byte0 = Utility.typeOfSignature("ViHaQ7*,?vHw/-=z<9)");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.accessToString((int) (byte)12);
      assertEquals("protected static", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      Utility.fillup("$l$8b$I$A$A$A$A$A$A$A", (byte)12, false, '(');
      int int0 = Utility.setBit((-3175), (-621));
      assertEquals((-3175), int0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.compactClassName("N['ZJ~FSg");
      Utility.accessToString((-596), true);
      Utility.accessToString((-1952));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">\t");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "synchronized volatile strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "protected static transient native abstract strictfp synthetic annotation enum";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "N['ZJ~FSg";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "N['ZJ~FSg";
      objectArray0[6] = (Object) "N['ZJ~FSg";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "e", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(start_pc = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `start_pc = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = Utility.accessToString(51);
      assertEquals("public private final synchronized", string0);
      
      String string1 = Utility.replace("", "?", "if_acmpne");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OjI");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte) (-3);
      byteArray1[2] = (byte) (-6);
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-1088), 170, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_2
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[0] = (byte)62;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      short short0 = Utility.searchOpcode("istore_1");
      assertEquals((short)60, short0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("newarray\t\t<<illegal type>>", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[0] = (byte) (-80);
      byteArray0[0] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)43;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('~');
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">-AZlQr{)@}^g(Em4";
      stringArray0[1] = "\t";
      String string0 = Utility.methodTypeToSignature("\t", stringArray0);
      assertEquals("(L>-AZlQr{)@}^g(Em4;L;)L;", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantLong constantLong0 = new ConstantLong(0L);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantMethodType0;
      constantArray0[6] = (Constant) constantLong0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[7] = (Constant) constantMethodHandle0;
      constantArray0[8] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodType0.clone();
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.accessToString((int) (byte)59, false);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 15163. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "OV)>Vh/gS9[*}Z4k5";
      try { 
        Utility.typeOfSignature("OV)>Vh/gS9[*}Z4k5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OV)>Vh/gS9[*}Z4k5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Linvokestatic;V");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "invokestatic";
      objectArray0[1] = (Object) "Linvokestatic;V";
      objectArray0[2] = (Object) "Linvokestatic;V";
      objectArray0[3] = (Object) "invokestatic";
      objectArray0[4] = (Object) "Linvokestatic;V";
      objectArray0[5] = (Object) "invokestatic";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.isJavaIdentifierPart('d');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.readFloat();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Linvokestatic;V";
      stringArray0[1] = "Linvokestatic;V";
      stringArray0[2] = "Linvokestatic;V";
      stringArray0[3] = "Linvokestatic;V";
      stringArray0[4] = "Linvokestatic;V";
      stringArray0[5] = "Linvokestatic;V";
      stringArray0[6] = "Linvokestatic;V";
      stringArray0[7] = "Linvokestatic;V";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Linvokestatic;V");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("0e 0e", string0);
      
      String string1 = Utility.signatureToString("Linvokestatic;V", false);
      assertEquals("invokestatic", string1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("boolean", "~%ICEkv@6CjKW", "z1o\tKN?TON<WF&{:E'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("q}9Cl{M+%-$24`LMxge", false);
      assertEquals("q}9Cl{M+%-$24`LMxge", string0);
      
      byte[] byteArray0 = Utility.decode("q}9Cl{M+%-$24`LMxge", false);
      assertEquals(17, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[8];
      ConstantString constantString0 = new ConstantString(42);
      constantArray0[7] = (Constant) constantString0;
      ConstantFloat constantFloat0 = new ConstantFloat((-6131.046F));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(42, 42);
      constantArray0[2] = (Constant) constantNameAndType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 42, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = Utility.signatureToString("BJGCmn3", false);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "multianewarray", "multianewarray", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("EMh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EMh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte)78;
      byteArray1[5] = (byte)78;
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("", "", "", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-84);
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte) (-84);
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte) (-84);
      byteArray1[6] = (byte)48;
      byteArray1[7] = (byte) (-84);
      byteArray1[8] = (byte)48;
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("$ac0$ac00$ac0$ac0", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[0] = (byte)62;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      short short0 = Utility.searchOpcode("istore_1");
      assertEquals((short)60, short0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("newarray\t\t<<illegal type>>", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)91;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "TUY\"w>[O v.^OV],|p";
      stringArray0[1] = "TUY\"w>[O v.^OV],|p";
      Utility.methodTypeToSignature("TUY\"w>[O v.^OV],|p", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Utility.isJavaIdentifierPart('%');
      try { 
        Utility.methodSignatureArgumentTypes(")", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('a');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokeinterface", "invokeinterface", "invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokeinterface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("if_acmpne\t\t#-32345", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.methodSignatureReturnType("Linvokestatic;V");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "invokestatic";
      objectArray0[1] = (Object) "Linvokestatic;V";
      objectArray0[2] = (Object) "Linvokestatic;V";
      objectArray0[3] = (Object) "invokestatic";
      objectArray0[4] = (Object) "Linvokestatic;V";
      objectArray0[5] = (Object) "invokestatic";
      objectArray0[6] = (Object) "Linvokestatic;V";
      objectArray0[7] = (Object) "Linvokestatic;V";
      String string0 = Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-53);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("e`i|");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "mo1itorexRt", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      String string0 = Utility.replace("mo1itorexRt", "e`i|", "");
      assertEquals("mo1itorexRt", string0);
      
      int int0 = Utility.clearBit((-548), 289);
      assertEquals((-548), int0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Linvokestatic;V";
      stringArray0[1] = "Linvokestatic;V";
      stringArray0[2] = "Linvokestatic;V";
      stringArray0[3] = "Linvokestatic;V";
      stringArray0[4] = "Linvokestatic;V";
      stringArray0[5] = "Linvokestatic;V";
      stringArray0[6] = "Linvokestatic;V";
      stringArray0[7] = "Linvokestatic;V";
      Utility.methodTypeToSignature("Linvokestatic;V", stringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString((int) (byte) (-98));
      Utility.setBit((byte)86, (byte)85);
      Utility.format((-27), (byte) (-93), true, 'd');
      try { 
        Utility.decode("Linvokestatic;V", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = ":R";
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString(":R", "Km\"|J3", "~mnE", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String[] stringArray0 = new String[18];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = Utility.replace("@;Ae>gi9N8u~%n%3", "@;Ae>gi9N8u~%n%3", "@;Ae>gi9N8u~%n%3");
      assertEquals("@;Ae>gi9N8u~%n%3", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-104);
      byteArray1[1] = (byte) (-104);
      byteArray1[2] = (byte) (-121);
      byteArray1[3] = (byte) (-121);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string2 = Utility.format(198, (byte) (-104), true, 'd');
      assertEquals("198", string2);
      
      int int0 = Utility.setBit(4369, (byte) (-121));
      assertEquals(4497, int0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-12);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(13);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("lrem", true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ys'xdW;Uq_+ixI-<02o", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ys'xdW;Uq_+ixI-<02o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Utility.replace("@;Ae>gi9N8u~%n%3", "@;Ae>gi9N8u~%n%3", "@;Ae>gi9N8u~%n%3");
      byte byte0 = (byte) (-104);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(70, (byte) (-104));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-104);
      byteArray1[1] = (byte) (-121);
      byteArray1[2] = (byte) (-104);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte) (-18);
      byteArray1[0] = (byte) (-18);
      byteArray1[1] = (byte) (-87);
      boolean boolean0 = true;
      Utility.encode(byteArray1, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("double", "float", "double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      boolean boolean0 = Utility.isSet(0, 1765);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", npairs = ";
      stringArray0[1] = ", npairs = ";
      stringArray0[2] = ", npairs = ";
      stringArray0[3] = ", npairs = ";
      stringArray0[4] = ", npairs = ";
      String string0 = Utility.methodTypeToSignature(", npairs = ", stringArray0);
      assertEquals("(L,;L,;L,;L,;L,;)L,;", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-52);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 174, (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.{:'`r>8)wr", true);
      assertEquals("{:'`r>8)wr", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)95;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 176, 935);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Utility.classOrInterface(100);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte) (-121);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(71, 56);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("R  c_X`5u4S4 =~&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R  c_X`5u4S4 =~&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      try { 
        Utility.decode("L+t8v2(&y", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("ineg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ineg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$b&NzHFq-BO");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[0];
      Utility.toHexString(byteArray1);
      int int0 = Utility.setBit(615, 615);
      assertEquals(743, int0);
      
      int int1 = Utility.clearBit(743, (-32768));
      assertEquals(742, int1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = Utility.replace("iT\"", "iT\"", "NZn<SF[^S(FA");
      assertEquals("NZn<SF[^S(FA", string0);
      
      String string1 = Utility.fillup("8I:*h", 57, true, 'Z');
      assertEquals("8I:*hZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Utility.replace("sH3hW4~)KRhh}g$3Th#", "sH3hW4~)KRhh}g$3Th#", "sH3hW4~)KRhh}g$3Th#");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Utility.classOrInterface(206);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)115;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)20, (int) (byte)82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21363. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)97;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = Utility.convertString("<Q9N<m`#");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "<Q9N<m`#";
      objectArray0[1] = (Object) "<Q9N<m`#";
      objectArray0[2] = (Object) "<Q9N<m`#";
      objectArray0[3] = (Object) "<Q9N<m`#";
      objectArray0[4] = (Object) "<Q9N<m`#";
      objectArray0[5] = (Object) "<Q9N<m`#";
      objectArray0[6] = (Object) "<Q9N<m`#";
      objectArray0[7] = (Object) "<Q9N<m`#";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = Utility.format(0, 0, true, '=');
      assertEquals("0", string0);
      
      boolean boolean0 = Utility.isSet(543, 543);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip(0L);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = "P/1/;gX80W";
      try { 
        Utility.typeOfSignature("P/1/;gX80W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P/1/;gX80W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DoCKn");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Linvokestatic;V";
      stringArray0[1] = "Linvokestatic;V";
      stringArray0[2] = "Linvokestatic;V";
      stringArray0[3] = "Linvokestatic;V";
      stringArray0[4] = "Linvokestatic;V";
      stringArray0[5] = "Linvokestatic;V";
      stringArray0[6] = "Linvokestatic;V";
      stringArray0[7] = "Linvokestatic;V";
      String string0 = Utility.methodTypeToSignature("Linvokestatic;V", stringArray0);
      assertEquals("(LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;)LLinvokestatic;V;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#-32169", string1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Utility.format((-2789), (-2789), false, 'A');
      try { 
        Utility.methodSignatureReturnType("X%.NV7q?>5oN0{S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X%.NV7q?>5oN0{S'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("astore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("(HZ}pzP.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (HZ}pzP.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = (-959);
      Utility.accessToString((-959), false);
      String string0 = "c?N/6(y(^\"]Qcu|>P";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public volatile abstract strictfp synthetic annotation enum", "", "c?N/6(y(^\"]Qcu|>P", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public volatile abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      byteSequence0.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)45;
      byteArray0[1] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      int int0 = new Integer((byte)6);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Utility.convertString("Synthetic attribute with length > 0");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, (-1068));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(31, false);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)70;
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-41);
      Utility.encode(byteArray0, false);
      String string0 = "getfield";
      String string1 = "impdep2";
      int int0 = 1701;
      int int1 = 1649;
      Attribute[] attributeArray0 = new Attribute[1];
      int int2 = 110;
      int int3 = 81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 31, 9);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LzOs|:oh?},IH#W0}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LzOs|:oh?},IH#W0}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iload_1");
      char char0 = '2';
      Utility.isJavaIdentifierPart('2');
      String string0 = "iload";
      Utility.replace("iload", "iload_1", "iload");
      Utility.isSet(111, 111);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q,0eQd}K^AT:=L6c", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q,0eQd}K^AT:=L6c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, false, false);
      Utility.isSet(73, 79);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Linvokestatic;V";
      stringArray0[1] = "Linvokestatic;V";
      stringArray0[2] = "Linvokestatic;V";
      stringArray0[3] = "Linvokestatic;V";
      stringArray0[4] = "Linvokestatic;V";
      stringArray0[5] = "Linvokestatic;V";
      stringArray0[6] = "Linvokestatic;V";
      stringArray0[7] = "Linvokestatic;V";
      String string0 = Utility.methodTypeToSignature("Linvokestatic;V", stringArray0);
      assertEquals("(LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;)LLinvokestatic;V;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#-32169", string1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = Utility.format(75, 67, true, '8');
      assertEquals("7588888888888888888888888888888888888888888888888888888888888888888", string0);
      
      short short0 = Utility.searchOpcode("void");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Utility.typeOfSignature("Linvokestatic;V");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString(7, true);
      Utility.accessToString((int) (byte)62);
      Utility.setBit((-2082), 0);
      try { 
        Utility.typeOfSignature("dstore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t";
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(193, 978);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[0] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Utility.compactClassName("4W");
      try { 
        Utility.typeOfSignature("4W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z#8[sBsIO^");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.isJavaIdentifierPart('t');
      // Undeclared exception!
      Utility.fillup("getfield", 16384, false, '7');
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null}", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-105));
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.accessToString((-781));
      assertEquals("public private final synchronized volatile transient abstract strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.format((-781), (byte)6, true, '*');
      assertEquals("-781**", string2);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-109);
      byteArray0[8] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".?tW>,mFTVN7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .?tW>,mFTVN7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "Kw,Y7FG(O2x#]e.Ea7}";
      try { 
        Utility.typeOfSignature("Kw,Y7FG(O2x#]e.Ea7}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kw,Y7FG(O2x#]e.Ea7}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = "U5p[\\v{sHR?f2G8-_";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U5p[v{sHR?f2G8-_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U5p[v{sHR?f2G8-_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";K'M-wkYSC)cf$P!W/2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;K'M-wkYSC)cf$P!W/2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-728), 27);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[2] = (byte)27;
      byteArray0[2] = (byte)38;
      byteArray0[4] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(60, (byte)92);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Utility.format(0, 0, true, '=');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 599, true, '=');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Utility.isSet(98, 76);
      Utility.convertString("vXXsV&)aP<");
      Utility.classOrInterface((-2321));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vXXsV&)aP<");
      String string0 = "BZeGVL`O}[E)MD,Zr-`";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.methodSignatureReturnType("BZeGVL`O}[E)MD,Zr-`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MD,Zr-`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      try { 
        Utility.typeOfSignature("org.apache.bcel.classfile.utility$javareader");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.utility$javareader
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Utility.methodSignatureReturnType("Linvokestatic;V");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "Linvokestatic;V";
      objectArray0[2] = (Object) "Linvokestatic;V";
      objectArray0[4] = (Object) "Linvokestatic;V";
      objectArray0[5] = (Object) "invokestatic";
      // Undeclared exception!
      try { 
        Utility.signatureToString("X;DSi%b:-bPD|(|X1q", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X;DSi%b:-bPD|(|X1q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte) (-83);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte)66;
      byteArray1[5] = (byte) (-83);
      byteArray1[6] = (byte) (-83);
      byteArray1[7] = (byte) (-83);
      byteArray1[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(",", "FXdm5W'R1opuGR<FT", ",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpeq\t\t#-19695", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-54);
      byteArray0[8] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-21);
      byteArray1[1] = (byte) (-124);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("ifle\t\t#10604", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.searchOpcode("astore_3");
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("Linvokstatic;V", "Linvokstatic;V", "Linvokstatic;V");
      assertEquals("Linvokstatic;V", string0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(719, 719);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray1 = new Constant[2];
      constantArray1[0] = (Constant) constantMethodHandle0;
      constantArray1[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      short short0 = Utility.searchOpcode("iload_2");
      assertEquals((short)28, short0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(354, (-551));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)56;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)44, 2088);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 36164. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[*9get/N#@#3O&[b");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("`a%uSY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``a%uSY'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("K", "K", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-95);
      byteArray0[1] = (byte) (-60);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)100;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-95));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 97, (int) (byte) (-38));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Utility.replace("@;Ae>gi9N8u~%n%3", "@;Ae>gi9N8u~%n%3", "@;Ae>gi9N8u~%n%3");
      try { 
        Utility.typeOfSignature("@;Ae>gi9N8u~%n%3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @;Ae>gi9N8u~%n%3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Utility.getSignature("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Kflt";
      stringArray0[1] = "Kflt";
      stringArray0[2] = "pUF:R++";
      stringArray0[3] = "jsr";
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.skip(1890L);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 150, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)12;
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)86;
      objectArray0[1] = (Object) (byte)12;
      Utility.printArray(objectArray0, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.decode("\"86\", \"12\"", false);
      try { 
        Utility.typeOfSignature("\"86\", \"12\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"86\", \"12\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3yDef>[mSXd}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3yDef>[mSXd}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), 111, true);
      String string1 = Utility.methodSignatureReturnType("L(\";V");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8I:O\"%sS3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8I:O\"%sS3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(1*?\"", "(1*?\"", "(1*?\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1*?\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) (byte)94;
      objectArray0[1] = (Object) (byte)94;
      objectArray0[2] = (Object) (byte)94;
      objectArray0[4] = (Object) (byte)94;
      objectArray0[5] = (Object) (byte)94;
      String string0 = Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "InnerClass(";
      objectArray0[1] = (Object) "InnerClass(";
      objectArray0[2] = (Object) "InnerClass(";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(\"", "(\"", "org.apache.bcel.classfile.Utility");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Utility.convertString("&f}a:L9");
      Utility.searchOpcode("&f}a:L9");
      Utility.accessToString((int) (short) (-1));
      try { 
        Utility.typeOfSignature("&f}a:L9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &f}a:L9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("}37Z^9uNl77HM7Zz_O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `}37Z^9uNl77HM7Zz_O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "iflt";
      stringArray0[1] = "iflt";
      stringArray0[2] = "pUF:R++";
      stringArray0[3] = "jsr";
      String string0 = Utility.methodTypeToSignature("iflt", stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)21;
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)21;
      byteArray1[3] = (byte)21;
      byteArray1[4] = (byte)21;
      byteArray1[5] = (byte)21;
      Utility.equals(byteArray1, byteArray0);
      try { 
        Utility.typeOfMethodSignature("l2f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString(":g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      try { 
        Utility.typeOfSignature("17RHg(sUYj2dLaX7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 17RHg(sUYj2dLaX7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("f2l");
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Utility.format(1343, 1343, true, '~');
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Utility.isJavaIdentifierPart('.');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.methodSignatureReturnType("Linvokestatic;V");
      // Undeclared exception!
      try { 
        Utility.signatureToString("N8GYh", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N8GYh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      Utility.replace("sVxRQ2E3U<(;uddz", "", "cpoa6<$h&NXn`CB!");
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      short short0 = Utility.searchOpcode("l2d");
      assertEquals((short)138, short0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('d');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.accessToString((-4417));
      assertEquals("public private protected static final synchronized transient interface abstract strictfp annotation enum", string0);
      
      int int0 = Utility.setBit(167, (byte) (-96));
      assertEquals(167, int0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = Utility.convertString("\nAttribute(s) = ");
      assertEquals("\\nAttribute(s) = ", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)64;
      String string1 = Utility.getSignature("\nAttribute(s) = ");
      assertEquals("LAttribute(s);", string1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "boolean";
      stringArray0[1] = "iaload";
      stringArray0[2] = "#XX^F%5";
      stringArray0[3] = "6U-ifDM;8 d6(g";
      stringArray0[4] = "boolean";
      stringArray0[5] = "\t\t#";
      stringArray0[6] = "iaload";
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-61);
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean0);
      
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*y851D#r!g.q.i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: y851D#r!g.q.i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Utility.methodSignatureReturnType("L5;mc%Q'mD;s${h");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      MockFile mockFile0 = new MockFile("char");
      File file0 = MockFile.createTempFile("char", "Null", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('O');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Null";
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) "Null";
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) printWriter0;
      objectArray0[5] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) file0;
      objectArray0[8] = (Object) mockPrintWriter0;
      Utility.printArray(printWriter0, objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Utility.methodSignatureReturnType("Linvokestatic;V");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "invokestatic";
      objectArray0[1] = (Object) "Linvokestatic;V";
      objectArray0[2] = (Object) "Linvokestatic;V";
      objectArray0[3] = (Object) "invokestatic";
      objectArray0[4] = (Object) "Linvokestatic;V";
      objectArray0[5] = (Object) "invokestatic";
      objectArray0[6] = (Object) "Linvokestatic;V";
      objectArray0[7] = (Object) "invokestatic";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)52;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)102;
      byteArray0[7] = (byte)54;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = Utility.accessToString((int) '=');
      assertEquals("public protected static final synchronized", string0);
      
      String string1 = Utility.fillup("7ah)2XV<NW?OA~<Mz2", (-1570), false, '\\');
      assertEquals("7ah)2XV<NW?OA~<Mz2", string1);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = ":=TDdm!1Q0>_";
      try { 
        Utility.typeOfSignature(":=TDdm!1Q0>_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :=TDdm!1Q0>_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = "sH3hW4~)KRhh}g$3Th#";
      Utility.replace("sH3hW4~)KRhh}g$3Th#", "sH3hW4~)KRhh}g$3Th#", "sH3hW4~)KRhh}g$3Th#");
      Utility.getSignature("sH3hW4~)KRhh}g$3Th#");
      Utility.clearBit(5, 65);
      String string1 = "Iy_nV0k!iO";
      try { 
        Utility.decode("Iy_nV0k!iO", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.convertString("\t");
      assertEquals("\t", string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("+#EORrS)K", ",lY15:L|sO6VQ5bI", ",lY15:L|sO6VQ5bI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +#EORrS)K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = "oJjz";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("oJjz", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `oJjz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K]D", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K]D'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(176, 3397);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("monitorexit", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantPool0.dump(dataOutputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 56, 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Linvokestatic;V");
      assertEquals("invokestatic", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "invokestatic";
      objectArray0[1] = (Object) "Linvokestatic;V";
      objectArray0[2] = (Object) "Linvokestatic;V";
      objectArray0[3] = (Object) "invokestatic";
      objectArray0[4] = (Object) "Linvokestatic;V";
      objectArray0[5] = (Object) "invokestatic";
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.readFloat();
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("invokestatic");
      assertEquals((short)184, short0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t";
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t";
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(193, 978);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip((byte)54);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("-Ni}` Z\"_4_G804ITG/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -Ni}` Z\"_4_G804ITG/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Utility.methodSignatureReturnType("Linvokestatic;V");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "invokestatic";
      objectArray0[1] = (Object) "Linvokestatic;V";
      objectArray0[2] = (Object) "Linvokestatic;V";
      objectArray0[3] = (Object) "invokestatic";
      objectArray0[4] = (Object) "Linvokestatic;V";
      objectArray0[5] = (Object) "invokestatic";
      objectArray0[6] = (Object) "Linvokestatic;V";
      objectArray0[7] = (Object) "invokestatic";
      Utility.printArray(objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)52;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)102;
      byteArray0[7] = (byte)54;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 81, (int) (byte)52, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = "+yt2";
      try { 
        Utility.typeOfSignature("+yt2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: yt2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-124);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-124);
      byteSequence0.skipBytes((byte) (-124));
      objectArray0[1] = (Object) (byte) (-124);
      objectArray0[2] = (Object) (byte) (-32);
      Utility.printArray(objectArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Jorh!fkUb", false);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = Utility.signatureToString("T{`X>8)wr;+");
      assertEquals("{`X>8)wr", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("i7O", stringArray0);
      assertEquals("()Li7O;", string1);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = Utility.compactClassName("G", true);
      assertEquals("G", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-23);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("9f e9", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Utility.methodTypeToSignature("", stringArray0);
      String string0 = "E\\uH_= ]z>\\`\"r{AdS";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", string0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Utility.isJavaIdentifierPart('.');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">irGx6Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >irGx6Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.accessToString(794, true);
      assertEquals("private static final native", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0/yl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0/yl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("ishr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ishr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SAME_LOCALS_1_STACK_EXT-NDED");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-29);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-123);
      Utility.toHexString(byteArray0);
      Utility.isSet((byte) (-29), (byte)0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)18;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte) (-123);
      objectArray0[3] = (Object) (byte)92;
      Object object0 = new Object();
      Utility.isSet((byte)18, (-2103));
      try { 
        Utility.methodSignatureReturnType("12 00 2a e3 c1 00 5c 00 85");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `12 00 2a e3 c1 00 5c 00 85'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Utility.methodSignatureReturnType("Linvokestatic;V");
      Utility.methodSignatureReturnType("I3", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1145, (int) (byte) (-7), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TXgU4r/Q";
      stringArray0[1] = "lload_3";
      stringArray0[2] = "lload_3";
      String string0 = Utility.methodTypeToSignature("#XX^F%5", stringArray0);
      assertEquals("(LTXgU4r/Q;Llload_3;Llload_3;)L#XX^F%5;", string0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(LTXgU4r/Q;Llload_3;Llload_3;)L#XX^F%5;", true);
      assertEquals(3, stringArray1.length);
      
      String string1 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{TXgU4r/Q, lload_3, lload_3}", string1);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[4] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.convertString("0Qnli");
      String string0 = "M ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("M ", "M ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // M 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmplt\t\t#-3", string0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Utility.typeOfSignature("Z");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)4;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 65;
      // Undeclared exception!
      try { 
        constantPool0.getConstant(195);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Utility.isSet(40, 40);
      // Undeclared exception!
      try { 
        Utility.signatureToString("impdep2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `impdep2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t";
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(193, 978);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      constantArray0[5] = (Constant) constantMethodHandle0;
      constantArray0[6] = (Constant) constantMethodHandle0;
      constantArray0[7] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.signatureToString("StackMapTable", false);
      String string0 = Utility.getSignature(" Vz");
      assertEquals("LVz;", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('!');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HI51jV^3r>Rf0^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HI51jV^3r>Rf0^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte)3;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String string0 = Utility.compactClassName("goto_w");
      assertEquals("goto_w", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('~');
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("WN*Ig9Rop6Te");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-92);
      byteArray0[8] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = "C\"-oCpa";
      try { 
        Utility.typeOfSignature("WU?MNu2gfwl.{)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WU?MNu2gfwl.{)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Utility.convertString("RuntimeInvisibleParameterAnnotations");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, (-1724), (-1724));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.accessToString((int) (byte) (-100));
      assertEquals("protected static final transient native interface abstract strictfp synthetic annotation enum", string0);
      
      int int0 = Utility.setBit(167, (-433));
      assertEquals(32935, int0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2+6r>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2+6r>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Q@jJL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q@jJL'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.typeOfMethodSignature("D7u&}f8MXsRU>u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D7u&}f8MXsRU>u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = Utility.fillup("c@{n W", (-7), true, '9');
      assertEquals("c@{n W", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = Utility.typeOfSignature("Synthetic attribute with length > 0");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)62;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("41 95 3e", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "5T6:isNndD9&VY,";
      String string1 = Utility.methodTypeToSignature("5T6:isNndD9&VY,", stringArray0);
      assertEquals("(L5T6:isNndD9&VY,;)L5T6:isNndD9&VY,;", string1);
      
      String string2 = Utility.accessToString(0);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = Utility.format(0, 0, true, '=');
      assertEquals("0", string0);
      
      String string1 = Utility.fillup("drem", 0, true, '=');
      assertEquals("drem", string1);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E<~mk:^6`OQ#[}gKw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E<~mk:^6`OQ#[}gKw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "invokestatic";
      stringArray0[1] = "invokestatic";
      stringArray0[2] = "invokestatic";
      stringArray0[3] = "NvR/!zqTw]xnXy.I";
      stringArray0[4] = "?>...";
      stringArray0[5] = "invokestatic";
      stringArray0[6] = "byte";
      stringArray0[7] = "invokestatic";
      String string0 = Utility.methodTypeToSignature("invokestatic", stringArray0);
      assertEquals("(Linvokestatic;Linvokestatic;Linvokestatic;LNvR/!zqTw]xnXy/I;L?>///;Linvokestatic;BLinvokestatic;)Linvokestatic;", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.signatureToString("Invalid byte tag in constant pool: ", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-73));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat(byteSequence0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L\"F", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L\"F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)104;
      byteArray0[8] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.readFloat();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("i2l");
      assertEquals((short)133, short0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$85YKK$a0HHh$c3", string0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      short short0 = Utility.searchOpcode(", end_pc = ");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "E) ~@S~xP8LO";
      stringArray0[2] = "E) ~@S~xP8LO";
      stringArray0[3] = "E) ~@S~xP8LO";
      stringArray0[4] = "]xp,lO\\rDRh=q6`|C";
      stringArray0[5] = ", end_pc = ";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = Utility.methodTypeToSignature("E) ~@S~xP8LO", stringArray0);
      assertEquals("(L;LE);LE);LE);L]xp,lO\\rDRh=q6`|C;L,;L;L;)LE);", string0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)22;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$MZ$t$8f$w$wW$R$W", string0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)51;
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte)91;
      byteArray1[4] = (byte)91;
      byteArray1[5] = (byte)91;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Utility.convertString("\nAttribute(s) = ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-70);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = Utility.classOrInterface(74);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)105;
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.signatureToString("M@`C+>366", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M@`C+>366'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Utility.accessToString((-5171), true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("iload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifeq\t\t#15975", string0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong((-1987L));
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodType0.clone();
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-90));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)57);
      byteSequence0.reset();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-551), 103);
      Constant[] constantArray0 = new Constant[1];
      constantMethodHandle0.toString();
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore\t\t%79", string0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Utility.isSet(0, 241);
      Utility.searchOpcode("org.apache.bcel.classfile.Utility$JavaReader");
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Utility$JavaReader", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$JavaReader
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.accessToString((-257));
      assertEquals("public private protected static final synchronized volatile transient interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1382), (-654));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte) (-80);
      byteArray1[4] = (byte)54;
      byteArray1[5] = (byte)54;
      byteArray1[6] = (byte) (-80);
      byteArray1[7] = (byte)54;
      byteArray1[8] = (byte)54;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("areturn", string0);
      
      byte byte0 = Utility.typeOfSignature("BootstrapMethods(");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      boolean boolean0 = true;
      String string0 = ";jiFa'H";
      Utility.convertString(";jiFa'H");
      String string1 = "Exceptions";
      String string2 = "float";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Exceptions", "float");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // float
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.typeOfSignature("F;y");
      Utility.searchOpcode("invokevirtual");
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[3];
      ClassPath classPath0 = new ClassPath("{S(");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassPath classPath1 = new ClassPath(classPath0, "Hor#/@");
      try { 
        classPath1.getInputStream("F;y");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't find: F;y.class
         //
         verifyException("org.apache.bcel.util.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Y0[}&f3>5f1b7]_f_X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y0[}&f3>5f1b7]_f_X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)27);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@5493525f, java.lang.Object@117beffe, java.lang.Object@5816130c", false);
      try { 
        Utility.typeOfMethodSignature("ifnonnull\t\t#-5550");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull\t\t#-5550
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte) (-98);
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte) (-93);
      byteArray1[4] = (byte) (-64);
      byteArray1[5] = (byte) (-98);
      byteArray1[6] = (byte) (-64);
      byteArray1[7] = (byte) (-64);
      byteArray1[8] = (byte)76;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("astore_1", string0);
      
      short short0 = Utility.searchOpcode("XXhgmpy6sb]>f&'P");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.accessToString((int) (short) (-1));
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.replace("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", "Invalid method signature: ");
      assertEquals("Invalid method signature: ", string2);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String string0 = Utility.compactClassName("4W");
      assertEquals("4W", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sastore", string1);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Linvokestatic;V";
      stringArray0[1] = "Linvokestatic;V";
      stringArray0[2] = "Linvokestatic;V";
      stringArray0[3] = "Linvokestatic;V";
      stringArray0[4] = "Linvokestatic;V";
      stringArray0[5] = "Linvokestatic;V";
      stringArray0[6] = "Linvokestatic;V";
      stringArray0[7] = "Linvokestatic;V";
      String string0 = Utility.methodTypeToSignature("Linvokestatic;V", stringArray0);
      assertEquals("(LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;LLinvokestatic;V;)LLinvokestatic;V;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sastore", string1);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('.');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O?H`'bYx\t.Rpbmsh.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O?H`'bYx\t.Rpbmsh.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("N['Z~FSg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N['Z~FSg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = "sH3hW4~)KRhh}g$3Th#";
      Utility.replace("sH3hW4~)KRhh}g$3Th#", "sH3hW4~)KRhh}g$3Th#", "sH3hW4~)KRhh}g$3Th#");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.getSignature("sH3hW4~)KRhh}g$3Th#");
      // Undeclared exception!
      try { 
        Utility.decode("sH3hW4~)KRhh}g$3Th#", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3T\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)20;
      try { 
        Utility.methodSignatureArgumentTypes("(start_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `start_pc = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("TXnXrRa)wr1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TXnXrRa)wr1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)38;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_0", string0);
      
      String string1 = Utility.classOrInterface(166);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-55));
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)87;
      ByteSequence byteSequence6 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      assertEquals("wide\t(wide)", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('E');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", ");
      byteArray0[1] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.read();
      byteSequence1.close();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-124);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)107, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-73);
      byteArray1[1] = (byte) (-99);
      byteArray1[2] = (byte) (-73);
      byteArray1[3] = (byte) (-73);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte) (-54);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("59 45 45 00 cd ee 68 ca");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 59 45 45 00 cd ee 68 ca
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = Utility.format(0, 0, true, '=');
      assertEquals("0", string0);
      
      String string1 = Utility.getSignature("drem");
      assertEquals("Ldrem;", string1);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "iflt";
      stringArray0[1] = "iflt";
      stringArray0[2] = "pUF:R++";
      stringArray0[3] = "jsr";
      String string0 = Utility.methodTypeToSignature("iflt", stringArray0);
      assertEquals("(Liflt;Liflt;LpUF:R++;Ljsr;)Liflt;", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_1", string1);
      
      String string2 = Utility.compactClassName("iflt", false);
      assertEquals("iflt", string2);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("N['Z~FSg");
      Utility.typeOfSignature("IR;");
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 2161, 2161);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Utility.isSet((-2233), 53);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-728), (-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      Utility.searchOpcode("double");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(354, 196, byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("CUYGFn>: ;", "lload_0", ", low = ", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CUYGFn>: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      String string0 = "[]";
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("class");
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{class, class, class, class}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("DJ=6+luv^q");
      assertEquals("double", string0);
      
      boolean boolean0 = Utility.isSet(679, 75);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Utility.typeOfSignature("Linvokestatic;V");
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2678, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String string0 = Utility.convertString(">\t");
      assertEquals(">\t", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) ">\t";
      objectArray0[2] = (Object) ">\t";
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{null, >\t, >\t}", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2f", string2);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Utility.convertString("\nAttribute(s) = ");
      String string0 = "(string_index = ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "(string_index = ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // (string_index = 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 56, 56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)38;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)60;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "G";
      objectArray0[4] = (Object) (byte)38;
      objectArray0[5] = (Object) null;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) (byte)127;
      objectArray0[8] = (Object) (byte)60;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!(Tkc)CT17UIJ_I.`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Tkc)CT17UIJ_I.`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("Z", true);
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)75;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("land", "land", false);
      assertTrue(string1.equals((Object)string0));
  }
}
