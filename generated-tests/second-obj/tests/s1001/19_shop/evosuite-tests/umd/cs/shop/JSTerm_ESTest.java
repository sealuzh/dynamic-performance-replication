/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:54:00 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&%6L$)|AGJB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[13];
      charArray0[0] = '(';
      charArray0[1] = 'J';
      charArray0[12] = 'J';
      jSTerm0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEval();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-47\"SN{}.)?Du@@T:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-659), (-4));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSJshopVars.percent = (-3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[12];
      charArray0[1] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '5';
      charArray0[2] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.apostrophe = (-2344);
      jSTerm0.isConstant();
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'L';
      charArray0[2] = '2';
      charArray0[3] = 'H';
      charArray0[4] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '(';
      charArray0[3] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6kkD#R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = null;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[6] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(charArrayReader0);
      streamTokenizer1.ordinaryChar((-2));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSSubstitution1, jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      char[] charArray1 = new char[9];
      charArray1[0] = '5';
      charArray1[1] = 'z';
      charArray1[2] = 'f';
      charArray1[3] = 'H';
      charArray1[4] = '5';
      charArray1[5] = '5';
      charArray1[6] = 'H';
      charArray1[7] = 'W';
      charArray1[8] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      charArrayReader0.mark(43);
      streamTokenizer0.ordinaryChar(58);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) charArray0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '(';
      charArray0[3] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[8];
      charArray0[4] = '\u0000';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*J}W0[_u$<<t_>B");
      charArray0[5] = 'B';
      charArray0[6] = '\u0000';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[13];
      charArray0[0] = '(';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "] ");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeConstant();
      jSTerm0.equals(jSTerm1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?-47\"SN{}.)?Du@@T:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.greaterT = (-659);
      jSTerm0.print();
      boolean boolean0 = jSTerm0.isVariable();
      assertTrue(boolean0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals("[?%%%]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'F';
      charArray0[4] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(lineNumberReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(lineNumberReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      jSTerm0.isConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.slash = 4082;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("?-47\"SN{}.)?Du@@T:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.wordChars((-663), (-4));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars((-4), (-1198));
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSJshopVars.equalT = 124;
      streamTokenizer0.pushBack();
      Object[] objectArray0 = new Object[7];
      JSJshopVars.backquote = (-4);
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = (Object) stringReader0;
      jSTerm0.toArray(objectArray0);
      jSTerm1.iterator();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm2.isConstant());
      
      jSTerm0.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertFalse(jSTerm2.isEval());
      assertEquals("[?-.]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSSubstitution1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.removeElement(object0);
      jSTerm0.add((Object) "[,,7r*Y|A.L");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.toStr();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      assertEquals(1, streamTokenizer0.lineno());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSJshopVars.percent = (-3);
      char[] charArray0 = new char[12];
      charArray0[1] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[13];
      charArray0[0] = '(';
      jSTerm0.makeVariable();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '-';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '(';
      charArray0[7] = '(';
      charArray0[8] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      jSTerm0.makeVariable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      charArrayReader0.mark((-1));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSTerm0.iterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) ".");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".");
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.setSize(5379);
      charArrayReader0.reset();
      jSTerm0.makeFunction();
      System.setCurrentTimeMillis(5379);
      jSTerm0.isFunction();
      jSTerm0.makeVariable();
      jSTerm0.call();
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSTerm0.add((Object) "dd");
      Object object1 = new Object();
      jSTerm0.add(object1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSJshopVars.astherisk = (-3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.verticalL = (-124314882);
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.print();
      assertTrue(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2856);
      int int0 = (-2);
      JSJshopVars.astherisk = (-2);
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[0] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(charArrayReader0);
      jSTerm0.parseList(streamTokenizer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(charArrayReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "[,,7r*|AL");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("[,,7r*|AL");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "[,,7r*|AL");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      int int0 = (-1825);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm1);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      String string0 = "dd";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dd");
      jSTerm0.add((Object) "dd");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dd");
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "[,,7r*|gAL");
      jSTerm0.print();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      jSTerm0.spliterator();
      jSTerm0.iterator();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm3 = jSTerm0.call();
      JSJshopVars.leftBrac = (-1611522471);
      JSJshopVars.rightBrac = (-1611522471);
      JSJshopVars.rightBrac = 10;
      jSTerm0.isGround();
      jSTerm3.print();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm4 = new JSTerm();
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "[,,7r*|AL");
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "[,,7r*Y|A.L");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSTerm0.toStr();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "[,,7r*|gAL";
      jSTerm0.add((Object) "[,,7r*|gAL");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[,,7r*|gAL");
      jSTerm0.add((Object) "[,,7r*|gAL");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "/,,7r*|AL");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.equals((JSPredicateForm) jSTerm2);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm1.isEval();
      jSTerm3.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm2, jSSubstitution1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      jSSubstitution2.add((Object) mockFileInputStream0);
      jSTerm3.matches(jSTerm1, jSSubstitution2);
      jSTerm3.makeEval(true);
      assertTrue(jSTerm3.isEval());
      
      jSTerm0.isEval();
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSTerm0.add((Object) "[,,7r*|AL");
      Object object0 = new Object();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSTerm0.add((Object) "[,,7r*|AL");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.print();
      JSTerm jSTerm2 = new JSTerm();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StringReader stringReader0 = new StringReader("[,,7r*|AL");
      jSTerm0.spliterator();
      jSTerm2.iterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSTerm jSTerm4 = jSTerm1.call();
      JSJshopVars.leftBrac = (-1611522464);
      JSJshopVars.rightBrac = 37;
      jSTerm1.isGround();
      jSTerm4.print();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm0.makeEval(true);
      char[] charArray0 = new char[1];
      jSTerm0.print();
      charArray0[0] = 'Z';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 37, 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.skip((-3739L));
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      charArrayReader1.mark(2951);
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(charArrayReader1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      charArrayReader0.mark(1287);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '>';
      charArray0[2] = '(';
      charArray0[4] = '\u0000';
      charArray0[5] = '>';
      charArray0[6] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSJshopVars.percent = (-3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gRt");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[6] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      System.setCurrentTimeMillis((-3));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '(';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[3] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = new char[2];
      charArrayReader0.skip((-3739L));
      charArray1[0] = '(';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) charArray1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSTerm0.add((Object) "[,,7r*|AL");
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-88);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)62;
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = '<';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader1);
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      charArrayReader3.mark((byte)0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(charArrayReader3);
      CharArrayReader charArrayReader4 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
