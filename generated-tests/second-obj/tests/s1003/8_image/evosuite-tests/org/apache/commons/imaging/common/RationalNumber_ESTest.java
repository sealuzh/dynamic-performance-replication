/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:38:09 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.8146488855563803E-5);
      String string0 = rationalNumber0.toString();
      assertEquals(1.8146514961801586E-5, rationalNumber0.doubleValue(), 0.01);
      assertEquals("1/55107 (0)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toString();
      assertEquals("0", string0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("0", string1);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1L));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-1", string0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.20000000000004547);
      assertEquals(0.2, rationalNumber0.doubleValue(), 0.01);
      assertEquals(5, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836458690467E9);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2147483646", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(2.147483646E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2147483646L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(2.445868276481633E-4);
      assertEquals(2, rationalNumber1.numerator);
      assertEquals(2.4458847E-4F, rationalNumber1.floatValue(), 0.01F);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(2147483647L, long0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(2.14748365E9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.964426876133075E-4);
      String string0 = rationalNumber0.toString();
      assertEquals("3/10120 (0)", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(2.9644268E-4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber.factoryMethod(1L, 0L);
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2790.2);
      assertEquals(5, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(4L, 0L);
      rationalNumber0.toString();
      // Undeclared exception!
      try { 
        rationalNumber0.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(919L);
      String string0 = rationalNumber0.toString();
      assertEquals("919", string0);
      assertEquals(919.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483648434019E9));
      RationalNumber rationalNumber1 = new RationalNumber((-2147483647), (-2147483647));
      String string0 = rationalNumber0.toString();
      assertEquals("-2,147,483,647", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(2135748758, 2135748758);
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      
      rationalNumber0.intValue();
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(801.010406345);
      assertEquals(801L, rationalNumber1.longValue());
      assertEquals(76897, rationalNumber1.numerator);
      assertEquals(801, rationalNumber1.intValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483675L), (-2147483675L));
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-4121L), (-2147483675L));
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.9194558E-6F, float0, 0.01F);
      assertEquals(357913946, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(0L, (-1616L));
      RationalNumber rationalNumber1 = new RationalNumber(1, 1);
      assertEquals(1L, rationalNumber1.longValue());
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1, 2147483653L);
      assertEquals((-4.656613E-10F), rationalNumber2.floatValue(), 0.01F);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-3390L), 7L);
      rationalNumber0.floatValue();
      rationalNumber0.longValue();
      String string0 = rationalNumber0.toString();
      String string1 = rationalNumber3.toString();
      assertEquals("-3390/7 (-484.286)", string1);
      
      String string2 = rationalNumber0.toDisplayString();
      assertTrue(string2.equals((Object)string0));
      
      String string3 = rationalNumber3.toDisplayString();
      assertEquals((-484.2857F), rationalNumber3.floatValue(), 0.01F);
      assertEquals("-484.286", string3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483675L), (-1L));
      double double0 = rationalNumber0.doubleValue();
      assertEquals((-2.147483621E9), double0, 0.01);
      assertEquals((-2147483621), rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-72));
      rationalNumber0.toString();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(0L, (-1616L));
      RationalNumber rationalNumber2 = RationalNumber.valueOf(0L);
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-72), 0);
      RationalNumber.valueOf(0);
      RationalNumber.factoryMethod(2601L, 2601L);
      rationalNumber3.negate();
      rationalNumber1.floatValue();
      rationalNumber2.doubleValue();
      rationalNumber3.toString();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483664L), 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483664, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2591L, (-1L));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-3390L), 2147483653L);
      String string0 = rationalNumber0.toString();
      assertEquals("-2,591", string0);
      assertEquals(1, rationalNumber0.divisor);
      
      String string1 = rationalNumber1.toString();
      assertEquals("565/-357913942 (-0)", string1);
  }
}
