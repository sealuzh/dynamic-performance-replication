/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:24:25 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "opp{^4F$vLbcI`?I");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(61L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfMethodSignature("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "/xcagnzDMWUDIR7Y\"";
      String string1 = ", high = ";
      try { 
        Utility.typeOfMethodSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.isSet(0, 3955);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = Utility.isSet(39, 86);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface((-2599));
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NuZ9ujXJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NuZ9ujXJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "Q,wgV6s9";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q,wgV6s9", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q,wgV6s9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.setBit(102, 102);
      Utility.clearBit(102, 670);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Wlv!b", "`z]=-qu", "5;q3\"1PD P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wlv!b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("#P&", "#P&", ", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #P&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('x');
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("~");
      assertEquals("L~;", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "%[| (6t7[HL";
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("%[| (6t7[HL", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[| (6t7[HL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = (-1500);
      boolean boolean0 = false;
      Utility.accessToString((-1500), false);
      String string0 = "))g?syCY)/c94a";
      try { 
        Utility.methodSignatureReturnType("))g?syCY)/c94a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/c94a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.accessToString(991, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "public private protected static final volatile transient native interface";
      stringArray0[1] = "Invalid StackMap frame_type: ";
      stringArray0[2] = "public private protected static final volatile transient native interface";
      stringArray0[3] = "public private protected static final volatile transient native interface";
      stringArray0[4] = "public private protected static final volatile transient native interface";
      Utility.methodTypeToSignature("public private protected static final volatile transient native interface", stringArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public private protected static final volatile transient native interface", "public private protected static final volatile transient native interface", "(Lpublic;LInvalid;Lpublic;Lpublic;Lpublic;)Lpublic;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected static final volatile transient native interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      String string0 = Utility.getSignature(" PK8]`f_G");
      assertEquals("LPK8]`f_G;", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.typeOfSignature("V}>9+<>qC/u5=dk");
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.signatureToString("V}>9+<>qC/u5=dk");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "void";
      stringArray0[1] = "V}>9+<>qC/u5=dk";
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short short0 = Utility.searchOpcode("fdiv");
      assertEquals((short)110, short0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "";
      Utility.searchOpcode("");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      int int0 = (-2103);
      char char0 = '`';
      Utility.fillup("", (-2103), true, '`');
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.replace("eArw~D&N`!_rO!BQYR", "pP1n*60(1H#O;", "j");
      Utility.convertString("P/1F+o%B0UyXW96=p<");
      Utility.compactClassName("j");
      boolean boolean0 = false;
      Utility.format(171, 3018, false, 'f');
      try { 
        Utility.methodSignatureArgumentTypes("P/1F+o%B0UyXW96=p<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P/1F+o%B0UyXW96=p<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V}>9+<>qC/u5=dk");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.compactClassName("V}>9+<>qC/u5=dk");
      assertEquals("V}>9+<>qC.u5=dk", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("0c", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-102);
      byteArray0[0] = (byte) (-102);
      byte byte1 = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("9a a3", true);
      int int0 = 0;
      Utility.setBit(0, (byte) (-93));
      try { 
        Utility.methodSignatureArgumentTypes("9a a3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9a a3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.isJavaIdentifierPart('3');
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-29);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfMethodSignature("f5 00 3c 28 67 5b 00 e3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f5 00 3c 28 67 5b 00 e3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      String string0 = "[R$mTkhM`;";
      try { 
        Utility.methodSignatureArgumentTypes("[R$mTkhM`;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [R$mTkhM`;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.replace("03oVo|xGLsn<v", "03oVo|xGLsn<v", "03oVo|xGLsn<v");
      try { 
        Utility.methodSignatureArgumentTypes("03oVo|xGLsn<v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 03oVo|xGLsn<v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("", false);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.decode("$e", false);
      try { 
        Utility.methodSignatureReturnType(">\t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte) (-109);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte) (-109);
      byteArray1[2] = (byte) (-53);
      byteArray1[3] = (byte) (-53);
      byteArray1[4] = (byte) (-53);
      byteArray1[5] = (byte) (-109);
      byteArray1[6] = (byte) (-50);
      byteArray1[7] = (byte) (-53);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)64, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "-m%dIR*(J@";
      Utility.convertString("-m%dIR*(J@");
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true, true);
      Utility.accessToString((-1941));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)65;
      byte byte0 = (byte)17;
      byteArray0[2] = (byte)17;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.compactClassName("java.lang.$%Ghnvr", true);
      try { 
        Utility.typeOfSignature("$%Ghnvr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $%Ghnvr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 11;
      Utility.clearBit((-1839), 11);
      String string0 = "\\n";
      Utility.fillup("\n", 11, true, 'q');
      Utility.getSignature("\nqqqqqqqqq");
      Utility.accessToString((-1839), true);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Utility.accessToString(13, true);
      assertEquals("public protected static", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Utility.convertString("-m%dIR*(J@");
      String string1 = Utility.replace("[a@-NB", "$Y[y3ETPPmQ0", "}(C1!");
      assertEquals("[a@-NB", string1);
      
      String string2 = Utility.compactClassName("-m%dIR*(J@", false);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = Utility.compactClassName("Invalid Stack map table tag: ");
      assertEquals("Invalid Stack map table tag: ", string3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)99;
      byteArray0[0] = (byte) (-79);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-53);
      byteArray0[8] = (byte)64;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), (int) (byte) (-35));
      assertEquals("0:    return\n1:    dadd\n2:    nop\n3:    ixor\n4:    <illegal opcode>\n5:    nop\n6:    nop\n7:    nop\n8:    lstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 189, false);
      String string1 = Utility.compactClassName("0:    nop\n", "0:    nop\n", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-89);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean0 = Utility.isSet((-490), 155);
      assertTrue(boolean0);
      
      String string1 = Utility.classOrInterface(75);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!?ONuZ9ujXJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?ONuZ9ujXJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)59;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureArgumentTypes("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Pattern.quote("<illegal opcode>");
      int int0 = Utility.clearBit((-1817), 253);
      assertEquals((-536872729), int0);
      
      String string0 = Utility.convertString("Q<illegal opcode>E");
      assertEquals("Q<illegal opcode>E", string0);
      
      int int1 = Utility.setBit(573, (-1817));
      assertEquals(701, int1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-26);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("if_icmplt", "breakpoint", false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "if_icmplt";
      Utility.printArray(objectArray0, false, false);
      Utility.convertString("The array of suffixes must not be null");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("if_icmple", stringArray0);
      Utility.classOrInterface((byte) (-26));
      try { 
        Utility.methodSignatureReturnType("The array of suffixes must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.format(572, 93, false, 'M');
      Utility.replace("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM572", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM572", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM572");
      Utility.clearBit(1817, 864);
      Utility.setBit(864, 1816);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('M');
      // Undeclared exception!
      try { 
        Utility.signatureToString(">ktQJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>ktQJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[7] = (byte)103;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte) (-86);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$e6$A$deC$ae$3b$3a$e8$aa", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "Zj;~R]k";
      Utility.getSignature("Zj;~R]k");
      Utility.signatureToString("LZj;~R]k;");
      Utility.convertString("");
      int int0 = (-583);
      boolean boolean0 = false;
      Utility.fillup("", (-583), false, '8');
      // Undeclared exception!
      Utility.replace("", "", "Zj");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LATQfjjA48UCDeRFdA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LATQfjjA48UCDeRFdA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("L^o&L?<`n;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L^o&L?<`n;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(n%JWbArUqo4f<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `n%JWbArUqo4f<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(n%JWbArUqo4f<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `n%JWbArUqo4f<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.methodSignatureReturnType("VJ~T7N,3", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("VJ~T7N,3", "VJ~T7N,3", "VJ~T7N,3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VJ~T7N,3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(,", "Q,wgV6s9", "fload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(", high = ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.GERMANY;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " arg", (Object[]) null);
      Utility.printArray(printWriter0, (Object[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)52;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$3b4", string0);
      
      boolean boolean0 = Utility.isSet(3558, 3558);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-54);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$dcg$a43$ca", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "Wa?FOMk4Q";
      String string1 = "$%Ghnvr";
      boolean boolean0 = true;
      Utility.compactClassName("$%Ghnvr", true);
      try { 
        Utility.typeOfSignature("$%Ghnvr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $%Ghnvr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      int int0 = 2606;
      Utility.classOrInterface((byte) (-83));
      Utility.accessToString(39, true);
      Utility.getSignature("+");
      byte byte0 = (byte)18;
      Utility.setBit((byte) (-83), 52);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "public private protected";
      objectArray0[1] = (Object) "interface";
      objectArray0[2] = (Object) "public private protected";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "public private protected";
      objectArray0[5] = (Object) "interface";
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      String string1 = "fload_[";
      String string2 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte byte0 = (byte) (-79);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-53);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-53), (int) (byte)99);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("7R$L`8-{o[yQ", "7R$L`8-{o[yQ", "0:    dadd\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    return\n5:    dadd\n6:    l2d\n7:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7R$L`8-{o[yQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)99;
      byteArray0[0] = (byte) (-79);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-53);
      byteArray0[8] = (byte)64;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) byteArray0;
      objectArray0[5] = (Object) byteArray0;
      objectArray0[6] = (Object) byteArray0;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("{[B@10a247b6, [B@10a247b6, [B@10a247b6, [B@10a247b6, [B@10a247b6, [B@10a247b6, [B@10a247b6}", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[B@10a247b6, [B@10a247b6, [B@10a247b6, [B@10a247b6, [B@10a247b6, [B@10a247b6, [B@10a247b6}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.convertString("Float");
      Utility.convertString("Float");
      try { 
        Utility.typeOfSignature(".y6L\"<Y.'*MYC;#{2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .y6L\"<Y.'*MYC;#{2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachable default case reached!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "Q,wgV6s9";
      Utility.isSet(2994, 2994);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      Utility.fillup("[%1z-'$i!64(`8.th`", 383, true, ' ');
      try { 
        Utility.decode("[%1z-'$i!64(`8.th`                                                                                                                                                                                                                                                                                                                                                                             ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = Utility.replace("Float", "Float", "Float");
      assertEquals("Float", string0);
      
      Utility.decode("n<'~0um:Z*AfA", false);
      byte byte0 = Utility.typeOfSignature("BoQ#tyRLi_");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.convertString("(n%JWbArUqo4f<");
      try { 
        Utility.typeOfSignature("(n%JWbArUqo4f<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (n%JWbArUqo4f<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      String string0 = "java.lang.Short";
      String string1 = "\"ilk8{g(|vJG|5:5A";
      Utility.replace("java.lang.Short", "java.lang.Short", "\"ilk8{g(|vJG|5:5A");
      String string2 = "[yjs!^$S";
      try { 
        Utility.decode("[yjs!^$S", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.convertString("Float");
      boolean boolean0 = false;
      Utility.convertString("Float");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.isSet(0, 3955);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      Utility.toHexString(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), 13);
      try { 
        Utility.typeOfSignature(", signature_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , signature_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "03oVo|xGLsn<v";
      Utility.replace("03oVo|xGLsn<v", "03oVo|xGLsn<v", "03oVo|xGLsn<v");
      String string1 = "wz$WgQh4Qj";
      Utility.getSignature("wz$WgQh4Qj");
      int int0 = 61;
      Utility.setBit((-174), 61);
      try { 
        Utility.typeOfSignature("03oVo|xGLsn<v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 03oVo|xGLsn<v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.isSet(0, 3955);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("97 00 00 00 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 97 00 00 00 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "filename\t\t";
      stringArray0[1] = "filename\t\t";
      stringArray0[2] = "filename\t\t";
      stringArray0[3] = "filename\t\t";
      stringArray0[4] = "filename\t\t";
      stringArray0[5] = "filename\t\t";
      stringArray0[6] = "filename\t\t";
      Utility.methodTypeToSignature("filename\t\t", stringArray0);
      Utility.replace("filename\t\t", "filename\t\t", "filename\t\t");
      try { 
        Utility.typeOfSignature("filename\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: filename\t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "%Z[| (6Qt7[HL";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)77;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 203, 154);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.methodSignatureReturnType("]i;*Q~LJ7]IaVeHw)C", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokedynamic", "char", "]i;*Q~LJ7]IaVeHw)C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokedynamic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "-99e6`!c\"vN;fhpy{*H";
      Utility.getSignature("-99e6`!c\"vN;fhpy{*H");
      Utility.setBit(1936, (-174));
      try { 
        Utility.typeOfSignature("-99e6`!c\"vN;fhpy{*H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -99e6`!c\"vN;fhpy{*H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.isSet(0, 3955);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      Utility.toHexString(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2868), (int) (byte) (-105));
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 796, 186);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = false;
      Utility.fillup("E$se", 383, false, 'n');
      Utility.decode("E$se", false);
      try { 
        Utility.typeOfSignature("E$se");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E$se
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)103;
      Utility.decode("C4gBP`k", false);
      Utility.typeOfSignature("C{xB0pLz:b%<");
      try { 
        Utility.methodSignatureArgumentTypes("C4gBP`k", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: C4gBP`k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)56;
      byteArray0[0] = (byte)56;
      Utility.isSet((byte)56, 2237);
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = null;
      byte byte1 = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2237, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "Zj;~R]k";
      try { 
        Utility.methodSignatureReturnType("!))X{XOFs-pp07:^oK$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X{XOFs-pp07:^oK$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ConstantPool constantPool0 = null;
      try { 
        Utility.typeOfSignature("%Z[| (6Qt7[HL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %Z[| (6Qt7[HL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        Utility.getSignature("x._F68h_[y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = Constants.ACCESS_NAMES;
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("E$se", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E$se'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "[%1z-'$i!64(`8.th`";
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-36);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte) (-36));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)77;
      Utility.toHexString(byteArray0);
      Pattern.quote("iastore");
      Utility.decode("boolean", false);
      try { 
        Utility.typeOfSignature("28 97 4d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 28 97 4d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.getSignature("Zj;~R]k");
      Pattern.quote("LZj;~R]k;");
      Utility.replace("QLZj;~R]k;E", "LZj;~R]k;", "LZj;~R]k;");
      Utility.compactClassName("QLZj;~R]k;E", "LZj;~R]k;", false);
      Utility.typeOfSignature("LZj;~R]k;");
      String string0 = Constants.ILLEGAL_OPCODE;
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.isSet(5, 54);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-105);
      byte byte0 = (byte)77;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-105);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("MSzJP7vG=(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MSzJP7vG=(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.typeOfSignature("Zj;~R]k");
      Method method0 = new Method();
      Method method1 = null;
      try {
        method1 = new Method((DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.getSignature("!))X{XOFs-pp07:^oK$");
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.replace("!))X{XOFs-pp07:^oK$", "`[4q*UNXw;/6+", "<clinit>");
      Utility.compactClassName("O0WO=#", "!))X{XOFs-pp07:^oK$", true);
      try { 
        Utility.typeOfSignature("O0WO=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O0WO=#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("[S{He", true);
      assertEquals("short[]", string0);
      
      String string1 = Utility.convertString("3jMI3Z0QIO^J\"F");
      assertEquals("3jMI3Z0QIO^J\\\"F", string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("]i;*Q~LJ7]IaVeHw)C", false);
      assertEquals("char", string0);
      
      String string1 = Utility.getSignature("char");
      assertEquals("C", string1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.isSet(0, 3955);
      Pattern.quote("yOu\"oVeH*h");
      Utility.compactClassName("SH0q!/R6#H^#\"6uB~", "/N9g{%z_:=", true);
      try { 
        Utility.typeOfSignature("/N9g{%z_:=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /N9g{%z_:=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.typeOfSignature("Total of ");
      Method method0 = new Method();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Total of ";
      stringArray0[1] = "Total of ";
      stringArray0[2] = "Total of ";
      stringArray0[3] = "Total of ";
      stringArray0[4] = "Total of ";
      Utility.methodTypeToSignature("Total of ", stringArray0);
      Utility.replace("(LTotal;LTotal;LTotal;LTotal;LTotal;)LTotal;", "Total of ", "\"");
      try { 
        Utility.typeOfSignature("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "Zj;~R]k";
      String[] stringArray0 = Constants.ACCESS_NAMES;
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("Zj;~R]k", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Zj;~R]k", " 4e\"<u8j.6", "boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Zj;~R]k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("!?ONuZ9ujXJ", stringArray0);
      try { 
        Utility.typeOfSignature("@iT)mQ43-~t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @iT)mQ43-~t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid method signature: ");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.compactClassName("!))X{XOFs-pp07:^oK$", true);
      Utility.typeOfSignature("DlKaO2Cuk)=wL9ZU");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface((byte)7);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("~", "+6=c", "+6=c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, (-1917));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.compactClassName("$%fGhnvr");
      byte byte0 = Constants.ITEM_Double;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "$%fGhnvr";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.decode("$%fGhnvr", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("!?ONuZ9ujXJ", stringArray0);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()L!?ONuZ9ujXJ;");
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("H,wgV6s9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H,wgV6s9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-88);
      byteArray0[3] = (byte) (-88);
      byteArray0[7] = (byte) (-35);
      byteArray0[8] = (byte) (-35);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), (int) (byte) (-35));
      assertEquals("0:    jsr\t\t#-22307\n3:    jsr\t\t#-8789\n6:    nop\n7:    <illegal opcode>\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte byte0 = Constants.ATTR_UNKNOWN;
      try { 
        Utility.typeOfSignature("&8 P;lN56^=SVIHcbF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &8 P;lN56^=SVIHcbF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-35);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)99;
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = Utility.signatureToString("Float");
      assertEquals("float", string0);
      
      String string1 = Utility.convertString("Float");
      assertEquals("Float", string1);
      
      byte[] byteArray0 = new byte[8];
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-11), (-2640));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string2);
      
      String string3 = Utility.getSignature("Float");
      assertEquals("LFloat;", string3);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.isSet(0, 3955);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      try { 
        Utility.methodSignatureReturnType("MkYTphqiI/biXP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MkYTphqiI/biXP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_OBJECT;
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.toHexString(byteArray0);
      Utility.compactClassName("if_icmpge", "U@x(m$", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "if_icmplt";
      objectArray0[1] = (Object) "if_icmpge";
      Utility.printArray(objectArray0, false, false);
      Utility.convertString("'<U\"Ob`58))]`HQ!");
      int int0 = 300;
      Utility.classOrInterface(300);
      try { 
        Utility.methodSignatureReturnType("invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokestatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[2] = (byte) (-118);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-118);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (int) (byte) (-118));
      assertEquals("0:    lstore_2\n1:    nop\n2:    l2d\n3:    nop\n4:    l2d\n5:    l2d\n", string0);
      
      String string1 = Utility.convertString("0:    lstore_2\n1:    nop\n2:    l2d\n3:    nop\n4:    l2d\n5:    l2d\n");
      assertEquals("0:    lstore_2\\n1:    nop\\n2:    l2d\\n3:    nop\\n4:    l2d\\n5:    l2d\\n", string1);
      
      String string2 = Utility.convertString("Tc{tUAUp48UY:c}T4");
      assertEquals("Tc{tUAUp48UY:c}T4", string2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.convertString("Float");
      Utility.convertString("Float");
      byte[] byteArray0 = Utility.decode(">3", false);
      assertArrayEquals(new byte[] {(byte)62, (byte)51}, byteArray0);
      
      byte byte0 = Utility.typeOfSignature("Float");
      assertEquals((byte)6, byte0);
      
      short short0 = Utility.searchOpcode("Float");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.convertString("l2f");
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.getSignature("Zj;~R]k");
      String string0 = Utility.signatureToString("LZj;~R]k;");
      Utility.convertString("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)51;
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, 65, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "Q,wgV6s9";
      try { 
        Utility.typeOfSignature("Q,wgV6s9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q,wgV6s9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "filename\t\t";
      stringArray0[1] = "filename\t\t";
      stringArray0[3] = "filename\t\t";
      stringArray0[4] = "filename\t\t";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1143, (-1516));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-112);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2821), (int) (byte) (-112));
      assertEquals("0:    d2f\n1:    d2f\n2:    <illegal opcode>\n3:    nop\n4:    nop\n5:    nop\n6:    d2f\n", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0:    d2f\n1:    d2f\n2:    <illegal opcode>\n3:    nop\n4:    nop\n5:    nop\n6:    d2f\n";
      stringArray0[1] = "if_acmpne";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_acmpne");
      stringArray0[2] = "if_acmpne";
      stringArray0[3] = "if_acmpne";
      stringArray0[4] = "u8{'c]bl";
      String string1 = Utility.methodTypeToSignature("if_acmpne", stringArray0);
      assertEquals("(L0:;Lif_acmpne;Lif_acmpne;Lif_acmpne;Lu8{'c]bl;)Lif_acmpne;", string1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Joh3$3";
      stringArray0[1] = "Joh3$3";
      stringArray0[2] = "Joh3$3";
      stringArray0[3] = "{";
      stringArray0[4] = "Joh3$3";
      stringArray0[5] = "Joh3$3";
      stringArray0[6] = "Joh3$3";
      stringArray0[7] = "Joh3$3";
      stringArray0[8] = "Joh3$3";
      Utility.methodTypeToSignature("Joh3$3", stringArray0);
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("J`C", false);
      String string1 = Utility.convertString("long");
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "J`C";
      stringArray0[1] = "long";
      stringArray0[2] = "J`C";
      stringArray0[3] = "J`C";
      stringArray0[4] = "long";
      String string2 = Utility.methodTypeToSignature("J`C", stringArray0);
      assertEquals("(LJ`C;JLJ`C;LJ`C;J)LJ`C;", string2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)78;
      byteArray0[0] = (byte) (-79);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-53);
      byteArray0[8] = (byte)64;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), (int) (byte) (-35));
      assertEquals("0:    return\n1:    astore_3\n2:    nop\n3:    ixor\n4:    <illegal opcode>\n5:    nop\n6:    nop\n7:    nop\n8:    lstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-112);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2821), (int) (byte) (-112));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0:    d2f\n1:    d2f\n2:    <illegal opcode>\n3:    nop\n4:    nop\n5:    nop\n6:    d2f\n";
      stringArray0[1] = "if_acmpne";
      Utility.methodSignatureReturnType("Invalid signature: ", false);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)53;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1053), (int) (byte)53, true);
      assertEquals("0:    astore_2\n1:    laload\n2:    laload\n3:    astore_0\n4:    bastore\n5:    saload\n", string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)31;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-53), 9);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.compactClassName("L%!Ny", false);
      try { 
        Utility.typeOfSignature("*zmh&?dU=QlXld");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: zmh&?dU=QlXld
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$e", false);
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte) (-8);
      byteArray1[2] = (byte)126;
      byteArray1[3] = (byte)33;
      byteArray1[4] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-162), 512, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ffH", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ffH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "Zj;~R]k";
      Utility.getSignature("Zj;~R]k");
      Utility.signatureToString("LZj;~R]k;");
      Utility.convertString("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-111);
      byteArray0[4] = (byte) (-106);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1941, (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      Utility.isSet((byte)56, 2237);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)30;
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte)30;
      byteArray1[3] = (byte) (-105);
      byteArray1[4] = (byte) (-105);
      byteArray1[5] = (byte) (-105);
      byteArray1[6] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.toHexString(byteArray1);
      try { 
        Utility.typeOfSignature("38 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 38 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 3955;
      Utility.isSet(0, 3955);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)120;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, 253);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-73);
      Utility.encode(byteArray0, true);
      String string0 = "_";
      Utility.replace("_", "{G !Yifz\rvI@RcaO", "_");
      Utility.convertString("Yi{b?#tKX-2(cL d");
      Utility.format(92, (byte) (-73), true, '4');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yi{b?#tKX-2(cL d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yi{b?#tKX-2(cL d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, (int) (byte)57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-35);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 255, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, 255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.getSignature("n");
      try { 
        Utility.typeOfSignature("40{$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 40{$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, 199);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (int) (byte) (-82), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-118);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-118);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (int) (byte) (-118));
      String string0 = Utility.convertString("0:    nop\n1:    nop\n2:    l2d\n3:    nop\n4:    l2d\n5:    l2d\n");
      assertEquals("0:    nop\\n1:    nop\\n2:    l2d\\n3:    nop\\n4:    l2d\\n5:    l2d\\n", string0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-118);
      byteArray1[1] = (byte)91;
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-118), 74);
      assertEquals("0:    l2d\n1:    dup_x2\n", string1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1426), 1884);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", signature_index = ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "u8{'c]bl";
      stringArray0[1] = "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n";
      String string1 = Utility.methodTypeToSignature("if_acmpne", stringArray0);
      assertEquals("(Lu8{'c]bl;L0:;)Lif_acmpne;", string1);
      
      String string2 = Utility.compactClassName("ifle", true);
      assertEquals("ifle", string2);
      
      byte byte0 = Utility.typeOfSignature("JCc&");
      assertEquals((byte)11, byte0);
      
      String string3 = Utility.format((byte)11, 48, false, 'N');
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN11", string3);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 240, 251);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("!?ONuZ9ujXJ", stringArray0);
      assertEquals("()L!?ONuZ9ujXJ;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-35);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte) (-35));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) (-106);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), 3484);
      try { 
        Utility.methodSignatureReturnType("0:    i2b\n1:    i2b\n2:    i2b\n3:    fcmpg\n4:    i2b\n5:    fcmpg\n6:    fcmpg\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    i2b
         // 1:    i2b
         // 2:    i2b
         // 3:    fcmpg
         // 4:    i2b
         // 5:    fcmpg
         // 6:    fcmpg
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-19);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), (-3168));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ireturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-72), (int) (byte)13, false);
      assertEquals("0:    fconst_2\n1:    freturn\n2:    land\n", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, (int) (byte) (-72), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "ALHhRh]`|SlPH";
      String string1 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.typeOfSignature("ALHhRh]`|SlPH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ALHhRh]`|SlPH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[6] = (byte)78;
      byteArray0[0] = (byte) (-77);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-53);
      try { 
        Utility.methodSignatureReturnType("PMGClass(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PMGClass('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "Float";
      Utility.convertString("Float");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte)123;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 634, 3481, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.convertString("P)? a*G2Yt3jw1");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)86;
      byteArray0[3] = (byte) (-106);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), (int) (byte)86);
      Utility.convertString("P)? a*G2Yt3jw1");
      MockPrintStream mockPrintStream0 = new MockPrintStream("P)? a*G2Yt3jw1");
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "P)? a*G2Yt3jw1", (-1132), 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 908);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      Utility.methodSignatureReturnType("ByE+9nB{b,=<XdlX_");
      Utility.typeOfSignature("ByE+9nB{b,=<XdlX_");
      boolean boolean0 = false;
      Utility.compactClassName("byte", false);
      String string0 = "ol5Qn},*~";
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("ByE+9nB{b,=<XdlX_", "ol5Qn},*~");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ol5Qn},*~
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-113));
      assertEquals("0:    nop\n1:    d2l\n2:    d2l\n", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "0:    nop\n1:    d2l\n2:    d2l\n";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) "0:    nop\n1:    d2l\n2:    d2l\n";
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-35);
      byteArray1[1] = (byte) (-35);
      String string1 = Utility.fillup("0:    nop\n1:    d2l\n2:    d2l\n", 167, false, 'p');
      assertEquals("ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp0:    nop\n1:    d2l\n2:    d2l\n", string1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.methodTypeToSignature("int", (String[]) null);
      Utility.setBit(1378, 1378);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)102, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.methodTypeToSignature("int", (String[]) null);
      int int0 = Utility.setBit(1378, 1378);
      assertEquals(1382, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-17);
      byteArray0[0] = (byte)102;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 84);
      assertEquals("0:    fsub\n1:    goto_w\t\t#-1175519155\n6:    astore_1\n", string0);
      
      String string1 = Utility.getSignature("()I");
      assertEquals("L()I;", string1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)52;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-100));
      Utility.convertString("0:    nop\n1:    ifge\t\t#13313\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantArray0[0] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong((-776L));
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)7;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 908);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)7;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 908);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "!?ONuZujXJ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("#C2`&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #C2`&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)66;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 908);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 14, 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "Q,wgV6s9";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 14, 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-118);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-118);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (int) (byte) (-118));
      String string0 = Utility.convertString("0:    nop\n1:    nop\n2:    l2d\n3:    nop\n4:    l2d\n5:    l2d\n");
      assertEquals("0:    nop\\n1:    nop\\n2:    l2d\\n3:    nop\\n4:    l2d\\n5:    l2d\\n", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), 164);
      assertEquals("0:    nop\n1:    nop\n2:    l2d\n3:    nop\n4:    l2d\n5:    l2d\n", string1);
      
      Utility.compactClassName("PMGClass(", false);
      byte byte0 = Utility.typeOfSignature("Sy4$_:+>SOXpi2J@M");
      assertEquals((byte)9, byte0);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$8a$A$8a$8a", string2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G@MTD`'AF<(O}Gc4");
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_LONGSTRING;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, 83, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2729, 212);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "RuntimeInvisibleParameterAnnotations";
      boolean boolean0 = false;
      Utility.fillup("RuntimeInvisibleParameterAnnotations", 82, false, '|');
      Utility.searchOpcode("KsG]MipuT5[gwHn");
      String string1 = "6qXD:\"k>SkD.H&";
      try { 
        Utility.typeOfSignature("6qXD:\"k>SkD.H&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6qXD:\"k>SkD.H&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.convertString("Illegal type: ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-141), 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    l2i
         // 1:    lload\t\t%150
         // 3:    fcmpg
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.compactClassName("8{ROW>kh", false);
      try { 
        Utility.typeOfSignature("8{ROW>kh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8{ROW>kh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.convertString("~");
      Utility.convertString("~");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-29);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-29), 487);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    dconst_1
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)123;
      byteArray0[3] = (byte)12;
      byteArray0[7] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 240, 251);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-74);
      String string0 = "PMGClass(";
      try { 
        Utility.typeOfSignature("PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte) (-100);
      try { 
        Utility.typeOfSignature("+;9Xhu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;9Xhu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-55);
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), 186, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpeq\t\t#-23132
         // 3:    fastore
         // 4:    aload_0
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)66;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 908);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)66;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, (-3029), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto_w");
      Utility.methodTypeToSignature("goto_w", (String[]) null);
      int int0 = Pattern.MULTILINE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 96, 190);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.setBit(1378, 1378);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)102, 84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)47;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)53;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-5508), 174);
      assertEquals("0:    dmul\n1:    dstore_3\n2:    laload\n3:    nop\n4:    bastore\n5:    saload\n", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), 132);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)66;
      byte byte1 = (byte)82;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte)82;
      byte byte2 = (byte) (-85);
      byteArray1[5] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 13, (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)87;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte) (-104);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)87, 2187);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dj7y!zb[m)e]%");
      byte[] byteArray0 = new byte[9];
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte)88;
      byteArray1[3] = (byte)74;
      byteArray1[4] = (byte) (-83);
      byteArray1[5] = (byte)123;
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, (int) (byte)23, true);
      Utility.searchOpcode("0:    nop\n1:    fload\t\t%88\n3:    dstore_3\n4:    lreturn\n5:    lshr\n");
      Utility.convertString("F|fjfP{{r`=H5e~qce");
      // Undeclared exception!
      try { 
        Utility.signatureToString("KB]}7", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KB]}7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.convertString("Illegal type: ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-141), 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x1
         // 1:    lload\t\t%150
         // 3:    fcmpg
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-112);
      byteArray0[0] = (byte) (-11);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, (-1917));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto_w");
      Utility.methodTypeToSignature("goto_w", (String[]) null);
      int int0 = Pattern.MULTILINE;
      Utility.typeOfMethodSignature("()Lgoto_w;");
      try { 
        Utility.methodSignatureArgumentTypes("goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.typeOfSignature("V}>9+<>qC/u5=dk");
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.signatureToString("V}>9+<>qC/u5=dk");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.classOrInterface(1602);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)12);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)12, (byte)14);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 82, 82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2729, 212);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-35), (-1116));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_1
         // 1:    fstore_1
         // 2:    <illegal opcode>
         // 3:    iload_3
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)103;
      byteArray1[2] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)60, (int) (byte)103, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-69);
      byteArray0[7] = (byte)121;
      byteArray0[7] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.replace("bipush\t\t-67", "bipush\t\t-67", "bipush\t\t-67");
      Utility.searchOpcode("bipush\t\t-67");
      Utility.convertString("arraylength");
      // Undeclared exception!
      try { 
        Utility.signatureToString("bipush\t\t-67", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `bipush\t\t-67'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-82);
      byteArray0[8] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1073), (int) (byte)101, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)66;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4988), (int) (byte) (-35));
      assertEquals("0:    astore\t\t%66\n", string0);
      
      String string1 = Utility.accessToString((int) (byte)66);
      assertEquals("private volatile", string1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)114;
      byteArray1[2] = (byte)114;
      String string0 = Utility.convertString("xz7");
      assertEquals("xz7", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)78;
      byteArray0[0] = (byte) (-79);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-53);
      byteArray0[8] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (int) (byte) (-35));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte)53;
      byteArray1[3] = (byte)122;
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte) (-97);
      byteArray1[6] = (byte)84;
      byteArray1[7] = (byte)75;
      Utility.codeToString(byteArray1, (ConstantPool) null, (-1554), 100);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto_w");
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("goto_w", (String[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-86);
      byteArray0[4] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 96, 190);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.compactClassName("java.lang.CHOP ");
      Utility.convertString("java.lang.CHOP ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.convertString("Float");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)2;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte) (-88));
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.convertString("Float");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)73;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-109), (byte) (-109));
      Constant constant0 = constantInterfaceMethodref0.copy();
      constantArray0[0] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2639, 1957);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-97);
      byteArray0[0] = (byte) (-97);
      byte byte1 = ObjectStreamConstants.TC_LONGSTRING;
      try { 
        Utility.typeOfSignature("\"m!@9cI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"m!@9cI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.signatureToString("Float");
      Utility.convertString("Float");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, 169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.typeOfSignature("V}>9+<>qC/u5=dk");
      Utility.compactClassName("V}>9+<>qC/u5=dk");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-670), (int) (byte)102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_1
         // 1:    fsub
         // 2:    fsub
         // 3:    fsub
         // 4:    fsub
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)115;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 251, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)121, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.convertString("Floa");
      byte byte0 = ObjectStreamConstants.TC_LONGSTRING;
      Utility.typeOfSignature("Floa");
      Utility.compactClassName("if_icmpge", "if_icmpge", false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Floa";
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureReturnType("N]j;Nak", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N]j;Nak'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)67;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-363), 224, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = Utility.convertString("Float");
      assertEquals("Float", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)75;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)75;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-363), (int) (byte)75);
      assertEquals("0:    dstore_3\n1:    astore_0\n2:    nop\n3:    nop\n4:    dmul\n5:    fstore_3\n6:    astore_0\n7:    astore_0\n", string1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "bipush");
      byteArray0[0] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      byteArray0[7] = (byte)44;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte)2;
      byteArray1[6] = (byte)44;
      byteArray1[7] = (byte) (-35);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-35), 14);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "0:    fload_1\n1:    iconst_4\n2:    iconst_4\n3:    iconst_4\n4:    iconst_m1\n5:    iconst_m1\n6:    aload_2\n7:    <illegal opcode>\n";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) byteArray1;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "0:    fload_1\n1:    iconst_4\n2:    iconst_4\n3:    iconst_4\n4:    iconst_m1\n5:    iconst_m1\n6:    aload_2\n7:    <illegal opcode>\n";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) byteArray0;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "Floa";
      Utility.convertString("Floa");
      byte byte0 = ObjectStreamConstants.TC_LONGSTRING;
      Utility.typeOfSignature("Floa");
      String string1 = "if_icmpge";
      Utility.convertString("if_icmpge");
      String string2 = "Hj";
      try { 
        Utility.typeOfSignature("Hj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-67);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte) (-59);
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte) (-67);
      byteArray1[6] = (byte) (-59);
      byteArray1[7] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 192, 192, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto_w");
      Utility.methodTypeToSignature("goto_w", (String[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-91);
      byteArray0[4] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4951, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpgt\t\t#-23652
         // 3:    if_icmpgt\t\t#-25434
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_LONGSTRING;
      try { 
        Utility.typeOfSignature("Gx[]`'}h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gx[]`'}h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "Float";
      Utility.convertString("Float");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)46;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2317), (int) (byte)46, false);
      String string1 = "JL`ibZ!fV6";
      Utility.compactClassName("Float", false);
      try { 
        Utility.methodSignatureArgumentTypes("Float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte)50, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)47;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, 2448);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      byteArray0[7] = (byte)44;
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)7;
      byteArray0[7] = (byte)2;
      byteArray1[5] = (byte)2;
      byteArray1[6] = (byte)44;
      byteArray1[7] = (byte) (-35);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-35), 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Utility.signatureToString("Dont call getValueBoolean() on a non BOOLEAN ElementValue", false);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-82);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), 67);
      assertEquals("0:    lstore_2\n1:    iastore\n2:    i2s\n3:    freturn\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      
      String string1 = Utility.getSignature("0:    lstore_2\n1:    iastore\n2:    i2s\n3:    freturn\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.signatureToString("Float");
      Utility.convertString("Float");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 174, (int) (byte) (-61));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2640), 157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    irem
         // 1:    jsr\t\t#-25808
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.isSet(0, 3955);
      byte byte0 = (byte) (-112);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (-3724));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    d2f
         // 2:    <illegal opcode>
         // 3:    d2f
         // 4:    d2f
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-2), (int) (byte) (-2));
      assertEquals("0:    idiv\n1:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "bipush");
      byteArray0[0] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)7;
      byteArray0[7] = (byte)44;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)7;
      byteArray1[5] = (byte)2;
      byteArray1[6] = (byte)44;
      byteArray1[7] = (byte) (-35);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-35), 14);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "0:    iload_0\n1:    iconst_4\n2:    iconst_4\n3:    iconst_4\n4:    nop\n5:    iconst_m1\n6:    aload_2\n7:    <illegal opcode>\n";
      objectArray0[3] = (Object) null;
      try { 
        Utility.typeOfSignature("0:    iload_0\n1:    iconst_4\n2:    iconst_4\n3:    iconst_4\n4:    nop\n5:    iconst_m1\n6:    aload_2\n7:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    iload_0
         // 1:    iconst_4
         // 2:    iconst_4
         // 3:    iconst_4
         // 4:    nop
         // 5:    iconst_m1
         // 6:    aload_2
         // 7:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.convertString("Float");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-114), (int) (byte)95, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte byte0 = Constants.ATTR_SIGNATURE;
      Utility.getSignature("Dj7y!zb[m)e]%");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[LDj7y!zb;", "new", "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [LDj7y!zb;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("RA.v!YasYR+95RRfG*", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RA.v!YasYR+95RRfG*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte byte0 = (byte) (-57);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-35);
      byteArray0[4] = (byte) (-53);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-118);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-53), (int) (byte)99);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("7R$L`8-{o[yQ", "7R$L`8-{o[yQ", "0:    dadd\n1:    <illegal opcode>\n2:    nop\n3:    <illegal opcode>\n4:    ifnonnull\t\t#25486\n7:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7R$L`8-{o[yQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("SAME_LOCALS_1_STACK_EXTENDED", false);
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, (int) (byte) (-38));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-115);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("XYmk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XYmk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      String string0 = "KI~";
      try { 
        Utility.typeOfSignature("KI~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KI~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_LONGSTRING;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)72, (int) (byte)72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.signatureToString("V}>9+<>qC.", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)40;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(62, (byte)40);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)41, 38, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-124);
      byteArray0[0] = (byte) (-124);
      byte byte1 = (byte)33;
      byteArray0[1] = (byte)33;
      byte byte2 = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)1;
      byte byte3 = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-37);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 69, 819);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-80), 2);
      assertEquals("0:    iinc\t\t%0\t0\n", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 51, (-1118));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-36);
      byte byte0 = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-74);
      byte byte1 = (byte)41;
      byteArray0[8] = (byte)41;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, (-2167));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, 1870);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 566, 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-99);
      byteArray0[0] = (byte) (-99);
      byteArray0[3] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, (int) (byte)60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, (-1607));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-107);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-17), (-1790264573));
      assertEquals("0:    iconst_4\n1:    dup_x1\n2:    dup2_x2\n3:    iload_1\n4:    <illegal opcode>\n5:    fcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)45;
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)33;
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte)33;
      byteArray1[3] = (byte) (-124);
      byteArray1[4] = (byte)45;
      byteArray1[5] = (byte)45;
      byteArray1[6] = (byte)45;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.close();
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantInteger constantInteger2 = new ConstantInteger(byteSequence1);
      constantArray0[1] = (Constant) constantInteger2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-124), 195);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_3
         // 1:    lload_3
         // 2:    lload_3
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "Ooops, what primitive type is ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ooops, what primitive type is ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ooops, what primitive type is '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 152, 106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-70);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 82, 1878);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 208. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ret\t\t%130
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      try { 
        Utility.typeOfSignature("YBdw&]3S}WtS}/At^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YBdw&]3S}WtS}/At^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 200, 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-8);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (int) (byte) (-85));
      assertEquals("0:    fload_2\n1:    fstore_0\n2:    iload_0\n3:    jsr\t\t#-7250\n6:    return\n7:    <illegal opcode>\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('U');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MockPrintStream mockPrintStream0 = new MockPrintStream("irem");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[18];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) mockPrintStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.fillup("01HO9]$L@(d", (-1144), false, '{');
      byte[] byteArray1 = Utility.decode("irem", false);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1144), 166);
      assertEquals("0:    lmul\n1:    frem\n2:    lsub\n3:    ldiv\n", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">y-SP16/#q32");
      byteArray0[1] = (byte) (-52);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-52), 178);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)120, (int) (byte)120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-94);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("=ZO#Fw(*[n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =ZO#Fw(*[n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-60);
      byteArray0[8] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 132, (-4589));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), (int) (byte) (-66));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 166, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "FH.:2q>5PCB2?-L";
      boolean boolean0 = true;
      Utility.compactClassName("FH.:2q>5PCB2?-L", true);
      String string1 = "Warning: Padding byte != 0 in ";
      Utility.getSignature("Warning: Padding byte != 0 in ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.compactClassName("java.lang.StringBuffer");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4226, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      try { 
        Utility.typeOfSignature("UR<QvG|T(|)6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UR<QvG|T(|)6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = "$7";
      try { 
        Utility.decode("$7", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = "*5UcVdQ*\\R*";
      try { 
        Utility.typeOfSignature("*5UcVdQ*R*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5UcVdQ*R*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-28);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, (int) (byte)105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "goto_w";
      stringArray0[1] = "goto_w";
      stringArray0[2] = "goto_w";
      Utility.methodTypeToSignature("goto_w", stringArray0);
      Utility.clearBit((-1920), (-1920));
      Utility.setBit(0, (-1920));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "goto_w";
      Utility.printArray(objectArray0, true);
      Utility.format((-358), 1, false, '-');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, 9, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)94;
      byteArray0[8] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)28, (-4720));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.methodSignatureReturnType("Float");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)106, (int) (byte)34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-63);
      byte byte0 = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)40;
      byte byte1 = (byte)43;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 388, (int) (byte)9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, (int) (byte) (-108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)72;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$V$f3$98l$aaH", string0);
      
      byte[] byteArray1 = Utility.decode("$V$f3$98l$aaH", false);
      assertArrayEquals(new byte[] {(byte)21, (byte) (-13), (byte) (-104), (byte)108, (byte) (-86), (byte)72}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Utility.compactClassName("r>-s4", "Lif_acmpne;V", true);
      Utility.accessToString(170);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "r>-s4";
      objectArray0[1] = (Object) "Lif_acmpne;V";
      objectArray0[2] = (Object) "Lif_acmpne;V";
      objectArray0[3] = (Object) "r>-s4";
      objectArray0[4] = (Object) "private static synchronized transient";
      objectArray0[5] = (Object) "r>-s4";
      objectArray0[6] = (Object) "r>-s4";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte) (-73);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2074, 65535);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-73), 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    daload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, (int) (byte) (-101));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = 46;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = "fB6";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fB6";
      Utility.methodTypeToSignature("fB6", stringArray0);
      try { 
        Utility.methodSignatureReturnType("GZ|2J", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GZ|2J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*RirDd+%HMW{kJ2x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RirDd+%HMW{kJ2x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)36;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3317), 139);
      assertEquals("0:    i2f\n1:    i2d\n2:    lshr\n3:    pop2\n4:    <illegal opcode>\n5:    fload_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (int) (byte)83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, (int) (byte)36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2510, (-3630));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)114, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1166), (-1166));
      assertEquals("0:    lrem\n", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Deprecated attribute with length > 0", false);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-545), 174);
      constantArray0[0] = (Constant) constantNameAndType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 74, 74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, (int) (byte)21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.java.lang.CHOP ");
      assertEquals("java.lang.java.lang.CHOP ", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W[?#_v{,Ptp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W[?#_v{,Ptp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7t[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7t[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)6;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[7] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, 1449);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 829, (-648));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.decode("#P2>P*$bRtob", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"bR\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
