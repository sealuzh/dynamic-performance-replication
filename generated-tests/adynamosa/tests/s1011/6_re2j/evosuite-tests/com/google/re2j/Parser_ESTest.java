/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 14:53:17 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 4069;
      String string0 = "\\AtQ";
      Parser.parse("AtQ", 4069);
      Parser.parse("Quotation_Mark", 4069);
      String string1 = "[:\\x00-\\x{10pFF9}]";
      Parser.parse("Quotation_Mark", 1000);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "}wx\\B";
      Object object0 = new Object();
      int int0 = 877;
      Parser.parse("(?U:.)", 877);
      Regexp regexp0 = Parser.parse("\u0006", 877);
      regexp0.reinit();
      int int1 = 94;
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "F|g)5L__m0S";
      Regexp[] regexpArray0 = new Regexp[2];
      String string1 = "C$\\3_\":52|dky1";
      Regexp regexp0 = Parser.parse("C$\u0003_\":52|dky1", 1229);
      regexpArray0[0] = regexp0;
      String string2 = "Hd,h";
      int int0 = 91;
      Regexp regexp1 = Parser.parse(string2, int0);
      regexpArray0[1] = regexp1;
      int int1 = 67;
      int int2 = (-1242);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-s:.)", (-3728));
      Regexp[] regexpArray0 = regexp0.subs;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      Regexp regexp2 = new Regexp(regexp0);
      Parser.parse("[::]", (-152));
      Parser.parse("(?-s:.)", (-182));
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-559), 11264);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-959);
      String string0 = "Vs`9=3C7m>";
      Regexp regexp0 = Parser.parse("Vs`9=3C7m>", (-959));
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals("y");
      Object object0 = new Object();
      regexp1.equals(object0);
      Regexp regexp2 = Parser.parse("[^x00w\u0000{10FFFF}]", (-959));
      Regexp regexp3 = new Regexp(regexp2);
      int int1 = (-719);
      Regexp regexp4 = Parser.parse("x", (-719));
      int int2 = 31;
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp4;
      regexpArray0[3] = regexp3;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 3504);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Parser.parse("ADB%UO+l!!$d,", 40);
      regexp1.toString();
      try { 
        Parser.parse("d.0ei_Y\"!NZpKX(hc|Y", 1484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `d.0ei_Y\"!NZpKX(hc|Y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 2684);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("D", (-1473));
      Regexp regexp3 = Parser.parse("Pattern_Syntax", (-1));
      Regexp regexp4 = new Regexp(regexp3);
      regexp4.toString();
      Regexp regexp5 = new Regexp(regexp2);
      Regexp regexp6 = Parser.parse("Pattern_Syntax", (-1473));
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp7 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp8 = new Regexp(regexp_Op1);
      Regexp.Op regexp_Op2 = Regexp.Op.END_LINE;
      Regexp regexp9 = new Regexp(regexp_Op2);
      regexp6.toString();
      Parser.parse(":\uD804", (-1473));
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 8257, 45);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[22];
      int int0 = 2858;
      Regexp regexp0 = Parser.parse("[^x00-x{10FFF}]", 2858);
      regexp0.reinit();
      regexpArray0[4] = regexp0;
      regexp0.min = (-766);
      String string0 = "";
      Parser.parse("", (-571));
      regexp0.flags = (-571);
      String string1 = "}wx\\B";
      int int1 = 96;
      Parser.parse("}wxB", 96);
      Regexp regexp1 = Parser.parse("[^x00-x{10FFF}]", (-766));
      int[] intArray0 = new int[8];
      intArray0[0] = (-571);
      intArray0[1] = (-766);
      intArray0[2] = (-571);
      intArray0[3] = 96;
      intArray0[4] = 2858;
      intArray0[5] = (-766);
      intArray0[6] = 2858;
      intArray0[7] = (-571);
      regexp1.runes = intArray0;
      int int2 = (-4823);
      Parser.parse("[:x00-x{3!10FFFF}]", (-571));
      try { 
        Parser.parse(string1, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\B`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp regexp0 = Parser.parse("missing argument to repetition operator", 119);
      regexp0.cap = 2684;
      regexp0.cap = 2684;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.flags = 2684;
      Parser.parse("missing argument to repetition operator", 2684);
      Regexp regexp2 = new Regexp(regexp0);
      Regexp regexp3 = new Regexp(regexp2);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp0;
      regexpArray0[5] = regexp2;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      Regexp regexp4 = Parser.parse("U.-Kb|U^\"CwqyPqM", (-2681));
      Parser.parse("{-$\"^S|.", (-199));
      int int0 = 42124;
      Regexp[] regexpArray1 = new Regexp[3];
      regexpArray1[0] = regexp2;
      regexpArray1[1] = regexp4;
      regexpArray1[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 119, (-1819));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parser.parse("[invalid char class]", 2383);
      Parser.parse("1c2k.@2FzE8", 32);
      Parser.parse("Gothic", (-827));
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.reinit();
      regexp1.cap = 32;
      Regexp regexp2 = new Regexp(regexp1);
      try { 
        Parser.parse("y~Qu0pMU(J!+\r", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `y~Qu0pMU(J!+\r`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFF}]", (-896));
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      try { 
        Parser.parse("r[qH}-", (-896));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[qH}-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[22];
      Regexp regexp0 = Parser.parse("[^x00-x{10FFF}]", (-896));
      regexp0.reinit();
      Regexp regexp1 = Parser.parse("[:x00-x{10FFF}]", (-896));
      Regexp regexp2 = Parser.parse("[:^graph:]", 43);
      Regexp regexp3 = new Regexp(regexp0);
      regexp1.toString();
      String string0 = "(?(?:)";
      Parser.parse("=||J7K\"BP]\"E7he", 36);
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp4 = new Regexp(regexp_Op0);
      Regexp regexp5 = new Regexp(regexp2);
      int int0 = 1388;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[22];
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = Parser.parse("[^x00-x{10FFF}]", (-896));
      regexp0.reinit();
      regexpArray0[4] = regexp0;
      Regexp regexp1 = Parser.parse("suJ{HnK$ETg'Dm", 38);
      regexp0.op = regexp_Op0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      int int0 = 96;
      Parser.parse("}wxB", 96);
      Regexp regexp3 = new Regexp(regexp0);
      regexp1.toString();
      Parser.parse("[^x00-x{10FFF}]", (-1677));
      Regexp regexp4 = new Regexp(regexp_Op0);
      Regexp regexp5 = new Regexp(regexp0);
      String string0 = null;
      Parser.parse(":DG##o1Kl0o", (-1677));
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1384);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P", (-878));
      Parser.parse("P", (-878));
      regexp0.reinit();
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      Parser.parse("K|Q", 65372);
      Parser.parse("Ps", 9);
      Regexp regexp3 = new Regexp(regexp0);
      assertFalse(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", (-896));
      regexp0.reinit();
      Object object0 = new Object();
      regexp0.equals(object0);
      Parser.parse("6;5|TIqMx58G-H=bb", 81);
      Parser.parse("6;5|TIqMx58G-H=bb", 81);
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Parser.parse("6;5|TIqMx58G-H=bb", 81);
      Parser.parse("", 50);
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = Parser.parse("T15X+mKm&q-+saz=", 65);
      assertFalse(regexp3.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 119;
      Regexp regexp0 = Parser.parse("missing argument to repetition operator", 119);
      regexp0.cap = 119;
      Parser.parse("missing argument to repetition operator", 2684);
      Parser.parse("L]@DqAyG}TpD", 119);
      Parser.parse("missing argument to repetition operator", (-1169));
      Parser.parse("2{6}", (-2996));
      int int1 = 94;
      try { 
        Parser.parse("(?(?:)", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", (-896));
      int[] intArray0 = new int[8];
      intArray0[0] = (-896);
      intArray0[1] = (-896);
      intArray0[2] = (-896);
      intArray0[3] = (-896);
      intArray0[4] = (-896);
      intArray0[5] = (-896);
      intArray0[6] = (-896);
      intArray0[7] = (-896);
      regexp0.runes = intArray0;
      regexpArray0[4] = regexp0;
      regexp0.op = regexp_Op0;
      Parser.parse("suJ{HnK$ETg'Dm", 38);
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = Parser.parse("}wx\u0006cB", 124);
      assertFalse(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      try { 
        Parser.parse("bKCAHR_cRb[-/|sKe", 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-/|sKe`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\uD804\uDCBE", 49);
      Parser.parse("Any", 49);
      regexp0.min = 49;
      String string0 = "{07XCtGDhb^";
      Parser.parse("{07XCtGDhb^", 49);
      Regexp regexp1 = new Regexp(regexp0);
      int int0 = (-1291);
      Parser.parse("Pd", (-1291));
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 49, 6383);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Parser.parse("/:ckQ", (-2393));
      Regexp regexp0 = Parser.parse("/:ckQ", (-2));
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      Regexp regexp2 = Parser.parse("", 17);
      regexp0.reinit();
      Regexp[] regexpArray0 = regexp0.subs;
      Regexp regexp3 = Parser.parse("", (-2393));
      assertFalse(regexp3.equals((Object)regexp2));
      
      Regexp regexp4 = Parser.parse("(?-m:$)", 918000);
      assertFalse(regexp4.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:F]", 66352);
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.equals("[:F]");
      Regexp regexp2 = new Regexp(regexp0);
      Parser.parse("Hyphen", 2350);
      String string0 = "qL/ViFTeAaF";
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp2;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 105, 2187);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 166;
      Regexp regexp0 = Parser.parse("+1dduHk[H;Qn*fJlU", 166);
      Parser.parse("+1dduHk[H;Qn*fJlU", 166);
      Regexp regexp1 = Parser.parse("+1dduHk[H;Qn*fJlU", 166);
      regexp1.name = "x";
      Object object0 = new Object();
      regexp1.equals(regexp0);
      String string0 = "6;5|TIqMx58G-H=bb";
      Parser.parse("\b", 166);
      Parser.parse("C", 166);
      int int1 = (-972);
      int int2 = (-2519);
      Parser.parse("regexp/syntax: internal error", (-2519));
      Regexp regexp2 = Parser.parse("x", 43);
      Parser.parse("6;5|TIqMx58G-H=bb", 2306);
      Parser.parse("C", (-920));
      Object object1 = new Object();
      regexp2.equals(string0);
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      String string1 = "\\h";
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\h`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Parser.parse("", (-827));
      int[] intArray0 = new int[7];
      intArray0[4] = (-827);
      intArray0[4] = (-827);
      intArray0[6] = (-827);
      Regexp regexp0 = Parser.parse("", (-827));
      Parser.parse("missing loing ]", (-827));
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = new Regexp(regexp2);
      Regexp regexp4 = Parser.parse("B", (-827));
      assertFalse(regexp4.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Parser.parse("l", 209);
      Regexp regexp0 = Parser.parse("YL*k/t#u.-Y;f0J", 124);
      Parser.parse("m6 5SU+?O", 81);
      regexp0.reinit();
      Regexp regexp1 = Parser.parse("^sA^qZ]6rJQc*$F\u00018", 8189);
      int[] intArray0 = new int[0];
      regexp1.runes = intArray0;
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      assertEquals(0, regexpArray1.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Parser.parse("/:ckQ", (-2393));
      Regexp regexp0 = Parser.parse("/:ckQ", (-2));
      Parser.parse("", 17);
      regexp0.reinit();
      try { 
        Parser.parse("d(Gr[+uG[!Av", 209);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[+uG[!Av`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 49;
      String string0 = "nM~J\\57B1.nQVzi+:";
      Parser.parse("nM~J/B1.nQVzi+:", 49);
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, 49, 49);
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 1246, 1246);
      Parser.parse("nM~J/B1.nQVzi+:", 49);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, (-3648), 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-827);
      int int1 = (-577);
      String string0 = "[::\uD804\uDCBE-\uD804\uDCC1\uD809\uDC70-\uD809\uDC73](?-s:.)(?i:\\)";
      Parser.parse("[::\uD804\uDCBE-\uD804\uDCC1\uD809\uDC70-\uD809\uDC73](?-s:.)(?i:)", (-577));
      String string1 = "[:\uD809\uDC70-\uD809\uDC73](?-s:.)(?i:\\)";
      int int2 = 5;
      try { 
        Parser.parse("[:\uD809\uDC70-\uD809\uDC73](?-s:.)(?i:)", 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "'|=}89DjE&y\"|j!g@";
      int int0 = 49;
      Parser.parse("'|=}89DjE&y\"|j!g@", 49);
      Regexp regexp0 = Parser.parse("'|=}89DjE&y\"|j!g@", (-110));
      Parser.parse("'|=}89DjE&y\"|j!g@", 8155);
      int[] intArray0 = new int[9];
      intArray0[0] = 49;
      int int1 = 65100;
      intArray0[1] = 65100;
      intArray0[2] = (-110);
      intArray0[3] = 8155;
      intArray0[4] = 49;
      intArray0[5] = 8155;
      intArray0[6] = (-110);
      intArray0[7] = (-110);
      intArray0[8] = 8155;
      regexp0.runes = intArray0;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      int int2 = (-473);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 49, (-473));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      String string0 = "[:F}]";
      Regexp regexp0 = Parser.parse("[:F}]", 66352);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      Parser.parse("[:F}]", 80);
      Parser.parse("[:F}]", 66352);
      String string1 = "/>'>-FM<Tzi'JEcxS";
      int int0 = 3187;
      Parser.parse("[:F}]", 12);
      Parser.parse("[:F}]", 66352);
      regexp0.min = 80;
      try { 
        Parser.parse("|xo[L'4", (-864));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[L'4`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-959);
      String string0 = "Vs`9=3C7m>";
      Regexp regexp0 = Parser.parse("Vs`9=3C7m>", (-959));
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals("y");
      Object object0 = new Object();
      regexp1.equals(object0);
      Regexp regexp2 = Parser.parse("[^x00-x{10FFFF}]", (-959));
      Regexp regexp3 = Parser.parse("tp", (-959));
      int int1 = (-719);
      Regexp regexp4 = Parser.parse("x", (-719));
      int int2 = 31;
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp4;
      regexpArray0[3] = regexp3;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "\\pP.]";
      Parser.parse("pP.]", (-543));
      Parser.parse("pP.]", (-543));
      Regexp regexp0 = Parser.parse("", (-543));
      regexp0.toString();
      Regexp regexp1 = Parser.parse("(?:)", 2161);
      Regexp regexp2 = new Regexp(regexp1);
      String string1 = "\\P}]";
      Parser.parse("P}]", (-543));
      int int0 = 60;
      String string2 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string2, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Parser.parse("", (-827));
      Parser.parse("", (-827));
      int int0 = 4080;
      Parser.parse("", (-827));
      Regexp regexp0 = Parser.parse("", 3631);
      regexp0.toString();
      try { 
        Parser.parse("x!E|HaB{)qXw8\"(=", 4080);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?U:.)", (-3793));
      Parser.parse("(?U:.)", (-3793));
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("(?U:.)", 116);
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", (-827));
      Regexp regexp1 = Parser.parse("", (-827));
      Parser.parse("", (-827));
      int[] intArray0 = new int[7];
      intArray0[2] = (-827);
      regexp1.name = "";
      intArray0[3] = (-827);
      intArray0[4] = (-827);
      intArray0[6] = (-827);
      regexp1.runes = intArray0;
      Regexp regexp2 = Parser.parse("", (-827));
      Regexp regexp3 = new Regexp(regexp2);
      Parser.parse("\uD804\uDCBE", (-827));
      Regexp regexp4 = Parser.parse("", 11374);
      int int0 = 109;
      Regexp regexp5 = Parser.parse("", 109);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp5;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp6 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp6;
      regexpArray0[4] = regexp4;
      regexpArray0[5] = regexp3;
      regexpArray0[6] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3642, 11);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP.]", (-543));
      Regexp regexp1 = Parser.parse("pP.]", (-543));
      Parser.parse("Inscriptional_Pahlavi", 3631);
      regexp0.toString();
      Regexp regexp2 = Parser.parse("<", 95);
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      regexp2.op = regexp_Op0;
      regexp2.reinit();
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      Parser.subarray(regexpArray0, 8518, 8518);
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      Regexp regexp4 = Parser.parse("[!-#%-*,-/:-;?-@[-]_{}\u00A1\u00AB\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589-\u058A\u05BE\u05C0\u05C3\u05C6\u05F3-\u05F4\u0609-\u060A\u060C-\u060D\u061B\u061E-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964-\u0965\u0970\u0DF4\u0E4F\u0E5A-\u0E5B\u0F04-\u0F12\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9-\u0FDA\u104A-\u104F\u10FB\u1361-\u1368\u1400\u166D-\u166E\u169B-\u169C\u16EB-\u16ED\u1735-\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944-\u1945\u1A1E-\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E-\u1C7F\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D-\u207E\u208D-\u208E\u2329-\u232A\u2768-\u2775\u27C5-\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC-\u29FD\u2CF9-\u2CFC\u2CFE-\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E31\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE-\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE-\uA8CF\uA8F8-\uA8FA\uA92E-\uA92F\uA95F\uA9C1-\uA9CD\uA9DE-\uA9DF\uAA5C-\uAA5F\uAADE-\uAADF\uABEB\uFD3E-\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A-\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A-\uFF1B\uFF1F-\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65\uD800\uDD00-\uD800\uDD01\uD800\uDF9F\uD800\uDFD0\uD802\uDC57\uD802\uDD1F\uD802\uDD3F\uD802\uDE50-\uD802\uDE58\uD802\uDE7F\uD802\uDF39-\uD802\uDF3F\uD804\uDC47-\uD804\uDC4D\uD804\uDCBB-\uD804\uDCBC\uD804\uDCBE-\uD804\uDCC1\uD809\uDC70-\uD809\uDC73](?-s:.)(?i:])", 1373);
      assertFalse(regexp4.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP.]", (-543));
      Regexp regexp1 = Parser.parse("pP.]", (-543));
      Parser.parse("pP.]", 7);
      Parser.parse("Inscriptional_Pahlavi", 3631);
      Regexp regexp2 = Parser.parse("<", 95);
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      regexp2.op = regexp_Op0;
      Regexp regexp3 = new Regexp(regexp2);
      Parser.parse("<", 690);
      Parser.parse("pP.]", (-1828));
      Regexp regexp4 = Parser.parse("<", 3631);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp4;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3642, 3631);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp regexp0 = Parser.parse("F0D,B-EmD|G", (-1148));
      regexp0.cap = (-1148);
      Parser.parse("{/p[=m]m|v", (-1148));
      try { 
        Parser.parse("[:l}TtpD", 2384);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:l}TtpD`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      Parser.parse("", (-827));
      Parser.parse("", (-827));
      Parser.parse("", (-827));
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Parser.parse("", (-827));
      Parser.parse("", (-827));
      int int0 = (-1576);
      Parser.parse("", (-1576));
      Parser.parse("S", (-827));
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 38);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp regexp0 = Parser.parse("com.google.re2j.Parser$Pair", 128);
      Regexp regexp1 = Parser.parse("com.google.re2j.Parser$Pair", 128);
      Regexp regexp2 = Parser.parse("L@DqA yG}TepD", 2684);
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp1;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 2684, 2684);
      assertEquals(0, regexpArray1.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[1] = regexp2;
      String string0 = "[:-/Vx{<";
      int int0 = 2753;
      try { 
        Parser.parse("[:-/Vx{<", 2753);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-/`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Z,\"/d8oC_64I5&Z!", (-1140));
      regexp0.cap = (-1140);
      Parser.parse("Z,\"/d8oC_64I5&Z!", 57);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Parser.parse("[:x00-x{10FFFF}]", 57);
      Parser.parse("invalid character class", 48);
      Parser.parse(".", 11);
      Parser.parse("invalid character class", (-1140));
      Regexp regexp3 = Parser.parse("", (-496));
      assertFalse(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-3724);
      Parser.parse("Myanmar", (-3724));
      String string0 = "\\.+*?()|[]{}^$";
      Parser.parse("Myanmar", (-288));
      Parser.parse(".+*?()|[]{}^$", 954);
      int int1 = 52;
      try { 
        Parser.parse(".+*?()|[]{}^$", 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]{}^$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp regexp0 = Parser.parse("fWA.C{KMB:BD#Ag", 128591);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      regexp0.subs = regexpArray0;
      Regexp regexp3 = new Regexp(regexp0);
      Parser.parse("|", 1993);
      Regexp regexp4 = new Regexp(regexp0);
      Parser.parse("|", 128591);
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp6 = new Regexp(regexp_Op1);
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      Regexp[] regexpArray2 = Regexp.EMPTY_SUBS;
      assertFalse(regexpArray2.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Parser.parse("com.google.re2j.Parser$Pair", 128);
      String string0 = "L[.\\DqA \"l}TtpD";
      Parser.parse("com.google.re2j.Parser$Pair", 128);
      int int0 = 3972;
      String string1 = "LG<|]Dm`W3-N";
      String string2 = "P";
      int int1 = 64;
      Parser.parse("P", 64);
      int int2 = 127;
      try { 
        Parser.parse("L[.DqA \"l}TtpD", 2684);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[.DqA \"l}TtpD`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "";
      Regexp regexp0 = Parser.parse("", (-1889));
      int int0 = 3193;
      Parser.parse("0|N?'hEjzW@k", 3193);
      Object object0 = new Object();
      regexp0.equals("");
      Parser.parse("?[<|73M%", (-1889));
      Parser.parse("x{", 2406);
      Regexp regexp1 = new Regexp(regexp0);
      String string1 = "z`uxNb7{t\\bZ7)`V4X)";
      int int1 = (-12);
      try { 
        Parser.parse("z`uxNb7{t\bZ7)`V4X)", (-12));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", (-827));
      Parser.parse("", (-827));
      Regexp regexp1 = Parser.parse("", (-827));
      Regexp regexp2 = Parser.parse("c{/", (-827));
      regexp2.equals("c{/");
      Parser.parse("", (-827));
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      regexp0.op = regexp_Op0;
      Regexp regexp3 = new Regexp(regexp2);
      Regexp regexp4 = Parser.parse("c{/", (-827));
      Parser.parse("<PSZ{9W z1M.KC", 3320);
      Parser.parse("c{/", 2211);
      Parser.parse("Zsh#jZiaLck&A+Wqv", (-1));
      Regexp regexp5 = new Regexp(regexp0.op);
      regexp4.reinit();
      assertFalse(regexp4.equals((Object)regexp3));
      
      Parser.parse("2", 114);
      Regexp regexp6 = Parser.parse("", (-2094));
      assertFalse(regexp6.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("fWA.C{KMB:BD#Ag", 36);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("com.google.re2j.Parser", 850);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      Parser.parse("com.google.re2j.Parser", (-3001));
      Regexp regexp5 = Parser.parse("@pq(T$8@:$N>:)-KRn#", 508);
      Parser.parse("fWA.C{KMB:BD#Ag", 3522);
      Regexp regexp6 = Parser.parse("@pq(T$8@:$N>:)-KRn#", 36);
      Regexp regexp7 = Parser.parse("@pq(T$8@:$N>:)-KRn#", 34);
      assertFalse(regexp7.equals((Object)regexp6));
      
      regexp6.reinit();
      assertFalse(regexp6.equals((Object)regexp5));
      
      Parser.parse("", (-1631));
      Regexp regexp8 = Parser.parse("kENZZ6Mh`%qCbY&", (-2731));
      assertFalse(regexp8.equals((Object)regexp6));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("fWA.C{KMB:BD#Ag", 36);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("com.google.re2j.Parser", 850);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp2);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("|", 36);
      Regexp regexp7 = new Regexp(regexp6);
      regexpArray0[5] = regexp7;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp8 = new Regexp(regexp_Op0);
      regexpArray0[6] = regexp8;
      Regexp regexp9 = new Regexp(regexp_Op0);
      regexpArray0[7] = regexp9;
      Regexp regexp10 = new Regexp(regexp5);
      regexpArray0[8] = regexp10;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 277, 36);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-]", 521);
      Parser.parse("-]", (-3505));
      Parser.parse("Ppqd'", (-3505));
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("-]", 462);
      Parser.parse("missing closing ]", 909);
      Regexp regexp3 = new Regexp(regexp1);
      Regexp regexp4 = new Regexp(regexp2);
      Parser.parse("missing closiQg ]", (-3505));
      Parser.parse("/V", 0);
      Regexp regexp5 = Parser.parse("K|Q", 11513);
      assertFalse(regexp5.equals((Object)regexp3));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Parser.parse("p.]", (-2722));
      Regexp regexp0 = Parser.parse("p.]", 42);
      regexp0.toString();
      Regexp regexp1 = Parser.parse("h`k>g}94OL", 64);
      Regexp regexp2 = new Regexp(regexp0);
      Parser.parse("[^x00-x{10FFFF}]", 64);
      Parser.parse("KB;E", 0);
      Regexp regexp3 = new Regexp(regexp2);
      Parser.parse("KB;E", 68);
      Regexp regexp4 = Parser.parse("Meetei_Mayek", 92);
      assertFalse(regexp4.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-]", 521);
      Parser.parse("-]", (-3505));
      Parser.parse("Ppqd'", (-3505));
      Regexp regexp1 = new Regexp(regexp0);
      Parser.parse("P`k>g}94OL", (-3505));
      Parser.parse("&P6STv[-/Vx{<", 462);
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = new Regexp(regexp2);
      Parser.parse("'jb,s9.|ImyyhMM7Mc", 12830);
      Parser.parse("missing closing ]", 12830);
      try { 
        Parser.parse("&P6STv[-/Vx{<", 1953);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-/Vx{<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("0|N?'hEjzW@k", (-947));
      Regexp regexp1 = Parser.parse("0|N?'hEjzW@k", 3193);
      regexp0.max = 41;
      regexpArray0[4] = regexp1;
      Parser.parse("0|N?'hEjzW@k", (-947));
      Regexp regexp2 = new Regexp(regexp0);
      Parser.parse("\t", 3193);
      Regexp regexp3 = Parser.parse("missing closing ]", 93);
      Regexp regexp4 = new Regexp(regexp3);
      Parser.parse("p", (-1394));
      Regexp regexp5 = Parser.parse("(?(d", (-17));
      assertFalse(regexp5.equals((Object)regexp3));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 81;
      Regexp regexp0 = Parser.parse("1{", 81);
      Regexp regexp1 = Parser.parse("1{", 81);
      Regexp regexp2 = Parser.parse("1{", 81);
      Regexp[] regexpArray0 = new Regexp[9];
      regexp0.subs = regexpArray0;
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexp1.subs = regexp0.subs;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp2;
      regexpArray0[8] = regexp1;
      regexp0.equals(regexp1);
      int int1 = (-816);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 81, (-816));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Parser.parse("ANY_CHAR", (-7));
      Parser parser0 = new Parser("ANY_CHAR", 0);
      Parser.parse("ANY_CHAR", 0);
      Regexp regexp0 = Parser.parse("ANY_CHAR", 62);
      Regexp regexp1 = Parser.parse("ANY_CHAR", 11802);
      Parser.parse("ANY_CHAR", (-7));
      Regexp regexp2 = new Regexp(regexp1);
      Parser.parse("I\"uDT%b?DYtW", 3);
      Regexp regexp3 = new Regexp(regexp0);
      Parser.parse("ANY_CHAR", (-1));
      Parser.parse("z", 69);
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 0, 2856);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp regexp0 = Parser.parse("v`k>g}94OL", 209);
      Regexp regexp1 = Parser.parse("i", 66);
      Parser.parse("v`k>g}94OL", 113);
      Regexp regexp2 = Parser.parse("F{tsnn/O", 209);
      Regexp regexp3 = Parser.parse("<'ZX,@R\f,S5NZBb7", 113);
      Parser.parse("i", 66);
      Parser.parse("i", 67592);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      Regexp regexp4 = Parser.parse("aNC}}`j^M{_s5y<xno", 66);
      assertFalse(regexp4.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      String string0 = "Dhp.s";
      Regexp regexp2 = Parser.parse("Dhp.s", 114);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      int[] intArray0 = new int[4];
      regexp2.flags = 114;
      intArray0[0] = 114;
      intArray0[1] = 114;
      intArray0[2] = 8165;
      intArray0[3] = 114;
      regexp3.runes = intArray0;
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp4;
      regexp4.equals(regexp0);
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp5;
      Parser.subarray(regexpArray0, (-953), (-953));
      Parser.parse("x{", 41);
      int int0 = 4373;
      Parser.parse(string0, int0);
      String string1 = "ac";
      int int1 = 2073;
      Regexp regexp6 = Parser.parse(string1, int1);
      assertFalse(regexp6.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Myanmar", 954);
      Parser.parse("Myanmar", (-3724));
      Regexp[] regexpArray0 = regexp0.subs;
      Parser.parse("(?-:.)", 954);
      try { 
        Parser.parse(".+*?()|[]{}^$", (-3724));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "\\Pd'";
      int int0 = 954;
      Parser.parse("Pd'", 954);
      try { 
        Parser.parse("(?-:.)", (-3724));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 0, 7);
      assertNotSame(regexpArray1, regexpArray0);
      assertEquals(7, regexpArray1.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 954;
      Parser.parse("Pqd'", 954);
      Regexp regexp0 = Parser.parse("(?-s:.)", (-3724));
      Regexp[] regexpArray0 = regexp0.subs;
      try { 
        Parser.parse("(?", 6365);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Parser.parse("v`k>g}94OL", 209);
      Regexp regexp0 = Parser.parse(":]", 209);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      Parser.parse("v`k>g}94OL", (-1045));
      Parser.parse("[:", 427);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Parser.parse("PE", 91);
      Regexp regexp0 = Parser.parse("iwl&D>C3=5d/\n2^", 209);
      Parser.parse("t*VC\"", 91);
      Regexp[] regexpArray0 = new Regexp[11];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2060), 96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Regexp regexp0 = Parser.parse("2a.x01~O'0#n", (-2270));
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.min = 49;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-2270), (-2270));
      Regexp[] regexpArray2 = Parser.subarray(regexpArray1, (-2270), (-2270));
      Regexp regexp1 = Parser.parse("2a.x01~O'0#n", 49);
      regexp1.equals("2a.x01~O'0#n");
      String string0 = "invalid character class range";
      Parser.parse("|qlJWmc", 49);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray2, 918, 1502);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Regexp regexp0 = Parser.parse("2a.x01~O'0#n", (-2260));
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.min = 49;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-2260), (-2260));
      Parser.subarray(regexpArray1, (-2260), (-2260));
      regexp0.toString();
      Parser.subarray(regexpArray1, 2543, 2543);
      String string0 = ".$";
      Parser.parse(".$", (-2260));
      Regexp[] regexpArray2 = new Regexp[1];
      regexpArray2[0] = regexp0;
      regexp0.subs = regexpArray2;
      int int0 = (-543);
      Regexp regexp1 = Parser.parse("pP.]", (-543));
      Regexp[] regexpArray3 = new Regexp[4];
      regexp1.max = (-2260);
      regexpArray3[0] = regexp1;
      Regexp regexp2 = Parser.parse("2a.x01~O'0#n", 2543);
      regexpArray3[1] = regexp2;
      regexpArray3[2] = regexp0;
      regexpArray3[3] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray3, 18, 2543);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      String string0 = "\\";
      int int0 = 10749;
      Regexp regexp0 = Parser.parse("", 10749);
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.cap = int0;
      int int1 = (-1575);
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      regexp0.op = regexp_Op0;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.\\
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = (-2722);
      Regexp regexp0 = Parser.parse("S{Ru*}AZlNI", (-2722));
      String string0 = "h\\`k>g}94OL";
      regexp0.toString();
      String string1 = "\\p.]";
      Parser.parse("p.]", (-2722));
      Parser.parse("%cPf1d!.vi", (-212));
      int int1 = 16;
      Parser.parse(string0, int1);
      String string2 = null;
      int int2 = 102;
      // Undeclared exception!
      try { 
        Parser.parse(string2, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 0;
      Regexp regexp0 = Parser.parse("", (-827));
      Parser.parse("", (-827));
      Parser.parse("", (-878));
      Parser.parse("", 41);
      Regexp regexp1 = Parser.parse("c{/", (-827));
      Regexp regexp2 = Parser.parse("", (-827));
      int int1 = (-3613);
      Regexp regexp3 = Parser.parse("pl40'p.$.]", 4080);
      String string0 = "[:l40'p.$.]";
      Parser.parse(string0, int1);
      int[] intArray0 = new int[0];
      regexp3.runes = intArray0;
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Parser.parse("0|N?'hEjzW@k", (-947));
      Regexp regexp0 = Parser.parse("0|N?'hEjzW@k", 3193);
      regexpArray0[4] = regexp0;
      Regexp regexp1 = Parser.parse("uvQnSvp 0", (-3613));
      Parser.parse("[^x00-x{10FFFF}]", (-947));
      Regexp[] regexpArray1 = new Regexp[1];
      regexpArray1[0] = regexp1;
      int int0 = 512;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, (-3613), 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Parser.parse("Arabic", 91);
      Regexp regexp0 = Parser.parse("VvD4=AwEKJEIE9ThX", 66639);
      Parser.parse("VvD4=AwEKJEIE9ThX", 66639);
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, 91, 91);
      Parser.parse("[:^space:]", 1997);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 980, 66639);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Parser parser0 = new Parser("sS=C';#-cj", (-3724));
      int int0 = (-3099);
      String string0 = "\\pP0'p.$.]";
      int int1 = (-770);
      Parser.parse("pP0'p.$.]", (-770));
      String string1 = "t*z2^Z3N;s{3Qf]9pS[";
      int int2 = 1004;
      try { 
        Parser.parse("t*z2^Z3N;s{3Qf]9pS[", 1004);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Parser.parse("Ppqd'", 954);
      Regexp regexp0 = Parser.parse("(?-s:.)", (-3724));
      Regexp[] regexpArray0 = regexp0.subs;
      Regexp regexp1 = new Regexp(regexp0);
      Parser.parse("Ppqd'", (-1378));
      Regexp regexp2 = Parser.parse("(?-s:.)", 1992);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", 209);
      Parser parser0 = new Parser("C", 209);
      Parser.parse("Jk3[l40'p.$.]", 209);
      Parser.parse("^5kiQz(cRFaAMq!wLN", 91);
      Regexp regexp1 = Parser.parse("(?(N", 91);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      try { 
        Parser.parse("vA?*pvu~L yj<l=!xY$", 2288);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `?*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 220;
      try { 
        Parser.parse("wwDb^,2q:Bl(fgj{M.", 220);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `wwDb^,2q:Bl(fgj{M.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 209;
      String string0 = "\\P";
      Regexp regexp0 = Parser.parse("P", 209);
      String string1 = "Tagbanwa";
      Regexp regexp1 = new Regexp(regexp0);
      String string2 = "MuXOVHk)4,V";
      Parser parser0 = new Parser(string0, int0);
      Parser.parse(string1, int0);
      int int1 = 45;
      try { 
        Parser.parse(string2, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Parser.parse("Arabic", 91);
      Regexp regexp0 = Parser.parse("VvD4=AwEKJEIE9ThX", 66639);
      Parser.parse("VvD4=AwEKJEIE9ThX", 66639);
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, 91, 91);
      Parser.parse("Arabic", 91);
      Parser.parse("Arabic", 91);
      Regexp regexp1 = Parser.parse("p`k>g}94OL", 77);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = ",DeaF_SPm_(or";
      Parser parser0 = new Parser(",DeaF_SPm_(or", (-2654));
      int int0 = 54;
      String string1 = "u'lHlDO^:66`[a_";
      try { 
        Parser.parse("u'lHlDO^:66`[a_", 49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[a_`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "+";
      int int0 = 284;
      Parser parser0 = new Parser("+", 284);
      int int1 = (-3099);
      try { 
        Parser.parse("+", (-3099));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "";
      Parser parser0 = new Parser("", 283);
      Regexp[] regexpArray0 = new Regexp[9];
      Parser.parse("En^|^", 0);
      Parser.parse("", 0);
      Parser.parse("2PGXvuFOF", (-336));
      try { 
        Parser.parse("(?P<(?(", (-336));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 464;
      Parser.parse("invalid or unsupported Perl syntax", 464);
      Parser parser0 = new Parser("invalid or unsupported Perl syntax", 464);
      try { 
        Parser.parse("(?P<(?(", 464);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "w5!;Ci9X ?%[!nZ!";
      Parser parser0 = new Parser("w5!;Ci9X ?%[!nZ!", (-232));
      Parser.parse("L,D8i/s,3U|&%rau", 45);
      String string1 = "regexp/syntax: internal error";
      try { 
        Parser.parse("w5!;Ci9X ?%[!nZ!", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[!nZ!`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = "(?(";
      int int0 = 209;
      try { 
        Parser.parse("(?(", 209);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "w5!;Ci9X ?%[!nZ!";
      int int0 = (-232);
      Parser parser0 = new Parser("w5!;Ci9X ?%[!nZ!", (-232));
      Parser.parse("regexp/syntax: internal error", (-232));
      try { 
        Parser.parse("w5!;Ci9X ?%[!nZ!", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[!nZ!`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Regexp regexp0 = Parser.parse("invalid or unsupported Perl syntax", 464);
      Parser parser0 = new Parser("invalid or unsupported Perl syntax", 464);
      Regexp regexp1 = Parser.parse("^o<z5^|MUYh/_uZ", 464);
      Parser.parse("", 464);
      Parser.parse("#voM?E VM+pj", 0);
      Parser.parse("invalid or unsupported Perl syntax", 464);
      Regexp regexp2 = Parser.parse("invalid or unsupported Perl syntax", 0);
      Parser.parse("#voM?E VM+pj", 0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp2;
      Parser.subarray(regexpArray0, 0, 0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-858), (-3684));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "";
      int int0 = (-827);
      Parser parser0 = new Parser("", (-827));
      Parser.parse("", 0);
      Parser.parse("", (-827));
      Parser.parse("", (-827));
      Parser.parse("", (-878));
      Parser.parse("", 41);
      String string1 = "c{/";
      Parser.parse("c{/", (-827));
      Parser.parse("", (-827));
      String string2 = null;
      int int1 = (-3281);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-3281));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = "+zt\">-XwX-VE4RV";
      int int0 = (-942);
      Parser parser0 = new Parser("+zt\">-XwX-VE4RV", (-942));
      Parser.parse("$.H|zoFwLn'::Y.3>", 12336);
      Parser.parse("+zt\">-XwX-VE4RV", (-942));
      Parser.parse("+zt\">-XwX-VE4RV", (-942));
      Parser.parse("+zt\">-XwX-VE4RV", (-942));
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Lo", 0);
      Parser.parse("R?>v", 0);
      Regexp regexp1 = Parser.parse("R?>v", 0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Parser.subarray((Regexp[]) null, 0, 0);
      Parser.subarray((Regexp[]) null, 0, 0);
      Parser parser0 = new Parser("R?>v", (-1415));
      Parser.parse("", (-1415));
      Regexp regexp2 = Parser.parse("", 0);
      Regexp regexp3 = Parser.parse("R?>v", 10100);
      Regexp regexp4 = Parser.parse("R?>v", 0);
      assertFalse(regexp4.equals((Object)regexp3));
      
      Regexp regexp5 = Parser.parse("", (-305));
      assertFalse(regexp5.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = "?E;1zt.";
      int int0 = (-2);
      Parser.parse("?E;1zt.", (-2));
      int int1 = 0;
      Parser parser0 = new Parser("?E;1zt.", 0);
      try { 
        Parser.parse("?E;1zt.", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      int int0 = 97;
      Parser.parse("Any", 97);
      Parser parser0 = new Parser("OP?T9@2LW\"", 97);
      String string0 = "missing closing )";
      try { 
        Parser.parse("missing closing )", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Parser parser0 = new Parser("", 283);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("", 283);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("Jd0$ L*r1+n|L", 0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("Jd0$ L*r1+n|L", 0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("invalid nested repetition operator", 0);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp3);
      regexpArray0[7] = regexp7;
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      Regexp regexp8 = new Regexp(regexp_Op2);
      regexpArray0[8] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 65535, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      int int0 = 0;
      try { 
        Parser.parse("(?P<", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("n^0-J<u#Ze", 0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp0);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp_Op1);
      regexpArray0[6] = regexp6;
      Regexp.Op regexp_Op2 = Regexp.Op.QUEST;
      Regexp regexp7 = new Regexp(regexp_Op2);
      regexpArray0[7] = regexp7;
      Regexp.Op regexp_Op3 = Regexp.Op.CONCAT;
      Regexp regexp8 = new Regexp(regexp_Op3);
      regexpArray0[8] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2842, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      String string0 = "[:";
      int int0 = 64;
      try { 
        Parser.parse("[:", 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      int int0 = 209;
      try { 
        Parser.parse("wwDb^,2q:Bl(fgj{M.", 209);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `wwDb^,2q:Bl(fgj{M.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Parser parser0 = new Parser("Qp.B<B6@", (-2654));
      Parser.parse("!(g<`:odAK{V6)e", 54);
      Parser.parse("-m5jf\"<", 65479);
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, (-2654), (-2654));
      String string0 = "RI!1-P16RSD</2&(9";
      try { 
        Parser.parse("RI!1-P16RSD</2&(9", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `RI!1-P16RSD</2&(9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("4qP", 0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("4qP", 0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("4qP", 0);
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[5] = regexp6;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      int int0 = (-194);
      Regexp regexp0 = Parser.parse("vA?*pvu~L yj<l=!xY$", (-194));
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp1;
      regexp1.toString();
      int int1 = 0;
      Regexp regexp2 = Parser.parse("h`k>g}94OL", 0);
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-194), (-3030));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("xb0;2@z", 2026);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("xb0;2@z", 2026);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp1.toString();
      regexp3.cap = 2026;
      regexpArray0[3] = regexp3;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 2026, 2026);
      String string0 = "";
      Parser parser0 = new Parser("", 0);
      Parser.parse("xb0;2@z", 68608);
      Regexp[] regexpArray2 = Parser.subarray(regexpArray1, 11804, 11804);
      Parser.subarray(regexpArray0, 0, 0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray2, 109, 2026);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
