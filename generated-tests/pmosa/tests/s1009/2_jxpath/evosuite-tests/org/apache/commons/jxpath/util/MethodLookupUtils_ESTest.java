/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:08:09 GMT 2018
 */

package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.util.MethodLookupUtils;
import org.apache.commons.jxpath.util.TypeConverter;
import org.apache.commons.jxpath.util.TypeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodLookupUtils_ESTest extends MethodLookupUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "valueOf";
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "notil]y";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "notil]y";
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, "notil]y", objectArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"notil]y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[0];
      MethodLookupUtils.lookupMethod(class0, "Ambigous constructor ", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class1 = Object.class;
      Constructor constructor0 = MethodLookupUtils.lookupConstructor(class1, objectArray0);
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Class<Object> class0 = Object.class;
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, "", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) class0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) class0;
      MethodLookupUtils.lookupMethod(class0, (String) null, objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupConstructor(class2, objectArray0);
      Class<String> class3 = String.class;
      MethodLookupUtils.lookupMethod(class3, "&6{\"-u:{yQuG(K!", objectArray0);
      Class<Object> class4 = Object.class;
      Method method0 = MethodLookupUtils.lookupStaticMethod(class4, (String) null, objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[0];
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class1, "e1o9", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class1, "e1o9", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      MethodLookupUtils.lookupMethod(class0, "vC[/L&>op vxP", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "e1o9", objectArray0);
      Class<String> class2 = String.class;
      MethodLookupUtils.lookupMethod(class2, "", objectArray0);
      Class<String> class3 = String.class;
      MethodLookupUtils.lookupConstructor(class3, objectArray0);
      Class<Object> class4 = Object.class;
      Object[] objectArray1 = new Object[0];
      Method method0 = MethodLookupUtils.lookupStaticMethod(class4, "", objectArray1);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) methodLookupUtils0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "getBytes", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "length";
      Method method0 = MethodLookupUtils.lookupMethod(class0, "length", objectArray0);
      assertEquals("public int java.lang.String.length()", method0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) methodLookupUtils0;
      objectArray0[2] = (Object) "Ambigous method call: ";
      objectArray0[3] = (Object) "Ambigous method call: ";
      objectArray0[4] = (Object) "Ambigous method call: ";
      MethodLookupUtils.lookupStaticMethod(class0, "Ambigous method call: ", objectArray0);
      Class<String> class1 = String.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      Class<Object> class2 = Object.class;
      Object[] objectArray1 = new Object[1];
      Object object0 = new Object();
      objectArray1[0] = object0;
      MethodLookupUtils.lookupStaticMethod(class2, "Ambigous method call: ", objectArray1);
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = object0;
      objectArray2[1] = (Object) class0;
      objectArray2[2] = (Object) class0;
      objectArray2[3] = object0;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) methodLookupUtils0;
      objectArray2[6] = (Object) null;
      objectArray2[7] = (Object) null;
      MethodLookupUtils.lookupMethod(class2, "", objectArray2);
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Object[] objectArray3 = new Object[5];
      objectArray3[0] = (Object) "bl?uXU:b)G@n3";
      objectArray3[1] = (Object) null;
      objectArray3[2] = (Object) "Ambigous method call: ";
      objectArray3[3] = (Object) null;
      Object object1 = new Object();
      objectArray3[4] = object1;
      Method method0 = MethodLookupUtils.lookupMethod(class1, "bl?uXU:b)G@n3", objectArray3);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class1 = Object.class;
      Object[] objectArray0 = new Object[1];
      MethodLookupUtils.lookupStaticMethod(class0, "reverseBytes", objectArray0);
      Method method0 = MethodLookupUtils.lookupMethod(class1, "reverseBytes", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      MethodLookupUtils.lookupMethod(class0, "length", objectArray0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class1, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous constructor [null]
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[0];
      MethodLookupUtils.lookupMethod(class0, "", objectArray0);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupMethod(class1, "", objectArray0);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupMethod(class2, "", objectArray0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) class1;
      objectArray1[1] = (Object) class2;
      objectArray1[2] = (Object) "";
      objectArray1[3] = (Object) null;
      objectArray1[4] = (Object) class0;
      MethodLookupUtils.lookupConstructor(class0, objectArray1);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(typeConverter0).canConvert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      MethodLookupUtils.lookupMethod(class2, "", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class2, "", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "", objectArray0);
      Class<Object> class3 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class3, ">W&c-L>p{w/", objectArray0);
      Class<Object> class4 = Object.class;
      MethodLookupUtils.lookupMethod(class4, "", objectArray0);
      Class<String> class5 = String.class;
      MethodLookupUtils.lookupConstructor(class5, objectArray0);
      Class<String> class6 = String.class;
      MethodLookupUtils.lookupMethod(class6, "", objectArray1);
      Class<String> class7 = String.class;
      Method method0 = MethodLookupUtils.lookupMethod(class7, (String) null, objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      MethodLookupUtils.lookupStaticMethod(class0, "bitCount", (Object[]) null);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) class0;
      MethodLookupUtils.lookupStaticMethod(class0, "ucO N", objectArray0);
      MethodLookupUtils.lookupMethod(class0, "ucO N", objectArray0);
      Class<Object> class1 = Object.class;
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) null;
      MethodLookupUtils.lookupConstructor(class1, objectArray1);
      Class<String> class2 = String.class;
      Class<String> class3 = String.class;
      MethodLookupUtils.lookupStaticMethod(class3, "format", objectArray0);
      Class<String> class4 = String.class;
      Class<Object> class5 = Object.class;
      MethodLookupUtils.lookupConstructor(class5, objectArray1);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class6 = Object.class;
      MethodLookupUtils.lookupMethod(class6, "format", objectArray0);
      MethodLookupUtils.lookupMethod(class4, "concat", objectArray1);
      MethodLookupUtils.lookupStaticMethod(class2, "contains", objectArray0);
      MethodLookupUtils.lookupConstructor(class5, objectArray1);
      Class<String> class7 = String.class;
      MethodLookupUtils.lookupConstructor(class7, objectArray0);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class3, objectArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous constructor [null, null]
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "notify";
      objectArray0[1] = (Object) class0;
      MethodLookupUtils.lookupMethod(class0, "notify", objectArray0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class1, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "valueOf";
      Class<Integer> class0 = Integer.class;
      MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      MethodLookupUtils.lookupMethod(class0, "notify", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class1, "notify", (Object[]) null);
      MethodLookupUtils.lookupConstructor(class0, (Object[]) null);
      Class<String> class2 = String.class;
      Method method0 = MethodLookupUtils.lookupMethod(class2, "codePointAt", (Object[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "notify";
      Class<String> class0 = String.class;
      MethodLookupUtils.lookupMethod(class0, "notify", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, "getBytes", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: getBytes
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "concat";
      Class<Object> class0 = Object.class;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "concat", objectArray0);
      assertFalse(method0.isBridge());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "lastIndexOf";
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, "compareTo", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: compareTo
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Integer> class0 = Integer.class;
      MethodLookupUtils.lookupStaticMethod(class0, "parseInt", objectArray0);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: valueOf
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "lenth";
      Class<String> class0 = String.class;
      MethodLookupUtils.lookupMethod(class0, "lenth", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "Describing bean: ", objectArray0);
      Class<String> class1 = String.class;
      Object[] objectArray1 = new Object[5];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "Describing bean: ";
      objectArray1[2] = (Object) "lenth";
      objectArray1[3] = (Object) "Describing bean: ";
      Object object1 = new Object();
      objectArray1[4] = object1;
      MethodLookupUtils.lookupConstructor(class1, objectArray1);
      Object[] objectArray2 = new Object[2];
      objectArray2[0] = object1;
      objectArray2[1] = object0;
      MethodLookupUtils.lookupMethod(class0, "valueOf", objectArray2);
      Method method0 = MethodLookupUtils.lookupStaticMethod(class1, "lenth", objectArray0);
      assertNull(method0);
  }
}
