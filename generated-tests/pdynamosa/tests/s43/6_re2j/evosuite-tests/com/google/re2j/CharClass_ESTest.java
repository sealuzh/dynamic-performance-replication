/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 07:19:53 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[6][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int int0 = (-290);
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, (-290));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 393;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1011;
      intArray0[1] = 0;
      intArray0[2] = 2496;
      intArray0[3] = (-623);
      intArray0[4] = 1680;
      intArray0[5] = 0;
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1011, 0, 2496, (-623), 1680, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, (-1646));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1011, 0, 2496, (-623), 1680, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][2];
      int[] intArray1 = new int[8];
      intArray1[1] = 4148;
      intArray1[2] = 0;
      intArray1[3] = (-2855);
      intArray1[4] = (-86);
      intArray1[5] = 0;
      intArray1[6] = 1;
      intArray1[7] = (-5322);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1627;
      intArray2[1] = (-2855);
      intArray2[2] = 1627;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray1, (-2855));
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {0, 4148, 0, (-2855), (-86), 0, 1, (-5322)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = 0;
      CharClass charClass4 = charClass2.appendClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass2.appendClassWithSign(intArray0, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = (-2703);
      CharClass charClass6 = charClass5.appendFoldedRange(0, (-2703));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertNotNull(charClass6);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass7 = charClass5.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertNotNull(charClass7);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass8 = charClass7.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertNotNull(charClass8);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[9][7];
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = (-2703);
      intArray2[2] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass8.appendClassWithSign(intArray2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4155;
      intArray0[1] = 1967;
      intArray0[2] = 2146;
      intArray0[3] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {4155, 1967, 2146, 32}, intArray0);
      
      int[][] intArray1 = new int[6][6];
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      String string0 = CharClass.charClassToString(intArray0, 4);
      assertNotSame(intArray0, intArray2);
      assertNotNull(string0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals("[0x103b-0x7af 0x862-0x20]", string0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {4155, 1967, 2146, 32}, intArray0);
      
      intArray2[0] = 32;
      intArray2[1] = 4155;
      intArray2[2] = 32;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 32;
      intArray3[1] = 4155;
      intArray3[2] = 32;
      intArray3[3] = 4155;
      intArray3[4] = 1967;
      intArray3[5] = 32;
      intArray3[6] = 1967;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 1751);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {4155, 1967, 2146, 32}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral(32, 32);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {4155, 1967, 2146, 32}, intArray0);
      
      String string1 = charClass2.toString();
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(string1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {4155, 1967, 2146, 32}, intArray0);
      
      int[] intArray4 = charClass1.toArray();
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotNull(intArray4);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(522, intArray4.length);
      assertArrayEquals(new int[] {4155, 1967, 2146, 32}, intArray0);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray4));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {4155, 1967, 2146, 32}, intArray0);
      
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray4));
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {4155, 1967, 2146, 32}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 32;
      int int0 = 3499;
      intArray0[1] = 3499;
      int int1 = (-1571);
      intArray0[2] = (-1571);
      String string0 = CharClass.charClassToString(intArray0, (-1445));
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {32, 3499, (-1571)}, intArray0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {32, 3499, (-1571)}, intArray0);
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 65;
      intArray0[0] = 65;
      int int1 = 483;
      intArray0[1] = 483;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {65, 483}, intArray0);
      
      int[][] intArray1 = new int[0][9];
      CharClass charClass1 = charClass0.appendFoldedRange(65, 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {65, 483}, intArray0);
      
      int int2 = 0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {65, 483}, intArray0);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2048;
      intArray0[1] = 0;
      intArray0[2] = (-620);
      intArray0[3] = (-2126);
      intArray0[4] = 457;
      intArray0[5] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2048, 0, (-620), (-2126), 457, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, (-620));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2048, 0, (-620), (-2126), 457, 0}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2048, 0, (-620), (-2126), 457, 0}, intArray0);
      
      int[][] intArray1 = new int[0][0];
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 457);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {2048, 0, (-620), (-2126), 457, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1611;
      intArray0[1] = 371;
      intArray0[2] = (-964);
      intArray0[3] = 65381;
      intArray0[4] = (-2168);
      intArray0[5] = 0;
      intArray0[6] = 66639;
      intArray0[7] = 0;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1611, 371, (-964), 65381, (-2168), 0, 66639, 0}, intArray0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign((int[][]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][4];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass0.appendLiteral(2383, 1841);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendRange(43609, 43609);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[3];
      intArray1[0] = 9;
      intArray1[1] = 43609;
      intArray1[2] = 9;
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 93;
      intArray0[1] = (-2);
      intArray0[2] = (-16);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {93, (-2), (-16)}, intArray0);
      
      int int0 = (-1689);
      CharClass charClass1 = charClass0.appendLiteral((-1689), (-16));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {93, (-2), (-16)}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[3][2];
      int[] intArray1 = new int[8];
      intArray1[0] = 1627;
      intArray1[1] = 4148;
      intArray1[2] = 0;
      intArray1[3] = (-2855);
      intArray1[4] = (-86);
      intArray1[5] = 0;
      intArray1[6] = 1;
      intArray1[7] = (-5322);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1627;
      intArray2[1] = (-2855);
      intArray2[2] = 1627;
      intArray2[3] = 1627;
      intArray2[4] = (-2855);
      intArray2[5] = 1;
      intArray2[6] = (-86);
      intArray2[7] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-2855);
      intArray0[2] = intArray3;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[3][2];
      int[] intArray1 = new int[8];
      intArray1[0] = 1627;
      intArray1[1] = 4148;
      intArray1[2] = 0;
      intArray1[3] = (-2855);
      intArray1[4] = (-86);
      intArray1[5] = 0;
      intArray1[6] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1627;
      intArray2[1] = (-2855);
      intArray2[2] = 1627;
      intArray2[3] = 1627;
      intArray2[4] = (-2855);
      intArray2[5] = 1;
      intArray2[6] = (-86);
      intArray2[7] = 0;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-2441));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(1690, 1690);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[0][3];
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[9];
      intArray1[0] = 1690;
      intArray1[1] = 1690;
      intArray1[2] = 1690;
      intArray1[3] = 1690;
      intArray1[4] = 1690;
      intArray1[5] = 1690;
      intArray1[6] = 1690;
      intArray1[7] = 1690;
      intArray1[8] = 65664;
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign(intArray1, 1690);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 5792;
      intArray0[1] = (-2176);
      intArray0[2] = 6443;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {5792, (-2176), 6443, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(5792, 416);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {5792, (-2176), 6443, 0}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 5791, (-2175), 6442}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral(6443, 1823);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 5791, (-2175), 6442}, intArray0);
      
      CharClass charClass4 = charClass3.appendLiteral(0, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 5791, (-2175), 6442}, intArray0);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      charClass3.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(65308, 65308);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 65308;
      intArray0[1] = 65308;
      intArray0[2] = 65308;
      intArray0[3] = 65308;
      intArray0[4] = 65308;
      intArray0[5] = 65308;
      int int0 = 0;
      CharClass charClass2 = charClass1.appendRange((-2412), 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int int1 = 264;
      CharClass charClass3 = charClass2.appendFoldedRange(264, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      intArray0[6] = 65308;
      int int2 = 393;
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 393);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 65308;
      CharClass charClass1 = charClass0.appendFoldedRange(65308, 65308);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 65308;
      intArray0[1] = 65308;
      intArray0[2] = 65308;
      intArray0[3] = 65308;
      int[][] intArray1 = new int[9][0];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 65308;
      intArray2[1] = 65308;
      intArray2[2] = 65308;
      intArray2[3] = 65308;
      intArray2[4] = 65308;
      intArray2[5] = 65308;
      intArray2[6] = 65308;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 65308;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(697, 1770);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(856, 959);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[][] intArray0 = new int[6][8];
      int[] intArray1 = new int[6];
      intArray1[0] = 697;
      intArray1[1] = 697;
      intArray1[2] = 5;
      intArray1[3] = (-44);
      intArray1[4] = 1770;
      intArray1[5] = 697;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 856;
      intArray2[1] = 959;
      intArray2[2] = 959;
      intArray2[3] = 959;
      intArray2[4] = (-44);
      intArray2[5] = 959;
      intArray2[6] = 697;
      intArray2[7] = 5;
      intArray2[8] = 856;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 697;
      intArray3[1] = 1835;
      intArray3[2] = 697;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 1835;
      intArray5[1] = (-44);
      intArray5[2] = 959;
      intArray5[3] = 959;
      intArray5[4] = 697;
      intArray5[5] = 1770;
      intArray5[6] = 697;
      intArray5[7] = (-44);
      intArray5[8] = (-44);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = (-44);
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 128591);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[9][4];
      int[] intArray1 = new int[2];
      intArray1[0] = 2381;
      intArray1[1] = (-2819);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2381;
      intArray2[1] = (-2819);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 0;
      intArray3[1] = 2381;
      intArray3[2] = (-2819);
      intArray3[3] = (-2819);
      intArray3[4] = 2381;
      intArray3[5] = 2381;
      intArray3[6] = (-2819);
      intArray3[7] = 2381;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 2381;
      intArray4[1] = (-2819);
      intArray4[2] = (-2819);
      intArray4[3] = 0;
      intArray4[4] = 2381;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 0;
      intArray5[1] = (-960);
      intArray5[2] = 0;
      intArray5[3] = (-2819);
      intArray5[4] = (-2819);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = (-2819);
      intArray6[1] = (-960);
      intArray6[2] = 0;
      intArray6[3] = 0;
      intArray6[4] = 0;
      intArray6[5] = (-960);
      intArray6[6] = 0;
      intArray6[7] = 0;
      intArray6[8] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray7[0] = 0;
      intArray7[1] = (-1646);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[2];
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray5));
      
      intArray8[0] = (-960);
      intArray8[1] = 7074;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[7];
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray7));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray3));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray2));
      
      intArray9[0] = 2195;
      intArray9[1] = 7074;
      intArray9[2] = 2381;
      intArray9[3] = 0;
      int int0 = (-2660);
      intArray9[4] = (-2660);
      intArray9[5] = 0;
      intArray9[6] = (-960);
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 1787);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(105, 105);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 105;
      int[][] intArray1 = new int[3][8];
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 105;
      intArray2[1] = 105;
      intArray2[2] = 43742;
      intArray2[3] = 105;
      intArray2[4] = 105;
      intArray2[5] = 105;
      intArray2[6] = 105;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, 93);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass2);
      assertEquals(3, intArray1.length);
      
      intArray0[1] = 105;
      intArray0[2] = 105;
      intArray0[3] = 105;
      intArray0[4] = 105;
      String string0 = CharClass.charClassToString(intArray0, (-1261));
      assertNotSame(intArray0, intArray2);
      assertNotNull(string0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals("[]", string0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {105, 105, 105, 105, 105}, intArray0);
      
      String string1 = charClass0.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0x69 0x49]", string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = 0;
      CharClass charClass4 = charClass2.appendClass(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass2.appendClassWithSign(intArray0, 0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = 1742;
      // Undeclared exception!
      charClass5.appendFoldedRange(0, 1742);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedRange((-3420), (-3420));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(0, (-3420));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendFoldedRange(3789, 891);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-3420));
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass0.appendRange(66640, 0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass1.appendFoldedRange(5492, 5492);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertNotNull(charClass6);
      
      // Undeclared exception!
      try { 
        charClass4.appendTableWithSign((int[][]) null, (-3420));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 190;
      int int0 = (-3593);
      intArray0[1] = (-3593);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {190, (-3593)}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {190, (-3593)}, intArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = 0;
      intArray1[0] = 0;
      intArray1[1] = (-3593);
      int int2 = 3475;
      CharClass charClass2 = charClass1.appendClassWithSign(intArray1, 3475);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {190, (-3593)}, intArray0);
      assertArrayEquals(new int[] {0, (-3593)}, intArray1);
      
      CharClass charClass3 = charClass0.appendFoldedRange((-291), (-2540));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {190, (-3593)}, intArray0);
      
      int[][] intArray2 = new int[4][1];
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][1];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 65;
      intArray2[1] = 2;
      intArray2[2] = 6145;
      intArray2[3] = (-1776);
      intArray2[4] = 0;
      intArray2[5] = (-2076);
      intArray2[6] = (-1815);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray1, 2764);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(66639, 66639);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 66639;
      intArray0[1] = 66639;
      intArray0[2] = 66639;
      intArray0[3] = 66639;
      intArray0[4] = 66639;
      intArray0[5] = 66639;
      intArray0[6] = 66639;
      intArray0[7] = 66639;
      intArray0[8] = (-3489);
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 66639);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2102, 2102);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[0][4];
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotNull(string0);
      assertEquals("[0x0-0x835 0x837-0x10ffff]", string0);
      
      CharClass charClass4 = charClass2.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      
      CharClass charClass5 = charClass0.cleanClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 65;
      intArray0[0] = 65;
      int int1 = 460;
      intArray0[1] = 460;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {65, 460}, intArray0);
      
      int[][] intArray1 = new int[0][9];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {65, 460}, intArray0);
      
      int int2 = 0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {65, 460}, intArray0);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass4 = charClass1.appendTable(intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass5 = charClass4.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      int int3 = 0;
      int int4 = 1164;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1164);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2102, 2102);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[0][4];
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.negateClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertNotNull(string0);
      assertEquals("[0x836]", string0);
      
      int[] intArray1 = new int[7];
      intArray1[0] = 2102;
      intArray1[1] = 2102;
      intArray1[2] = (-2518);
      intArray1[3] = 2102;
      intArray1[4] = 2102;
      intArray1[5] = 2102;
      intArray1[6] = 2102;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 2048;
      intArray0[0] = 2048;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = (-620);
      intArray0[2] = (-620);
      intArray0[3] = (-2126);
      int int3 = 457;
      CharGroup charGroup0 = null;
      boolean boolean0 = true;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2048, 0, (-620), (-2126), 0, 0}, intArray0);
      
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, (-2126));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[6][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, (-290));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 5792;
      intArray0[2] = 6443;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {5792, 0, 6443, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(5792, 416);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {5792, 0, 6443, 0}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 5791, 1, 6442}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral(6443, 1823);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 5791, 1, 6442}, intArray0);
      
      CharClass charClass4 = charClass3.appendLiteral(0, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 5791, 1, 6442}, intArray0);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass5 = charClass3.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 5791, 1, 6442}, intArray0);
      
      CharClass charClass6 = charClass1.appendTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 5791, 1, 6442}, intArray0);
      
      CharClass charClass7 = charClass1.negateClass();
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertNotNull(charClass7);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 5791, 1, 6442}, intArray0);
      
      CharClass charClass8 = charClass2.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass1);
      assertNotNull(charClass8);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 5791, 1, 6442}, intArray0);
      
      CharClass charClass9 = charClass2.appendFoldedRange(0, (-3037));
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass9);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 5791, 1, 6442}, intArray0);
      
      int[][] intArray2 = new int[4][2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      CharClass charClass10 = charClass5.appendNegatedTable(intArray2);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass4);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass10);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass10);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 5791, 1, 6442}, intArray0);
      
      CharClass charClass11 = charClass7.appendNegatedTable(intArray2);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass11);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass9);
      assertNotNull(charClass11);
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      assertArrayEquals(new int[] {0, 5791, 1, 6442}, intArray0);
      
      CharClass charClass12 = charClass0.cleanClass();
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass7);
      assertNotNull(charClass12);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 5791, 1, 6442}, intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][4];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass0.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      int int0 = 68220;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 68220);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 486);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4155;
      int int0 = 1967;
      intArray0[1] = 1967;
      intArray0[2] = 2146;
      intArray0[3] = 32;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[4][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray1.length);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(4, intArray1.length);
      
      int int1 = (-1780);
      CharClass charClass3 = charClass2.appendFoldedRange(1967, (-1780));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(4, intArray1.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1967;
      CharClass charClass4 = charClass1.appendTableWithSign(intArray1, 2146);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass4);
      assertEquals(4, intArray1.length);
      
      intArray2[1] = 69703;
      intArray2[2] = 4155;
      intArray2[3] = (-1780);
      CharClass charClass5 = charClass3.appendClassWithSign(intArray2, 1967);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass5);
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(4, intArray2.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {1967, 69703, 4155, (-1780)}, intArray2);
      
      CharClass charClass6 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass6);
      assertEquals(4, intArray1.length);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 69703);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 65;
      intArray0[1] = 460;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {65, 460}, intArray0);
      
      int[][] intArray1 = new int[0][9];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {65, 460}, intArray0);
      
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {65, 460}, intArray0);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass4 = charClass3.appendRange(779, 1152);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass5 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass6 = charClass4.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertNotNull(charClass6);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4155;
      intArray0[1] = 1967;
      intArray0[2] = 2146;
      intArray0[3] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[6][6];
      int[] intArray2 = new int[3];
      intArray2[0] = 32;
      intArray2[1] = 4155;
      intArray2[2] = 32;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[7];
      intArray3[0] = 32;
      intArray3[1] = 4155;
      intArray3[2] = 32;
      intArray3[3] = 4155;
      intArray3[4] = 1967;
      intArray3[5] = 32;
      intArray3[6] = 1967;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 1751);
      CharClass charClass2 = charClass1.appendLiteral(32, 32);
      charClass2.toString();
      charClass1.toArray();
      CharClass charClass3 = charClass0.cleanClass();
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      assertSame(charClass4, charClass3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[9];
      intArray0[0] = 1070;
      intArray0[1] = 66640;
      intArray0[2] = 0;
      int int0 = 66639;
      intArray0[3] = 66639;
      int int1 = (-268);
      intArray0[4] = (-268);
      int int2 = 66639;
      intArray0[5] = 66639;
      intArray0[6] = 0;
      int int3 = 0;
      intArray0[7] = 0;
      int int4 = (-1811);
      intArray0[8] = (-1811);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 0;
      CharClass.charClassToString(intArray0, 0);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[6][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(0, 1);
      int[] intArray0 = new int[1];
      intArray0[0] = 422;
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 93;
      intArray0[1] = (-2);
      intArray0[2] = (-16);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral((-1689), (-16));
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[6][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[7];
      intArray2[0] = (-221);
      intArray2[1] = 0;
      intArray2[2] = 1271;
      intArray2[3] = 8173;
      intArray2[4] = 1068;
      intArray2[5] = 2986;
      intArray2[6] = 119980;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-3388);
      intArray0[0] = (-3388);
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int int1 = 2970;
      charClass0.appendRange(2970, 64217);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-199);
      intArray0[0] = (-199);
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = 4;
      intArray0[2] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = 3062;
      intArray0[1] = 3062;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass0.cleanClass();
      int int1 = (-170);
      CharClass charClass3 = charClass2.appendRange((-170), 2404);
      charClass3.appendLiteral(1705, 2404);
      int int2 = (-598);
      CharClass charClass4 = charClass1.appendRange((-598), 35332);
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass4.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-551);
      intArray0[1] = (-1047);
      intArray0[2] = 2825;
      intArray0[3] = 127487;
      int int0 = 0;
      intArray0[4] = 0;
      intArray0[5] = 3246;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 400);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[7][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = (-1528);
      intArray2[1] = 6003;
      intArray2[2] = 0;
      int int0 = 42128;
      intArray2[3] = 42128;
      intArray2[4] = 4206;
      intArray1[6] = intArray2;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 801;
      CharClass charClass1 = charClass0.appendFoldedRange((-2503), 801);
      int int1 = (-2852);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2852);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 190;
      intArray0[1] = (-3593);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = (-3593);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray1, 3475);
      CharClass charClass3 = charClass2.negateClass();
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      charClass4.appendLiteral(0, 0);
      assertArrayEquals(new int[] {190, (-3593)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(1584, (-2676));
      charClass1.appendFoldedRange(1584, 1584);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2676);
      intArray0[1] = 1584;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 950);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 1114111;
      intArray0[0] = 1114111;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = (-2567);
      intArray0[2] = (-2567);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray1 = new int[0][1];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      int int0 = 744;
      CharClass charClass3 = charClass2.appendFoldedRange(744, 65);
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 119364;
      CharClass charClass1 = charClass0.appendRange(693, 119364);
      int[] intArray0 = new int[3];
      intArray0[0] = 119364;
      intArray0[1] = 119364;
      intArray0[2] = 693;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
