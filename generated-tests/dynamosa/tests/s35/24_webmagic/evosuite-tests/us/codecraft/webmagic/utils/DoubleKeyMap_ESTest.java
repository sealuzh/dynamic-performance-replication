/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 01:41:05 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String>();
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      doubleKeyMap0.put(hashMap0, (Object) "}J", "}J");
      String string0 = doubleKeyMap0.remove(hashMap0, (Object) "}J");
      assertEquals("}J", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Map<Integer, String>, Map<Object, Map<Object, String>>> hashMap0 = new HashMap<Map<Integer, String>, Map<Object, Map<Object, String>>>();
      DoubleKeyMap<Map<Integer, String>, Object, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Object, Map<Object, String>>(hashMap0);
      DoubleKeyMap<Object, String, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<String, Object>>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Object, Map<Object, String>> hashMap2 = new HashMap<Object, Map<Object, String>>();
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      hashMap2.put(doubleKeyMap1, hashMap3);
      hashMap0.put(hashMap1, hashMap2);
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.remove((Map<Integer, String>) hashMap1);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, Map<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, Map<HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>>>, Object> doubleKeyMap0 = new DoubleKeyMap<String, Map<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, Map<HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>>>, Object>();
      Map<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, Map<HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>>(map0);
      Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>> map1 = doubleKeyMap1.newMap();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap1.put(map1, hashMap0, map1);
      HashMap<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>> hashMap1 = new HashMap<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>();
      Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>> map2 = doubleKeyMap1.put((Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>) hashMap1, hashMap0, map1);
      assertEquals(0, map2.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String>();
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, "wrong proto type map ");
      String string0 = doubleKeyMap0.get(hashMap0, (Object) hashMap0);
      assertEquals("wrong proto type map ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Integer, Object>, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, Object>, Map<Object, Object>>();
      Map<Object, Object> map0 = doubleKeyMap0.remove((Integer) null, (HashMap<Integer, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      HashMap<Object, Map<Map<String, Object>, String>> hashMap0 = new HashMap<Object, Map<Map<String, Object>, String>>();
      DoubleKeyMap<Object, Map<String, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, Object>, String>(hashMap0);
      Object object0 = doubleKeyMap0.remove("O'^AR#b<SQt,", (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DoubleKeyMap<String, Map<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, Map<HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>>>, Object> doubleKeyMap0 = new DoubleKeyMap<String, Map<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, Map<HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>>>, Object>();
      Map<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, Map<HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>>(map0);
      Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>> map1 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Integer, String>, Map<Object, Map<Integer, String>>> doubleKeyMap2 = new DoubleKeyMap<Object, Map<Integer, String>, Map<Object, Map<Integer, String>>>(map1, class0);
      Map<Object, Map<Integer, String>> map2 = doubleKeyMap2.remove((Object) null, (Map<Integer, String>) hashMap0);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DoubleKeyMap<Object, Map<Integer, String>, Map<Object, Map<Integer, String>>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, String>, Map<Object, Map<Integer, String>>>();
      Map<Object, Map<Integer, String>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Map<Integer, String>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Map<Object, Map<Map<Integer, String>, Object>>, Map<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Map<Map<Integer, String>, Object>>, Map<Integer, String>, Object>();
      Map<Object, Map<Map<Integer, String>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Map<Integer, String>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, String>, Object>(map0);
      Map<HashMap<Integer, Integer>, Map<Map<Integer, String>, String>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<HashMap<Integer, Integer>, Map<Integer, String>, String> doubleKeyMap2 = new DoubleKeyMap<HashMap<Integer, Integer>, Map<Integer, String>, String>(map1);
      DoubleKeyMap<Object, Map<Integer, String>, Integer> doubleKeyMap3 = new DoubleKeyMap<Object, Map<Integer, String>, Integer>();
      Map<Map<Integer, String>, Integer> map2 = doubleKeyMap3.remove((Object) doubleKeyMap2);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, String, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Map<Object, Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Map<Object, Object> map0 = doubleKeyMap0.put(hashMap0, "", (Map<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Map> class0 = Map.class;
      Integer integer0 = new Integer((-3364));
      HashMap<Integer, Map<Map<String, Object>, Integer>> hashMap0 = new HashMap<Integer, Map<Map<String, Object>, Integer>>();
      DoubleKeyMap<Integer, Map<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, Object>, Integer>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, (Map<String, Object>) null, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(344);
      HashMap<Integer, Map<Object, Integer>> hashMap0 = new HashMap<Integer, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>(hashMap0, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, object0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Integer, Object>, HashMap<Map<Integer, String>, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, Object>, HashMap<Map<Integer, String>, Object>>();
      Map<HashMap<Integer, Integer>, Map<Integer, HashMap<String, Map<Integer, String>>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Integer, Integer>, Integer, HashMap<String, Map<Integer, String>>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Integer>, Integer, HashMap<String, Map<Integer, String>>>(map0);
      Integer integer0 = new Integer((-319));
      HashMap<String, Map<Integer, String>> hashMap0 = new HashMap<String, Map<Integer, String>>();
      HashMap<String, Map<Integer, String>> hashMap1 = doubleKeyMap1.put((HashMap<Integer, Integer>) null, integer0, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String>();
      DoubleKeyMap<Object, HashMap<String, Integer>, Map<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Integer>, Map<Integer, String>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      DoubleKeyMap<Object, String, HashMap<String, Object>> doubleKeyMap2 = new DoubleKeyMap<Object, String, HashMap<String, Object>>();
      Map<Integer, String> map0 = doubleKeyMap2.newMap();
      Map<Integer, String> map1 = doubleKeyMap1.put((Object) doubleKeyMap0, hashMap0, map0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      HashMap<HashMap<Integer, Map<Integer, String>>, Map<Object, String>> hashMap1 = new HashMap<HashMap<Integer, Map<Integer, String>>, Map<Object, String>>();
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String>(hashMap1);
      String string0 = doubleKeyMap0.get(hashMap0, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<HashMap<Integer, Map<Integer, String>>, Map<Object, String>> hashMap0 = new HashMap<HashMap<Integer, Map<Integer, String>>, Map<Object, String>>();
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String>(hashMap0);
      HashMap<Integer, Map<Integer, String>> hashMap1 = new HashMap<Integer, Map<Integer, String>>();
      Object object0 = new Object();
      String string0 = doubleKeyMap0.get(hashMap1, object0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, Integer>, Integer>> hashMap0 = new HashMap<String, Map<HashMap<Object, Integer>, Integer>>();
      DoubleKeyMap<String, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Integer>, Integer>(hashMap0);
      Map<HashMap<Object, Integer>, Integer> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String>();
      DoubleKeyMap<Object, Map<Integer, String>, Map<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, String>, Map<String, Object>>();
      Map<Map<Integer, String>, Map<String, Object>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>((Map<Object, Map<Integer, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String>();
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, "");
      String string0 = doubleKeyMap0.remove(hashMap0, (Object) "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>();
      Integer integer0 = new Integer((-42));
      String string0 = doubleKeyMap0.get((String) null, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String>();
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      doubleKeyMap0.put(hashMap0, (Object) "wrong pro_o type map ", "wrong pro_o type map ");
      Integer integer0 = new Integer((-1748));
      String string0 = doubleKeyMap0.get(hashMap0, (Object) integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Integer>, Object, HashMap<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Object, HashMap<Object, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Map<String, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Object>(map0);
      Map<String, Map<Integer, HashMap<Integer, Integer>>> map1 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, HashMap<Integer, Integer>> doubleKeyMap2 = new DoubleKeyMap<String, Integer, HashMap<Integer, Integer>>(map1, class0);
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap3 = new DoubleKeyMap<Integer, Integer, Object>();
      Object object0 = doubleKeyMap3.put(integer0, integer0, (Object) doubleKeyMap2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Object, Map<HashMap<Object, Object>, Integer>> hashMap0 = new HashMap<Object, Map<HashMap<Object, Object>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Object>, Integer>(hashMap0, class0);
      Map<HashMap<Object, Object>, Integer> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }
}
