/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:29:36 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ForkJoinWorkerThread;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSite();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Site site0 = new Site();
      spider0.getScheduler();
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]9_C\"{Yg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8p5YS0n");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[5];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zu},]9'f}z^tLG:7?!f");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setSpawnUrl(true);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider2.scheduler(queueScheduler0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      spider3.addPipeline(collectorPipeline0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", downloadSuccess=");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider1.setSpiderListeners(linkedList0);
      spider1.clearPipeline();
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Bu0N6=<<03)");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.pipeline(resultItemsCollectorPipeline0);
      spider0.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = new ThreadGroup("");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "wZaE");
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(0);
      phantomJSDownloader0.setRetryNum(0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader1);
      spider2.uuid = "";
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      spider0.destroyWhenExit = false;
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Bu0N6=<<03)");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      Spider spider2 = spider1.downloader((Downloader) null);
      Spider spider3 = spider2.clearPipeline();
      String string0 = "";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider4 = spider3.scheduler(fileCacheQueueScheduler0);
      spider4.addPipeline((Pipeline) null);
      // Undeclared exception!
      try { 
        spider2.thread((-2839));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("KN9I*HQ0 <:p#g%~{>");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      Spider spider2 = spider1.thread(41);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider3 = spider2.startRequest(list0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider4 = spider3.pipeline(multiPagePipeline0);
      spider4.setPipelines((List<Pipeline>) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("KN9I*HQ0 <:p#g%~{>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = " stop fail!";
      stringArray0[1] = " stop fail!";
      stringArray0[2] = " stop fail!";
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      QueueScheduler queueScheduler1 = new QueueScheduler();
      QueueScheduler queueScheduler2 = new QueueScheduler();
      queueScheduler2.poll(spider0);
      spider0.scheduler(queueScheduler2);
      Page page0 = new Page();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("_cycle_tried_times", " stop fail!");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = " stop fail!";
      stringArray0[1] = " stop fail!";
      stringArray0[2] = " stop fail!";
      Page page0 = new Page();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ForkJoinWorkerThread) null).when(forkJoinPool_ForkJoinWorkerThreadFactory0).newThread(any(java.util.concurrent.ForkJoinPool.class));
      ThreadGroup threadGroup0 = new ThreadGroup(" stop fail!");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, " stop fail!");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(9, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup1, true);
      spider0.thread((ExecutorService) forkJoinPool0, 9);
      forkJoinPool0.execute((Runnable) spider0);
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(41);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      queueScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider1.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8p5YS0n");
      Request[] requestArray0 = new Request[1];
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String string0 = "Lk";
      Spider spider2 = spider1.setUUID("Lk");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8p5YS0n";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(5);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider2 = spider1.setUUID("^");
      queueScheduler0.poll(spider2);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.stop();
      spider1.runAsync();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8p5YS0n");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("`~Ljjl\"$dr");
      fileCacheQueueScheduler0.poll(spider0);
      spider1.scheduler(fileCacheQueueScheduler0);
      ThreadGroup threadGroup0 = new ThreadGroup("`~Ljjl\"$dr");
      ThreadGroup threadGroup1 = new ThreadGroup("");
      String string0 = "_";
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "");
      Page page0 = new Page();
      Page page1 = page0.setRawText("`~Ljjl\"$dr");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      page1.setRequest((Request) null);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = " stop fail!";
      stringArray0[1] = " stop fail!";
      spider0.start();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      spider0.getUUID();
      spider1.addPipeline(jsonFilePipeline0);
      spider1.isSpawnUrl();
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = " stop fail!";
      stringArray0[1] = " stop fail!";
      stringArray0[2] = " stop fail!";
      Page page0 = new Page();
      page0.setSkip(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      page0.setRequest((Request) null);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      page0.setSkip(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      queueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      QueueScheduler queueScheduler1 = new QueueScheduler();
      queueScheduler1.poll(spider0);
      spider0.extractAndAddRequests(page0, false);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5216, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(spider1, scheduledThreadPoolExecutor0);
      Spider spider2 = spider0.setExitWhenComplete(true);
      Spider spider3 = spider2.setUUID("HLx");
      FilePipeline filePipeline0 = new FilePipeline("viI\"(");
      Spider spider4 = spider3.pipeline(filePipeline0);
      spider4.getSpiderListeners();
      filePipeline0.setPath("viI\"(");
      spider4.runAsync();
      spider4.downloader((Downloader) null);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request(" stop fail!");
      page1.setRequest(request0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline(" stop fail!");
      Spider spider1 = spider0.setSpawnUrl(false);
      spider1.getUUID();
      spider0.clearPipeline();
      spider1.getThreadAlive();
      spider1.stop();
      // Undeclared exception!
      try { 
        spider1.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Spider.Status.fromValue(5);
      String string0 = "us.codecraft.webmagic.scheduler.RedisPriorityScheduler";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.scheduler.RedisPriorityScheduler");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("us.codecraft.webmagic.scheduler.RedisPriorityScheduler");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.clearPipeline();
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "8p5YS0n";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8p5YS0n");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider0.downloader(phantomJSDownloader0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      spider0.pipeline(jsonFilePipeline0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8p5YS0n";
      stringArray0[1] = "/";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      page0.setSkip(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request(" stop fail!");
      page0.setRequest(request0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline(" error");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      Spider spider2 = spider1.setSpawnUrl(false);
      spider2.getThreadAlive();
      ForkJoinPool.commonPool();
      ForkJoinTask.getPool();
      Spider spider3 = spider1.setExecutorService((ExecutorService) null);
      spider0.getUUID();
      spider1.addPipeline(jsonFilePipeline0);
      spider3.getThreadAlive();
      spider0.stop();
      // Undeclared exception!
      try { 
        spider0.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider0.setUUID("");
      Page page0 = new Page();
      page0.setSkip(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider1.get("1Ygpjo;on5m");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5216, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(spider1, scheduledThreadPoolExecutor0);
      Spider spider3 = spider2.setExitWhenComplete(true);
      Spider spider4 = spider3.setUUID("HLx");
      FilePipeline filePipeline0 = new FilePipeline("viI\"(");
      Spider spider5 = spider4.pipeline(filePipeline0);
      spider5.getSpiderListeners();
      filePipeline0.setPath("viI\"(");
      spider5.runAsync();
      spider5.downloader((Downloader) null);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider4.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(5);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider2 = spider1.setUUID("^");
      queueScheduler0.poll(spider2);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider1.setPipelines(linkedList0);
      spider1.thread(5);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider3 = Spider.create(simplePageProcessor1);
      spider3.setEmptySleepTime((-423));
      spider3.stop();
      spider2.getStatus();
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8p5YS0n");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider0.downloader(phantomJSDownloader0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8p5YS0n";
      stringArray0[1] = "/";
      stringArray0[2] = "";
      ThreadGroup threadGroup0 = new ThreadGroup("");
      String string0 = "_cycle_tried_times";
      ThreadGroup threadGroup1 = new ThreadGroup("/");
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, (String) null);
      Page page0 = new Page();
      Page page1 = page0.setRawText("");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request();
      page1.setRequest(request0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xc3FR`6/zfJR5{x4(");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
      assertTrue(spider0.isSpawnUrl());
  }
}
