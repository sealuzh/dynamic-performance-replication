/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 09:41:58 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<String, Map<Object, Integer>>, Map<Integer, Integer>> hashMap0 = new HashMap<HashMap<String, Map<Object, Integer>>, Map<Integer, Integer>>();
      DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer>(hashMap0);
      HashMap<String, Map<Object, Integer>> hashMap1 = new HashMap<String, Map<Object, Integer>>();
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      hashMap0.put(hashMap1, hashMap2);
      Map<Integer, Integer> map0 = doubleKeyMap0.remove(hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Integer>, HashMap<Object, Map<Object, Integer>>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Integer>, HashMap<Object, Map<Object, Integer>>>();
      HashMap<HashMap<String, Map<Object, Integer>>, Map<Integer, Integer>> hashMap0 = new HashMap<HashMap<String, Map<Object, Integer>>, Map<Integer, Integer>>();
      DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer>(hashMap0);
      Map<Object, Integer> map0 = doubleKeyMap1.newMap();
      HashMap<Object, Map<Object, Integer>> hashMap1 = new HashMap<Object, Map<Object, Integer>>();
      doubleKeyMap0.put("CQTbQz}n$Lo", map0, hashMap1);
      Map<Map<Object, Integer>, HashMap<Object, Map<Object, Integer>>> map1 = doubleKeyMap0.remove("CQTbQz}n$Lo");
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.remove(object0, (Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, String, Object>();
      Map<String, Object> map0 = doubleKeyMap0.remove((Map<Object, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, Integer>>();
      Object object0 = new Object();
      Map<String, HashMap<Object, Integer>> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, String, Object>();
      DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap1.newMap();
      Object object0 = doubleKeyMap0.put(map0, "wrong proto type map ", (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put((HashMap<Object, Object>) null, (String) null, hashMap0);
      HashMap<Object, String> hashMap1 = doubleKeyMap0.remove((HashMap<Object, Object>) null, (String) null);
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Object object1 = doubleKeyMap0.put((Object) null, object0, (Object) integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap0.put((Object) doubleKeyMap0, integer0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Integer>, Integer, HashMap<Map<Object, Integer>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Integer, HashMap<Map<Object, Integer>, Object>>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Object, Map<String, HashMap<Integer, String>>> hashMap0 = new HashMap<Object, Map<String, HashMap<Integer, String>>>(1724);
      DoubleKeyMap<Object, String, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Integer, String>>(hashMap0, class0);
      HashMap<Integer, String> hashMap1 = doubleKeyMap0.get((Object) null, (String) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, HashMap<Integer, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<Integer, Object>>((Map<Object, Map<Integer, HashMap<Integer, Object>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<HashMap<String, Map<Object, Integer>>, Map<Integer, Integer>> hashMap0 = new HashMap<HashMap<String, Map<Object, Integer>>, Map<Integer, Integer>>();
      DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<Object, Integer>>, Integer, Integer>(hashMap0);
      HashMap<String, Map<Object, Integer>> hashMap1 = new HashMap<String, Map<Object, Integer>>();
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      hashMap0.put(hashMap1, hashMap2);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.remove(hashMap1, integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put((HashMap<Object, Object>) null, "~V7]Rii", hashMap0);
      HashMap<Object, String> hashMap1 = doubleKeyMap0.remove((HashMap<Object, Object>) null, "nJ_;c#");
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Integer>, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put("VP~EJLhv(kcB>lc(", (Map<Object, Integer>) hashMap0, (Object) hashMap0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.put("VP~EJLhv(kcB>lc(", (Map<Object, Integer>) hashMap0, (Object) "VP~EJLhv(kcB>lc(");
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Object, Map<HashMap<String, String>, Object>> hashMap0 = new HashMap<Object, Map<HashMap<String, String>, Object>>();
      DoubleKeyMap<Object, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Object>(hashMap0, class0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.get(object0, hashMap1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap<Map<Object, Integer>, Map<Object, String>> hashMap2 = new HashMap<Map<Object, Integer>, Map<Object, String>>();
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      hashMap2.put(hashMap1, hashMap3);
      DoubleKeyMap<Map<Object, Integer>, Object, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Object, String>(hashMap2);
      String string0 = doubleKeyMap0.get((Map<Object, Integer>) hashMap1, (Object) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
