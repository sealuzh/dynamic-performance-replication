/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 17:57:12 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.nio.CharBuffer;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX("");
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        rE2_0.match("", 4, 4, 4, intArray0, 8249);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = new RE2("%RaM3!54Eo");
      byte[] byteArray0 = new byte[6];
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      List<String[]> list0 = rE2_0.findAllSubmatch("%RaM3!54Eo", 1978);
      assertNotNull(list0);
      
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)75;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-1472));
      List<String> list1 = rE2_0.findAll("%RaM3!54Eo", (-1472));
      assertNotNull(list1);
      
      RE2.match("j9b3", "%RaM3!54Eo");
      rE2_0.get();
      rE2_0.findIndex("GN");
      int[] intArray0 = rE2_0.findIndex("%RaM3!54Eo");
      assertArrayEquals(new int[] {0, 10}, intArray0);
      
      rE2_0.replaceFirst("%RaM3!54Eo", "j9b3");
      rE2_0.findSubmatchIndex("j9b3");
      String string0 = rE2_0.find("%RaM3!54Eo");
      assertEquals("%RaM3!54Eo", string0);
      
      String string1 = rE2_0.replaceFirst("%RaM3!54Eo", "j9b3");
      assertEquals("j9b3", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-1227));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<int[]> list0 = rE2_0.findAllIndex("", 862);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 248, true);
      List<String> list0 = rE2_0.findAll("", 248);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", 17);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("7zmSv");
      rE2_0.prefix = "Fv2U%E,q;";
      boolean boolean0 = rE2_0.match("7zmSv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.reset();
      int[] intArray0 = rE2_0.findIndex("UTF-8");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(";iJT1-H@n");
      List<String[]> list0 = rE2_0.findAllSubmatch("Logical_Order_Exception", 3351);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String string0 = rE2_0.find("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      RE2 rE2_0 = RE2.compile("SWizx-VP`oyX+");
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 120662);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("=i9F^IOT");
      rE2_0.find("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)0;
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      byte[] byteArray1 = new byte[0];
      rE2_0.findAllUTF8Submatch(byteArray1, 7);
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray1, 7);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("I^\"%T2YMd");
      String string0 = rE2_0.toString();
      assertEquals("I^\"%T2YMd", string0);
      
      rE2_0.findSubmatch("");
      Machine machine0 = new Machine(rE2_0);
      rE2_0.put(machine0);
      assertEquals("I^\"%T2YMd", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(";iJT1-H@n_");
      String[] stringArray0 = rE2_0.findSubmatch(";iJT1-H@n_");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", (-317), false);
      rE2_0.reset();
      List<String[]> list0 = rE2_0.findAllSubmatch("", 1061);
      assertEquals(1, list0.size());
      
      List<String[]> list1 = rE2_0.findAllSubmatch("", 1061);
      assertNotNull(list1);
      
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-66);
      byteArray1[3] = (byte)27;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte)43;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)83;
      byteArray1[8] = (byte) (-128);
      List<int[]> list2 = rE2_0.findAllUTF8SubmatchIndex(byteArray1, 601);
      assertEquals(6, list2.size());
      
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray2 = rE2_0.findUTF8(byteArray0);
      assertNotNull(byteArray2);
      
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-99);
      byteArray3[1] = (byte)32;
      byteArray3[2] = (byte) (-39);
      byteArray3[3] = (byte)32;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte) (-58);
      List<int[]> list3 = rE2_0.findAllUTF8SubmatchIndex(byteArray3, 4);
      assertNotNull(list3);
      
      int[] intArray0 = rE2_0.findIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = RE2.match("BEGIN_TEXT", "BEGIN_TEXT");
      assertTrue(boolean0);
      
      RE2 rE2_0 = new RE2("com.google.re2j.RE2");
      RE2 rE2_1 = RE2.compile("BEGIN_TEXT");
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      
      RE2.compile("ngR3");
      String string0 = rE2_1.replaceFirst("BEGIN_TEXT", "UTF-8");
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("[^x00-x{10FFFF}]");
      RE2.match("[^x00-x{10FFFF}]", "[^x00-x{10FFFF}]");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      rE2_0.findAllUTF8Submatch(byteArray0, 1369);
      byte[] byteArray1 = new byte[0];
      rE2_0.findAllUTF8Index(byteArray1, 0);
      RE2 rE2_1 = RE2.compile("[^x00-x{10FFFF}]");
      assertFalse(rE2_1.equals((Object)rE2_0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("");
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 2);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[7];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 32, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      rE2_0.findUTF8Submatch(byteArray0);
      byteArray0[1] = (byte)0;
      RE2 rE2_1 = RE2.compileImpl("sJ}tOj3+", 32, true);
      rE2_1.findAllSubmatchIndex("", (byte)0);
      rE2_1.findUTF8SubmatchIndex(byteArray0);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-88);
      rE2_0.findAllUTF8(byteArray0, 1893);
      try { 
        RE2.compilePOSIX("qLLO?xmlhIa)/[%'+3J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 1174, true);
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 1174);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-3562));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-19));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("ANY_CHAR", 0, false);
      rE2_0.findSubmatch("oz(d");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)73;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-2788));
      rE2_0.findIndex("oz(d");
      rE2_0.findAllSubmatchIndex("ANY_CHAR", 3340);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'J';
      charArray0[2] = '!';
      charArray0[3] = 'o';
      charArray0[4] = 'J';
      charArray0[5] = ')';
      charArray0[6] = 'Z';
      // Undeclared exception!
      try { 
        charBuffer0.get(charArray0, 1293, (int) (byte) (-25));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("UTF-8");
      RE2 rE2_1 = RE2.compileImpl("UTF-8", 19, true);
      rE2_0.toString();
      rE2_1.replaceAll("UTF-8", "UTF-8");
      int[] intArray0 = new int[8];
      intArray0[0] = 19;
      intArray0[1] = (-772);
      intArray0[2] = 128;
      intArray0[3] = 19;
      intArray0[4] = 19;
      intArray0[5] = 19;
      intArray0[6] = 19;
      intArray0[7] = 19;
      // Undeclared exception!
      try { 
        rE2_1.match("UTF-8", 19, 19, 19, intArray0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      RE2 rE2_0 = RE2.compile("NOP");
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)16;
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.get();
      byteArray0[2] = (byte)0;
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.replaceAll("UTF-8", "");
      rE2_0.findIndex("|Qbk");
      rE2_0.match("");
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.findAllSubmatch("", 0);
      rE2_0.findIndex("");
      // Undeclared exception!
      try { 
        rE2_0.replaceFirst((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("(?-m:$)");
      rE2_0.reset();
      Machine machine0 = rE2_0.get();
      List<int[]> list0 = rE2_0.findAllIndex("^x00-x{10FFFF}", 0);
      assertNull(list0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      rE2_0.prefixUTF8 = byteArray0;
      String string0 = RE2.quoteMeta("^x00-x{10FFFF}");
      assertEquals("\\^x00-x\\{10FFFF\\}", string0);
      
      rE2_0.prefixRune = 0;
      rE2_0.findAll("^x00-x{10FFFF}", 3247);
      RE2.quoteMeta("");
      rE2_0.prefix = "";
      RE2.quoteMeta("@=s#QS3;%D(f>");
      List<String> list1 = rE2_0.findAll("8gMMN$pk(G?_]-WU", 1396);
      assertNotNull(list1);
      assertEquals(1, list1.size());
      
      byte[] byteArray1 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      List<int[]> list2 = rE2_0.findAllUTF8Index(byteArray1, (byte)0);
      assertNull(list2);
      
      rE2_0.findAllUTF8(byteArray0, (byte)0);
      rE2_0.put(machine0);
      byte[][] byteArray2 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray2);
      
      RE2.quoteMeta("");
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      RE2 rE2_0 = RE2.compileImpl("~.S", 7999, false);
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = new int[4];
      intArray0[2] = 0;
      boolean boolean0 = rE2_0.match("", 0, 0, 0, intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-64);
      rE2_0.findAllUTF8Index(byteArray0, (byte) (-106));
      rE2_0.replaceFirst("", "");
      rE2_0.findAllIndex("", 2764);
      rE2_0.findIndex("");
      // Undeclared exception!
      try { 
        rE2_0.replaceAllFunc("53WTu", (RE2.ReplaceFunc) null, 5248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.RE2", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(";iJT1-H@n_");
      rE2_0.replaceAll("j9uuzJDnGPr;-z", ";iJT1-H@n_");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      rE2_0.findAllUTF8(byteArray0, (byte) (-128));
      rE2_0.findAllSubmatch("j9uuzJDnGPr;-z", (byte)47);
      RE2.match("\"!=QlqiZI8>6f=", "j9uuzJDnGPr;-z");
      rE2_0.findSubmatchIndex("");
      rE2_0.findAllUTF8(byteArray0, 12);
      rE2_0.match("j9uuzJDnGPr;-z");
      rE2_0.matchUTF8(byteArray0);
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("Samaritan", (-1048));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.findSubmatchIndex("");
      RE2.quoteMeta("M1(p<O3V<n_");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)0;
      rE2_0.replaceAll("j9uuzJDnGPr;-z", "");
      byteArray0[0] = (byte) (-128);
      rE2_0.findAllUTF8(byteArray0, 2665);
      rE2_0.findAllSubmatch("M1(p<O3V<n_", (byte)47);
      RE2.match("", "M1(p<O3V<n_");
      rE2_0.findSubmatchIndex("M1(p<O3V<n_");
      rE2_0.findAllUTF8(byteArray0, (-392));
      rE2_0.match("M1(p<O3V<n_");
      rE2_0.matchUTF8(byteArray0);
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      rE2_0.replaceAll("j9uuzJDnGPr;-z", "invalid named capture");
      // Undeclared exception!
      try { 
        rE2_0.match("invalid named capturejinvalid named capture9invalid named captureuinvalid named captureuinvalid named capturezinvalid named captureJinvalid named captureDinvalid named captureninvalid named captureGinvalid named capturePinvalid named capturerinvalid named capture;invalid named capture-invalid named capturezinvalid named capture", (byte)0, 256, (byte)0, intArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("9*");
      byte[] byteArray0 = new byte[0];
      String string0 = rE2_0.find("9*");
      assertEquals("9", string0);
      
      rE2_0.findUTF8Submatch(byteArray0);
      String string1 = rE2_0.replaceAll("9*", "");
      assertEquals("*", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte) (-22);
      byteArray0[8] = (byte) (-96);
      rE2_0.prefixUTF8 = byteArray0;
      rE2_0.match("", 0, 0, 559, (int[]) null, 559);
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = new RE2("\n:N>L0r}(Cmy)y I|");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      RE2 rE2_1 = new RE2("\n:N>L0r}(Cmy)y I|");
      rE2_1.reset();
      Machine machine0 = new Machine(rE2_1);
      rE2_0.put(machine0);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)32;
      rE2_0.matchUTF8(byteArray0);
      rE2_0.findSubmatch("\n:N>L0r}(Cmy)y I|");
      rE2_0.reset();
      byte[] byteArray1 = new byte[0];
      rE2_0.findUTF8Submatch(byteArray1);
      rE2_0.findAllSubmatch("", (-8));
      byte[] byteArray2 = rE2_0.findUTF8(byteArray1);
      List<byte[][]> list0 = rE2_1.findAllUTF8Submatch(byteArray2, (byte) (-63));
      assertFalse(list0.isEmpty());
  }
}
