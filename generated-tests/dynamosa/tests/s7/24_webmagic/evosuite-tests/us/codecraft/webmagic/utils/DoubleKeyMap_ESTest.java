/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 16:40:18 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put(".", hashMap1);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      doubleKeyMap0.remove(".", (Object) hashMap2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Map<Object, String>, Map<String, Map<Object, String>>> hashMap0 = new HashMap<Map<Object, String>, Map<String, Map<Object, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, String>, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, String, Map<Object, String>>(hashMap0, class0);
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>();
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      HashMap<Object, Map<Object, String>> hashMap1 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>(hashMap1);
      Map<String, Map<Object, String>> map1 = doubleKeyMap2.newMap();
      hashMap0.put(map0, map1);
      Map<Object, String> map2 = doubleKeyMap0.get(map0, (String) null);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put(".", hashMap1);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Map<Object, Integer> map0 = doubleKeyMap0.remove(".");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Map<Object, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Object, Integer>();
      HashMap<Object, Map<Object, HashMap<Object, String>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<Object, String>>>();
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>(hashMap0);
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      Map<Integer, Map<String, HashMap<Object, Integer>>> map1 = doubleKeyMap1.newMap();
      doubleKeyMap0.put(map0, (Object) map1, (Integer) null);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Map<Object, Integer> map2 = doubleKeyMap0.remove((Map<Object, String>) hashMap1);
      assertFalse(map2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<String, Map<Object, Integer>> hashMap1 = new HashMap<String, Map<Object, Integer>>();
      hashMap1.put(".", hashMap0);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap1);
      Map<Object, Integer> map0 = doubleKeyMap0.get(".");
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put("", (Object) integer0, integer0);
      Map<Object, Integer> map0 = doubleKeyMap0.get("");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.remove("#F>z!fzfp^V>U:J6tNt", object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>();
      String string0 = doubleKeyMap0.remove((String) null, (Integer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Integer, Object>>();
      Map<Map<Object, String>, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Object, String>, String, String> doubleKeyMap1 = new DoubleKeyMap<Map<Object, String>, String, String>(map0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap2.remove((Object) doubleKeyMap1, (Object) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
      Map<Integer, Object> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Object, Map<Map<Object, String>, HashMap<String, String>>> hashMap0 = new HashMap<Object, Map<Map<Object, String>, HashMap<String, String>>>();
      DoubleKeyMap<Object, Map<Object, String>, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, String>, HashMap<String, String>>(hashMap0, class0);
      Object object0 = new Object();
      Map<Map<Object, String>, HashMap<String, String>> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<String, String>>();
      Map<HashMap<Object, Integer>, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Object, Integer>, Integer, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Integer>, Integer, String>(map0);
      Map<Integer, Map<Object, Integer>> map1 = doubleKeyMap1.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Integer>(map1, class0);
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap2.put(integer0, (Object) doubleKeyMap1, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Integer integer0 = doubleKeyMap0.put((Object) null, (Object) null, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Map<Object, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Object, Integer>();
      Map<Object, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(map0);
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap1.put((Object) doubleKeyMap0, integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.get((Object) hashMap0, object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Map<String, HashMap<String, Object>>> hashMap0 = new HashMap<String, Map<String, HashMap<String, Object>>>();
      DoubleKeyMap<String, String, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<String, Object>>(hashMap0);
      HashMap<String, Object> hashMap1 = doubleKeyMap0.get((String) null, (String) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Map<Object, Map<HashMap<Object, Integer>, String>>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Map<HashMap<Object, Integer>, String>>, String, String>();
      Map<Object, Map<HashMap<Object, Integer>, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, HashMap<Object, Integer>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Integer>, String>(map0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Map<Map<Object, String>, String>> hashMap0 = new HashMap<String, Map<Map<Object, String>, String>>();
      DoubleKeyMap<String, Map<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, String>, String>(hashMap0);
      Map<Map<Object, String>, String> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Object object0 = new Object();
      Map<Object, String> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0, class0);
      Integer integer0 = new Integer((-240));
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, (Object) integer0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Map<Object, Map<Object, String>>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Object, Map<Object, String>>>((Map<Object, Map<Object, Map<Object, Map<Object, String>>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put("", (Object) integer0, integer0);
      doubleKeyMap0.remove("", (Object) "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put("{g", "_", "{g");
      String string0 = doubleKeyMap0.put("{g", "|fa", "5R+(K\rdwy4ru!$}`G%");
      assertNull(string0);
  }
}
