/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 15:20:46 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Parser.parse("+?", 2712);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Parser.parse("h(?P<", 1761);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse(")rMis(t|y5", 4177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("|+b,w", 24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p+gd", (-475));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        Parser.parse("8(?P<", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 4145;
      String string0 = "(?P<";
      try { 
        Parser.parse("(?P<", 129);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Parser.parse("8(?P<", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "d(";
      int int0 = 120;
      try { 
        Parser.parse("d(", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `d(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Parser.parse("(9", 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      String string0 = ">+\"ca&6{\"-u";
      Regexp regexp0 = Parser.parse(">+\"ca&6{\"-u", (-1580));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse(">+\"ca&6{\"-u", (-1580));
      regexpArray0[2] = regexp2;
      String string1 = "";
      Regexp regexp3 = Parser.parse("", (-1580));
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[4] = regexp4;
      int int0 = (-1799);
      regexp2.cap = (-2884);
      try { 
        Parser.parse("\"w)HTV/6", (-1799));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        Parser.parse("+.BW;&(X|27>jM2", (-1079));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 1777;
      try { 
        Parser.parse("{?5h@cT$", 1777);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Regexp regexp0 = Parser.parse("@", (-2296));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 88;
      try { 
        Parser.parse(".)lY\"|nkr+B3X Q8+", 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp0 = Parser.parse("U.?Iye{o5&2m=j@", 0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp1 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp1.equals(object0);
      int int0 = (-476);
      regexp1.max = (-476);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Parser parser0 = new Parser("Inscriptional_Pahlavi", (-807));
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("Inscriptional_Pahlavi", 2376);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("Inscriptional_Pahlavi", 1290);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("Inscriptional_Pahlavi", 0);
      regexpArray0[3] = regexp4;
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[4] = regexp6;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp7 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp7;
      Regexp regexp8 = Parser.parse("Inscriptional_Pahlavi", (-807));
      regexpArray0[6] = regexp8;
      int int0 = (-876);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-876), (-807));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp regexp0 = Parser.parse(";qYw_-f3NzD5$]9>,}x", (-1651));
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1651);
      intArray0[1] = (-1651);
      intArray0[2] = (-1651);
      intArray0[3] = (-1651);
      intArray0[4] = (-1651);
      intArray0[5] = (-1651);
      intArray0[6] = (-1651);
      regexp0.runes = intArray0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 884, 884);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", (-3604));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-3349);
      Parser.parse("SbOA&KJh3+y} *p (", (-3349));
      Parser.parse("SbOA&KJh3+y} *p (", 2486);
      Parser.parse(".E/>]`>ND", (-3349));
      Parser parser0 = new Parser(".E/>]`>ND", (-969));
      int int1 = 0;
      try { 
        Parser.parse("ptPC+X%|)kY<%*Ok>", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      try { 
        Parser.parse("(", 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|\"+g", 1776);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p|", 112);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^wJ+tXHz3pv@", 0);
      Parser parser0 = new Parser("", 0);
      Parser.parse("^wJ+tXHz3pv@", 0);
      Regexp regexp1 = Parser.parse("", 0);
      regexp1.min = 0;
      Regexp regexp2 = Parser.parse("TR\"OA^]F", 0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexp2.cap = 0;
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      String string0 = regexp0.toString();
      assertEquals("^wJ+tXHz3pv@", string0);
      
      regexpArray0[2] = regexp1;
      regexp0.flags = 0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp2;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp1;
      Parser.subarray(regexpArray0, 0, 0);
      Regexp regexp3 = Parser.parse("Extender", 0);
      Regexp regexp4 = Parser.parse("gWN~!!S", 0);
      assertFalse(regexp4.equals((Object)regexp3));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Parser.parse("[", 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", 1245);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Regexp regexp0 = Parser.parse(">8", 32);
      Regexp regexp1 = Parser.parse("P^]F", 32);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "Sb\\OA&KJ9h3+y} *p (";
      int int0 = (-3360);
      try { 
        Parser.parse("SbOA&KJ9h3+y} *p (", (-3360));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `SbOA&KJ9h3+y} *p (`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "4vG+J=M_WhaaD";
      Parser parser0 = new Parser("4vG+J=M_WhaaD", 1069);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      String string1 = "[_DtZbdSneX{|_\"n+gd";
      int int0 = 41;
      try { 
        Parser.parse("[_DtZbdSneX{|_\"n+gd", 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[_DtZbdSneX{|_\"n+gd`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:]", (-5592));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      try { 
        Parser.parse("[^", 2277);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{5sVD", 1069);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3432, 1069);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Parser parser0 = new Parser(")rMis(t|y5", 4177);
      Regexp regexp0 = Parser.parse("h>K3=%cG{\u0007.;G\"", 4177);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0002d", (-988));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Parser.parse("^wJ+tXHz3pv@", 0);
      Parser parser0 = new Parser("", 0);
      Parser.parse("^wJ+tXHz3pv@", 0);
      Regexp regexp0 = Parser.parse("", 0);
      regexp0.min = 0;
      int int0 = 41;
      try { 
        Parser.parse("2%=vc|t%J#\"92bU%B)_", 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Regexp regexp0 = Parser.parse("ra|M", (-3972));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p+gd", (-1055));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Parser parser0 = new Parser(">g", 25);
      Parser.parse(">g", 934);
      try { 
        Parser.parse("@(0VpXq#D%_kx.", 25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `@(0VpXq#D%_kx.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "\\p|_\"n+gd";
      Parser parser0 = new Parser("p|_\"n+gd", (-3627));
      Parser.parse("Ru}p0h8I+,5jB|l", (-3627));
      Parser.parse("p|_\"n+gd", (-3627));
      int int0 = 2138;
      Parser.parse(string0, int0);
      String string1 = "%i*:H?S*BX,";
      int int1 = 1705;
      Parser.parse(string1, int1);
      Regexp[] regexpArray0 = new Regexp[0];
      int int2 = 510;
      int int3 = (-1796);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|r", 68);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Parser parser0 = new Parser("O*/F;", 39);
      Regexp regexp0 = Parser.parse("O*/F;", 3969);
      Regexp regexp1 = Parser.parse("O*/F;", 39);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "\\x{";
      int int0 = (-592);
      Parser.parse("x{", (-592));
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser.parse("x", (-592));
      String string0 = "Gurmukhi";
      int int0 = 248;
      Parser.parse(string0, int0);
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 92;
      Parser parser0 = new Parser("~ /*5>r:*P5dK", 92);
      Regexp regexp0 = Parser.parse("Pd", (-15));
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      int int1 = 46;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 92;
      Parser parser0 = new Parser("~ /*5>r:*P5dK", 92);
      Parser.parse("pP", 85);
      String string0 = "*CeEc";
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      int int0 = 1810;
      Regexp regexp3 = Parser.parse("Oriya", 1810);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("Oriya", 128);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp1);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse(";d$L9Pm2g{", 8);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("Rs*{ ^W-fcbn", 1425);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = new Regexp(regexp_Op0);
      regexpArray0[7] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1425, (-1021));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp regexp0 = Parser.parse("apP\"n+gd", 69);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 69, (-1385));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:alnum:]", 43704);
      Parser parser0 = new Parser("P$x[", 43704);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 36, 36);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        Parser.parse("]wwkUl>tU-[-h|KqM", (-2296));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-h|KqM`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Parser.parse("wwx>U-[-K|q", 4108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-K|q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("I7\"g 6+?urH", (-3362));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("z*M<49^-", 878);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("I7\"g 6+?urH", (-3158));
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("p+", 604);
      regexpArray0[5] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 91, 954);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 149;
      try { 
        Parser.parse("[:-5}v`y.<[Q/", 149);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Parser parser0 = new Parser("[:-h|KqM", 14);
      Regexp[] regexpArray0 = new Regexp[7];
      try { 
        Parser.parse("[:-h|KqM", 413);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-h|KqM`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "N\\rrN7\\";
      int int0 = 41;
      Parser.parse("N\rrN7", 41);
      Regexp[] regexpArray0 = new Regexp[0];
      int int1 = 1926;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 73;
      try { 
        Parser.parse("(?MP<", 73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?M`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 73;
      try { 
        Parser.parse("(?MP<", 73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?M`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Parser.parse("\b[d:xuz(i[D&", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[d:xuz(i[D&`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        Parser.parse("0l7[", (-2379));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|VG9$w^\f1h", 49);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|C- Z\u0001yS?^}X%3o", 129);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "N\\rrN7\\";
      int int0 = (-1816);
      Parser.parse("N\rrN7", (-1816));
      Regexp[] regexpArray0 = new Regexp[0];
      int int1 = 1926;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Regexp regexp0 = Parser.parse(">_-BcxXx/4cQlJXX4nK", (-2529));
      Regexp regexp1 = Parser.parse("W~Xk~h>#i!*R|WX", (-2296));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp regexp0 = Parser.parse("9oe|9", 101);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 101, 101);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, (-1374), 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = (-1703);
      try { 
        Parser.parse("]wwkUl>tU-[-h|KqM", (-1703));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-h|KqM`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Regexp regexp0 = Parser.parse("izxHF;:OPUOT.b", 43704);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Regexp regexp0 = Parser.parse("ixHF;:OPUOT:.b", 365);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Regexp regexp0 = Parser.parse("s", (-2184));
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      Parser.parse("invalid character class", 11819);
      Regexp regexp1 = Parser.parse("pum:]", 11819);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", (-1088));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("k5WopgG!#@v(@):", 41);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("=xEX", (-3627));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("=xEX", 1558);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp_Op0);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = Parser.parse("PP$x[", (-65));
      regexpArray0[7] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-793), 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000", 8348);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000s", 41);
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      Regexp regexp1 = Parser.parse("1", 741);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000s", 2364);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("Qa5]9|^n$J8#m|KU{", 109);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 66, 115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Parser parser0 = new Parser(" r;0*8ZE[|]0#iCp.", 46);
      Regexp regexp0 = Parser.parse("pPPi5x{", 10);
      Regexp regexp1 = Parser.parse("pPPi5x{", (-272));
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pM", (-1316));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        Parser.parse("(?-:$)", (-164));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 80);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[q]", 133);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:6]?", (-20));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Regexp regexp0 = Parser.parse("s", (-2107));
      Parser parser0 = new Parser("s", (-2107));
      Regexp regexp1 = Parser.parse("(?-s:.)", (-2107));
      assertFalse(regexp1.equals((Object)regexp0));
      
      Parser.subarray((Regexp[]) null, 75, 75);
      Regexp regexp2 = Parser.parse("s", 75);
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Regexp regexp0 = Parser.parse("gX=9\u0005+KWjC", 1476);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Parser parser0 = new Parser("y*3\t_", 985);
      Parser.parse("y*3\t_", 17);
      Regexp regexp0 = Parser.parse("y*3\t_", 7);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp regexp1 = Parser.parse("y*3\t_", 911);
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexp0.cap = 1733;
      regexpArray0[4] = regexp0;
      regexp1.reinit();
      regexp1.flags = (-277);
      int int0 = (-233);
      regexp1.name = "y*3\t_";
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 41, (-233));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", (-3032));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Parser parser0 = new Parser("s", 65);
      try { 
        Parser.parse("(?", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Parser parser0 = new Parser("=c", 114);
      Regexp regexp0 = Parser.parse("=c", (-1642));
      Regexp regexp1 = Parser.parse("=c", (-660));
      Regexp regexp2 = Parser.parse("z", (-660));
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 114, 1195);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 109);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Parser.parse("[^x00-x{10FFFF}]", (-1440515019));
      Regexp regexp0 = Parser.parse("invalid named capture", (-1440515019));
      Regexp regexp1 = Parser.parse("p@", (-1325));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PM", 2545);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Parser.parse("C~(\u0006{&", (-2623));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `C~(\u0006{&`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Parser.parse(".U-A?[Eu2", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[Eu2`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = (-1055);
      Parser.parse("pM", (-1055));
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-3490));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "Qk\\vu^\\i_vh9";
      Parser.parse("Qkvu^i_vh9", 9660);
      int int0 = 2565;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\i`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", (-63));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("f9.b O\u0000", (-4028));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Parser.parse("(?Ug(?:=", 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?Ug`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        Parser.parse("`mf<R(G[w# HW\u0003s8", 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[w# HW\u0003s8`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        Parser.parse("-[@+!fL-", 1665);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[@+!fL-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = (-1931);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("BDJS~n", (-1931));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      String string0 = "(?i:";
      try { 
        Parser.parse("(?i:", (-1931));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[6>]", 2020);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp regexp0 = Parser.parse("ABF", (-576));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[>=]", 149);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[>=]", (-979));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Regexp regexp0 = Parser.parse("f|q", 65516);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Parser.parse("Ds(b|N", 128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `Ds(b|N`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("8{^s{\u000E\u0007", 1928);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexpArray0[0]);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexpArray0[0]);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      int int0 = 623;
      Parser.subarray(regexpArray0, int0, int0);
      int int1 = 823;
      int int2 = 66639;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Parser parser0 = new Parser("BEGIN_LINE", (-2337));
      Regexp regexp0 = Parser.parse("[:>=]", 581);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp3;
      regexp0.name = "G[`";
      int int0 = 0;
      Regexp regexp4 = Parser.parse("OYt|Ms=\u0002zx5", 0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexpArray0[2]);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp2);
      regexpArray0[6] = regexp6;
      Regexp.Op regexp_Op2 = Regexp.Op.ALTERNATE;
      Regexp regexp7 = new Regexp(regexp_Op2);
      regexpArray0[7] = regexp7;
      String string0 = "No";
      regexp4.flags = int0;
      int int1 = 2450;
      Regexp regexp8 = Parser.parse(string0, int1);
      regexpArray0[8] = regexp8;
      int int2 = (-324);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        Parser.parse("\u0004PN[KyNd<K^LV", 1668);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[KyNd<K^LV`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pSRtXi;-Ct>Uw0", (-2579));
      Regexp regexp1 = Parser.parse("D", (-2579));
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2579), 515);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m)", 105);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Regexp regexp0 = Parser.parse("%X0B}\ntmco\"/!oO5^", 85);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P{E", 8173);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 64;
      Parser parser0 = new Parser("hY-ppGg@;Sa:?'3I3|5", 64);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("8 ,,!.@_", 41);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("ESH0jiV^l uHZy?@", 1600);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp0);
      regexpArray0[3] = regexp3;
      int[] intArray0 = new int[0];
      regexp3.runes = intArray0;
      int int1 = 2205;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2205, 64);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{98i<.rhp", (-1254));
      Regexp regexp1 = Parser.parse("{98i<.rhp", 105);
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-173), 105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Regexp regexp0 = Parser.parse("y|>|U^r-.&r x4w", 81);
      assertNotNull(regexp0);
  }
}
