/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:01:31 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Member;
import java.net.URI;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:", "0:", "0:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.getSignature("@4");
      Pattern.quote("@4");
      try { 
        Utility.typeOfSignature("Q@4E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q@4E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.getSignature("compiled from\t\t");
      try { 
        Utility.typeOfSignature("QsAQ36Ko");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QsAQ36Ko
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(Knys)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Knys)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-64);
      byteArray0[3] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.fillup("org.apache.bcel.classfile.Utility", 162, true, '.');
      assertEquals("org.apache.bcel.classfile.Utility.................................................................................................................................", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("32 00 00 00 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte)0;
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.clearBit((-540), 76);
      try { 
        Utility.methodSignatureReturnType("<init>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<init>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.accessToString(2352);
      assertEquals("final synchronized native strictfp", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.ILLEGAL_TYPE;
      byte byte0 = Utility.typeOfSignature("JL*zv)r8#:bvffG");
      assertEquals((byte)11, byte0);
      
      String string1 = Utility.accessToString((int) (byte)11, true);
      assertEquals("public private static", string1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('R');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(163, true);
      assertEquals("public private transient", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.compactClassName("tableswitch", true);
      Utility.accessToString((-2069), true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-74);
      byteArray0[1] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.format(12, 12, true, '8');
      try { 
        Utility.methodSignatureReturnType("128888888888");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `128888888888'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getstatic");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("getstatic", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("freturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.classOrInterface((-2823));
      try { 
        Utility.typeOfSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "0vLcEj@";
      Utility.convertString("Dnwb@{");
      Pattern.quote("0vLcEj@");
      String string0 = "if_icmplt";
      Utility.searchOpcode("if_icmplt");
      try { 
        Utility.typeOfSignature("0vLcEj@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0vLcEj@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte) (-59);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("33 c5", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.signatureToString("Z0~7y0{/_R<%|5");
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "Z0~7y0{/_R<%|5";
      objectArray0[2] = (Object) "Z0~7y0{/_R<%|5";
      objectArray0[3] = (Object) "Z0~7y0{/_R<%|5";
      objectArray0[5] = (Object) "boolean";
      objectArray0[6] = (Object) "boolean";
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      assertEquals("{null, \"Z0~7y0{/_R<%|5\", \"Z0~7y0{/_R<%|5\", \"Z0~7y0{/_R<%|5\", null, \"boolean\", \"boolean\"}", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.compactClassName("", false);
      assertEquals("", string0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Utility.compactClassName("<illegal opcode>");
      assertEquals("<illegal opcode>", string0);
      
      int int0 = Utility.clearBit(2780, 2780);
      assertEquals(2780, int0);
      
      short short0 = Utility.searchOpcode("<illegal opcode>");
      assertEquals((short)203, short0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('N');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      String string0 = "ret";
      // Undeclared exception!
      try { 
        Utility.signatureToString("ret");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ret'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = Constants.OPCODE_NAMES;
      boolean boolean0 = Utility.isJavaIdentifierPart('d');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      String string0 = Utility.replace("void", "void", "long");
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("eMYK u,PW", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eMYK u,PW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte byte0 = Constants.ITEM_Bogus;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Bp`&cJ4)\"y*Pv5J", "Unreachable default case reached!", "Unreachable default case reached!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `p`&cJ4)\"y*Pv5J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.signatureToString("Z0~7y0{/_R<%|5");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Z0~7y0{/_R<%|5";
      stringArray0[1] = "Z0~7y0{/_R<%|5";
      String string0 = Utility.methodTypeToSignature("Invalid frame type found while parsing stack map table: ", stringArray0);
      assertEquals("(LZ0~7y0{/_R<%|5;LZ0~7y0{/_R<%|5;)LInvalid;", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("RsLYfS\u0001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RsLYfS\u0001'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[2];
      String string0 = "LF";
      // Undeclared exception!
      try { 
        Utility.signatureToString("LF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("jsr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.methodSignatureReturnType("CONSTANT_Long", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte) (-2));
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-2), (int) (byte) (-2), true);
      assertEquals("0:    impdep1\n", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Utility.getSignature("? extends ");
      assertEquals("L?;", string0);
      
      String string1 = Utility.signatureToString("L?;");
      assertEquals("?", string1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[4] = (byte)58;
      byteArray0[4] = (byte)44;
      Locale.getISOLanguages();
      try { 
        Utility.typeOfSignature("1e*)aJUZx3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1e*)aJUZx3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-31);
      byteArray0[3] = (byte) (-57);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-76), 178, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 57600. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)16;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)16, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47288. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantDouble constantDouble0 = new ConstantDouble(2289.506221327);
      int int0 = 3;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2487), 3, false);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.typeOfSignature("SourceFile: ");
      Utility.replace("? extends ", "SourceFile: ", "SourceFile: ");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((byte)41);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, (-3544), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-76);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-17);
      Utility.convertString("4E28Adz?Rp");
      Pattern.quote("short");
      String string0 = "invokevirtual";
      Utility.searchOpcode("invokevirtual");
      try { 
        Utility.typeOfSignature("4E28Adz?Rp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4E28Adz?Rp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Zn_nlB!0$(9Fmhx0");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = Constants.ITEM_Object;
      Utility.format((-109), (-109), true, '^');
      try { 
        Utility.methodSignatureReturnType("Nb", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-1);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8$db$ff", "8$db$ff", "8$db$ff", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8$db$ff
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-94);
      Utility.typeOfSignature("[!?Y[hsfxX3");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.getSignature("<init>");
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      Utility.classOrInterface((-2961));
      Utility.searchOpcode("class");
      try { 
        Utility.typeOfSignature("$kb}iTC,20vgsv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $kb}iTC,20vgsv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.format(76, '9', true, '9');
      try { 
        Utility.typeOfSignature("3Jk2wi|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3Jk2wi|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.getSignature("goto_w");
      try { 
        Utility.typeOfSignature("?,OA6v5$^E<'Us/]gN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?,OA6v5$^E<'Us/]gN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-44);
      Utility.format(88, (byte) (-31), false, '');
      Utility.format(55, 764, false, 'T');
      try { 
        Utility.typeOfSignature("2,\"`yBN}y0d# /S($");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2,\"`yBN}y0d# /S($
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature("85pcWF)l2(lSM3k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 85pcWF)l2(lSM3k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Zn_nlB!0$(9Fmhx0");
      try { 
        Utility.typeOfSignature("Nb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.convertString("oNaQt.\",jh2[:7o");
      Utility.getSignature("fvd} %k^G6~9?&:L:");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.convertString("|R\"i>n@R|\"Ki&9");
      Utility.compactClassName("|R\"i>n@R|\"Ki&9", "|R\\\"i>n@R|\"Ki&9", false);
      Utility.getSignature("|R\"i>n@R|\"Ki&9");
      try { 
        Utility.typeOfSignature("QsAQ36Ko");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QsAQ36Ko
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)41;
      Utility.format((-4955), (byte)0, false, '%');
      short short0 = Constants.DREM;
      try { 
        Utility.typeOfSignature("-4955");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -4955
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[6] = (byte) (-67);
      byteArray0[4] = (byte)0;
      Utility.methodTypeToSignature("\t", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      ConstantLong constantLong0 = new ConstantLong((byte)53);
      String string0 = ";#w2";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature(";#w2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;#w2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantLong constantLong0 = new ConstantLong((-5118L));
      constantLong0.toString();
      constantPool0.constantToString((Constant) constantLong0);
      Utility.typeOfSignature("CONSTANT_Long[5](bytes = -5118)");
      try { 
        Utility.typeOfSignature("-5118");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -5118
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      byte[] byteArray1 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream0.reset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of suffixes must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.toHexString(byteArray0);
      Utility.clearBit((-3), (byte) (-2));
      Utility.toHexString(byteArray0);
      Utility.signatureToString("TU8M$,@T;");
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mc@bQ,@4EPV");
      boolean boolean0 = true;
      Pattern.quote("Mc@bQ,@4EPV");
      int int0 = (-3435);
      Utility.format((-3435), (-3435), true, ';');
      Utility.searchOpcode("Dnwb@{");
      Utility.typeOfSignature("Dnwb@{");
      byte byte0 = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.typeOfSignature("INxf4\"~a(%D'%@TY6Xq");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("INxf4\"~a(%D'%@TY6Xq", false);
      Utility.compactClassName("=~m w3uf9 Z7", false);
      short short0 = Constants.DREM;
      try { 
        Utility.typeOfSignature("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.format((-4964), (byte)117, false, '%');
      try { 
        Utility.typeOfSignature("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%-4964");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%-4964
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = "*O:sz7|8;YT_c>n#";
      try { 
        Utility.typeOfSignature("*O:sz7|8;YT_c>n#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O:sz7|8;YT_c>n#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      int int0 = 332;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(94, (byte)117, true, 'u');
      Utility.searchOpcode("94uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu");
      try { 
        Utility.typeOfSignature("94uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 94uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("Dnwb@{", false);
      Pattern.quote("0vLcEj@");
      ConstantLong constantLong0 = new ConstantLong(0L);
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.convertString("6}A&");
      Utility.encode(byteArray0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      try { 
        constantPool0.getConstant((-3196), (byte)114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -3196. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[2] = (byte) (-102);
      byteArray0[1] = (byte)44;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Constants.ILLEGAL_TYPE;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 24, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.convertString("|R\"i>n@R|\"Ki&9");
      Utility.compactClassName("|R\"i>n@R|\"Ki&9", "|R\\\"i>n@R|\"Ki&9", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)64;
      byteArray0[1] = (byte)44;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.setBit(2296, 2296);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      Utility.format((byte) (-44), 152, true, 'Y');
      try { 
        Utility.typeOfSignature("K/Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K/Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Utility.format(764, 65, false, 'Q');
      Utility.searchOpcode("f%2]");
      try { 
        Utility.typeOfSignature(")lkv-yX x/`%,^]U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )lkv-yX x/`%,^]U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        Utility.typeOfSignature("XUc$`*O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XUc$`*O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.compactClassName(", low= ", false);
      Utility.typeOfSignature("BR$bH|5ocx.*");
      try { 
        Utility.methodSignatureReturnType(", low= ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, low= '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "(Bp`&cJ4)\"y*PvJ";
      Utility.compactClassName("(Bp`&cJ4)\"y*PvJ", "(Bp`&cJ4)\"y*PvJ", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ConstantLong constantLong0 = new ConstantLong((byte)0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-116);
      byteArray1[1] = (byte) (-116);
      byteArray1[2] = (byte)41;
      Utility.equals(byteArray1, byteArray0);
      Utility.fillup("Illegally nested brackets:", 358, true, 'v');
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "MofUP}";
      try { 
        Utility.typeOfSignature("MofUP}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MofUP}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.convertString("Bh:<b=SVNw=");
      Utility.getSignature("");
      ConstantLong constantLong0 = new ConstantLong(0L);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)54;
      boolean boolean0 = true;
      String string0 = "S/KB_f'vm!\\<";
      String string1 = "goto_w";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">", (String) null, "S/KB_f'vm!<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w");
      Pattern.quote("Mc@bQ,@4aPV");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-116);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 107, 61, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((byte)41);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)59, 76);
      Constant[] constantArray1 = new Constant[2];
      constantArray1[0] = (Constant) constantLong0;
      constantArray1[1] = (Constant) constantLong0;
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.getSignature("42PfM3,U]ovy07");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 617, 3733, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.convertString("Bh:<b=SVNw=");
      ConstantLong constantLong0 = new ConstantLong((-9L));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.getSignature("\t<");
      Utility.isSet((-1825), (-1825));
      ConstantLong constantLong0 = new ConstantLong((-1825));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)54, (-280), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 178, 178);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)83;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3191, (int) (byte)21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("\n", stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfMethodSignature("()L\n;");
      Utility.isJavaIdentifierPart('Y');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("void", "java.lang.", "java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-85), 80);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      int int0 = (-2646);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      try { 
        Utility.typeOfSignature(">BAL2>G5w210&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >BAL2>G5w210&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char char0 = 'A';
      String string0 = "5;-Bw&/~`Is7|,e+";
      Utility.fillup("5;-Bw&/~`Is7|,e+", (-463), true, 'A');
      Utility.format((-304), (-463), true, 'A');
      try { 
        Utility.typeOfSignature("7KkQE4*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7KkQE4*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.typeOfSignature("Bh:<b=SVNw=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("Bh:<b=SVNw=", false);
      boolean boolean0 = false;
      Utility.compactClassName("", false);
      try { 
        Utility.typeOfSignature("5O;QYagfp+M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5O;QYagfp+M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      try { 
        Utility.typeOfSignature("6}{:3;{}t3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6}{:3;{}t3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-28L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-91);
      Utility.convertString("INxf4\"~a(%D'%@TY6Xq");
      Pattern.quote("INxf4\"~a(%D'%@TY6Xq");
      Utility.typeOfSignature("INxf4\"~a(%D'%@TY6Xq");
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = ":|c7|8AY(T_c_>n#";
      byte byte0 = Constants.ATTR_RUNTIMEINVISIBLE_PARAMETER_ANNOTATIONS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("ifge", stringArray0);
      try { 
        Utility.typeOfSignature(":|c7|8AY(T_c_>n#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :|c7|8AY(T_c_>n#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mc@bQ,@4aPV");
      Pattern.quote("Dnwb@{");
      Utility.format(240, 70, false, 'F');
      Utility.searchOpcode(">\t");
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      Utility.compactClassName(">\t");
      ConstantPool constantPool0 = null;
      try { 
        Utility.typeOfSignature(".1Rlr+99y7^/QP2Cy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .1Rlr+99y7^/QP2Cy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)53);
      try { 
        Utility.methodSignatureReturnType("Mla\"8o6oHd (", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mla\"8o6oHd ('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.isSet(7, 7);
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.typeOfSignature("JL*zv)r8#:bvffG");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = true;
      byte byte0 = (byte) (-38);
      try { 
        Utility.typeOfSignature("Ud");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ud
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('8');
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.getSignature("short");
      // Undeclared exception!
      try { 
        Utility.signatureToString("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "/A!$iW/";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/A!$iW/";
      stringArray0[2] = "/A!$iW/";
      stringArray0[3] = "RsLYfS\u0001";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RsLYfS\u0001");
      stringArray0[4] = "RsLYfS\u0001";
      Utility.convertString("dconst_0");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)107, 196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[0] = (byte)83;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3191, (int) (byte)83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.setBit((-802), (-802));
      Utility.isSet((-802), 2270);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "HH<Jf#d$";
      byte byte0 = Constants.T_VOID;
      Utility.isJavaIdentifierPart('_');
      // Undeclared exception!
      try { 
        Utility.signatureToString("f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-17);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte byte0 = Constants.CONSTANT_NameAndType;
      Utility.compactClassName("");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Pattern.quote("if_icmpeq");
      try { 
        Utility.typeOfSignature("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.searchOpcode("QV&[13C_[y/wh{8pJ");
      Utility.typeOfSignature("The suffix must not be null");
      Utility.getSignature("t&|E6!>B^sF'x$(Ym2");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)120, 1039);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      MockFile mockFile0 = new MockFile(", low= ", "<init>");
      Utility.setBit((-220), (byte) (-102));
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(1029L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">RH{");
      ConstantLong constantLong1 = new ConstantLong(1029L);
      byte[] byteArray1 = new byte[8];
      byteArray1[1] = (byte)95;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)75;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte) (-125);
      byteArray1[7] = (byte) (-58);
      Utility.equals(byteArray1, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("*:F}7h1I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *:F}7h1I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte byte0 = (byte) (-84);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), (int) (byte) (-84), true);
      // Undeclared exception!
      try { 
        Utility.getSignature("`} :Ds[G9W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[G9W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = null;
      try { 
        Utility.typeOfSignature("<unknown object>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <unknown object>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.getSignature("<init>");
      try { 
        Utility.methodSignatureReturnType("L<init>;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `init>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.getSignature("U={<4By#5");
      short short0 = Constants.INT2CHAR;
      // Undeclared exception!
      try { 
        Utility.signatureToString("LU={<4By#5;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU={<4By#5;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.getSignature("goto_w");
      try { 
        Utility.typeOfSignature("QsAQ36Ko");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QsAQ36Ko
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RsLYfS\u0001";
      stringArray0[1] = "g";
      stringArray0[2] = "g";
      stringArray0[3] = "RsLYfS\u0001";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C{Jz8&7*U");
      stringArray0[4] = "C{Jz8&7*U";
      try { 
        Utility.typeOfSignature("RsLYfS\u0001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RsLYfS\u0001
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("? extends ", "void", "java.lang.");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(descriptor_index = ";
      stringArray0[1] = "? extends ";
      stringArray0[2] = "? extends ";
      stringArray0[3] = "? extends ";
      stringArray0[4] = "void";
      try { 
        Utility.methodTypeToSignature("java.lang.", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "Oc m ty#MnC%t.B=M;m";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Oc m ty#MnC%t.B=M;m", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Oc m ty#MnC%t.B=M;m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (-484), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.getSignature("42PfM3,U]ovy07");
      ConstantLong constantLong0 = new ConstantLong((-283));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool1.copy();
      constantPool2.toString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)113, (int) (byte) (-127), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.format((-6306), (byte)125, false, '~');
      Utility.searchOpcode("l");
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      Utility.format(2764, (byte)126, false, 'V');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), 2764, false);
      try { 
        Utility.typeOfSignature("goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-124), (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RsLYfS\u0001";
      stringArray0[0] = "RsLYfS\u0001";
      stringArray0[2] = "g";
      stringArray0[3] = "RsLYfS\u0001";
      stringArray0[4] = "C{Jz8&7iU";
      stringArray0[5] = "RsLYfS\u0001";
      Constant[] constantArray0 = new Constant[10];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-124);
      byteArray0[3] = (byte) (-84);
      byteArray0[1] = (byte) (-88);
      byteArray0[5] = (byte)19;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)19, 175, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)118;
      ConstantPool constantPool2 = constantPool0.copy();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, constantPool2, (int) (byte) (-121), (int) (byte) (-121));
      Utility.isJavaIdentifierPart('H');
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Zn_nlB!0$(9Fmhx0");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[5] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.isSet((byte)80, (byte)0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("r>5##", "lastore", "lastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r>5##
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)23;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)23, (int) (byte)106, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        Utility.typeOfSignature("#?~=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #?~=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)19);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[4] = (byte)19;
      int int0 = 1202;
      int int1 = 1547;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)113, 1547);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 19. Constant pool size is: 10
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-28L));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantString constantString0 = new ConstantString((-4009));
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 82, 119, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.convertString("Bh:<b=SVNw=");
      Utility.getSignature("Bh:<b=SVNw=");
      ConstantLong constantLong0 = new ConstantLong(0L);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool1.setConstantPool(constantArray0);
      ConstantPool constantPool3 = constantPool1.copy();
      constantPool2.toString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool3, (int) (byte)44, (int) (byte)44, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = ", low'R";
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        Utility.decode("BR$bH|5ocx.*", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"bH\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.toString();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.decode("$._Eg{?E[", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)22;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)106, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    fmul
         // 4:    lload\t\t%0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-96);
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-96), (int) (byte)59, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    if_icmpne\t\t#-24575
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      byte byte0 = Constants.CONSTANT_NameAndType;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.isSet(82, (byte)38);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte)12;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[8] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 228, 121, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-119);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1);
      try { 
        Utility.methodSignatureArgumentTypes("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = Constants.T_CHAR;
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureToString("*O|c7|Y(_cJ_I>n#=", "static", "static", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *O|c7|Y(_cJ_I>n#=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)22;
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)74, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    iload_0
         // 3:    dstore_3
         // 4:    lload\t\t%0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.setConstantPool(constantArray0);
      constantPool1.toString();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((-598L));
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Utility.searchOpcode("Sensitive");
      Utility.printArray((Object[]) constantArray0);
      Utility.methodSignatureReturnType("Sensitive", false);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)2;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)5);
      constantDouble0.copy();
      Utility.methodSignatureReturnType("Invalid type: ", true);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 38, (int) (byte)5, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte) (-46);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2042, (int) (byte) (-16));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.getSignature("\nAttribute(s):\n");
      int int0 = 76;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 172, (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte byte0 = (byte)62;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantString constantString0 = new ConstantString((byte)19);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 102, (int) (byte) (-98), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weYo(+`?G");
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-66);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-66), (int) (byte)25, false);
      Utility.getSignature("byte");
      Utility.printArray((Object[]) constantArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[0];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)91, (-4382));
      try { 
        Utility.typeOfSignature("\"()");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"()
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[4] = (byte)58;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 254, (int) (byte)58, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char char0 = '~';
      boolean boolean0 = false;
      String string0 = "l";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l");
      short short0 = Constants.ACC_SUPER;
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      try { 
        Utility.typeOfSignature("/#5.z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /#5.z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RsLYfS\u0001";
      stringArray0[1] = "g";
      stringArray0[3] = "RsLYfS\u0001";
      stringArray0[4] = "RsLYfS\u0001";
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(92, 92);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RsLYfS\u0001");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = Utility.decode("g", false);
      String[] stringArray1 = Constants.SHORT_TYPE_NAMES;
      constantPool0.setConstantPool((Constant[]) null);
      Utility.searchOpcode("LocalVariable");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 92, (int) (byte) (-35), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)24, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      Utility.codeToString(byteArray0, constantPool0, (-1263), (-1263));
      ConstantString constantString0 = null;
      ConstantString constantString1 = null;
      try {
        constantString1 = new ConstantString((ConstantString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.compactClassName("pop2", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Pattern.CANON_EQ;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      Utility.convertString("instanceof");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 49, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.format('S', 'S', false, 'S');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), 170, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, (int) (byte) (-63), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      Utility.typeOfSignature("[!?Y[hsfxX3");
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature("[!?Y[hsfxX3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [!?Y[hsfxX3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RsLYfS\u0001";
      stringArray0[1] = "g";
      stringArray0[3] = "RsLYfS\u0001";
      stringArray0[4] = "RsLYfS\u0001";
      Constant[] constantArray0 = new Constant[8];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)93;
      byteArray0[0] = (byte) (-109);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 82, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "QsAQ36Ko";
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Utility.signatureToString("QsAQ36Ko");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QsAQ36Ko'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantLong constantLong0 = new ConstantLong((byte)32);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString((Constant) constantLong0);
      Utility.convertString("i>bc0s");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)93;
      byteArray0[0] = (byte)32;
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1311, 227, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)38;
      Utility.typeOfSignature("[!?Y[hsfxX3");
      Utility.convertString("#;|`N$3");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, (-701));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WSTi9l?.qc\"Iy2Z");
      String string0 = "y9Xx$";
      ClassPath classPath0 = new ClassPath("y9Xx$");
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1026, 1340, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Constant[] constantArray0 = new Constant[14];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-127));
      constantDouble0.clone();
      constantDouble0.copy();
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)60;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.CONSTRUCTOR_NAME;
      try { 
        Utility.methodSignatureReturnType("UkSR=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UkSR='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)84;
      byte byte0 = (byte)75;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      int int0 = 89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 89, (int) (byte)75, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.convertString("interf\"ace");
      ConstantPool constantPool2 = constantPool1.copy();
      constantPool0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      constantPool3.copy();
      MockFile mockFile0 = new MockFile(" ,P");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ConstantPool constantPool4 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      Utility.codeToString(byteArray0, constantPool2, (-244), (int) (byte)105);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("k$?6U)t!C[", "static", "C_&G_,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k$?6U)t!C[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "HH<Jf#d$";
      try { 
        Utility.typeOfSignature("HH<Jf#d$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HH<Jf#d$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern.quote("Dnwb@{");
      Utility.format(244, 70, false, 'F');
      Utility.searchOpcode(">\t");
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      Utility.compactClassName(">\t");
      Utility.typeOfSignature("V>I0b(m/Q[Myvb");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      int int0 = Pattern.CANON_EQ;
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(btes = ", "(btes = ", "?7dP`\"v|d<H9D)S,d", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `btes = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-106);
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte) (-106);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.format((byte)38, (byte)38, false, '!');
      try { 
        Utility.typeOfSignature("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!38");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 38
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.searchOpcode("FC!p(}");
      byte byte0 = ElementValue.CLASS;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-117);
      byteArray0[1] = (byte)99;
      Utility.methodSignatureReturnType("FC!p(}", false);
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString((ConstantString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte byte0 = Constants.ITEM_Long;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("[!?Y[hsfxX3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!?Y[hsfxX3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte byte0 = (byte)41;
      ConstantLong constantLong0 = new ConstantLong((byte)41);
      ConstantString constantString0 = new ConstantString((byte) (-52));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("VJh", "}fbkx[s:1", "ez0#eS`");
      Utility.classOrInterface((-558));
      try { 
        Utility.methodSignatureReturnType("G~|s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G~|s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)9;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-78);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 7, 177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45577. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RsLYfS\u0001";
      stringArray0[2] = "g";
      stringArray0[3] = "RsLYfS\u0001";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C{uz8&7*`");
      stringArray0[4] = "C{uz8&7*`";
      Constant[] constantArray0 = new Constant[5];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)51;
      byteArray0[0] = (byte) (-109);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-92);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 668, (int) (byte) (-109), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[4] = (byte)63;
      ConstantString constantString0 = new ConstantString((byte)63);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-82), 1, true);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte byte0 = (byte) (-94);
      byte byte1 = ObjectStreamConstants.TC_BLOCKDATA;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantLong constantLong0 = new ConstantLong((-2747L));
      constantLong0.toString();
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)100, 125, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-76);
      byteArray0[3] = (byte) (-76);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.methodSignatureReturnType("V", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = Member.DECLARED;
      Utility.setBit((byte)0, 174);
      Utility.equals(byteArray0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.compactClassName("(Bp`&cJ4)\"y*PvJ", "(Bp`&cJ4)\"y*PvJ", false);
      Utility.searchOpcode("(Bp`&cJ4)\"y*PvJ");
      ConstantLong constantLong0 = new ConstantLong(889L);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString(constantArray0[0]);
      Utility.convertString("889");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      byte[] byteArray1 = Utility.decode("889", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 125, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte byte0 = Constants.ATTR_RUNTIMEINVISIBLE_PARAMETER_ANNOTATIONS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[4] = (byte)15;
      byteArray0[2] = (byte) (-94);
      byteArray0[7] = (byte)15;
      byteArray0[5] = (byte) (-94);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4), (int) (byte)15);
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.isJavaIdentifierPart('8');
      Utility.format(1334, 1334, true, '8');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hp,OP-?eAGzou{.I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hp,OP-?eAGzou{.I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = false;
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      int int0 = 9985;
      byte[] byteArray0 = new byte[3];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 9985, (int) (byte)76, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.format('S', 'S', false, 'S');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-65);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, 1129, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-2510L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-1731);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 184, (-1731), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((byte)41);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantLong0;
      constantArray0[6] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.accept(emptyVisitor0);
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor1);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte)41, (int) (byte)60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.setConstantPool(constantArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)95);
      constantLong0.setBytes((byte)19);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)95;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)19;
      Utility.compactClassName("", false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)96;
      byteArray1[1] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 9955, 4344, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)117;
      int int0 = (-4964);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.classOrInterface((-4964));
      Utility.compactClassName(" jx|q0FlS6O[Lm^", "class", false);
      int int1 = (-215);
      Utility.classOrInterface((-215));
      Utility.codeToString(byteArray0, constantPool0, (-215), 81, false);
      byte[] byteArray1 = Utility.decode("class", false);
      Utility.codeToString(byteArray1, constantPool0, (-215), 81, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      short short0 = Constants.ANEWARRAY;
      byte byte0 = ElementValue.CLASS;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2355, 2355);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-2510L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      ConstantString constantString0 = new ConstantString((byte)102);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 0, 73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    fsub
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte byte0 = (byte)18;
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(byteArray0);
      byteArrayOutputStream0.write(byteArray0);
      byteArrayOutputStream0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wide");
      byteArrayOutputStream0.flush();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte1 = ObjectStreamConstants.TC_MAX;
      byte[] byteArray1 = Utility.decode("Fm9@t(y=^(B#?1G", false);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)126, 2020);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte byte0 = (byte)112;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)112, (int) (byte)112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte byte0 = (byte) (-119);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), (int) (byte) (-84), true);
      // Undeclared exception!
      try { 
        Utility.getSignature("`} :Ds[G9W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[G9W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.format('S', 'S', false, 'S');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-65);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, 1129, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      Utility.compactClassName("invokestatic");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      char char0 = File.pathSeparatorChar;
      byteSequence0.readBoolean();
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), 235);
      Utility.setBit(189, 40);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-3126L));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)32;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2613, (-2422));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      Utility.isJavaIdentifierPart('7');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), (int) (byte) (-84), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-218), (-1941));
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 187, (-1941));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-30);
      byteArray0[1] = (byte) (-104);
      byteArray0[3] = (byte)19;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "29 a0 bb a8");
      Utility.compactClassName("^V'oGX", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 190, (int) (byte)18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q\".AZl%WJSJsWhXN");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(72, 66);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, 23, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[3] = stringArray0[2];
      Constant[] constantArray0 = new Constant[10];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      boolean boolean0 = false;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)116, (int) (byte)116, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte) (-63);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2615), (-2615));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Zn_nlB!0$(9Fmhx0");
      Utility.classOrInterface((byte)4);
      String[] stringArray0 = Constants.ATTRIBUTE_NAMES;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-69);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 201, 136);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantString constantString0 = new ConstantString((-2647));
      ConstantString constantString1 = new ConstantString(constantString0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool1.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      Utility.codeToString(byteArray0, constantPool1, (-3385), 1293, true);
      Utility.compactClassName("0:    <illegal opcode>\n1:    freturn\n2:    freturn\n", "0:    <illegal opcode>\n1:    freturn\n2:    freturn\n", true);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q\".AZl%WJSJMsWhXN");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("java.lang.0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    dcmpg\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.compactClassName("0&", false);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)44;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("PAjpU,1p9N4L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PAjpU,1p9N4L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantLong constantLong0 = new ConstantLong((byte)32);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.accept(emptyVisitor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)59, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.compactClassName("(Bp`&cJ4)\"y*PvJ", "(Bp`&cJ4)\"y*PvJ", false);
      Utility.searchOpcode("(Bp`&cJ4)\"y*PvJ");
      ConstantLong constantLong0 = new ConstantLong(889L);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantLong0;
      constantLong0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString(constantArray0[0]);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)75;
      constantLong0.setBytes(1L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)40, 187);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.typeOfSignature("[!?Y[hsfxX3");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)13, 753);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "C{Jz8&7iU";
      Constant[] constantArray0 = new Constant[10];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[5] = (byte) (-88);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "compiled from\t\t");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-88), 175, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2s
         // 1:    f2d
         // 2:    nop
         // 3:    f2d
         // 4:    nop
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)16;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)16, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte byte0 = (byte)17;
      byte byte1 = (byte)49;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)17;
      int int0 = 2664;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 2664, true);
      try { 
        Utility.methodSignatureReturnType("0:    nop\n1:    daload\n2:    sipush\t\t0\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    daload
         // 2:    sipush\t\t0
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      MockFile mockFile0 = new MockFile("}lU");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantLong constantLong0 = new ConstantLong(29L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPool0.copy();
      Locale.getISOLanguages();
      try { 
        Utility.typeOfSignature("A;H`VHz#kWT8H>oz0l>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A;H`VHz#kWT8H>oz0l>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      byte byte1 = Constants.ATTR_CONSTANT_VALUE;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, 201);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.format('S', 'S', false, 'S');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.readShort();
      byteSequence0.reset();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence1);
      ConstantString constantString0 = new ConstantString((-2259));
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS83");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantNameAndType0;
      constantArray0[4] = (Constant) constantString0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eNr()t_pC4gVAV");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)61, (-1510), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)16;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 172, (-1140));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.isJavaIdentifierPart('E');
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)67;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Illegal type: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.convertString("(");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.compactClassName("({");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1159, (-283));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool0.accept(emptyVisitor0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-62);
      byteArray0[3] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 139, (int) (byte) (-62));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Constants.ILLEGAL_TYPE;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantValue constantValue0 = new ConstantValue((-2794), (-705), (-654), constantPool1);
      Utility.getSignature("<illegal type>");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-59), (int) (byte) (-59), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)18;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)18, 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.format('S', 'S', false, 'S');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)82;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), 170, false);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=lDL`cT3d`~d@Da_S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =lDL`cT3d`~d@Da_S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.accept(emptyVisitor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      int int0 = 1722;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1722, (int) (byte) (-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      byte byte0 = (byte) (-112);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" jx|q0FlS6O[Lm^");
      mockPrintStream0.write((int) (byte) (-112));
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantPool0.setConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-57), (int) (byte) (-112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    d2f
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantLong constantLong0 = new ConstantLong((byte)32);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f2i");
      constantLong0.toString();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString((Constant) constantLong0);
      Utility.convertString("ifnull");
      Utility.printArray((Object[]) constantArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<illegal opcode>", "<illegal opcode>", "p|LHp}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[0] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)28, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      byte[] byteArray0 = Utility.decode(", high = ", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 125, 599, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      Utility.setBit(6, 7);
      Utility.typeOfSignature("F#8`}");
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)48;
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      byte[] byteArray1 = Utility.decode("M>s5<kE{", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool2, 97, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-106));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble0.copy();
      boolean boolean0 = false;
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      int int0 = 9985;
      byte[] byteArray0 = new byte[3];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 9985, (int) (byte) (-106), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Zn_nlB!0$(9Fmhx0");
      try { 
        Utility.methodSignatureReturnType("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("F#8`}");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Utility.compactClassName("F#8`}", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("F#8`}");
      String string0 = "k";
      MockFile mockFile0 = new MockFile("k");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "4+O#kFcJUQ)/Y'Q4;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"4+O#kFcJUQ)/Y'Q4;\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.signatureToString("Z0~7y0{/_R<%|5");
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "Z0~7y0{/_R<%|5";
      objectArray0[2] = (Object) "Z0~7y0{/_R<%|5";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-89);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-89), (int) (byte) (-89), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte byte0 = (byte)26;
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byteArrayOutputStream0.write(byteArray0);
      byteArrayOutputStream0.write(byteArray0);
      byteArrayOutputStream0.close();
      byte byte1 = (byte) (-99);
      byte byte2 = (byte)62;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.decode("/7k$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte byte0 = (byte) (-106);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-106));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      byteArray0[0] = (byte) (-106);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      byteArray0[2] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 9985, (int) (byte) (-106), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((-4382));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantInteger0.accept(emptyVisitor0);
      ConstantInteger constantInteger1 = new ConstantInteger((byte) (-56));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 239, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("&jz^Mie0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &jz^Mie0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "putfield");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      constantPool0.copy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-128);
      byteArrayOutputStream0.write(byteArray0);
      byteArrayOutputStream0.flush();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(dataOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)78;
      byteArray1[4] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool2, (int) (byte)78, (int) (byte)78, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      byte byte0 = (byte) (-85);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = 90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-105), 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dcmpl
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-3126L));
      ConstantLong constantLong1 = new ConstantLong(1029L);
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)95;
      byteArray0[1] = (byte) (-119);
      byteArray0[1] = (byte)95;
      byteArray0[4] = (byte)96;
      Utility.decode("n`o$M(cIM[D-Dw$4", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringWriter stringWriter0 = new StringWriter((byte)96);
      Utility.clearBit((byte)96, (byte)96);
      Utility.searchOpcode("}");
      Utility.classOrInterface(3645);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantLong constantLong0 = new ConstantLong((byte)32);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString((Constant) constantLong0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      Utility.decode("$x4", false);
      Utility.compactClassName("$x4");
      Utility.searchOpcode("bPT:TUI0");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e$s{uDmt");
      byte[] byteArray0 = new byte[10];
      byteArray0[7] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)37;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-47), (int) (byte) (-47), false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3243);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream((-2102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte byte0 = (byte)85;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[3] = (byte)85;
      byteArray0[3] = (byte)85;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)85, (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      byte byte0 = (byte)124;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      Utility.codeToString(byteArray0, constantPool0, (-663), (int) (byte)124, false);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool1.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 40, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 145, (int) (byte)35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Constant[] constantArray0 = new Constant[14];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-127));
      constantDouble0.copy();
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)68;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-2094), (int) (byte)36);
      try { 
        Utility.methodSignatureArgumentTypes("freturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-61), 158);
      ConstantString constantString0 = null;
      ConstantString constantString1 = null;
      try {
        constantString1 = new ConstantString((ConstantString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      Utility.codeToString(byteArray0, constantPool0, (-663), (int) (byte) (-113), false);
      ConstantLong constantLong0 = new ConstantLong((byte) (-113));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.constantToString((Constant) constantLong1);
      Utility.convertString("1&5(uaP+54kg}L/");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      Utility.decode("0:    d2l\n", false);
      constantPool0.constantToString((Constant) constantLong1);
      constantPool1.copy();
      Utility.setBit((byte) (-113), 217);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("-113", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-113'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.compactClassName("HH<Jf#d$");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "R'Pp";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("R'Pp", "U'lt`%u91vtu");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // U'lt`%u91vtu
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.typeOfSignature("Zn_nlB@!$9Fmh=");
      JavaClass.getComparator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfMethodSignature("(byte@ = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (byte@ = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-41);
      Utility.printArray((Object[]) constantArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65, (int) (byte)10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-57);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-68);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 6, (int) (byte) (-68));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      MockFile mockFile0 = new MockFile("7FZ2H3w#|%&<");
      constantPool1.copy();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7FZ2H3w#|%&<";
      Utility.methodTypeToSignature("", stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPool0.copy();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-104);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 79, 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantLong constantLong0 = new ConstantLong((-5081L));
      constantLong0.toString();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = Utility.decode("CONSTANT_Long[5](bytes = -5081)", false);
      Utility.compactClassName("Ik)H^f}wY2SXf");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Ik)H^f}wY2SXf", "CONSTANT_Long[5](bytes = -5081)");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // CONSTANT_Long[5](bytes = -5081)
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantLong constantLong0 = new ConstantLong((-5118L));
      constantLong0.toString();
      CodeException codeException0 = new CodeException((byte) (-73), 6, (-1992), 2588);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      constantPool2.setConstantPool(constantArray0);
      byte[] byteArray0 = Utility.decode("D>+la^G7wtft", false);
      Utility.codeToString(byteArray0, constantPool1, 6, (-1992));
      Utility.isSet(255, (-555));
      Utility.fillup(":}!hrQhYlt):", 255, false, '?');
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      byteSequence0.skipBytes(41);
      byteSequence0.reset();
      byteSequence0.readByte();
      byte[] byteArray1 = Utility.decode("\"F1v5^,9)Cqz-YEhGk", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 41, 201);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-16);
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte) (-16);
      byteArray1[3] = (byte) (-110);
      byteArray1[4] = (byte)77;
      byteArray1[5] = (byte) (-16);
      byteArray1[6] = (byte) (-103);
      byteArray1[7] = (byte)41;
      byteArray1[8] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 33, (int) (byte) (-16));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte byte0 = (byte)19;
      Constant[] constantArray0 = new Constant[9];
      ConstantLong constantLong0 = new ConstantLong((byte)19);
      constantLong0.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("<SW3+wDtI", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 255, 2350);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantLong constantLong0 = new ConstantLong((-5118L));
      constantLong0.toString();
      constantLong0.toString();
      int int0 = 32;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 209, 209, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)123;
      ConstantPool constantPool2 = constantPool0.copy();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, constantPool2, (int) (byte) (-121), (int) (byte) (-121));
      Utility.isJavaIdentifierPart('H');
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#Af^(MGZ_` r");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2302, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = " jx|\\q0FlS6O[Lm^";
      MockPrintStream mockPrintStream0 = new MockPrintStream(" jx|q0FlS6O[Lm^");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.convertString(" jx|q0FlS6O[Lm^");
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantPool constantPool3 = constantPool2.copy();
      ConstantPool constantPool4 = constantPool3.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool4);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5833, (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[4] = (byte)52;
      byteArray0[2] = (byte)76;
      byteArray0[6] = (byte)76;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      MockFile mockFile0 = new MockFile("breakpoint");
      Locale locale0 = Locale.FRENCH;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      constantPool1.toString();
      constantPool1.copy();
      Utility.methodTypeToSignature("breakpoint", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 179, 1141);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantLong constantLong0 = new ConstantLong((byte)32);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      constantLong0.toString();
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, (-2735));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      CodeException codeException0 = new CodeException((-2794), 2588, 2588, 232);
      ConstantValue constantValue0 = new ConstantValue((-2794), (-705), (-654), constantPool1);
      Utility.getSignature("1)null\n2)null\n3)null\n4)null\n5)null\n");
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 187, (int) (byte) (-60), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 198, (-693));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7FZ2H3w#|%&<");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(192);
      byteArrayOutputStream0.close();
      byteArrayOutputStream0.flush();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockFile mockFile0 = new MockFile("7FZ2H3w#|%&<", "7FZ2H3w#|%&<");
      Locale locale0 = Locale.FRENCH;
      constantPool1.toString();
      constantPool1.copy();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool2 = constantPool0.copy();
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, (int) (byte) (-104), (int) (byte) (-104), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_0
         // 1:    dcmpg
         // 2:    dcmpg
         // 3:    dcmpg
         // 4:    dcmpg
         // 5:    dstore_0
         // 6:    dcmpg
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.typeOfSignature("Zn_nlB!0$(9Fmhx0");
      JavaClass.getComparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gq/wp4R,,9xy");
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((byte)4);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Zn_nlB!0$(9Fmhx0");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.classOrInterface(254);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 126, (-203), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence1.reset();
      byteSequence1.readByte();
      boolean boolean0 = false;
      byte[] byteArray1 = Utility.decode("\"F1X5^,9)Cqz-YEhGk", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 48, 2663);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byteArrayOutputStream0.close();
      byteArrayOutputStream0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S OEY%}N}&#%=BA");
      byteArrayOutputStream0.flush();
      byteArrayOutputStream0.flush();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      Utility.compactClassName("S OEY%}N}&#%=BA");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-283), (-283));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-484), (int) (byte) (-118), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    l2d
         // 2:    l2f
         // 3:    areturn
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantLong constantLong0 = new ConstantLong((-5118L));
      constantLong0.toString();
      CodeException codeException0 = new CodeException((byte) (-73), 6, (-1992), 2593);
      constantLong0.toString();
      ConstantValue constantValue0 = new ConstantValue((-1992), 2593, 57, constantPool0);
      Utility.getSignature("CONSTANT_Long[5](bytes = -5118)");
      constantLong0.setBytes((byte) (-73));
      Utility.setBit(57, (-1720));
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-111);
      int int0 = (-2615);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 60, 54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("X*X<Xw;M/a1X(%hME*-", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X*X<Xw;M/a1X(%hME*-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)16;
      Constant[] constantArray0 = new Constant[0];
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yc1DWWKr!vYv5H#JP", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yc1DWWKr!vYv5H#JP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byteArrayOutputStream0.write(byteArray0);
      byteArrayOutputStream0.write(byteArray0);
      byteArrayOutputStream0.close();
      byteArrayOutputStream0.write(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArrayOutputStream0.flush();
      byteArrayOutputStream0.flush();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("", true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-81);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-81), 2707, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArray1;
      objectArray0[1] = (Object) byteArray1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) byteArray0;
      objectArray0[5] = (Object) "";
      Object object0 = new Object();
      objectArray0[6] = object0;
      Utility.printArray(objectArray0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantFloat constantFloat0 = new ConstantFloat((byte)48);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantFloat1.accept(emptyVisitor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ConstantLong constantLong0 = new ConstantLong((byte)48);
      constantLong0.toString();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      byte[] byteArray0 = Utility.decode("CONSTANT_Long[5](bytes = 48)", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      MockFile mockFile0 = new MockFile("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(1957L);
      byteArrayInputStream0.reset();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), 43, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[6] = (byte) (-67);
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantFloat constantFloat0 = new ConstantFloat((byte)48);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantFloat1.accept(emptyVisitor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      try { 
        Utility.typeOfSignature("Y7Nzm,1A}\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y7Nzm,1A}\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)124;
      int int0 = 141;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 141, (-880));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("\n", stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfMethodSignature("()L\n;");
      Utility.isJavaIdentifierPart('Y');
      Utility.methodSignatureToString("()L\n;", "org.apache.bcel.generic.Type", "\n");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, (int) (byte)30, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.getSignature("<init>");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, (-1251), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte) (-72);
      ConstantLong constantLong0 = new ConstantLong((byte)0);
      Utility.compactClassName("Y _?[;", true);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 958, (int) (byte) (-72), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.setConstantPool(constantArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)19);
      constantPool1.toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)33;
      Utility.compactClassName("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", false);
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)33, (int) (byte)33, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte byte0 = (byte)31;
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)31, (-609));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte) (-72);
      ConstantLong constantLong0 = new ConstantLong((byte)0);
      Utility.compactClassName("Y _?[;", true);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue(63, (-705), (-178), constantPool0);
      Utility.getSignature("wide");
      Utility.codeToString(byteArray0, constantPool0, (-705), 910, false);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[15];
      constantPool0.setConstantPool(constantArray0);
      byteArray0[0] = (byte) (-85);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-85), (int) (byte) (-85));
      Utility.isSet((-355), 1547);
      try { 
        Utility.typeOfSignature("monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[4] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0);
      Utility.compactClassName("]&eEQ{/tQ", "", true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.getSignature("]&eEQ{.tQ");
      Utility.typeOfSignature("T:C%t2@4NP %r5/#");
      Utility.searchOpcode("o'Q'AyOe");
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.methodSignatureReturnType("Jc9'n", true);
      String string0 = "H7+oab6s9/Lf+3L";
      String string1 = "monitorenter";
      String string2 = "Y1bR7F<h46'Z8{[n2";
      boolean boolean0 = true;
      int int0 = 18;
      LocalVariable[] localVariableArray0 = new LocalVariable[3];
      int int1 = (-30);
      int int2 = 705;
      int int3 = (-3931);
      Constant[] constantArray0 = new Constant[9];
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass((ConstantClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("java.lang.1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n", false);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-3338), (-1804));
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    fmul\n1:    ladd\n2:    fneg\n3:    ladd\n4:    iaload\n5:    idiv\n6:    ladd\n7:    fdiv\n8:    dsub\n9:    iaload\n10:   daload\n11:   dload_3\n12:   fdiv\n13:   lneg\n14:   idiv\n15:   idiv\n16:   lconst_1\n17:   aaload\n18:   dload_3\n19:   fdiv\n20:   lneg\n21:   idiv\n22:   idiv\n23:   lconst_1\n24:   baload\n25:   dload_3\n26:   fdiv\n27:   lneg\n28:   idiv\n29:   idiv\n30:   lconst_1\n31:   caload\n32:   dload_3\n33:   fdiv\n34:   lneg\n35:   idiv\n36:   idiv\n37:   lconst_1\n38:   saload\n39:   dload_3\n40:   fdiv\n41:   lneg\n42:   idiv\n43:   idiv\n44:   lconst_1\n45:   istore\t\t%41\n47:   fdiv\n48:   lneg\n49:   idiv\n50:   idiv\n51:   lconst_1\n52:   lstore\t\t%41\n54:   fdiv\n55:   lneg\n56:   idiv\n57:   idiv\n58:   lconst_1\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    fmul
         // 1:    ladd
         // 2:    fneg
         // 3:    ladd
         // 4:    iaload
         // 5:    idiv
         // 6:    ladd
         // 7:    fdiv
         // 8:    dsub
         // 9:    iaload
         // 10:   daload
         // 11:   dload_3
         // 12:   fdiv
         // 13:   lneg
         // 14:   idiv
         // 15:   idiv
         // 16:   lconst_1
         // 17:   aaload
         // 18:   dload_3
         // 19:   fdiv
         // 20:   lneg
         // 21:   idiv
         // 22:   idiv
         // 23:   lconst_1
         // 24:   baload
         // 25:   dload_3
         // 26:   fdiv
         // 27:   lneg
         // 28:   idiv
         // 29:   idiv
         // 30:   lconst_1
         // 31:   caload
         // 32:   dload_3
         // 33:   fdiv
         // 34:   lneg
         // 35:   idiv
         // 36:   idiv
         // 37:   lconst_1
         // 38:   saload
         // 39:   dload_3
         // 40:   fdiv
         // 41:   lneg
         // 42:   idiv
         // 43:   idiv
         // 44:   lconst_1
         // 45:   istore\t\t%41
         // 47:   fdiv
         // 48:   lneg
         // 49:   idiv
         // 50:   idiv
         // 51:   lconst_1
         // 52:   lstore\t\t%41
         // 54:   fdiv
         // 55:   lneg
         // 56:   idiv
         // 57:   idiv
         // 58:   lconst_1
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
