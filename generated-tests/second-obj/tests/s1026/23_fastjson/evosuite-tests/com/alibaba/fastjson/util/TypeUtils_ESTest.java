/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:53:29 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.HttpCookie;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.getClassFromMapping(", pos ");
      TypeUtils.castToBigInteger((Object) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) identityHashMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Properties> class0 = Properties.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      String string0 = "java.awt.Point";
      Method method0 = null;
      Field field0 = null;
      Class<TimeDeserializer> class2 = TimeDeserializer.class;
      int int0 = 1507;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<HttpCookie> class1 = HttpCookie.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.castToString(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<TimeUnit> class3 = TimeUnit.class;
      TypeUtils.computeGetters(class3, (Map<String, String>) null, false);
      Class<ChronoLocalDate> class4 = ChronoLocalDate.class;
      TypeUtils.getKoltinConstructorParameters(class4);
      TypeUtils.castToString("java.lang.Class@0000000001");
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.decapitalize("Ljava.util.concurrent.ConcurrentSkipListMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getSerializeFeatures(class0);
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.getJSONObject("fileName");
      Class<Method> class1 = Method.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<Character> class2 = Character.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashtable0, false);
      TypeUtils.getKoltinConstructorParameters(class1);
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      TypeUtils.castToString(jdk8DateCodec0);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      Class<Double> class0 = Double.class;
      TypeUtils.isKotlin(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("location", classLoader1);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(6, "R|t6Q+&p#f6q", 53, 6, 47, 14, 6, 53, 47, 12, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 53
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<InstantiationException> class1 = InstantiationException.class;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, true);
      String string0 = "nativeMethod";
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.InstantiationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("8B@)ojfD_Z", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("int", classLoader0);
      HashSet<Short> hashSet0 = new HashSet<Short>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("int", "int");
      TypeUtils.isHibernateInitialized("int");
      TypeUtils.fnv1a_64("%G\"r(5[BG");
      ParserConfig parserConfig0 = new ParserConfig();
      Float float0 = new Float(404.6441285596417);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("%G\"r(5[BG");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%G\"r(5[BG\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<InstantiationError> class0 = InstantiationError.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int int0 = AffineTransform.TYPE_MASK_ROTATION;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      concurrentHashMap1.put("7:", "lb*'!a44");
      Class<TimeZone> class1 = TimeZone.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("7:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 7:
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int int0 = AffineTransform.TYPE_MASK_ROTATION;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("co'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : co'
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1692L);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(atomicLong0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
      boolean boolean0 = TypeUtils.isNumber("g^,Nd68B2l#x2Jt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.isGenericParamType(class0);
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      WeakHashMap<SQLException, OutOfMemoryError> weakHashMap0 = new WeakHashMap<SQLException, OutOfMemoryError>();
      Class<TimeUnit> class2 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) weakHashMap0, class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("Yy( (0", false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Yy( (0", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      MockDate mockDate0 = new MockDate(102, 102, 102, 102, (-2), (-1512));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".0", parserConfig0, 38);
      JobAttributes jobAttributes0 = new JobAttributes();
      jobAttributes0.clone();
      boolean boolean1 = TypeUtils.compatibleWithFieldName;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("X", "syntax error :", 2);
      Long long0 = new Long(2);
      TypeUtils.castToSqlTime(long0);
      TypeUtils.decapitalize("fastjson.parser.autoTypeSupport");
      ParserConfig parserConfig1 = new ParserConfig();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      Type type0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Byte byte0 = new Byte((byte)47);
      Byte.compare((byte)47, (byte)8);
      Byte.toUnsignedInt((byte)47);
      Byte.compare((byte) (-76), (byte) (-76));
      TypeUtils.castToSqlTime(byte0);
      TypeUtils.castToDouble(byte0);
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      ConcurrentHashMap<Long, JavaBeanDeserializer> concurrentHashMap0 = new ConcurrentHashMap<Long, JavaBeanDeserializer>();
      ParserConfig.getGlobalInstance();
      java.util.IdentityHashMap<BitSet, NoSuchFieldError> identityHashMap0 = new java.util.IdentityHashMap<BitSet, NoSuchFieldError>();
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.getParserFeatures(class0);
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError((String) null);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("co'");
      TypeUtils.castToFloat((Object) null);
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      Clock clock0 = MockClock.systemUTC();
      MockLocalTime.now(clock0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      MockDate mockDate0 = new MockDate();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Point point0 = new Point(Integer.MAX_VALUE, 69);
      MockDate mockDate1 = new MockDate((-1L));
      TypeUtils.castToSqlDate(mockDate1);
      ParserConfig.getFieldFromCache("#2[@YK", hashMap0);
      Short short0 = new Short((short) (-495));
      assertEquals((short) (-495), (short)short0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Class<Long> class0 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      treeMap0.floorEntry("pos ");
      Byte byte0 = new Byte((byte)111);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      BitSet.valueOf(byteArray0);
      Class<Calendar> class1 = Calendar.class;
      TypeUtils.getCollectionItemType(class1);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      negativeArraySizeException0.initCause((Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.Object@19775925
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = null;
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      boolean boolean0 = true;
      classLoader0.setClassAssertionStatus("fDTP%gMup_+F", true);
      TypeUtils.loadClass((String) null, classLoader0);
      Class<Long> class0 = Long.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.getCollectionItemType(type0);
      TypeUtils.getClassFromMapping("");
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(mockSimpleDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      MockDate mockDate0 = new MockDate(102, 102, 102, (-68703773), (-68703773), (-1512));
      MockDate mockDate1 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      MockDate mockDate2 = new MockDate((-68703773), 244, 40, 91, 244, 23);
      BiFunction<Throwable, MockDate, MockDate> biFunction0 = (BiFunction<Throwable, MockDate, MockDate>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Class<Short> class0 = Short.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Float> class1 = Float.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      MockMinguoDate.now();
      HashMap<ChoiceFormat, BreakIterator> hashMap0 = new HashMap<ChoiceFormat, BreakIterator>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.lowerKey("d`.R1d");
      treeMap0.lowerKey("Ljava.awt.Rectangle");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass((String) null, classLoader0);
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException(",D");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalThreadStateException0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(type0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TypeUtils.isNumber("com.alibaba.fastjson.util.ASMClassLoader");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("com.alibaba.fastjson.util.ASMClassLoader");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.util.ASMClassLoader
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      TypeUtils.clearClassMapping();
      TypeUtils.castToBoolean((Object) null);
      java.sql.Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      TypeUtils.fnv1a_64("%G\"r(5[BG");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(0.0);
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(".0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.castToString(class0);
      Class<Method> class2 = Method.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashtable0, false);
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.castToString(class2);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '&';
      charArray0[2] = 'u';
      charArray0[3] = '!';
      charArray0[5] = '!';
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("%G\"r(5[BG");
      assertEquals((-7997520539434042440L), long0);
      
      Float float0 = new Float(0.0);
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("_9YF]S%`T[", parserConfig0, 44);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) "_9YF]S%`T[");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("_9YF]S%`T[", (String) null);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) classLoader0, (Object) sQLNonTransientConnectionException0);
      Type type0 = parseContext1.type;
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.LongCodec", classLoader0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("2", classLoader0);
      HashSet<Short> hashSet0 = new HashSet<Short>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      TypeUtils.isHibernateInitialized(classLoader0);
      TypeUtils.fnv1a_64("hashCode");
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      ParserConfig parserConfig0 = new ParserConfig();
      Float float0 = new Float((-489.1));
      TypeUtils.cast((Object) typeArray0[3], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(typeArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Type type0 = TypeUtils.unwrapOptional(class1);
      TypeUtils.getCollectionItemClass(type0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.awt.Rectangle", "#N5j\"B{2Vv#_Ej!N9 )", (-1837), (Throwable) null);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("#N5j\"B{2Vv#_Ej!N9 )", sQLNonTransientConnectionException0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      illegalMonitorStateException0.initCause(typeNotPresentException0);
      IllegalMonitorStateException illegalMonitorStateException1 = new IllegalMonitorStateException("kotlin.ranges.IntRange");
      illegalMonitorStateException1.fillInStackTrace();
      TypeUtils.castToSqlTime((Object) null);
      String string0 = TypeUtils.decapitalize("#N5j\"B{2Vv#_Ej!N9 )");
      assertEquals("#N5j\"B{2Vv#_Ej!N9 )", string0);
      
      Class<Rectangle> class2 = Rectangle.class;
      int int0 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("getgetFormats", treeMap0);
      Class<Locale> class0 = Locale.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getClass((Type) class0);
      Stack<Locale> stack0 = new Stack<Locale>();
      TypeUtils.isGenericParamType(class0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<LinkageError> class1 = LinkageError.class;
      ParserConfig parserConfig0 = new ParserConfig();
      LinkageError linkageError0 = TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class1, parserConfig0);
      assertNull(linkageError0.getMessage());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<StackTraceElement> class1 = StackTraceElement.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null, false);
      Class<JavaObjectDeserializer> class2 = JavaObjectDeserializer.class;
      Class<Double> class3 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("8B@)ojfD_Z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8B@)ojfD_Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLRecoverableException: java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "(DZ)V", fieldArray0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.tailMap("", true);
      String string0 = "[F";
      // Undeclared exception!
      try { 
        treeMap0.subMap("getSuppressed", true, "(DZ)V", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("Nj/!");
      Class<Character> class0 = Character.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchMethodError0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.NoSuchMethodError: Nj/!
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Long> class0 = Long.class;
      TypeUtils.isProxy(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Map<String, String> map0 = null;
      boolean boolean0 = true;
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, true);
      Class<NoSuchMethodException> class2 = NoSuchMethodException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getGenericParamType((Type) null);
      InstantiationError instantiationError0 = new InstantiationError("can not cast to double, value : ");
      ConcurrentHashMap<Long, JavaBeanDeserializer> concurrentHashMap0 = new ConcurrentHashMap<Long, JavaBeanDeserializer>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.castToString(concurrentHashMap0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      BigDecimal bigDecimal0 = new BigDecimal((-1107L));
      Locale locale0 = Locale.ITALIAN;
      Class<MapDeserializer> class1 = MapDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Type[] typeArray0 = new Type[7];
      typeArray0[1] = (Type) genericArrayType0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class2;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2);
      Class<?> class3 = javaBeanSerializer0.getType();
      typeArray0[5] = (Type) class3;
      TypeUtils.loadClass("L");
      Class<Boolean> class4 = Boolean.TYPE;
      TypeUtils.getCollectionItemClass(class4);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@adc1b447
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getSerializeFeatures(class0);
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.getJSONObject("fileName");
      Class<InstantiationException> class1 = InstantiationException.class;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('@');
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("fileName");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[4] = serializerFeature4;
      serializerFeatureArray0[5] = serializerFeature0;
      JSON.writeJSONString((Writer) charArrayWriter1, (Object) mockNullPointerException0, serializerFeatureArray0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.decapitalize("org.springframework.util.LinkedCaseInsensitiveMap");
      JSONScanner jSONScanner0 = new JSONScanner("smartMatchHashArray", (-1725));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Class<Integer> class1 = Integer.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "smartMatchHashArray");
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      parameterizedTypeImpl1.getTypeName();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      AtomicInteger atomicInteger0 = new AtomicInteger((-108));
      ParserConfig parserConfig1 = new ParserConfig((ASMDeserializerFactory) null);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaObjectDeserializer0, (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TypeUtils.decapitalize("`");
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      MockDate mockDate0 = new MockDate(102, 102, 102, (-68703773), (-2), (-1512));
      identityHashMap0.put((InstantiationException) null, mockDate0);
      MockDate mockDate1 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      MockDate mockDate2 = new MockDate((-68703773), 244, 40, 91, 244, 23);
      BiFunction<Throwable, MockDate, MockDate> biFunction0 = (BiFunction<Throwable, MockDate, MockDate>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(mockDate2).when(biFunction0).apply(any(java.lang.Throwable.class) , any(org.evosuite.runtime.mock.java.util.MockDate.class));
      identityHashMap0.compute(instantiationException0, biFunction0);
      mockDate1.setTime(565760338237066291L);
      identityHashMap0.put((InstantiationException) null, mockDate1);
      TypeUtils.isHibernateInitialized(identityHashMap0);
      Long long0 = new Long(565760338237066291L);
      Long.getLong(".0");
      TypeUtils.castToLong(long0);
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : [checksum=0xcba403eb]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Byte byte0 = new Byte((byte)49);
      Byte.toUnsignedInt((byte)49);
      byte byte1 = (byte)57;
      Byte.compare((byte)49, (byte)49);
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) byte0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      identityHashMap0.clone();
      identityHashMap0.put("yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Map<String, String> map0 = null;
      String string0 = "S";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S");
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "S", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.lowerKey("d`.R1d");
      treeMap0.lowerKey("Ljava.awt.Rectangle");
      treeMap0.tailMap("Ljava.util.concurrent.ConcurrentSkipListSet", true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet", (ClassLoader) aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMDeserializerFactory0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("8-D>s~',_-S###");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("8-D>s~',_-S###");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8-D>s~',_-S###\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "g";
      TypeUtils.fnv1a_64_lower("g");
      TypeUtils.fnv1a_64("g");
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("g");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"g\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      assertEquals(1, list0.size());
      
      long long0 = TypeUtils.fnv1a_64_lower("w^hjSnIb");
      assertEquals((-1778866762346944852L), long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.lowerKey("d`.R1d");
      treeMap0.lowerKey("Ljava.awt.Rectangle");
      NavigableMap<String, String> navigableMap0 = treeMap0.tailMap("Ljava.util.concurrent.ConcurrentSkipListSet", true);
      treeMap0.tailMap("tg|X", true);
      treeMap0.subMap("Ljava.awt.Rectangle", false, "tg|X", false);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) navigableMap0, false);
      TypeUtils.loadClass("");
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@h;`9Z9^(vID%", "@h;`9Z9^(vID%", 51, illegalMonitorStateException0);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("@h;`9Z9^(vID%", sQLInvalidAuthorizationSpecException0);
      ClassLoader.getSystemClassLoader();
      HashSet<Short> hashSet0 = new HashSet<Short>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      TypeUtils.isHibernateInitialized("int");
      TypeUtils.fnv1a_64("%G\"r(5[vBG");
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[2]);
      ParserConfig parserConfig0 = new ParserConfig();
      Float float0 = new Float(392.27);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) float0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@34e63b41
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("int", classLoader0);
      HashSet<Short> hashSet0 = new HashSet<Short>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      TypeUtils.fnv1a_64("%G\"r(5[vBG");
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[2]);
      ParserConfig parserConfig0 = new ParserConfig();
      Float float0 = new Float(392.27);
      Float.min((-1.0F), 1357.44F);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) float0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = JSON.defaultLocale;
      Class<Boolean> class0 = Boolean.TYPE;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      TypeUtils.castToString((Object) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      BigDecimal bigDecimal0 = new BigDecimal(1060L);
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      ThreadGroup threadGroup0 = new ThreadGroup("getName");
      Locale locale1 = TypeUtils.toLocale("authority");
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      TypeUtils.fnv1a_64_lower("27");
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", treeMap0);
      TypeUtils.toLocale("getgetFormats");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class [I
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Type type0 = TypeUtils.unwrapOptional(class1);
      Class<?> class2 = TypeUtils.getCollectionItemClass(type0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>((SortedMap<String, ? extends String>) treeMap0);
      List<FieldInfo> list0 = TypeUtils.computeGetters(class2, jSONType1, (Map<String, String>) treeMap1, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("_9YF]S%0T[", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) "_9YF]S%0T[");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("_9YF]S%0T[", "fastjson.parser.deny");
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) classLoader0, (Object) sQLNonTransientConnectionException0);
      Type type0 = parseContext1.type;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.LongCodec", classLoader0);
      Integer integer0 = new Integer(47);
      TypeUtils.castToByte(integer0);
      URI uRI0 = MockURI.URI("createInstance", "_9YF]S%0T[", "fastjson.parser.autoTypeSupport");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not hierarchical
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.lowerKey("d`.R1d");
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException((String) null);
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Time.valueOf(localTime0);
      TypeUtils.castToSqlDate((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("d`.R1d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : d`.R1d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.lowerKey("");
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.castToJavaBean((Object) "", class0);
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Time.valueOf(localTime0);
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.castToSqlDate("");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.castToSqlDate((Object) null);
      MockJapaneseDate mockJapaneseDate1 = new MockJapaneseDate();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        Locale.forLanguageTag((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("@h;`9Z9^(vID%");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(noSuchMethodException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.NoSuchMethodException: @h;`9Z9^(vID%
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      MockDate mockDate0 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Point point0 = new Point(Integer.MAX_VALUE, 69);
      MockDate mockDate1 = new MockDate((-1L));
      AtomicInteger atomicInteger0 = new AtomicInteger((-341));
      LinkedHashMap<Integer, String> linkedHashMap0 = new LinkedHashMap<Integer, String>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("getgetSigners", "HF");
      TypeUtils.castToBytes("HF");
      System.setCurrentTimeMillis(0L);
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.isKotlin(class0);
      WeakHashMap<NoSuchMethodError, OutOfMemoryError> weakHashMap0 = new WeakHashMap<NoSuchMethodError, OutOfMemoryError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Boolean> class0 = Boolean.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.unwrapOptional(type0);
      JSONObject jSONObject0 = new JSONObject();
      Class<String> class1 = String.class;
      ThreadGroup threadGroup0 = new ThreadGroup("1.2.46");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "@type");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class1, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(thread0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : Thread[TEST_EXECUTION_THREAD_1,5,Test_Execution_Group]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      NoSuchMethodException noSuchMethodException0 = TypeUtils.castToJavaBean((Object) treeMap0, class0);
      assertNotNull(noSuchMethodException0);
      
      Class<Double> class1 = Double.TYPE;
      Locale.getISOCountries();
      treeMap0.ceilingEntry("net.sf.cglib.proxy.Factory");
      Random.setNextRandom(1869);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeMap0.merge("otC", "otC", biFunction0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(treeMap0);
      Locale locale0 = TypeUtils.toLocale("gettoString");
      assertEquals("gettostring", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashSet<Short> hashSet0 = new HashSet<Short>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      TypeUtils.isHibernateInitialized(map0);
      TypeUtils.fnv1a_64("int");
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      Class<Byte> class1 = Byte.TYPE;
      typeArray0[5] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Float float0 = new Float(392.27);
      TypeUtils.cast((Object) typeArray0[6], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(typeArray0[4]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Type[] typeArray0 = new Type[0];
      Class<Long> class0 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("java.time.", false);
      classLoader0.setDefaultAssertionStatus(false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getGenericParamType((Type) null);
      InstantiationError instantiationError0 = new InstantiationError("can not cast to double, value : ");
      ConcurrentHashMap<Long, JavaBeanDeserializer> concurrentHashMap0 = new ConcurrentHashMap<Long, JavaBeanDeserializer>();
      TypeUtils.castToString(concurrentHashMap0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      BigDecimal bigDecimal0 = new BigDecimal((-1107L));
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("java.util.concurrent.ConcurrentHashMap@0000000001");
      Locale locale0 = Locale.ITALIAN;
      TypeUtils.castToString(locale0);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      ThreadGroup threadGroup0 = new ThreadGroup("java.util.concurrent.ConcurrentHashMap@0000000001");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("java.util.concurrent.ConcurrentHashMap@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.util.concurrent.ConcurrentHashMap@0000000001
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("getgetFormats", treeMap0);
      Class<Locale> class1 = Locale.class;
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      JSONArray jSONArray0 = new JSONArray(35);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ParserConfig.getGlobalInstance();
      AtomicLong atomicLong0 = new AtomicLong(3507);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) atomicLong0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      String string0 = "d`.R1d";
      treeMap0.lowerKey("d`.R1d");
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("d`.R1d");
      TypeUtils.decapitalize((String) null);
      TypeUtils.fnv1a_64("d`.R1d");
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("&LN`%-{Ea)", (String) null, 1921, (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("MR1", sQLRecoverableException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLNonTransientConnectionException: MR1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeUtils.decapitalize("`");
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("`");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.StringIndexOutOfBoundsException: `
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      MockDate mockDate0 = new MockDate(102, 102, 102, (-68703773), (-2), (-1512));
      identityHashMap0.put((InstantiationException) null, mockDate0);
      MockDate mockDate1 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      MockDate mockDate2 = new MockDate((-68703773), 244, 40, 91, 244, 23);
      Type[] typeArray0 = new Type[6];
      Class<?> class0 = TypeUtils.getCollectionItemClass(typeArray0[0]);
      typeArray0[1] = (Type) class0;
      Class<Integer> class1 = Integer.TYPE;
      typeArray0[2] = (Type) class1;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Float> class2 = Float.TYPE;
      typeArray0[4] = (Type) class2;
      TypeUtils.getClassFromMapping(".0");
      typeArray0[5] = (Type) null;
      ParserConfig parserConfig0 = new ParserConfig();
      Float float0 = new Float((-1.0));
      MockMinguoDate.now();
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      TypeUtils.getParserFeatures(class3);
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      TypeUtils.getParserFeatures(class4);
      TypeUtils.castToDate(mockDate1);
      Class<?> class5 = TypeUtils.loadClass(".0");
      assertNull(class5);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      TypeUtils.getSerializeFeatures(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(0);
      hashMap0.put("error", class0);
      Class<SQLWarning> class1 = SQLWarning.class;
      TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class1, (ParserConfig) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ThreadGroup threadGroup0 = new ThreadGroup("J`l]}&4%6foAVg:");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "smartMatchHashArrayMapping");
      mockThread0.getStackTrace();
      MockThread mockThread2 = new MockThread(mockThread1);
      MockThread mockThread3 = new MockThread(mockThread1, "error");
      Class<SQLWarning> class2 = SQLWarning.class;
      int int0 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer.getInteger((String) null);
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, ")", fieldArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      JobAttributes jobAttributes0 = new JobAttributes();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      TypeUtils.loadClass(")", classLoader0, true);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("7", hashtable0);
      Class<IllegalStateException> class1 = IllegalStateException.class;
      Class<SQLDataException> class2 = SQLDataException.class;
      FieldInfo fieldInfo0 = new FieldInfo(")", class1, class2, class2, (Field) null, 237, (-1733570696), 55);
      assertNull(fieldInfo0.getFormat());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      Clock clock0 = MockClock.systemUTC();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Time.valueOf(localTime0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.getKoltinConstructorParameters(class0);
      BigDecimal bigDecimal0 = new BigDecimal(1060L);
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      ThreadGroup threadGroup0 = new ThreadGroup("d`.R1d");
      boolean boolean0 = TypeUtils.isNumber("4LuZ~8I6^]oG!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("getgetFormats", treeMap0);
      Class<Locale> class1 = Locale.class;
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      JSONArray jSONArray0 = new JSONArray(35);
      typeArray0[4] = typeArray0[2];
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[1]);
      ParserConfig parserConfig0 = new ParserConfig();
      Float float0 = new Float((double) 35);
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      ParserConfig parserConfig1 = new ParserConfig(false);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[4]);
      ParserConfig parserConfig2 = new ParserConfig();
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, "1.2.46");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("sh", true);
      Float float1 = new Float(2001.746667548);
      TypeUtils.cast((Object) mockThread0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      TypeUtils.getClassFromMapping("Ljava.awt.Rectangle");
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getGenericParamType((Type) null);
      InstantiationError instantiationError0 = new InstantiationError("can not cast to double, value : ");
      ConcurrentHashMap<Long, JavaBeanDeserializer> concurrentHashMap0 = new ConcurrentHashMap<Long, JavaBeanDeserializer>();
      TypeUtils.castToString(concurrentHashMap0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      BigDecimal bigDecimal0 = new BigDecimal((-1107L));
      Locale locale0 = Locale.ITALIAN;
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      Timestamp timestamp0 = new Timestamp((-1107L));
      Class<?> class1 = TypeUtils.getClass((Type) genericArrayType0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstantiationException instantiationException0 = new InstantiationException();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("HF");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(".0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : .0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<IllegalStateException> class1 = IllegalStateException.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("getgetFormats", treeMap0);
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      FieldInfo fieldInfo0 = new FieldInfo("*HEQNFh1#", class2, class1, class0, (Field) null, (-1871), (-1012), 35);
      BeanContext beanContext0 = new BeanContext(fieldInfo0.declaringClass, fieldInfo0);
      Class<Locale> class3 = Locale.class;
      BeanContext beanContext1 = new BeanContext(class3, fieldInfo0);
      beanContext1.getMethod();
      Class<Time> class4 = Time.class;
      TypeUtils.getSuperMethodAnnotation(class4, (Method) null);
      beanContext1.getMethod();
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      TypeUtils.toLocale("isgetMockedClassName");
      TypeUtils.isProxy(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Z", (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("zm");
      Class<UUID> class0 = UUID.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("zm");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Byte byte0 = new Byte((byte)49);
      Byte.toUnsignedInt((byte)49);
      Integer integer0 = new Integer((byte)76);
      Byte.toUnsignedInt((byte)49);
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.clearClassMapping();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.castToSqlDate(byte0);
      TypeUtils.getCollectionItemClass(class0);
      Class<Integer> class1 = Integer.TYPE;
      InstantiationException instantiationException0 = new InstantiationException();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      NoSuchFieldError noSuchFieldError1 = new NoSuchFieldError();
      noSuchFieldError1.fillInStackTrace();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Hashtable<SQLTransactionRollbackException, InstantiationError> hashtable0 = new Hashtable<SQLTransactionRollbackException, InstantiationError>(28, 41);
      InternalError internalError0 = new InternalError("fastjson.parser.deny", instantiationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport", instantiationException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.SQLFeatureNotSupportedException: fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".0");
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InstantiationError instantiationError0 = new InstantiationError(".0");
      instantiationError0.getStackTrace();
      TypeUtils.castToString(instantiationError0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      instantiationError0.printStackTrace();
      TypeUtils.decapitalize(".0");
      ParserConfig parserConfig0 = new ParserConfig();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getSerializeFeatures(class0);
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.getJSONObject("fileName");
      Class<InstantiationException> class1 = InstantiationException.class;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('@');
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("fileName");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      charArrayWriter1.write("yyyy-MM-dd HH:mm:ss", 1, 8);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteMapNullValue;
      charArrayWriter1.reset();
      serializerFeatureArray0[4] = serializerFeature4;
      serializerFeatureArray0[5] = serializerFeature0;
      JSON.writeJSONString((Writer) charArrayWriter1, (Object) mockNullPointerException0, serializerFeatureArray0);
      TypeUtils.isNumber("0");
      ParserConfig.getGlobalInstance();
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("HF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : HF
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      MockThread mockThread0 = new MockThread("7t)l]^(");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.EnumerationSerializer", classLoader0, false);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("7t)l]^(", hashtable0);
      Class<IllegalStateException> class1 = IllegalStateException.class;
      FieldInfo fieldInfo0 = new FieldInfo("7t)l]^(", class1, class0, class1, (Field) null, 70, 70, 70);
      assertEquals("7t)l]^(", fieldInfo0.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "X");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      MockDate mockDate0 = new MockDate(102, 102, 102, 102, (-2), (-1512));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".0", parserConfig0, 1809);
      JobAttributes jobAttributes0 = new JobAttributes();
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      java.util.IdentityHashMap<String, Field> identityHashMap1 = new java.util.IdentityHashMap<String, Field>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeSupport", identityHashMap1);
      identityHashMap1.put("fastjson.parser.autoTypeAccept", (Field) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      InternalError internalError0 = new InternalError("fastjson.parser.autoTypeSupport");
      TypeUtils.castToBigDecimal(concurrentHashMap0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("@h;`9Z9^(vID%");
      TypeUtils.castToTimestamp((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("@h;`9Z9^(vID%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@h;`9Z9^(vID%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Float> class0 = Float.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      Locale locale0 = Locale.FRENCH;
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.deny", locale0);
      ParsePosition parsePosition0 = new ParsePosition(2291);
      messageFormat0.parseObject("fastjson.parser.deny", parsePosition0);
      parsePosition0.setIndex((-229));
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      TypeUtils.castToShort((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("Lorg.springframework.util.LinkedMultiValueMap");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      TypeUtils.getClassFromMapping("c?4';V+`e-5NFAgTwS`");
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = "Lorg.springframework.util.LinkedMultiValueMap";
      ParsePosition parsePosition0 = new ParsePosition(1073);
      Locale.getISOLanguages();
      parsePosition0.setIndex(180);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-2054907929));
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("Lorg.springframework.util.LinkedMultiValueMap");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Lorg.springframework.util.LinkedMultiValueMap\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstantiationException instantiationException0 = new InstantiationException();
      Constructor<InternalError>[] constructorArray0 = (Constructor<InternalError>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException(";Lp-4CFom");
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      MockDate mockDate0 = new MockDate(126, 126, 126, 126, (-2), (-2));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".0", parserConfig0, 1805);
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes jobAttributes1 = new JobAttributes(jobAttributes0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyyMMddHHmmssSSSZ");
      parserConfig0.setAutoTypeSupport(false);
      java.util.IdentityHashMap<String, Field> identityHashMap1 = new java.util.IdentityHashMap<String, Field>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TypeUtils.isPath(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, false, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("yyyyMMddHHmmssSSSZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : yyyyMMddHHmmssSSSZ
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@h;`9Z9^(vID%", "@h;`9Z9^(vID%", 51, illegalMonitorStateException0);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("@h;`9Z9^(vID%", sQLInvalidAuthorizationSpecException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("int", classLoader0);
      HashSet<Short> hashSet0 = new HashSet<Short>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@h;`9Z9^(vID%");
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, parameterizedTypeImpl0);
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      AtomicInteger atomicInteger0 = new AtomicInteger((-1910332502));
      ParserConfig parserConfig1 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemClass(parameterizedTypeImpl1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".xT0");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "X");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      treeMap0.floorEntry(".xT0");
      Byte byte0 = new Byte((byte)111);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      int[] intArray0 = new int[0];
      SQLWarning sQLWarning0 = new SQLWarning("com.alibaba.fastjson.serializer.SerializeWriter");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLWarning0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("vp3KmvJF", (String) null, batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@h;`9Z9^(vID%", "d,LDwz", 1712, sQLNonTransientException0);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("[~}i\"", sQLNonTransientException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("NULL", classLoader0);
      HashSet<Short> hashSet0 = new HashSet<Short>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.fnv1a_64("%G\"r(5[vBG");
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParserConfig parserConfig0 = new ParserConfig();
      Float float0 = new Float(1.0);
      Long long0 = new Long(1712);
      TypeUtils.cast((Object) long0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TypeUtils.getGenericParamType((Type) null);
      InstantiationError instantiationError0 = new InstantiationError("can not cast to double, value : ");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      BigDecimal bigDecimal0 = new BigDecimal((-1107L));
      Locale locale0 = Locale.ITALIAN;
      Short short0 = new Short((short)1852);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.autoTypeAccept", ";", 3901);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, (Type) null);
      TypeUtils.decapitalize("fastjson.parser.deny");
      Class<Boolean> class1 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstantiationException instantiationException0 = new InstantiationException();
      Type[] typeArray0 = new Type[0];
      Class<Long> class0 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("\"%fC3`E}hn-7,h7m||G", false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      AtomicInteger atomicInteger0 = new AtomicInteger((-68703773));
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.castToBoolean(atomicInteger0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) uUID0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.fnv1a_64_lower("d`.R1d");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstantiationException instantiationException0 = new InstantiationException();
      Class<Long> class0 = Long.TYPE;
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[3]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      AtomicInteger atomicInteger0 = new AtomicInteger(32);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      MockUUID.randomUUID();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("=,$dQ?r6z ");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockNullPointerException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Long> class0 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("\"%fC3`E}hn-7,h7m||G", false);
      classLoader0.setDefaultAssertionStatus(false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      System.setCurrentTimeMillis(0L);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      TypeUtils.isKotlin(class1);
      WeakHashMap<NoSuchMethodError, OutOfMemoryError> weakHashMap0 = new WeakHashMap<NoSuchMethodError, OutOfMemoryError>();
      TypeUtils.castToBoolean((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@461
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Time time0 = new Time(0L);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      Class<Integer> class1 = Integer.TYPE;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(typeArray0[0]).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      typeArray0[8] = type0;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType1).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, jSONType1);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class2);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) time0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("y=^odn&qVz%fhN|+S", parserConfig0, 34);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      TypeUtils.isHibernateInitialized(class0);
      TypeUtils.fnv1a_64("DisableASM");
      ParserConfig parserConfig1 = new ParserConfig();
      Float float0 = new Float(391.504196292354);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      TypeUtils.castToDate(atomicInteger0);
      TypeUtils.getClass((Type) class0);
      TypeUtils.loadClass("fastjson.parser.deny");
      TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      TypeUtils.loadClass("fastjson.parser.deny");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(illegalMonitorStateException0);
      mockIllegalStateException0.getStackTrace();
      illegalMonitorStateException0.addSuppressed(mockIllegalStateException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("int", classLoader0);
      Locale locale0 = Locale.CANADA;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      String string0 = "@h;`9Z9^(vID%";
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      TypeUtils.getGenericParamType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<Boolean> class1 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) serializeBeanInfo0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeUtils.fnv1a_64("~ 9Y;aEnUWmG`R'c;C");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      linkedHashMap0.put("~ 9Y;aEnUWmG`R'c;C", "Z");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      linkedHashMap0.computeIfAbsent(".000000", function0);
      linkedHashMap0.put("H%}E", "H%}E");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-95);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, false);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      System.setCurrentTimeMillis((-2229609124653329400L));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TypeUtils.castToChar((Object) null);
      Class<IllegalAccessException> class0 = IllegalAccessException.class;
      TypeUtils.getParserFeatures(class0);
      String string0 = "QY";
      HttpCookie httpCookie0 = null;
      try {
        httpCookie0 = new HttpCookie((String) null, "QY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.HttpCookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      MockDate mockDate0 = new MockDate(102, 102, 102, (-68703773), (-2), (-1512));
      identityHashMap0.put((InstantiationException) null, mockDate0);
      MockDate mockDate1 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      MockDate mockDate2 = new MockDate((-68703773), 244, 40, 91, 244, 23);
      BiFunction<Throwable, MockDate, MockDate> biFunction0 = (BiFunction<Throwable, MockDate, MockDate>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[6];
      Class<Short> class0 = Short.TYPE;
      typeArray0[0] = (Type) class0;
      Class<?> class1 = TypeUtils.getCollectionItemClass(typeArray0[0]);
      typeArray0[1] = (Type) class1;
      Class<Integer> class2 = Integer.TYPE;
      typeArray0[2] = (Type) class2;
      ParserConfig parserConfig0 = new ParserConfig();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      ParserConfig parserConfig1 = new ParserConfig(false);
      ConcurrentHashMap<ThrowableDeserializer, Insets> concurrentHashMap0 = new ConcurrentHashMap<ThrowableDeserializer, Insets>();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[2]);
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      TypeUtils.cast((Object) jSONPDeserializer0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<IllegalStateException> class1 = IllegalStateException.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache(".0", treeMap0);
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      FieldInfo fieldInfo0 = new FieldInfo("*HEQNFh1#", class2, class1, class0, (Field) null, (-1871), (-1012), 35);
      BeanContext beanContext0 = new BeanContext(fieldInfo0.declaringClass, fieldInfo0);
      Class<Point> class3 = Point.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class3);
      javaBeanSerializer0.getType();
      TypeUtils.loadClass(",NHj8xOj So>x");
      Class<Boolean> class4 = Boolean.TYPE;
      TypeUtils.getCollectionItemClass(class1);
      TypeUtils.getGenericParamType((Type) null);
      Type[] typeArray0 = new Type[0];
      beanContext0.getField();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, fieldInfo0.fieldType, class2);
      ParserConfig parserConfig0 = ParserConfig.global;
      java.sql.Date date0 = new java.sql.Date(35);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) date0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Type type0 = null;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getGenericParamType((Type) null);
      InstantiationError instantiationError0 = new InstantiationError("can not cast to double, value : ");
      ConcurrentHashMap<Long, JavaBeanDeserializer> concurrentHashMap0 = new ConcurrentHashMap<Long, JavaBeanDeserializer>();
      concurrentHashMap0.mappingCount();
      ParserConfig.getGlobalInstance();
      TypeUtils.castToString(concurrentHashMap0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      MockDate mockDate0 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("can not cast to double, value : ");
      Byte byte0 = new Byte((byte)64);
      TypeUtils.castToTimestamp(byte0);
      Class<TimeZone> class0 = TimeZone.class;
      ParserConfig.parserAllFieldToCache(class0, hashMap0);
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UTF-8");
      Double double0 = new Double((-1798.203639441));
      Double.max(0.0, 0.0);
      TypeUtils.castToInt(double0);
      ThreadGroup threadGroup0 = new ThreadGroup("pos ");
      MockThread mockThread0 = new MockThread(threadGroup0, "pos ");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("*>", classLoader0, true);
      TypeUtils.unwrapOptional((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("UTF-8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      MockDate mockDate0 = new MockDate(102, 102, 102, (-68703773), (-2), (-1512));
      identityHashMap0.put((InstantiationException) null, mockDate0);
      MockDate mockDate1 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      MockDate mockDate2 = new MockDate((-68703773), 244, 40, 91, 244, 23);
      BiFunction<Throwable, MockDate, MockDate> biFunction0 = (BiFunction<Throwable, MockDate, MockDate>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[6];
      Class<Short> class0 = Short.TYPE;
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      Class<Integer> class1 = Integer.TYPE;
      typeArray0[2] = (Type) class1;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Float> class2 = Float.TYPE;
      typeArray0[4] = (Type) class2;
      TypeUtils.getClassFromMapping(".0");
      typeArray0[5] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Float float0 = new Float((-1.0));
      parameterizedTypeImpl1.getTypeName();
      MinguoDate minguoDate0 = MockMinguoDate.now();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) minguoDate0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      InstantiationError instantiationError0 = new InstantiationError(".0");
      ConcurrentHashMap<Long, JavaBeanDeserializer> concurrentHashMap0 = new ConcurrentHashMap<Long, JavaBeanDeserializer>();
      ParserConfig.getGlobalInstance();
      java.util.IdentityHashMap<BitSet, NoSuchFieldError> identityHashMap1 = new java.util.IdentityHashMap<BitSet, NoSuchFieldError>();
      identityHashMap1.keySet();
      TypeUtils.castToString(identityHashMap1);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int int0 = Opcodes.IF_ACMPNE;
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap1);
      TypeUtils.decapitalize("parse error");
      Class<IllegalMonitorStateException> class2 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Properties properties0 = new Properties();
      TypeUtils.castToBytes("u?Ueut!ZN");
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.unwrapOptional(class1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u?Ueut!ZN");
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      TypeUtils.loadClass("Ljava.awt.Rectangle");
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      InterruptedException interruptedException0 = new InterruptedException();
      String string0 = File.pathSeparator;
      TypeUtils.loadClass("fastjson.parser.deny");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.toLocale("0;Z~Zf%RX<D;_':8>D");
      Byte byte0 = new Byte((byte)28);
      Byte.toUnsignedLong((byte)28);
      Byte.compare((byte)28, (byte)28);
      Byte.toUnsignedInt((byte)28);
      Byte.toUnsignedInt((byte)28);
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("qiOz0|#%gp", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ClassLoader.getSystemClassLoader();
      MockDate mockDate0 = new MockDate(21, 16, 3282, 47, 3282, 1239);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("islength", false);
      ClassLoader.getSystemClassLoader();
      TypeUtils.fnv1a_64_lower("islength");
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeUtils.isPath(class0);
      TypeUtils.getCollectionItemClass(class0);
      VerifyError verifyError0 = new VerifyError("OYReWF");
      TypeUtils.castToInt((Object) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      MockDate mockDate0 = new MockDate(102, 102, 102, 102, 102, (-1512));
      MockDate mockDate1 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      BigDecimal bigDecimal0 = new BigDecimal((-2147483648L));
      Locale locale0 = Locale.ITALIAN;
      Short short0 = new Short((short)1852);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".0");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("pLj*8~8aR(2)jw", "", 40);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      TypeUtils.castToDouble((Object) null);
      Class<InternalError> class0 = InternalError.class;
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, true);
      SecurityException securityException0 = new SecurityException("pLj*8~8aR(2)jw", sQLIntegrityConstraintViolationException0);
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.isHibernateInitialized("");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      InstantiationError instantiationError0 = new InstantiationError(".0");
      ConcurrentHashMap<Long, JavaBeanDeserializer> concurrentHashMap0 = new ConcurrentHashMap<Long, JavaBeanDeserializer>();
      ParserConfig parserConfig0 = ParserConfig.global;
      java.util.IdentityHashMap<BitSet, NoSuchFieldError> identityHashMap1 = new java.util.IdentityHashMap<BitSet, NoSuchFieldError>();
      identityHashMap1.keySet();
      TypeUtils.castToString(identityHashMap1);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      TypeUtils.createCollection(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TypeUtils.toLocale("_V_E~SVl.<fc\"So`-");
      TypeUtils.isNumber("_V_E~SVl.<fc\"So`-");
      TypeUtils.decapitalize("_V_E~SVl.<fc\"So`-");
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.isProxy(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.fnv1a_64("_V_E~SVl.<fc\"So`-");
      Class<Float> class1 = Float.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      MockDate mockDate0 = new MockDate(102, 102, 102, (-68703773), (-68703773), (-1512));
      MockDate mockDate1 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      MockDate mockDate2 = new MockDate((-68703773), 244, 40, 91, 244, 23);
      BiFunction<Throwable, MockDate, MockDate> biFunction0 = (BiFunction<Throwable, MockDate, MockDate>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Class<Short> class0 = Short.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Float> class1 = Float.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      MockMinguoDate.now();
      HashMap<ChoiceFormat, BreakIterator> hashMap0 = new HashMap<ChoiceFormat, BreakIterator>();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.autoTypeAccept");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      BreakIterator breakIterator0 = BreakIterator.getLineInstance(locale0);
      hashMap0.put(choiceFormat0, breakIterator0);
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      Random.setNextRandom((-68703773));
      Insets insets0 = new Insets(8, 102, 8, 8);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.awt.Insets[top=8,left=102,bottom=8,right=8]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TypeUtils.decapitalize("S");
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getClassFromMapping("S");
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-87);
      byteArray0[8] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ParserConfig parserConfig0 = new ParserConfig();
      parameterizedTypeImpl0.getTypeName();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      InternalError internalError0 = new InternalError();
      TypeUtils.castToBigDecimal(typeArray0[1]);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.castToBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)83;
      byteArray0[6] = (byte) (-60);
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.castToEnum((Object) "", class1, parserConfig0);
      Byte byte0 = new Byte((byte) (-60));
      TypeUtils.isPath(class1);
      Class<Double> class2 = Double.TYPE;
      parserConfig0.clearDeserializers();
      ParserConfig parserConfig1 = new ParserConfig();
      Float float0 = new Float((-2101.418));
      TypeUtils.getCollectionItemType(class1);
      Class<Character> class3 = Character.TYPE;
      MockMinguoDate.now();
      TypeUtils.getRawClass(class0);
      Class<SQLNonTransientConnectionException> class4 = SQLNonTransientConnectionException.class;
      TypeUtils.getParserFeatures(class4);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TypeUtils.castToByte("");
      Byte byte0 = new Byte((byte) (-90));
      TypeUtils.loadClass("NaN");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      ClassLoader.getSystemClassLoader();
      Float float0 = new Float((double) (byte) (-90));
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, parameterizedTypeImpl0, parameterizedTypeImpl0);
      ParserConfig parserConfig0 = new ParserConfig();
      Float float1 = new Float((-1400.0));
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("yyyyMMddHHmmssSSSZ", "", (byte) (-90));
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeAccept", concurrentHashMap0, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLClientInfoException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      MockDate mockDate0 = new MockDate(102, 102, 102, (-68703773), (-68703773), (-1512));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd");
      MockDate mockDate1 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      MockDate mockDate2 = new MockDate((-68703773), 244, 40, 91, 244, 23);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils typeUtils0 = new TypeUtils();
      JSON.DEFFAULT_DATE_FORMAT = ".0";
      ParserConfig parserConfig0 = new ParserConfig();
      Class<InstantiationError> class0 = InstantiationError.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.clone();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      TypeUtils.castToSqlTime(mockDate1);
      TypeUtils.loadClass("6bRZz@Cq]%fdw=4#.000000000");
      Class<OptionalCodec> class1 = OptionalCodec.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Point point0 = new Point(Integer.MAX_VALUE, 871);
      MockDate mockDate1 = new MockDate(871);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(Integer.MAX_VALUE, 184, 184, 184, 24, 69);
      TypeUtils.castToSqlDate(mockGregorianCalendar0);
      AtomicInteger atomicInteger0 = new AtomicInteger(2552);
      LinkedHashMap<Integer, String> linkedHashMap0 = new LinkedHashMap<Integer, String>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("co'", "DisableCheckSpecialChar");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(mockDate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : Thu Jan 01 00:00:00 GMT 1970
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TypeUtils.fnv1a_64_lower(".0");
      java.util.IdentityHashMap<InstantiationException, MockDate> identityHashMap0 = new java.util.IdentityHashMap<InstantiationException, MockDate>();
      MockDate mockDate0 = new MockDate(102, 102, 102, (-1772), (-2), (-2));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".0", parserConfig0, 1805);
      Class<Integer> class0 = Integer.TYPE;
      InstantiationException instantiationException0 = new InstantiationException();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      NoSuchFieldError noSuchFieldError1 = new NoSuchFieldError();
      Throwable throwable0 = noSuchFieldError0.fillInStackTrace();
      ParserConfig parserConfig1 = new ParserConfig(true);
      Hashtable<SQLTransactionRollbackException, InstantiationError> hashtable0 = new Hashtable<SQLTransactionRollbackException, InstantiationError>(0, 565760338237066291L);
      InternalError internalError0 = new InternalError("fastjson.parser.autoTypeAccept", instantiationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("can not cast to long, value : ", throwable0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(".0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      MockDate mockDate0 = new MockDate();
      InstantiationException instantiationException0 = new InstantiationException();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Point point0 = new Point(Integer.MAX_VALUE, 69);
      MockDate mockDate1 = new MockDate((-1L));
      AtomicInteger atomicInteger0 = new AtomicInteger((-341));
      LinkedHashMap<Integer, String> linkedHashMap0 = new LinkedHashMap<Integer, String>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("getgetSigners", "HF");
      sQLTimeoutException0.fillInStackTrace();
      TypeUtils.castToBytes("HF");
      Hashtable<SQLTransactionRollbackException, InstantiationError> hashtable1 = new Hashtable<SQLTransactionRollbackException, InstantiationError>(4, Integer.MAX_VALUE);
      InternalError internalError0 = new InternalError("getgetSigners", sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("getgetSigners", sQLTimeoutException0);
      TypeUtils.castToFloat(atomicInteger0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.isPath(class0);
  }
}
