/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:42:47 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider.create(simplePageProcessor0);
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2560);
      Spider spider1 = spider0.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7~BSzCL6(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("7~BSzCL6(");
      spider1.setUUID("7~BSzCL6(");
      Spider.Status spider_Status0 = Spider.Status.fromValue((-391));
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*nT.4|7(G");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("TvLeo6");
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("TvLeo6");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.pipeline(consolePipeline0);
      spider0.start();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&=f7B=wU7j$/(");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3494);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("%20", "%20");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      spider0.initComponent();
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.addPipeline(filePipeline0);
      Spider spider3 = spider2.setScheduler(fileCacheQueueScheduler0);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      List<SpiderListener> list0 = spider4.getSpiderListeners();
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("waitNewUrl - interrupted, error {}");
      spider1.getPageCount();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_plus");
      spider0.pipelines = (List<Pipeline>) linkedList0;
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.thread(648);
      spider1.getThreadAlive();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3494);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("%20", "%20");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%20");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider0.startUrls(linkedList0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download("c;pR37Ued^+d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7~BSzCL6(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      spider1.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Spider spider1 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_0-aY)<U9>5");
      spider1.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider2 = spider0.setExecutorService(forkJoinPool0);
      spider2.getPageCount();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      spider2.isExitWhenComplete();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7~BSzCL6(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("7~BSzCL6(");
      Spider spider2 = spider1.setUUID("7~BSzCL6(");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7~BSzCL6(";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|3KH)u");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.setUUID("charsets*=s*['\"]*([^s;'\"]*)");
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) null, (-1504));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*nT.4|7(G");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3470);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.stream();
      int int0 = 5;
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("g");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g";
      spider0.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("g");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.addPipeline(resultItemsCollectorPipeline0);
      spider0.getScheduler();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yF-lZnq|");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("x2P=zX`", "yF-lZnq|");
      spider0.stop();
      FilePipeline filePipeline0 = new FilePipeline("x2P=zX`");
      // Undeclared exception!
      try { 
        spider0.pipeline(filePipeline0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7~BSzCL6(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("7~BSzCL6(", "\"h~95");
      Spider spider1 = spider0.scheduler((Scheduler) null);
      Spider spider2 = spider1.scheduler((Scheduler) null);
      spider2.setUUID("");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.setUUID(" stop success!");
      ForkJoinTask.getPool();
      spider2.thread((ExecutorService) null, 7);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("process request ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.process request 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&=f7B=wU7j$/(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("&=f7B=wU7j$/(");
      Spider spider1 = spider0.setUUID("&=f7B=wU7j$/(");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("process request ");
      spider1.setScheduler(fileCacheQueueScheduler1);
      spider2.getThreadAlive();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7~BSzCL6(");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getStartTime();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&=f7B=wU7j$/(");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3494);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("&=f7B=wU7j$/(", "&=f7B=wU7j$/(");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      spider1.initComponent();
      spider1.run();
      FilePipeline filePipeline0 = new FilePipeline("&=f7B=wU7j$/(");
      spider0.pipeline(filePipeline0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&=f7B=wU7j$/(");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3494);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("S6,]=", "");
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider1.setEmptySleepTime(41);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      spider1.initComponent();
      spider2.run();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7~BSzCL6(");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.scheduler((Scheduler) null);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("7~BSzCL6(");
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*nT.4|7(G");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("*nT.4|7(G");
      int int0 = (-1);
      spider0.getStatus();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("*nT.4|7(G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.*nT.4|7(G
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/+k{{R(Kl0H\"N<70Gq");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider0.getThreadAlive();
      spider1.isSpawnUrl();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.setUUID(" stop success!");
      String string0 = "uoytiyhw@D>~gYi'bM";
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("uoytiyhw@D>~gYi'bM");
      Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider2.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "yF-lZnq|";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      spider1.getSite();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("yF-lZnq|");
      Spider spider2 = Spider.create(simplePageProcessor1);
      // Undeclared exception!
      try { 
        spider2.get("yF-lZnq|");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("lZ=/%5Xxb8o");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("x2P=zX`", "7V)^7Jizs?`Z");
      spider0.stop();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("page status code error, page {} , code: {}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.page status code error, page {} , code: {}
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
