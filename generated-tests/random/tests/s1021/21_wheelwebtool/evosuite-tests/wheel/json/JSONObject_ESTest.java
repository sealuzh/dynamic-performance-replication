/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:05:04 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 0, 2255);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Double double0 = new Double(237.82948904546782);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("null", (Collection) linkedList0);
      String string0 = jSONObject1.optString("null");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)3);
      linkedList0.add(byte0);
      jSONObject0.put("\"tCW", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\"tCW");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "sum");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      jSONObject0.put("\"sum\"", (Collection) linkedList0);
      jSONObject0.getJSONArray("\"sum\"");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("has", stringArray0);
      jSONObject0.put("has", (-2547));
      double double0 = jSONObject0.getDouble("has");
      assertEquals((-2547.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(1340, (-36833786));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 2744);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-1257));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Missing value");
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("Missing value", object0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put("VRZ^M?/mG R|=ON}b=", (Collection) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 6);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("oKEW.m^70otn>b'C", 0.0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getparseUnsignedLong", 3222.9178);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("{\n                                                                      \"java.lang.Float@0000000003\": \"java.lang.String@0000000004\",\n                                                                      \"java.lang.String@0000000005\": [],\n                                                                      \"java.lang.String@0000000004\": java.lang.Integer@0000000007\n}", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = new Integer((-1551));
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      long long0 = jSONObject0.optLong("JrdP~jtDbN=Lu", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float(4549.8594F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      int int0 = jSONObject0.optInt("3@KP*", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt("B(dv-=$H:;/kR>eV", 60);
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, (-1531));
      assertEquals((-1531), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Float float0 = new Float(4549.8594F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      double double0 = jSONObject0.optDouble("`o1fh0jIjSX2\"", (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("istrim", 1564.76);
      assertEquals(1564.76, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("<t<", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "istoString");
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean(false);
      jSONObject0.accumulate("", boolean0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Short short0 = new Short((short)16);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject0.put("\"java.lang.String@0000000002\"", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("mu#bwq3oyJr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mu#bwq3oyJr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double double0 = new Double(237.82948904546782);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getInt("|Ru\"-M7B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|Ru\\\"-M7B\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float float0 = new Float(4549.8594F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("`o1fh0jIjSX2\"", true);
      String string0 = jSONObject1.toString((-5420), 1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JSONObject.quote("\"tCW");
      assertEquals("\"\\\"tCW\"", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float float0 = new Float(4549.8594F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Object) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optString("Nmj4SB=_@6ukl27Rk=l", "Nmj4SB=_@6ukl27Rk=l");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      double double1 = jSONObject0.optDouble("Nmj4SB=_@6ukl27Rk=l", (-1304.23082371));
      assertEquals(3, jSONObject0.length());
      assertEquals((-1304.23082371), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Float float0 = new Float(4549.8594F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Object object0 = jSONObject0.opt("`o1fh0jIjSX2\"");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Long long0 = new Long((-1L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = new Double(2100.4975);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = new Double(1139.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("wheel.json.JSONTokener", 3);
      jSONObject0.get("wheel.json.JSONTokener");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float(4549.8594F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer((-1551));
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("..j(rY7Qh`9*", 0L);
      JSONObject jSONObject1 = jSONObject0.append("val", "isrotateRight");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0, 117, 4);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, 3188, 3188);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-481), (-481));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 3, 3);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("null", (Collection) linkedList0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("reon{+M", "reon{+M");
      jSONObject1.put("{}", (-85L));
      String string0 = jSONObject0.toString((-94), 842);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Missing value");
      // Undeclared exception!
      jSONObject0.toString(773);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = new Long(869L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.append("^?qCnpg4x.#_*7jLo36", boolean0);
      JSONObject.valueToString(jSONObject0, 0, 0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = new Long(869L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject.valueToString(jSONObject0, 0, 0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "istoString");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "istoString");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3, jSONObject0.length());
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "istoString");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject0.length());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = new Double(237.82948904546782);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Float@0000000001", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("f&W</[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f&W<\\/[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-101));
      jSONObject0.accumulate("issum", byte0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "] is not a Boolean.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("LAAa32} *3z", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("has", stringArray0);
      jSONObject0.put("has", false);
      String string0 = jSONObject0.optString("has", "ha");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      jSONObject0.put("d`", (Map) hashMap0);
      jSONObject0.optJSONObject("d`");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONTokener");
      jSONObject0.optJSONObject("P5W");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("\"tCW", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\"tCW");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("X");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("f'7O.IK+]K!Z<wOR7O", (-223.9281480273962));
      double double0 = jSONObject1.optDouble("f'7O.IK+]K!Z<wOR7O", (-223.9281480273962));
      assertEquals((-223.9281480273962), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      Double double0 = new Double(0.0);
      Long long0 = new Long(2189L);
      hashMap0.put(double0, long0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("null", (Collection) linkedList0);
      jSONObject1.names();
      jSONObject0.put("", 470L);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "par");
      jSONObject0.put("par", (-3274L));
      jSONObject0.toString();
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("has", stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("has", stringArray0);
      jSONObject0.put("has", (-2547));
      long long0 = jSONObject0.optLong("has");
      assertEquals((-2547L), long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      jSONObject0.put(".", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject(".");
      assertNotSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("oKEW.m^70otn>b'C", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("oKEW.m^70otn>b'C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"oKEW.m^70otn>b'C\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000006.", (-1100));
      try { 
        jSONObject1.getJSONArray("java.lang.Long@0000000006.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@0000000006.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("vTON=/L3p'j:PwW&", 28);
      int int0 = jSONObject1.getInt("vTON=/L3p'j:PwW&");
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0", (Object) "0");
      int int0 = jSONObject0.getInt("0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = new Double(1139.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("wheel.json.JSONTokener", 3);
      double double1 = jSONObject0.getDouble("wheel.json.JSONTokener");
      assertEquals(4, jSONObject0.length());
      assertEquals(3.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("<t<", "<t<");
      long long0 = jSONObject0.optLong("<t<");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("B(dv-=$H:;/kR>eV", true);
      boolean boolean0 = jSONObject1.optBoolean("B(dv-=$H:;/kR>eV", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(".BD@(D)/PFg(H", "-3663.78");
      try { 
        jSONObject0.getBoolean(".BD@(D)/PFg(H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".BD@(D)/PFg(H\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.put("{}", 2697);
      boolean boolean0 = jSONObject0.optBoolean("{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("BD}!d>e`^_5~YKB", false);
      boolean boolean0 = jSONObject1.optBoolean("BD}!d>e`^_5~YKB", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "par");
      jSONObject0.put("] is not a Boolean.", false);
      jSONObject0.getString("] is not a Boolean.");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-3663.78));
      assertEquals("-3663.78", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1379.0);
      assertEquals("1379", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("<t<", "<t<");
      try { 
        jSONObject0.append("<t<", "<t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[<t<] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = new Double((-867.46916356));
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("pJ{V78@O", (Collection) linkedList0);
      Short short0 = new Short((short)20);
      JSONObject jSONObject1 = jSONObject0.append("pJ{V78@O", short0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getnumberToString");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("JSONObject[", (Collection) linkedList0);
      jSONObject0.accumulate("JSONObject[", jSONObject1);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-98));
      JSONObject jSONObject0 = new JSONObject(byte0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate(": ", jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double double0 = new Double(1139.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("wheel.json.JSONTokener", 3);
      jSONObject0.accumulate("wheel.json.JSONTokener", double0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{.mOAng>");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {.mOAng>
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{<^a5=piJ\"3^@");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {<^a5=piJ\"3^@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                      \"java.lang.Float@0000000003\": \"java.lang.String@0000000004\",\n                                                                      \"java.lang.String@0000000005\": [],\n                                                                      \"java.lang.String@0000000004\": java.lang.Integer@0000000007\n}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{#<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 3 of {#<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "par");
      jSONObject0.put("par", (Object) "par");
      boolean boolean0 = jSONObject0.isNull("par");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.optInt("Nmj4SB=_@6ukl27Rk=l");
      assertEquals(0, int0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("{\n\"java.lang.String@0000000003\": [],\n\"java.lang.String@0000000004\": java.lang.Long@0000000006\n}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("6]kd(*)~Fa<79Nj", (-1285L));
      assertEquals((-1285L), long0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "par");
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "par");
      boolean boolean0 = jSONObject0.isNull("par");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("ZkxM(0bg'w?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ZkxM(0bg'w?
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer((-1551));
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("..j(rY7Qh`9*", (Map) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("\"tCW", (Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("1hrL+RV?Y-U{");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "sum");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("\"sum\"", (Collection) linkedList0);
      jSONObject0.getJSONArray("\"sum\"");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-98));
      JSONObject jSONObject0 = new JSONObject(byte0);
      double double0 = jSONObject0.optDouble("{?h!)bjOC");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Short short0 = new Short((short) (-65));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.has("viD-bpk}");
      assertEquals(1, jSONObject0.length());
  }
}
