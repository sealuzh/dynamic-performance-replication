/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 10:33:51 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<String, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Integer>, String>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Integer, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Integer, HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(461);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Map<Object, Object>) hashMap0, integer0, hashMap0);
      Map<Integer, HashMap<Object, Object>> map0 = doubleKeyMap0.remove((Map<Object, Object>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Map<Object, HashMap<Object, String>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<Object, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = doubleKeyMap0.remove((Object) null, (Object) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Object>, Map<String, String>, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, Map<String, String>, HashMap<Integer, Object>>();
      DoubleKeyMap<Object, Map<String, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, String>, String>();
      HashMap<Integer, Map<Map<String, String>, Map<String, String>>> hashMap0 = new HashMap<Integer, Map<Map<String, String>, Map<String, String>>>();
      DoubleKeyMap<Integer, Map<String, String>, Map<String, String>> doubleKeyMap2 = new DoubleKeyMap<Integer, Map<String, String>, Map<String, String>>(hashMap0);
      Map<String, String> map0 = doubleKeyMap2.newMap();
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, map0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, String, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<String, String>>();
      Object object0 = new Object();
      Map<String, Map<String, String>> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Map<String, String>, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Map<String, String>, Map<String, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Map<String, String> map0 = doubleKeyMap0.put(hashMap0, (Map<String, String>) null, (Map<String, String>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Object>, Map<String, String>, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, Map<String, String>, HashMap<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap1.put((Object) doubleKeyMap0, integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Map<Integer, Map<String, String>>> hashMap0 = new HashMap<Integer, Map<Integer, Map<String, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Map<String, String>>(hashMap0, class0);
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Map<String, Map<Object, String>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap2 = new DoubleKeyMap<String, Object, String>(map0, class0);
      String string0 = doubleKeyMap2.get("C%D/px6", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Map<String, String>, Map<String, String>> hashMap0 = new HashMap<Map<String, String>, Map<String, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, String>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, String, String>(hashMap0, class0);
      String string0 = doubleKeyMap0.get((Map<String, String>) null, "P");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Object>, Map<String, String>, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, Map<String, String>, HashMap<Integer, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = doubleKeyMap1.get((Object) doubleKeyMap0, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Integer>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Object, String>((Map<HashMap<Object, Integer>, Map<Object, String>>) null, class0);
      Map<Object, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(map0);
      Map<Integer, Integer> map1 = doubleKeyMap1.get((Object) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Map<String, String>, Map<Object, Map<String, String>>> hashMap0 = new HashMap<Map<String, String>, Map<Object, Map<String, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, String>, Object, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Object, Map<String, String>>(hashMap0, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Map<String, String>) null, object0, (Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, String>((Map<String, Map<String, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Object object0 = new Object();
      Map<Object, String> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer((-1209));
      doubleKeyMap1.put(integer0, (Object) integer0, (Object) null);
      Object object0 = doubleKeyMap1.put(integer0, (Object) doubleKeyMap0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Map<String, HashMap<Map<String, String>, String>>> hashMap0 = new HashMap<Integer, Map<String, HashMap<Map<String, String>, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, HashMap<Map<String, String>, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, HashMap<Map<String, String>, String>>(hashMap0, class0);
      Integer integer0 = new Integer(0);
      HashMap<String, HashMap<Map<String, String>, String>> hashMap1 = new HashMap<String, HashMap<Map<String, String>, String>>();
      hashMap0.put(integer0, hashMap1);
      HashMap<Map<String, String>, String> hashMap2 = doubleKeyMap0.get(integer0, (String) null);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      doubleKeyMap0.put((Object) null, (Object) hashMap0, "[&:y5u9%1");
      DoubleKeyMap<Integer, Map<String, String>, Map<String, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, Map<String, String>, Map<String, String>>();
      Map<Map<String, String>, Map<Map<String, String>, HashMap<Object, Integer>>> map0 = doubleKeyMap1.newMap();
      String string0 = doubleKeyMap0.remove((Object) null, (Object) map0);
      assertEquals("[&:y5u9%1", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Object>, Map<String, String>, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, Map<String, String>, HashMap<Integer, Object>>();
      DoubleKeyMap<HashMap<Map<String, String>, Integer>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<String, String>, Integer>, Integer, Integer>();
      Map<Integer, Map<Object, Map<String, String>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Integer, Object, Map<String, String>> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Map<String, String>>(map0);
      Integer integer0 = new Integer(1);
      HashMap<Integer, Map<Map<String, String>, Map<String, String>>> hashMap0 = new HashMap<Integer, Map<Map<String, String>, Map<String, String>>>();
      DoubleKeyMap<Integer, Map<String, String>, Map<String, String>> doubleKeyMap3 = new DoubleKeyMap<Integer, Map<String, String>, Map<String, String>>(hashMap0);
      Map<String, String> map1 = doubleKeyMap3.newMap();
      doubleKeyMap2.put(integer0, (Object) doubleKeyMap1, map1);
      doubleKeyMap2.remove(integer0, (Object) doubleKeyMap0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }
}
