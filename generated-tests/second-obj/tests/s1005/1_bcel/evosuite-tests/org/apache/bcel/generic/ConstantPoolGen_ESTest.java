/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:58:18 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.SWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2048, 2048);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInvokeDynamic1, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = 2048, name_and_type_index = 2048)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(221, 2336);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      int int0 = 855;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(1165, 855);
      constantArray0[1] = (Constant) constantNameAndType2;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble(44.37573162563);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-3844), 2719);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantInteger constantInteger0 = new ConstantInteger((-3844));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupFloat(2719);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(443.3879);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantLong constantLong0 = new ConstantLong((-146L));
      constantArray0[1] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupFloat(2719);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      int int0 = Pattern.UNICODE_CASE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addLong(6L);
      constantPoolGen0.toString();
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = ObjectStreamConstants.baseWireHandle;
      ConstantString constantString0 = new ConstantString(2357);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[1] = (Constant) constantString1;
      constantArray0[2] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "8PTzzSWLX-h0?tj/r_S";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8PTzzSWLX-h0?tj/r_S");
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(245);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(245, 245);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2858, 2858);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("%");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      int int0 = constantPoolGen0.addClass(objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(87);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle1);
      constantArray0[1] = (Constant) constantMethodHandle2;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(9, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(443.3879);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(4642929740842270720L);
      constantPoolGen0.lookupInterfaceMethodref("K2|i5iL=Rkui_9", "K2|i5iL=Rkui_9", "K2|i5iL=Rkui_9");
      int int0 = constantPoolGen0.lookupInteger((-1));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(3);
      constantArray0[0] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger(3);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3, 3);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupInteger(3);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(260);
      constantPoolGen0.addUtf8("? extends ");
      constantPoolGen0.addInteger(260);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-209), (-2004318069));
      assertEquals((-209), constantNameAndType0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-670);
      String string0 = "";
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("", "", ")");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = (-495);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-495), (-495));
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant((-495), constantMethodref0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -495
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(7);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("org.apache.bcel.generic.ConstantPoolGen");
      constantPoolGen0.lookupNameAndType("", "org.apache.bcel.generic.ConstantPoolGen");
      constantPoolGen0.addDouble((-1));
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.getConstant(64);
      int int0 = Float.BYTES;
      constantPoolGen0.getConstant(64);
      int int1 = Pattern.LITERAL;
      constantPoolGen0.addInteger(0);
      constantPoolGen0.lookupMethodref("", "", "");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant((Constant) null, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref(",I7M[9K,@|Qk M@4", "V@_5%B_ETDs", "V@_5%B_ETDs");
      constantPoolGen0.lookupMethodref("~", "~", "V@_5%B_ETDs");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1), (-1));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(3);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantFloat constantFloat0 = new ConstantFloat((-1140.5029F));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupClass(">-y*FF;]-#k\"");
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(229);
      constantPoolGen0.addInteger(2);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-209), (-2004318069));
      assertEquals((-2004318069), constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(2300.05F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(245, (-1));
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(0.0F);
      int int0 = constantPoolGen0.lookupLong(1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = ObjectStreamConstants.baseWireHandle;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$");
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString((-1820));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[3] = (Constant) constantString1;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("org.apache.bcel.generic.ConstantPoolGen");
      constantPoolGen0.addFieldref("org.apache.bcel.generic.ConstantPoolGen", "org.apache.bcel.generic.ConstantPoolGen", "org.apache.bcel.generic.ConstantPoolGen");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-209), (-2004318069));
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(5);
      ObjectType objectType0 = ObjectType.getInstance("org.apache.bcel.generic.ConstantPoolGen");
      assertEquals("org.apache.bcel.generic.ConstantPoolGen", objectType0.getClassName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-27L));
      int int0 = constantPoolGen0.index;
      int int1 = constantPoolGen0.lookupLong(3);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(1L);
      constantPoolGen0.getConstantPool();
      int int0 = Pattern.LITERAL;
      String string0 = "}M";
      String string1 = ",l~6}ZJ#L?<c C+v";
      constantPoolGen0.lookupMethodref("<merBMb9T+:*_\u0005", "}M", ",l~6}ZJ#L?<c C+v");
      constantPoolGen0.addLong(1);
      int int1 = 3;
      IINC iINC0 = null;
      try {
        iINC0 = new IINC((-1375), (-2595));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -1375
         //
         verifyException("org.apache.bcel.generic.IINC", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.toString();
      constantPoolGen0.addString("");
      int int0 = Character.MIN_CODE_POINT;
      constantPoolGen0.lookupMethodref("X,y>=){YiJ't0FVK", "iy<#sB", ">%(");
      constantPoolGen0.lookupFloat((-1));
      ConstantDouble constantDouble0 = new ConstantDouble(0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen1.lookupInteger(256);
      ConstantClass constantClass0 = new ConstantClass(2);
      constantPool0.copy();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addString("");
      constantPoolGen0.addDouble(1.0);
      constantPoolGen0.lookupDouble(3);
      int int0 = constantPoolGen0.getSize();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addFieldref("Unexpected constant type: ", "Unexpected constant type: ", "Unexpected constant type: ");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.getFinalConstantPool();
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(256, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupFloat(1504.17F);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      int int0 = Character.MIN_RADIX;
      int int1 = Short.BYTES;
      int int2 = Float.BYTES;
      constantPool0.copy();
      constantPoolGen0.addLong(4);
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("]BN]3`fH|");
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      String string0 = Constants.ILLEGAL_OPCODE;
      int int3 = constantPoolGen0.lookupClass("'M$");
      assertEquals(12, constantPoolGen0.getSize());
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(64, 64);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantDouble constantDouble0 = new ConstantDouble(64);
      constantDouble0.clone();
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupDouble(64);
      constantPoolGen0.addInteger(64);
      int int0 = constantPoolGen0.addNameAndType("K7?)V[{^\"", "K7?)V[{^\"");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addDouble((-1.0));
      Method method0 = new Method();
      String string0 = "org.apache.commons.io.filefilter.NotFileFilter";
      constantPoolGen0.addDouble((-1.0));
      // Undeclared exception!
      try { 
        method0.getArgumentTypes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.toString();
      constantPoolGen0.lookupUtf8("");
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = Float.MAX_EXPONENT;
      constantPoolGen0.lookupMethodref("", "", "");
      ConstantPool constantPool2 = constantPool1.copy();
      constantPool2.copy();
      constantPoolGen0.addInterfaceMethodref("", "", "");
      ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(127);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool3);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodType0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodType[16](descriptor_index = -1)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.toString();
      constantPoolGen0.addString("");
      constantPoolGen0.addString("");
      ConstantString constantString0 = new ConstantString(2);
      constantPoolGen0.getConstantPool();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      int int1 = Pattern.UNICODE_CHARACTER_CLASS;
      ConstantClass constantClass0 = new ConstantClass(224);
      constantClass0.clone();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(256);
      int int2 = constantPoolGen0.lookupFloat((-1.0F));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[13];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(219, 0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantFloat constantFloat0 = new ConstantFloat(219);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.adjustSize();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = constantPoolGen1.addConstant(constantArray0[1], constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(13, constantPoolGen1.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 1249);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = Pattern.CANON_EQ;
      constantPoolGen0.getConstantPool();
      int int1 = constantPoolGen0.size;
      ConstantInteger constantInteger0 = new ConstantInteger(128);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      int int2 = constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-2026L));
      int int0 = Pattern.UNIX_LINES;
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantString constantString0 = new ConstantString(1076);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupUtf8("Unezpected conttant type: ");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1076
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int0 = Pattern.UNIX_LINES;
      constantPoolGen0.getFinalConstantPool();
      int int1 = Pattern.COMMENTS;
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool2);
      constantPoolGen1.getFinalConstantPool();
      ConstantClass constantClass0 = new ConstantClass(4);
      constantClass0.clone();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(8, 8);
      constantArray0[0] = (Constant) constantMethodHandle0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-4561), 2631);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool1 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addLong(8);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("=19`k!IyX>X");
      int int0 = Character.MAX_RADIX;
      constantPool1.copy();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1453), 1);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType1);
      ConstantNameAndType constantNameAndType3 = new ConstantNameAndType(constantNameAndType2);
      ConstantPool constantPool2 = constantPool1.copy();
      ConstantClass constantClass0 = new ConstantClass((-623));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool2);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4561
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFloat(0.0F);
      ConstantLong constantLong0 = new ConstantLong(2933L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantLong1, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref((String) null, (String) null, "]");
      constantPoolGen0.addFieldref("", "", "");
      int int0 = constantPoolGen0.addNameAndType("", "");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(64, 88);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      String string0 = Constants.CONSTRUCTOR_NAME;
      constantPool0.copy();
      constantPoolGen0.addMethodref("<init>", "<init>", "<init>");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-20), 2079);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      constantPoolGen0.addInteger((byte)39);
      String string1 = "6/I`(^";
      constantPoolGen0.lookupMethodref("6/I`(^", "6/I`(^", (String) null);
      String string2 = "%";
      constantPoolGen0.lookupInterfaceMethodref((String) null, "%", "S");
      constantPoolGen0.addDouble((byte)39);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int1 = Byte.BYTES;
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant(1943);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1943
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(64, 28);
      constantInterfaceMethodref0.setClassIndex(64);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("Ixjm&ce,x=", "org.apache.bcel.verifier.structurals.GenericArray", "org.apache.bcel.verifier.structurals.GenericArray");
      String string0 = "y/yWCE,GH";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m$63rED(l^cOG2iS");
      constantPoolGen0.lookupMethodref("y/yWCE,GH", "u#YI'V\"EANXT^Z<gR>", "5k;BX=.B&cGM;");
      constantPoolGen0.lookupNameAndType("m$63rED(l^cOG2iS", "1*_:wx1WMIL}A4TfW}Z");
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-18), (-18));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n:/)");
      constantMethodHandle0.setReferenceIndex(758);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(108, 2631);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addLong((-18));
      constantPoolGen0.addMethodref("=19`k!IyX>X", "x{ b?41(w=gcH[", "x{ b?41(w=gcH[");
      constantPoolGen0.addMethodref("=19`k!IyX>X", "x{ b?41(w=gcH[", "x{ b?41(w=gcH[");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.toString();
      constantPoolGen0.lookupUtf8("");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      int int0 = Pattern.COMMENTS;
      constantPoolGen0.lookupMethodref("", "", "");
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      constantPoolGen0.addInterfaceMethodref("", "", "");
      constantPool1.copy();
      constantPoolGen0.addInterfaceMethodref("", "", "");
      constantPoolGen0.addLong((-1));
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(40, 1249);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(1249, 1249);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("m+Oj`@6>(?='$;g", "m+Oj`@6>(?='$;g", "m+Oj`@6>(?='$;g");
      constantPoolGen0.getConstantPool();
      int int0 = Pattern.MULTILINE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m+Oj`@6>(?='$;g";
      stringArray0[1] = "m+Oj`@6>(?='$;g";
      constantPoolGen0.addFieldref("m+Oj`@6>(?='$;g", "m+Oj`@6>(?='$;g", "m+Oj`@6>(?='$;g");
      constantPoolGen0.addInteger((byte)1);
      constantPoolGen1.lookupInterfaceMethodref("", "m+Oj`@6>(?='$;g", "Unknown constant type ");
      constantPoolGen1.addDouble(1249);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref1;
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPoolGen constantPoolGen2 = null;
      try {
        constantPoolGen2 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.toString();
      constantPoolGen0.addString("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPoolGen0.addMethodref("", "", "");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = Float.MIN_EXPONENT;
      int int1 = Character.MIN_RADIX;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassLoader.getSystemClassLoader();
      constantPoolGen2.addFieldref("", "", "");
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "#l";
      ObjectType objectType0 = ObjectType.getInstance("");
      PUSH pUSH0 = new PUSH(constantPoolGen2, 133L);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(238, objectType0, objectType0.NO_ARGS, (String[]) null, "#l", "", instructionList0, constantPoolGen0);
      methodGen0.copy("#l", constantPoolGen1);
      int int2 = Float.SIZE;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(5, 32);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        constantPool1.constantToString((Constant) constantFieldref0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Class' at index 5 and got CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
}
