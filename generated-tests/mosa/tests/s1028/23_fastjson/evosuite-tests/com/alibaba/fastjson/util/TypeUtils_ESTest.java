/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 19:07:07 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.IntUnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("}5+^XLb");
      TypeUtils typeUtils0 = new TypeUtils();
      Locale.forLanguageTag("o");
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(locale0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Lorg.springframework.util.LinkedMultiValueMap");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader1);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      
      TypeUtils.getCollectionItemClass(class1);
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type type0 = null;
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.fnv1a_64_lower("Ljava.lang.AutoCloseable");
      TypeUtils.fnv1a_64_lower("Ljava.lang.AutoCloseable");
      NumberFormatException numberFormatException0 = new NumberFormatException();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getParserFeatures(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("8%9Is*/#J", "8%9Is*/#J", 2195, (Throwable) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0);
      Short short0 = new Short((short) (-1878));
      assertEquals((short) (-1878), (short)short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isTransient((Method) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":BCamSNO|");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(weakHashMap0);
      Class<Object> class1 = Object.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<JobAttributes> class0 = JobAttributes.class;
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      TypeUtils.getSerializeFeatures(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.clear();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Class<NumberFormatException> class1 = NumberFormatException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) noSuchMethodError0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<InternalError> class0 = InternalError.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeUtils.getGenericParamType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(typeUtils0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getCollectionItemType(class0);
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(renderingHints_Key0).toString();
      HashMap<NoClassDefFoundError, SQLSyntaxErrorException> hashMap0 = new HashMap<NoClassDefFoundError, SQLSyntaxErrorException>();
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(renderingHints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {null={}}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeUtils.decapitalize("r");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      Class<Float> class1 = Float.class;
      TypeUtils.isKotlin(class1);
      AtomicInteger atomicInteger0 = new AtomicInteger(26);
      TypeUtils.isProxy(class1);
      Locale locale0 = Locale.GERMAN;
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getCollectionItemClass(class1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeUtils.decapitalize("Y(9}@>");
      Class<Point> class0 = Point.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      Field field0 = ParserConfig.getFieldFromCache("S", hashMap0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("qkd6");
      assertEquals((-7669384940131454513L), long0);
      
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.isPath(class0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
      
      TypeUtils.toLocale("qkd6");
      Locale locale0 = TypeUtils.toLocale("qkd6");
      assertEquals("qkd6", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.fnv1a_64_lower("Ljava.lang.AutoCloseable");
      TypeUtils.fnv1a_64_lower("Ljava.lang.AutoCloseable");
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.isProxy(class0);
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(bufferCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.BufferCapabilities@36114c97
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils.loadClass((String) null);
      MockDate mockDate0 = new MockDate(0L);
      mockDate0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(mockDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Thu Jan 01 00:00:00 GMT 1970
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<TimeUnit> class1 = TimeUnit.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Insets insets0 = new Insets(149, (-3139), 1649, (-3139));
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(149, 149, (-2599), (-3139), (-1061.753127935), 149, 149, 50, insets0, (-3139), 15);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Insets[top=149,left=-3139,bottom=1649,right=-3139]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.castToChar((Object) null);
      TypeUtils.isPath(class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getParserFeatures(class0);
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      atomicInteger0.set(0);
      int int0 = Calendar.ZONE_OFFSET;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(atomicInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = Collator.PRIMARY;
      TreeSet<DecimalFormat> treeSet0 = new TreeSet<DecimalFormat>();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(identityHashMap0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[0], (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("}5+^XLb");
      assertEquals("}5+^xlb", locale0.toString());
      
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "8Z@-I#Bqgz", fieldArray0);
      assertNull(field0);
      
      boolean boolean0 = TypeUtils.isNumber("j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Map<String, String> map0 = ZoneId.SHORT_IDS;
          Class<SQLException> class0 = SQLException.class;
          LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
          TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
          Class<Short> class1 = Short.TYPE;
          Type[] typeArray0 = new Type[3];
          typeArray0[1] = (Type) class0;
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[1]);
          ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
          ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
          ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
          ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader1);
      Point point0 = new Point();
      Type[] typeArray0 = new Type[1];
      Class<Float> class0 = Float.TYPE;
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      TreeSet<DecimalFormat> treeSet0 = new TreeSet<DecimalFormat>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Method> class0 = Method.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      TypeUtils.isNumber("XT4");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<JobAttributes> class0 = JobAttributes.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(3808);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Class<Locale> class2 = Locale.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) concurrentHashMap0, (Type) class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 47, (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(47, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
      
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap1);
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(linkedHashMap1);
      assertNotNull(hashtable0);
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap1);
      assertNotNull(list0);
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(linkedHashMap1, linkedHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("}5+^XLb");
      assertFalse(boolean0);
      
      Class<Long> class0 = Long.class;
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class1, "}5+^XLb", fieldArray0);
      assertNull(field0);
      
      Class<JavaObjectDeserializer> class2 = JavaObjectDeserializer.class;
      Class<?> class3 = TypeUtils.getClassFromMapping("}5+^XLb");
      assertNull(class3);
      
      FieldInfo fieldInfo0 = new FieldInfo("I?6,3qTU!,", class2, class0, (Type) null, (Field) null, (-199), (-1144), (-199));
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-1144), fieldInfo0.serialzeFeatures);
      assertEquals((-199), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertNotNull(fieldInfo0);
      assertEquals("I?6,3qTU!,", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      
      Class<NumberFormat> class4 = NumberFormat.class;
      BeanContext beanContext0 = new BeanContext(class4, fieldInfo0);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-1144), fieldInfo0.serialzeFeatures);
      assertEquals((-199), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertNotNull(beanContext0);
      assertEquals("I?6,3qTU!,", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals("I?6,3qTU!,", beanContext0.getName());
      assertEquals((-1144), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      
      Class<Annotation> class5 = Annotation.class;
      Annotation annotation0 = beanContext0.getAnnation(class5);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-1144), fieldInfo0.serialzeFeatures);
      assertEquals((-199), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertNull(annotation0);
      assertEquals("I?6,3qTU!,", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals("I?6,3qTU!,", beanContext0.getName());
      assertEquals((-1144), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      
      Field field1 = beanContext0.getField();
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-1144), fieldInfo0.serialzeFeatures);
      assertEquals((-199), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertNull(field1);
      assertEquals("I?6,3qTU!,", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals("I?6,3qTU!,", beanContext0.getName());
      assertEquals((-1144), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      
      Field field2 = beanContext0.getField();
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-1144), fieldInfo0.serialzeFeatures);
      assertEquals((-199), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertNull(field2);
      assertEquals("I?6,3qTU!,", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals("I?6,3qTU!,", beanContext0.getName());
      assertEquals((-1144), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      
      boolean boolean1 = TypeUtils.isPath(class5);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Type type0 = TypeUtils.getGenericParamType(fieldInfo0.fieldClass);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-1144), fieldInfo0.serialzeFeatures);
      assertEquals((-199), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertNull(type0);
      assertEquals("I?6,3qTU!,", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("Y(9}@>");
      assertNotNull(string0);
      assertEquals("y(9}@>", string0);
      
      MockThread mockThread0 = new MockThread("Y(9}@>");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("", classLoader1);
      assertNull(class0);
      assertFalse(classLoader1.equals((Object)classLoader0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      int int1 = TypeUtils.getParserFeatures(class1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(linkedHashMap0);
      assertNotNull(hashtable0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertNotNull(list0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      IndexOutOfBoundsException indexOutOfBoundsException0 = TypeUtils.cast((Object) null, (Type) class1, (ParserConfig) null);
      assertNull(indexOutOfBoundsException0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotSame(parserConfig1, parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.text.NumberFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(class0);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<JobAttributes> class0 = JobAttributes.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      assertNotNull(sqlDateDeserializer0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(sqlDateDeserializer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(3808);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      assertNotNull(hashtable0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>(concurrentHashMap0);
      assertNotNull(hashtable1);
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      
      Class<Calendar> class2 = Calendar.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashtable1);
      assertNotNull(list0);
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(hashtable1, hashtable0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)28;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-82), (byte)28}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      Type[] typeArray0 = new Type[1];
      ThreadGroup threadGroup0 = new ThreadGroup("can not cast to char[]");
      assertNotNull(threadGroup0);
      assertEquals("can not cast to char[]", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "parseByte error, field : ");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("can not cast to char[]", threadGroup0.getName());
      assertEquals("parseByte error, field : ", threadGroup1.getName());
      
      MockThread mockThread0 = new MockThread("parseByte error, field : ");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0, "can not cast to char[]", (byte) (-24));
      assertNotNull(mockThread1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("can not cast to char[]", threadGroup0.getName());
      assertEquals("parseByte error, field : ", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("can not cast to char[]", threadGroup0.getName());
      assertEquals("parseByte error, field : ", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("can not cast to char[]", threadGroup0.getName());
      assertEquals("parseByte error, field : ", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("parseByte error, field : ", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. parseByte error, field : 
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = Collator.PRIMARY;
      assertEquals(0, int0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertNotNull(list0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<MockDateFormat> class1 = null;
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("[double");
      assertNotNull(noSuchFieldError0);
      assertEquals("java.lang.NoSuchFieldError: [double", noSuchFieldError0.toString());
      assertEquals("[double", noSuchFieldError0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning(noSuchFieldError0);
      assertNotNull(sQLWarning0);
      assertEquals("java.lang.NoSuchFieldError: [double", noSuchFieldError0.toString());
      assertEquals("[double", noSuchFieldError0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.lang.NoSuchFieldError: [double", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.lang.NoSuchFieldError: [double", sQLWarning0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "()[C");
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("()[C", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string0 = "equals";
      Locale locale0 = TypeUtils.toLocale("equals");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("equals", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("equals", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("equals");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"equals\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      Constructor<InternalError>[] constructorArray0 = (Constructor<InternalError>[]) Array.newInstance(Constructor.class, 8);
      constructorArray0[0] = (Constructor<InternalError>) constructorArray0;
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(1434);
      assertNotNull(atomicInteger0);
      assertEquals(1434.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("1434", atomicInteger0.toString());
      assertEquals(1434.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((short)1434, atomicInteger0.shortValue());
      assertEquals(1434L, atomicInteger0.longValue());
      assertEquals(1434, atomicInteger0.get());
      assertEquals(1434, atomicInteger0.intValue());
      assertEquals((byte) (-102), atomicInteger0.byteValue());
      
      int int0 = Collator.PRIMARY;
      assertEquals(0, int0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intUnaryOperator0).applyAsInt(anyInt());
      int int1 = atomicInteger0.updateAndGet(intUnaryOperator0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("0", atomicInteger0.toString());
      
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.pos());
      
      threadGroup0.checkAccess();
      assertNull(threadGroup0.getName());
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.JSONPath");
      assertNotNull(class0);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertEquals("class com.alibaba.fastjson.JSONPath", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<?> class1 = TypeUtils.getClassFromMapping("fastjson.parser.deny");
      assertNull(class1);
      
      Class<?> class2 = TypeUtils.loadClass("com.alibaba.fastjson.JSONPath");
      assertNotNull(class2);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("class com.alibaba.fastjson.JSONPath", class2.toString());
      assertSame(class2, class0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = DateFormat.SECOND_FIELD;
      assertEquals(7, int0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(7);
      assertNotNull(atomicInteger0);
      assertEquals(7.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(7, atomicInteger0.get());
      assertEquals("7", atomicInteger0.toString());
      assertEquals(7L, atomicInteger0.longValue());
      assertEquals((short)7, atomicInteger0.shortValue());
      assertEquals(7.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((byte)7, atomicInteger0.byteValue());
      assertEquals(7, atomicInteger0.intValue());
      
      int int1 = Collator.PRIMARY;
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      atomicInteger0.set(7);
      assertEquals(7.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(7, atomicInteger0.get());
      assertEquals("7", atomicInteger0.toString());
      assertEquals(7L, atomicInteger0.longValue());
      assertEquals((short)7, atomicInteger0.shortValue());
      assertEquals(7.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((byte)7, atomicInteger0.byteValue());
      assertEquals(7, atomicInteger0.intValue());
      
      int int2 = Calendar.ZONE_OFFSET;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(15, int2);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(atomicInteger0);
      assertNotNull(timestamp0);
      assertEquals(7.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(7, atomicInteger0.get());
      assertEquals("7", atomicInteger0.toString());
      assertEquals(7L, atomicInteger0.longValue());
      assertEquals((short)7, atomicInteger0.shortValue());
      assertEquals(7.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((byte)7, atomicInteger0.byteValue());
      assertEquals(7, atomicInteger0.intValue());
      assertEquals(7000000, timestamp0.getNanos());
      assertEquals("1970-01-01 00:00:00.007", timestamp0.toString());
      
      Integer integer0 = TypeUtils.castToInt(atomicInteger0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertEquals(7, (int)integer0);
      assertEquals(7.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(7, atomicInteger0.get());
      assertEquals("7", atomicInteger0.toString());
      assertEquals(7L, atomicInteger0.longValue());
      assertEquals((short)7, atomicInteger0.shortValue());
      assertEquals(7.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((byte)7, atomicInteger0.byteValue());
      assertEquals(7, atomicInteger0.intValue());
      
      Class<MessageFormat> class0 = MessageFormat.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertNotNull(list0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      
      typeArray0[0] = (Type) class1;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[2]);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class1.isAnnotation());
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(map0);
      assertNotNull(hashtable0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals(28, hashtable0.size());
      
      Class<BitSet> class2 = BitSet.class;
      List<FieldInfo> list1 = TypeUtils.computeGetters(class2, map0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class2, typeArray0[0], (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.util.BitSet
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      int int1 = TypeUtils.getParserFeatures(class1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("8%9Is*/#J", "8%9Is*/#J", 0, (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("8%9Is*/#J", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: 8%9Is*/#J", sQLNonTransientConnectionException0.toString());
      assertEquals("8%9Is*/#J", sQLNonTransientConnectionException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("8%9Is*/#J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 8%9Is*_/#J
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = DateFormat.YEAR_FIELD;
      assertEquals(1, int0);
      
      Class<SQLException> class0 = SQLException.class;
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      Class<Field> class2 = Field.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class2, jSONType0);
      assertNull(class3);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jdk8DateCodec0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@22229e48
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("Y(9}@>");
      assertNotNull(string0);
      assertEquals("y(9}@>", string0);
      
      Insets insets0 = new Insets(30, 1649, 371, 24);
      assertEquals(24, insets0.right);
      assertEquals(371, insets0.bottom);
      assertEquals(30, insets0.top);
      assertEquals(1649, insets0.left);
      assertNotNull(insets0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("Y(9}@>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Y(9}@>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      assertNotNull(string0);
      assertEquals("fastjson.parser.autoTypeAccept", string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string1 = locale0.getScript();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Collator collator0 = Collator.getInstance(locale0);
      assertNotNull(collator0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, collator0.getDecomposition());
      assertEquals(2, collator0.getStrength());
      
      Class<RenderingHints> class0 = RenderingHints.class;
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.awt.RenderingHints", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      
      Class<?> class3 = TypeUtils.loadClass("fastjson.parser.autoTypeAccept");
      assertNull(class3);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.testdata.FileSystemHandling@4bd123fd
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":BCamSNO|");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(':', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) ":BCamSNO|", class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("Y(9}@>");
      assertNotNull(string0);
      assertEquals("y(9}@>", string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getSuppressed");
      assertFalse(boolean0);
      
      String string1 = " QpD";
      long long0 = TypeUtils.fnv1a_64_lower(" QpD");
      assertEquals(8848067429373411870L, long0);
      
      SQLDataException sQLDataException0 = new SQLDataException("getSuppressed");
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("getSuppressed", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: getSuppressed", sQLDataException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("getSuppressed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getSuppressed\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(")/").when(biFunction0).apply(anyString() , anyString());
      String string0 = weakHashMap0.compute(")/", biFunction0);
      assertNull(string0);
      
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      ObjectDeserializer objectDeserializer0 = parserConfig1.getDeserializer((Type) class0);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(objectDeserializer0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertEquals(4, objectDeserializer0.getFastMatchToken());
      assertNotSame(parserConfig1, parserConfig0);
      
      ParserConfig parserConfig2 = new ParserConfig(classLoader0);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertNotNull(parserConfig2);
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) class0, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)33;
      Class<NumberFormat> class0 = NumberFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNotNull(noSuchMethodError0);
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("Ljava.awt.Font", "Ljava.awt.Font", "<d$0&z1h(;Wj`=", (byte)33);
      assertNotNull(stackTraceElement0);
      assertEquals("Ljava.awt.Font", stackTraceElement0.getClassName());
      assertEquals("Ljava.awt.Font.Ljava.awt.Font(<d$0&z1h(;Wj`=:33)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("Ljava.awt.Font", stackTraceElement0.getMethodName());
      assertEquals("<d$0&z1h(;Wj`=", stackTraceElement0.getFileName());
      assertEquals(33, stackTraceElement0.getLineNumber());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      noSuchMethodError0.setStackTrace(stackTraceElementArray0);
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      
      LinkedHashMap<SQLTimeoutException, DataTruncation> linkedHashMap0 = new LinkedHashMap<SQLTimeoutException, DataTruncation>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      assertNotNull(decimalFormatSymbols0);
      assertEquals('\u00A0', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals(',', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals(',', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      boolean boolean1 = TypeUtils.isNumber("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Locale locale1 = Locale.KOREAN;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertNotSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException((String) null);
      assertNotNull(mockIllegalStateException0);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException((String) null);
      assertNotNull(illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      boolean boolean1 = TypeUtils.isPath(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("Y(9}@>");
      assertNotNull(string0);
      assertEquals("y(9}@>", string0);
      
      String string1 = TypeUtils.decapitalize((String) null);
      assertNull(string1);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertNotNull(imageCapabilities0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      assertNotNull(bufferCapabilities_FlipContents0);
      
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      assertNotNull(bufferCapabilities0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(bufferCapabilities0.isMultiBufferAvailable());
      assertFalse(bufferCapabilities0.isFullScreenRequired());
      assertTrue(bufferCapabilities0.isPageFlipping());
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(")/").when(biFunction0).apply(anyString() , anyString());
      String string0 = weakHashMap0.compute(")/", biFunction0);
      assertNull(string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      boolean boolean2 = TypeUtils.isPath(class2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Class<SqlDateDeserializer> class3 = SqlDateDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("r");
      assertNotNull(string0);
      assertEquals("r", string0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "r", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Class<Character> class1 = Character.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      ObjectDeserializer objectDeserializer0 = parserConfig1.getDeserializer((Type) class0);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertNotNull(objectDeserializer0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertNotSame(parserConfig1, parserConfig0);
      
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertEquals("double", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) objectDeserializer0, (Type) class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_MockThaiBuddhistDate@126
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("% ", "% ");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.put("getClass", "l*WT [6(V*ZB[,e?Fe9");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {getClass=l*WT [6(V*ZB[,e?Fe9, % =% }
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(1434);
      assertNotNull(atomicInteger0);
      assertEquals(1434.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("1434", atomicInteger0.toString());
      assertEquals(1434, atomicInteger0.get());
      assertEquals(1434.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((short)1434, atomicInteger0.shortValue());
      assertEquals(1434L, atomicInteger0.longValue());
      assertEquals((byte) (-102), atomicInteger0.byteValue());
      assertEquals(1434, atomicInteger0.intValue());
      
      int int0 = Collator.PRIMARY;
      assertEquals(0, int0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intUnaryOperator0).applyAsInt(anyInt());
      int int1 = atomicInteger0.updateAndGet(intUnaryOperator0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals("0", atomicInteger0.toString());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0, atomicInteger0.get());
      
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      threadGroup0.checkAccess();
      assertNull(threadGroup0.getName());
      
      threadGroup0.interrupt();
      assertNull(threadGroup0.getName());
      
      int int2 = atomicInteger0.incrementAndGet();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1L, atomicInteger0.longValue());
      assertEquals((short)1, atomicInteger0.shortValue());
      assertEquals("1", atomicInteger0.toString());
      assertEquals((byte)1, atomicInteger0.byteValue());
      assertEquals(1, atomicInteger0.intValue());
      assertEquals(1.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(1.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(1, atomicInteger0.get());
      
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) atomicInteger0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Class<?> class1 = parserConfig0.checkAutoType("getgetClass", class0, (-465));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNull(class1);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class2 = TypeUtils.getClass(type0);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      
      Collection collection0 = TypeUtils.createCollection(class2);
      assertNotNull(collection0);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      
      boolean boolean0 = TypeUtils.isProxy(class2);
      assertFalse(boolean0);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      
      String string0 = TypeUtils.decapitalize("fastjson.parser.autoTypeSupport");
      assertNotNull(string0);
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = Collator.PRIMARY;
      assertEquals(0, int0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertNotNull(list0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      assertNotNull(parameterizedTypeImpl0);
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      SQLTransientException sQLTransientException0 = TypeUtils.cast((Object) classLoader0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      assertNull(sQLTransientException0);
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      Class<SQLException> class0 = SQLException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertNotNull(list0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = TypeUtils.isNumber("/tm,8Q");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "% ";
      String string1 = hashMap0.put("% ", "isisPrimitive");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string2 = hashMap0.put("wc", "% ");
      assertNull(string2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("isisPrimitive");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : isisPrimitive
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      String string0 = "y9|\"";
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("y9|\"");
      assertNotNull(noSuchFieldError0);
      assertEquals("java.lang.NoSuchFieldError: y9|\"", noSuchFieldError0.toString());
      assertEquals("y9|\"", noSuchFieldError0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("XhhH+O=W&UN\"RfUa3", "ishashCode", (-917), noSuchFieldError0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.lang.NoSuchFieldError: y9|\"", noSuchFieldError0.toString());
      assertEquals("y9|\"", noSuchFieldError0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: XhhH+O=W&UN\"RfUa3", sQLNonTransientConnectionException0.toString());
      assertEquals((-917), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("XhhH+O=W&UN\"RfUa3", sQLNonTransientConnectionException0.getMessage());
      
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(map0);
      assertNotNull(hashtable0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals(28, hashtable0.size());
      
      Class<Integer> class1 = Integer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0);
      assertNotNull(list0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals(28, hashtable0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      assertEquals(PropertyNamingStrategy.SnakeCase, propertyNamingStrategy0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (Type) class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "srl(x");
      assertFalse(boolean0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      WeakHashMap<IllegalAccessError, Timestamp> weakHashMap0 = new WeakHashMap<IllegalAccessError, Timestamp>();
      assertNotNull(weakHashMap0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      String string0 = "yyyy-MM-dd";
      StackTraceElement stackTraceElement0 = new StackTraceElement(";x)", "yyyy-MM-dd", (String) null, 30);
      assertNotNull(stackTraceElement0);
      assertNull(stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("yyyy-MM-dd", stackTraceElement0.getMethodName());
      assertEquals(";x).yyyy-MM-dd(Unknown Source)", stackTraceElement0.toString());
      assertEquals(";x)", stackTraceElement0.getClassName());
      assertEquals(30, stackTraceElement0.getLineNumber());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(stackTraceElement0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(1483);
      assertNotNull(atomicInteger0);
      assertEquals(1483.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte) (-53), atomicInteger0.byteValue());
      assertEquals("1483", atomicInteger0.toString());
      assertEquals(1483, atomicInteger0.get());
      assertEquals((short)1483, atomicInteger0.shortValue());
      assertEquals(1483, atomicInteger0.intValue());
      assertEquals(1483L, atomicInteger0.longValue());
      assertEquals(1483.0F, atomicInteger0.floatValue(), 0.01F);
      
      int int0 = Collator.PRIMARY;
      assertEquals(0, int0);
      
      TreeSet<DecimalFormat> treeSet0 = new TreeSet<DecimalFormat>();
      assertNotNull(treeSet0);
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      assertNotNull(parameterizedTypeImpl0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(identityHashMap0);
      assertNotNull(hashtable0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertNotNull(list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(identityHashMap0);
      assertNull(bigDecimal0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertNotNull(list0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Type[] typeArray0 = new Type[3];
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertNotNull(class2);
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertEquals("short", class2.toString());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class2);
      assertNotNull(parameterizedTypeImpl0);
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertEquals("short", class2.toString());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(map0);
      assertNotNull(hashtable0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(28, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      assertNotNull(hashtable1);
      assertFalse(hashtable1.equals((Object)hashtable0));
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LinkedHashMap<SQLTimeoutException, DataTruncation> linkedHashMap0 = new LinkedHashMap<SQLTimeoutException, DataTruncation>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap1);
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      
      Hashtable<String, String> hashtable2 = new Hashtable<String, String>(linkedHashMap1);
      assertNotNull(hashtable2);
      assertFalse(hashtable2.equals((Object)hashtable0));
      assertTrue(hashtable2.equals((Object)hashtable1));
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertTrue(hashtable2.isEmpty());
      assertEquals(0, hashtable2.size());
      
      String string0 = hashtable2.put("isfillInStackTrace", "isfillInStackTrace");
      assertNull(string0);
      assertFalse(hashtable2.equals((Object)hashtable0));
      assertFalse(hashtable2.equals((Object)hashtable1));
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertFalse(hashtable2.isEmpty());
      assertEquals(1, hashtable2.size());
      assertNotSame(hashtable2, hashtable0);
      assertNotSame(hashtable2, hashtable1);
      
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable2);
      assertNotNull(list1);
      assertFalse(hashtable2.equals((Object)hashtable0));
      assertFalse(hashtable2.equals((Object)hashtable1));
      assertTrue(list1.equals((Object)list0));
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertFalse(hashtable2.isEmpty());
      assertEquals(1, hashtable2.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(hashtable2, hashtable0);
      assertNotSame(hashtable2, hashtable1);
      assertNotSame(list1, list0);
      
      MockDate mockDate0 = new MockDate(34, 55296, 34);
      assertNotNull(mockDate0);
      assertEquals("Sat Feb 03 00:00:00 GMT 6542", mockDate0.toString());
      
      Class<Long> class3 = Long.TYPE;
      assertNotNull(class3);
      assertEquals(1041, class3.getModifiers());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("long", class3.toString());
      assertFalse(class3.isAnnotation());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, (Type) class3, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)94;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)49, (byte)94, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Boolean boolean0 = TypeUtils.castToBoolean(bigInteger0);
      assertNotNull(boolean0);
      assertArrayEquals(new byte[] {(byte)49, (byte)94, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Insets insets0 = new Insets(148, 148, 1649, 148);
      assertEquals(148, insets0.top);
      assertEquals(148, insets0.right);
      assertEquals(1649, insets0.bottom);
      assertEquals(148, insets0.left);
      assertNotNull(insets0);
      
      MockDate mockDate0 = new MockDate(148, 148, 224);
      assertNotNull(mockDate0);
      assertEquals("Fri Dec 10 00:00:00 GMT 2060", mockDate0.toString());
      
      SQLException sQLException0 = new SQLException("y~TAwjC");
      assertNotNull(sQLException0);
      assertEquals("y~TAwjC", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: y~TAwjC", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("f$.Q]", sQLException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("y~TAwjC", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: y~TAwjC", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: f$.Q]", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("f$.Q]", sQLTransientConnectionException0.getMessage());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("value ", (ClassLoader) aSMClassLoader0, true);
      assertNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransientConnectionException0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "WriteNullStringAsEmpty";
      boolean boolean0 = TypeUtils.isNumber("WriteNullStringAsEmpty");
      assertFalse(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("N[X5-8vE");
      assertNotNull(locale0);
      assertEquals("n[x5-8ve", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("n[x5-8ve", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("N[X5-8vE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : N[X5-8vE
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      String string0 = "8%9Is*/#J";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("8%9Is*/#J", "8%9Is*/#J", (-31), (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("8%9Is*/#J", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("8%9Is*/#J", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: 8%9Is*/#J", sQLNonTransientConnectionException0.toString());
      assertEquals((-31), sQLNonTransientConnectionException0.getErrorCode());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)49;
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)94;
      Class<AtomicLong> class1 = AtomicLong.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertNotNull(class2);
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Class<?> class3 = TypeUtils.loadClass("8%9Is*/#J");
      assertNull(class3);
      
      WeakHashMap<IllegalAccessError, Timestamp> weakHashMap0 = new WeakHashMap<IllegalAccessError, Timestamp>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("% ", "% ");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.put("getClass", "l*WT [6(V*ZB[,e?Fe9");
      assertNull(string1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(hashMap0);
      assertNotNull(hashtable0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      Class<SecurityException> class0 = SecurityException.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.forLanguageTag("get");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("get", locale0.getISO3Language());
      assertEquals("get", locale0.getLanguage());
      assertEquals("get", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      TypeUtils.clearClassMapping();
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      assertNotNull(optionalCodec0);
      assertEquals(12, optionalCodec0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      String string0 = "[booleCn";
      boolean boolean0 = TypeUtils.isNumber("38ku");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[booleCn", classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = Collator.PRIMARY;
      assertEquals(0, int0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.deny", "getInfinity", "fastjson.parser.autoTypeAccept", 0);
      assertNotNull(stackTraceElement0);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertEquals("fastjson.parser.deny", stackTraceElement0.getClassName());
      assertEquals("getInfinity", stackTraceElement0.getMethodName());
      assertEquals("fastjson.parser.autoTypeAccept", stackTraceElement0.getFileName());
      assertEquals("fastjson.parser.deny.getInfinity(fastjson.parser.autoTypeAccept:0)", stackTraceElement0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      assertNotNull(sqlDateDeserializer0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(typeArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte byte0 = new Byte((byte) (-40));
      assertNotNull(byte0);
      assertEquals((byte) (-40), (byte)byte0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("getInfinity");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : getInfinity
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(1434);
      assertNotNull(atomicInteger0);
      assertEquals(1434L, atomicInteger0.longValue());
      assertEquals(1434.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(1434.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("1434", atomicInteger0.toString());
      assertEquals(1434, atomicInteger0.get());
      assertEquals(1434, atomicInteger0.intValue());
      assertEquals((byte) (-102), atomicInteger0.byteValue());
      assertEquals((short)1434, atomicInteger0.shortValue());
      
      int int0 = Collator.PRIMARY;
      assertEquals(0, int0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Method> class0 = Method.class;
      ParserConfig.global = parserConfig0;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertTrue(ParserConfig.global.isAsmEnable());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = treeMap0.put("fastjson.parser.autoTypeSupport", "A5");
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertNotNull(list0);
      assertEquals(1, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean1 = TypeUtils.isNumber("Ljava.awt.Point");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = TypeUtils.castToDouble(double0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<JobAttributes> class0 = JobAttributes.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      assertNotNull(sqlDateDeserializer0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(sqlDateDeserializer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class2, "nSD$@\"w.^z#,X", fieldArray0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("nSD$@\"w.^z#,X", class0, class0, class1, (Field) null, 3808, 3808, 3808);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals(3808, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(3808, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertNotNull(fieldInfo0);
      assertEquals("nSD$@\"w.^z#,X", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      
      Class<SQLSyntaxErrorException> class3 = SQLSyntaxErrorException.class;
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals(3808, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(3808, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertNotNull(beanContext0);
      assertEquals("nSD$@\"w.^z#,X", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals("nSD$@\"w.^z#,X", beanContext0.getName());
      assertEquals(3808, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      
      Class<MockJapaneseDate> class4 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class4, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Throwable> class0 = Throwable.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Class<TimeUnit> class1 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy1);
      assertNotNull(list0);
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Class<?> class3 = TypeUtils.loadClass(">.~l||ApEwoIZ\"9[l<");
      assertNull(class3);
      
      WeakHashMap<IllegalAccessError, Timestamp> weakHashMap0 = new WeakHashMap<IllegalAccessError, Timestamp>();
      assertNotNull(weakHashMap0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("_z]/dE", "null", "[", 65536);
      assertNotNull(stackTraceElement0);
      assertEquals(65536, stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("[", stackTraceElement0.getFileName());
      assertEquals("_z]/dE.null([:65536)", stackTraceElement0.toString());
      assertEquals("_z]/dE", stackTraceElement0.getClassName());
      assertEquals("null", stackTraceElement0.getMethodName());
      
      boolean boolean1 = TypeUtils.isNumber(">.~l||ApEwoIZ\"9[l<");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      
      long long0 = TypeUtils.fnv1a_64_lower("_z]/dE");
      assertEquals(4464942438778985290L, long0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = TypeUtils.decapitalize("isgetCause");
      assertNotNull(string0);
      assertEquals("isgetCause", string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("isgetCause", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      assertNull(class0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(37);
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Class<BitSet> class1 = BitSet.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0);
      assertNotNull(list0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<PropertyNamingStrategy> class2 = PropertyNamingStrategy.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("f~IQ,lM%J", parserConfig0, 37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("8%9Is*/#J", "8%9Is*/#J", 2197, (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("8%9Is*/#J", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(2197, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 8%9Is*/#J", sQLNonTransientConnectionException0.toString());
      assertEquals("8%9Is*/#J", sQLNonTransientConnectionException0.getMessage());
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("8%9Is*/#J", "8%9Is*/#J", "8%9Is*/#J", 2197);
      assertNotNull(stackTraceElement0);
      assertEquals("8%9Is*/#J", stackTraceElement0.getFileName());
      assertEquals(2197, stackTraceElement0.getLineNumber());
      assertEquals("8%9Is*/#J", stackTraceElement0.getClassName());
      assertEquals("8%9Is*/#J.8%9Is*/#J(8%9Is*/#J:2197)", stackTraceElement0.toString());
      assertEquals("8%9Is*/#J", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("8%9Is*/#J");
      assertNotNull(noSuchMethodError0);
      assertEquals("8%9Is*/#J", noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError: 8%9Is*/#J", noSuchMethodError0.toString());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement0;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string0 = identityHashMap0.put("8%9Is*/#J", "8%9Is*/#J");
      assertNull(string0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(identityHashMap0);
      assertNotNull(hashtable0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      ParserConfig parserConfig0 = null;
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("FB7q");
      assertNotNull(noSuchFieldError0);
      assertEquals("java.lang.NoSuchFieldError: FB7q", noSuchFieldError0.toString());
      assertEquals("FB7q", noSuchFieldError0.getMessage());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("FB7q", ".H^@0q@0W\"b9<VD", 12);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("FB7q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(12, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: FB7q", sQLIntegrityConstraintViolationException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLIntegrityConstraintViolationException0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLIntegrityConstraintViolationException -> org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 47, (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(47, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertNotNull(imageCapabilities0);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, (BufferCapabilities.FlipContents) null);
      assertNotNull(bufferCapabilities0);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(bufferCapabilities0.isFullScreenRequired());
      assertFalse(bufferCapabilities0.isPageFlipping());
      assertFalse(bufferCapabilities0.isMultiBufferAvailable());
      
      BufferCapabilities bufferCapabilities1 = (BufferCapabilities)bufferCapabilities0.clone();
      assertNotNull(bufferCapabilities1);
      assertFalse(bufferCapabilities1.equals((Object)bufferCapabilities0));
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(bufferCapabilities0.isFullScreenRequired());
      assertFalse(bufferCapabilities0.isPageFlipping());
      assertFalse(bufferCapabilities0.isMultiBufferAvailable());
      assertFalse(bufferCapabilities1.isPageFlipping());
      assertFalse(bufferCapabilities1.isFullScreenRequired());
      assertFalse(bufferCapabilities1.isMultiBufferAvailable());
      assertNotSame(bufferCapabilities0, bufferCapabilities1);
      assertNotSame(bufferCapabilities1, bufferCapabilities0);
      
      BufferCapabilities bufferCapabilities2 = (BufferCapabilities)bufferCapabilities0.clone();
      assertNotNull(bufferCapabilities2);
      assertFalse(bufferCapabilities0.equals((Object)bufferCapabilities1));
      assertFalse(bufferCapabilities2.equals((Object)bufferCapabilities0));
      assertFalse(bufferCapabilities2.equals((Object)bufferCapabilities1));
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(bufferCapabilities0.isFullScreenRequired());
      assertFalse(bufferCapabilities0.isPageFlipping());
      assertFalse(bufferCapabilities0.isMultiBufferAvailable());
      assertFalse(bufferCapabilities2.isMultiBufferAvailable());
      assertFalse(bufferCapabilities2.isFullScreenRequired());
      assertFalse(bufferCapabilities2.isPageFlipping());
      assertNotSame(bufferCapabilities0, bufferCapabilities1);
      assertNotSame(bufferCapabilities0, bufferCapabilities2);
      assertNotSame(bufferCapabilities2, bufferCapabilities0);
      assertNotSame(bufferCapabilities2, bufferCapabilities1);
      
      BufferCapabilities bufferCapabilities3 = (BufferCapabilities)bufferCapabilities0.clone();
      assertNotNull(bufferCapabilities3);
      assertFalse(bufferCapabilities0.equals((Object)bufferCapabilities1));
      assertFalse(bufferCapabilities0.equals((Object)bufferCapabilities2));
      assertFalse(bufferCapabilities3.equals((Object)bufferCapabilities1));
      assertFalse(bufferCapabilities3.equals((Object)bufferCapabilities2));
      assertFalse(bufferCapabilities3.equals((Object)bufferCapabilities0));
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(bufferCapabilities0.isFullScreenRequired());
      assertFalse(bufferCapabilities0.isPageFlipping());
      assertFalse(bufferCapabilities0.isMultiBufferAvailable());
      assertFalse(bufferCapabilities3.isPageFlipping());
      assertFalse(bufferCapabilities3.isFullScreenRequired());
      assertFalse(bufferCapabilities3.isMultiBufferAvailable());
      assertNotSame(bufferCapabilities0, bufferCapabilities1);
      assertNotSame(bufferCapabilities0, bufferCapabilities3);
      assertNotSame(bufferCapabilities0, bufferCapabilities2);
      assertNotSame(bufferCapabilities3, bufferCapabilities1);
      assertNotSame(bufferCapabilities3, bufferCapabilities2);
      assertNotSame(bufferCapabilities3, bufferCapabilities0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<Currency> class2 = Currency.class;
      int int0 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : interface java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      
      Class<Short> class2 = Short.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("short", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertSame(class2, class0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class2, class2);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("short", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      assertNotNull(hashtable0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      assertNotNull(hashtable1);
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Byte byte0 = new Byte((byte) (-10));
      assertNotNull(byte0);
      assertEquals((byte) (-10), (byte)byte0);
      
      Float float0 = new Float((double) (byte) (-119));
      assertNotNull(float0);
      assertEquals((-119.0F), (float)float0, 0.01F);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(float0);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-119), bigInteger0.byteValue());
      assertEquals((short) (-119), bigInteger0.shortValue());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      
      String string0 = TypeUtils.castToString(locale0);
      assertNotNull(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertNotNull(class1);
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      String string0 = "=-<63riX";
      String string1 = TypeUtils.decapitalize("=-<63riX");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("=-<63riX", string1);
      
      long long0 = TypeUtils.fnv1a_64_lower("=-<63riX");
      assertEquals((-7583283053031460727L), long0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Class<JavaBeanDeserializer> class2 = JavaBeanDeserializer.class;
      FieldInfo fieldInfo0 = null;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class2, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(")/").when(biFunction0).apply(anyString() , anyString());
      String string0 = weakHashMap0.compute(")/", biFunction0);
      assertNull(string0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger((-837));
      assertNotNull(atomicInteger0);
      assertEquals((-837L), atomicInteger0.longValue());
      assertEquals((-837), atomicInteger0.get());
      assertEquals((-837.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((short) (-837), atomicInteger0.shortValue());
      assertEquals((byte) (-69), atomicInteger0.byteValue());
      assertEquals((-837.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-837), atomicInteger0.intValue());
      assertEquals("-837", atomicInteger0.toString());
      
      int int0 = Collator.PRIMARY;
      assertEquals(0, int0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNull(sQLNonTransientConnectionException0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      boolean boolean0 = TypeUtils.isNumber("kNf./Y");
      assertFalse(boolean0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("kNf./Y");
      assertNotNull(noSuchMethodError0);
      assertEquals("java.lang.NoSuchMethodError: kNf./Y", noSuchMethodError0.toString());
      assertEquals("kNf./Y", noSuchMethodError0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.autoTypeSupport", "fastjson.parser.deny", "false", 0);
      assertNotNull(stackTraceElement0);
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertEquals("fastjson.parser.autoTypeSupport.fastjson.parser.deny(false:0)", stackTraceElement0.toString());
      assertEquals("fastjson.parser.deny", stackTraceElement0.getMethodName());
      assertEquals("false", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("fastjson.parser.autoTypeSupport", stackTraceElement0.getClassName());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = TypeUtils.castToBytes(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")!wBUR|", ")!wBUR|", 2197, (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(")!wBUR|", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(")!wBUR|", sQLNonTransientConnectionException0.getMessage());
      assertEquals(2197, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: )!wBUR|", sQLNonTransientConnectionException0.toString());
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError(")!wBUR|");
      assertNotNull(noSuchMethodError0);
      assertEquals(")!wBUR|", noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError: )!wBUR|", noSuchMethodError0.toString());
      
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = TypeUtils.cast((Object) sQLNonTransientConnectionException0, class1, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals(")!wBUR|", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(")!wBUR|", sQLNonTransientConnectionException0.getMessage());
      assertEquals(2197, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: )!wBUR|", sQLNonTransientConnectionException0.toString());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(2197, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals(")!wBUR|", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: )!wBUR|", sQLNonTransientConnectionException1.toString());
      assertEquals(")!wBUR|", sQLNonTransientConnectionException1.getMessage());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      
      boolean boolean0 = TypeUtils.isNumber("fastjson.parser.deny");
      assertFalse(boolean0);
      
      NoSuchMethodError noSuchMethodError1 = new NoSuchMethodError("kNf./Y");
      assertNotNull(noSuchMethodError1);
      assertFalse(noSuchMethodError1.equals((Object)noSuchMethodError0));
      assertEquals("java.lang.NoSuchMethodError: kNf./Y", noSuchMethodError1.toString());
      assertEquals("kNf./Y", noSuchMethodError1.getMessage());
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.autoTypeSupport", "p?lE59v3Fk`", "L>/tg{I[I\"E", 0);
      assertNotNull(stackTraceElement0);
      assertEquals("fastjson.parser.autoTypeSupport.p?lE59v3Fk`(L>/tg{I[I\"E:0)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertEquals("fastjson.parser.autoTypeSupport", stackTraceElement0.getClassName());
      assertEquals("L>/tg{I[I\"E", stackTraceElement0.getFileName());
      assertEquals("p?lE59v3Fk`", stackTraceElement0.getMethodName());
      
      StackTraceElement stackTraceElement1 = new StackTraceElement("digit", "Lfastjson.parser.autoTypeSupport", "decimalSeparator", 2898);
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("digit.Lfastjson.parser.autoTypeSupport(decimalSeparator:2898)", stackTraceElement1.toString());
      assertEquals("Lfastjson.parser.autoTypeSupport", stackTraceElement1.getMethodName());
      assertEquals(2898, stackTraceElement1.getLineNumber());
      assertEquals("digit", stackTraceElement1.getClassName());
      assertEquals("decimalSeparator", stackTraceElement1.getFileName());
      
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "an^|u9!%!Q{LO DRMM}", "kNf./Y", 33);
      assertNotNull(stackTraceElement2);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertEquals(33, stackTraceElement2.getLineNumber());
      assertEquals("", stackTraceElement2.getClassName());
      assertEquals("kNf./Y", stackTraceElement2.getFileName());
      assertEquals(".an^|u9!%!Q{LO DRMM}(kNf./Y:33)", stackTraceElement2.toString());
      assertEquals("an^|u9!%!Q{LO DRMM}", stackTraceElement2.getMethodName());
      assertFalse(stackTraceElement2.isNativeMethod());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      noSuchMethodError0.setStackTrace(stackTraceElementArray0);
      assertFalse(noSuchMethodError0.equals((Object)noSuchMethodError1));
      assertEquals(")!wBUR|", noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError: )!wBUR|", noSuchMethodError0.toString());
      assertNotSame(noSuchMethodError0, noSuchMethodError1);
      
      LinkedHashMap<SQLTimeoutException, DataTruncation> linkedHashMap0 = new LinkedHashMap<SQLTimeoutException, DataTruncation>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("decimalSeparator");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"decimalSeparator\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      Collection collection0 = TypeUtils.createCollection(class1);
      assertNotNull(collection0);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
      
      Class<?> class2 = TypeUtils.loadClass("fastjson.parser.autoTypeSupport");
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        Collator.getInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap1);
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      
      String string0 = weakHashMap1.remove((Object) linkedHashMap0);
      assertNull(string0);
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotSame(weakHashMap1, weakHashMap0);
      
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class0);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.ASMSerializerFactory$Context");
      assertNotNull(class1);
      assertFalse(class1.equals((Object)class0));
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class com.alibaba.fastjson.serializer.ASMSerializerFactory$Context", class1.toString());
      assertEquals(8, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotSame(class1, class0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      assertNotNull(illegalMonitorStateException0);
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNull(illegalMonitorStateException0.getMessage());
      
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      assertNotNull(decimalFormatSymbols0);
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("Y(9}@>");
      assertNotNull(string0);
      assertEquals("y(9}@>", string0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertNotNull(imageCapabilities0);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      
      ImageCapabilities imageCapabilities1 = (ImageCapabilities)imageCapabilities0.clone();
      assertNotNull(imageCapabilities1);
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities1.isAccelerated());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities1, imageCapabilities0);
      
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      assertNotNull(bufferCapabilities_FlipContents0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(map0);
      assertNotNull(hashtable0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(28, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      Class<Properties> class0 = Properties.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertNotNull(decimalFormatSymbols0);
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) decimalFormatSymbols0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AtomicInteger atomicInteger0 = new AtomicInteger((-837));
      assertNotNull(atomicInteger0);
      assertEquals((short) (-837), atomicInteger0.shortValue());
      assertEquals((-837.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-837L), atomicInteger0.longValue());
      assertEquals((-837), atomicInteger0.get());
      assertEquals("-837", atomicInteger0.toString());
      assertEquals((-837.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte) (-69), atomicInteger0.byteValue());
      assertEquals((-837), atomicInteger0.intValue());
      
      int int0 = Collator.PRIMARY;
      assertEquals(0, int0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("Ti?3 H@gv` K");
      assertNotNull(noSuchFieldError0);
      assertEquals("Ti?3 H@gv` K", noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError: Ti?3 H@gv` K", noSuchFieldError0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning(noSuchFieldError0);
      assertNotNull(sQLWarning0);
      assertEquals("Ti?3 H@gv` K", noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError: Ti?3 H@gv` K", noSuchFieldError0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: java.lang.NoSuchFieldError: Ti?3 H@gv` K", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.lang.NoSuchFieldError: Ti?3 H@gv` K", sQLWarning0.getMessage());
      
      byte[] byteArray0 = TypeUtils.castToBytes("kNf./Y");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-3)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      String string0 = "srl(x";
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      StackTraceElement stackTraceElement0 = new StackTraceElement("srl(x", "yGbso2^(VD", "srl(x", (-385));
      assertNotNull(stackTraceElement0);
      assertEquals((-385), stackTraceElement0.getLineNumber());
      assertEquals("srl(x.yGbso2^(VD(srl(x)", stackTraceElement0.toString());
      assertEquals("yGbso2^(VD", stackTraceElement0.getMethodName());
      assertEquals("srl(x", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("srl(x", stackTraceElement0.getClassName());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ze^$+");
      assertFalse(boolean0);
      
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("ze^$+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 47, (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(47, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Boolean boolean1 = TypeUtils.castToBoolean(boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap1);
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(linkedHashMap1);
      assertNotNull(hashtable0);
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap1);
      assertNotNull(list0);
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(linkedHashMap1, linkedHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("srl(x", "yGbso2^(VD", "srl(x", (-385));
      assertNotNull(stackTraceElement0);
      assertEquals((-385), stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("srl(x", stackTraceElement0.getFileName());
      assertEquals("yGbso2^(VD", stackTraceElement0.getMethodName());
      assertEquals("srl(x.yGbso2^(VD(srl(x)", stackTraceElement0.toString());
      assertEquals("srl(x", stackTraceElement0.getClassName());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<|(1++2a@bz}*,MdOC");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ze^$+");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(map0);
      assertNotNull(hashtable0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(hashtable0.isEmpty());
      assertEquals(28, hashtable0.size());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertNotNull(list0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      MockDate mockDate0 = new MockDate(362, (-385), 1);
      assertNotNull(mockDate0);
      assertEquals("Tue Dec 01 00:00:00 GMT 2229", mockDate0.toString());
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      Constructor<PropertyProcessableDeserializer>[] constructorArray0 = (Constructor<PropertyProcessableDeserializer>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
          assertNotNull(weakHashMap0);
          
          BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
          String string0 = ParserConfig.AUTOTYPE_ACCEPT;
          assertNotNull(string0);
          assertEquals("fastjson.parser.autoTypeAccept", string0);
          
          AtomicInteger atomicInteger0 = new AtomicInteger((-837));
          assertNotNull(atomicInteger0);
          assertEquals((-837.0F), atomicInteger0.floatValue(), 0.01F);
          assertEquals((-837.0), atomicInteger0.doubleValue(), 0.01);
          assertEquals((short) (-837), atomicInteger0.shortValue());
          assertEquals((byte) (-69), atomicInteger0.byteValue());
          assertEquals((-837), atomicInteger0.get());
          assertEquals("-837", atomicInteger0.toString());
          assertEquals((-837), atomicInteger0.intValue());
          assertEquals((-837L), atomicInteger0.longValue());
          
          int int0 = Collator.PRIMARY;
          assertEquals(0, int0);
          
          ParserConfig parserConfig0 = ParserConfig.global;
          assertTrue(parserConfig0.compatibleWithJavaBean);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          assertFalse(parserConfig0.fieldBased);
          assertNotNull(parserConfig0);
          assertFalse(parserConfig0.isAutoTypeSupport());
          assertTrue(parserConfig0.isAsmEnable());
          
          Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
          SQLNonTransientConnectionException sQLNonTransientConnectionException0 = TypeUtils.cast((Object) null, class0, parserConfig0);
          assertTrue(parserConfig0.compatibleWithJavaBean);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          assertFalse(parserConfig0.fieldBased);
          assertNull(sQLNonTransientConnectionException0);
          assertFalse(parserConfig0.isAutoTypeSupport());
          assertTrue(parserConfig0.isAsmEnable());
          
          Type[] typeArray0 = new Type[0];
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
          assertNotNull(parameterizedTypeImpl0);
          
          ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
          assertNotNull(classLoader0);
          
          ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
          assertNotNull(aSMDeserializerFactory0);
          
          ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
          assertNotNull(aSMClassLoader0);
          
          ParserConfig parserConfig1 = new ParserConfig(classLoader0);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          assertTrue(parserConfig1.compatibleWithJavaBean);
          assertFalse(parserConfig1.fieldBased);
          assertNotNull(parserConfig1);
          assertFalse(parserConfig1.equals((Object)parserConfig0));
          assertTrue(parserConfig1.isAsmEnable());
          assertFalse(parserConfig1.isAutoTypeSupport());
          
          Class<PropertyProcessable> class1 = PropertyProcessable.class;
          PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
          assertNotNull(propertyProcessableDeserializer0);
          assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
          
          ParserConfig parserConfig2 = ParserConfig.getGlobalInstance();
          assertTrue(parserConfig2.compatibleWithJavaBean);
          assertFalse(parserConfig2.fieldBased);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          assertNotNull(parserConfig2);
          assertFalse(parserConfig2.equals((Object)parserConfig1));
          assertTrue(parserConfig2.isAsmEnable());
          assertFalse(parserConfig2.isAutoTypeSupport());
          assertNotSame(parserConfig2, parserConfig1);
          assertSame(parserConfig2, parserConfig0);
          
          // Undeclared exception!
          try { 
            TypeUtils.cast((Object) propertyProcessableDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig2);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // create asm serializer error, class class java.lang.Class
             //
             verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
