/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 06:26:08 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Frame;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("']g)DO*/q");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.getClassName();
      int int0 = classReader0.getItem(94);
      classReader1.getInterfaces();
      int int1 = classReader0.getAccess();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'C';
      charArray0[2] = '5';
      classReader0.getInterfaces();
      classReader0.readUnsignedShort(4338);
      classReader0.getAccess();
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-2303));
      classReader0.copyPool(classWriter0);
      classReader0.getInterfaces();
      classReader0.readClass(4338, charArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(classReader1, 8);
      int int0 = (-650);
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(classReader1.b, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46275
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      classReader0.getInterfaces();
      // Undeclared exception!
      try { 
        classReader0.readUTF8(4, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      classReader0.getClassName();
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 0);
      classWriter0.invalidFrames = false;
      classReader0.accept((ClassVisitor) classWriter0, 4338);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter((-1639));
      classWriter0.newClass("wheel.asm.Label");
      classReader0.accept((ClassVisitor) classWriter0, 1903);
      assertEquals(1, ClassReader.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) null);
      // Undeclared exception!
      try { 
        classReader0.accept((ClassVisitor) classAdapter0, (-2594));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        classReader0.readConst(5, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1903);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2);
      assertEquals(1903, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.getClassName();
      classReader0.getItem(94);
      ClassWriter classWriter0 = new ClassWriter(6);
      ClassWriter classWriter1 = new ClassWriter(classReader1, 31);
      Attribute attribute0 = new Attribute("wheel/asm/Label");
      classWriter1.visitAttribute(attribute0);
      classReader1.copyPool(classWriter1);
      classReader0.readShort(2);
      classReader0.getInterfaces();
      // Undeclared exception!
      try { 
        classReader0.readByte((-624));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -624
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      ClassReader classReader1 = new ClassReader("wheel.asm.Label");
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(classReader0.b, 1, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7214
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      classReader0.getClassName();
      Locale.getISOLanguages();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1486);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter0, (-1806));
      int int0 = 185;
      classReader1.readLong(int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      classReader0.getClassName();
      Locale.getISOLanguages();
      ClassWriter classWriter0 = new ClassWriter(247);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter((-2458));
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 1478);
      assertEquals(1, ClassReader.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      classReader0.getClassName();
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4338);
      classReader0.accept((ClassVisitor) classWriter0, (-2017));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      classReader0.getClassName();
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 0);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 54, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64077
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = '!';
      charArray0[2] = 'e';
      charArray0[3] = 'H';
      charArray0[4] = ']';
      classReader0.getSuperName();
      charArray0[5] = '^';
      charArray0[6] = '4';
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(4);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 0);
      classReader0.readInt(126);
      ClassReader classReader1 = new ClassReader(classReader0.b, 54, 8);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(4);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        classReader0.readUTF8(247, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(33, classReader1.getAccess());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = '!';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(245, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(16777218);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, (-358));
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      classReader0.getClassName();
      Locale.getISOLanguages();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassReader classReader2 = new ClassReader(classReader1.b);
      ClassWriter classWriter0 = new ClassWriter(162);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classAdapter0.visitOuterClass("LocalVariableTable", "wheel/asm/MethodWriter", "; \"mil}MUca`)js");
      classReader1.accept((ClassVisitor) classAdapter0, 10);
      Attribute[] attributeArray0 = new Attribute[5];
      String string0 = null;
      Attribute attribute0 = new Attribute(string0);
      attributeArray0[0] = attribute0;
      Attribute attribute1 = attribute0.next;
      attributeArray0[1] = attribute1;
      Attribute attribute2 = attributeArray0[1].next;
      attributeArray0[2] = attribute2;
      Attribute attribute3 = new Attribute(attribute1.type);
      attributeArray0[3] = attribute3;
      String string1 = null;
      Attribute attribute4 = new Attribute(string1);
      attributeArray0[4] = attribute4;
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, classReader2.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visitInnerClass("startFrame", "wheel.asm.Label", "startFrame", 255);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassWriter classWriter1 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter1, (Attribute[]) null, 1884);
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = 'j';
      charArray0[2] = 'R';
      charArray0[3] = '~';
      charArray0[4] = 'L';
      charArray0[5] = '9';
      charArray0[6] = 'x';
      charArray0[7] = '3';
      charArray0[8] = 'R';
      // Undeclared exception!
      try { 
        classReader0.readClass(1884, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      ClassWriter classWriter0 = new ClassWriter(8);
      classReader0.accept((ClassVisitor) classWriter0, 187);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1220);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      Attribute attribute0 = new Attribute("java/lang/Throwable");
      Attribute attribute1 = attribute0.next;
      Attribute attribute2 = attribute0.next;
      Attribute attribute3 = new Attribute("java/lang/Throwable");
      Attribute attribute4 = new Attribute("U");
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 4);
      assertEquals(4, ClassReader.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, (-1928));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      ClassWriter classWriter0 = new ClassWriter(2);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      Attribute[] attributeArray0 = new Attribute[0];
      classReader0.accept((ClassVisitor) classAdapter0, attributeArray0, 2);
      classReader0.readUTF8(4, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 128);
      classReader0.accept((ClassVisitor) classWriter0, 312);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      int int0 = 81;
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'i';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = 'S';
      charArray0[5] = '7';
      // Undeclared exception!
      try { 
        classReader0.readConst(338, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(6892);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 723);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      ClassWriter classWriter0 = new ClassWriter(8);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, (-1928));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(6892);
      classReader0.accept((ClassVisitor) classWriter0, 2394);
  }
}
