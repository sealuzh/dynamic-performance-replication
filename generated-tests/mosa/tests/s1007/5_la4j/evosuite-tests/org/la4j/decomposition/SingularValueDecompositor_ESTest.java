/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:05:02 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.DenseMatrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(4, 4);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(4, 1016);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(4);
      assertNotNull(denseMatrix0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(35, 35);
      assertNotNull(denseMatrix0);
      assertEquals(35, denseMatrix0.columns());
      assertEquals(35, denseMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(35, denseMatrix0.columns());
      assertEquals(35, denseMatrix0.rows());
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(25, 25);
      assertNotNull(denseMatrix0);
      assertEquals(25, denseMatrix0.rows());
      assertEquals(25, denseMatrix0.columns());
      
      double[][] doubleArray0 = denseMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(25, denseMatrix0.rows());
      assertEquals(25, denseMatrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(25, denseMatrix0.rows());
      assertEquals(25, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(25, denseMatrix0.rows());
      assertEquals(25, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(9, 4);
      assertNotNull(denseMatrix0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(40, 40);
      assertNotNull(denseMatrix0);
      assertEquals(40, denseMatrix0.rows());
      assertEquals(40, denseMatrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(40, denseMatrix0.rows());
      assertEquals(40, denseMatrix0.columns());
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(17, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      
      double[][] doubleArray0 = denseMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(21, 21);
      assertNotNull(denseMatrix0);
      assertEquals(21, denseMatrix0.rows());
      assertEquals(21, denseMatrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(21, denseMatrix0.rows());
      assertEquals(21, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(21, denseMatrix0.rows());
      assertEquals(21, denseMatrix0.columns());
  }
}
