/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:59:20 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.model.HttpRequestBody;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.RegexSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.getThreadAlive();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "threadNum should be more than one!";
      stringArray0[1] = "threadNum should be more than one!";
      stringArray0[2] = "threadNum should be more than one!";
      stringArray0[3] = "javascript:";
      stringArray0[4] = "threadNum should be more than one!";
      Spider spider2 = spider0.setUUID("threadNum should be more than one!");
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider2.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      String string0 = "y";
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("write file error");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("write file error");
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "write file error";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pIb@b+");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("pIb@b+", "pIb@b+");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-795));
      Spider spider2 = spider1.setDownloader(phantomJSDownloader1);
      Spider spider3 = spider2.setExitWhenComplete(true);
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis(965L);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lv6ocNdv8&6d|((");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSite();
      Spider spider1 = spider0.setDownloader((Downloader) null);
      int int0 = spider1.getThreadAlive();
      assertEquals(0L, spider1.getPageCount());
      assertEquals(0, int0);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kE{X{xm");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("BNMSh~");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 5);
      spider1.getSite();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("}3v/z^&tn:-p[");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      spider2.runAsync();
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("fc$$q");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("fc$$q");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setPipelines(linkedList0);
      spider0.stop();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("fc$$q");
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      // Undeclared exception!
      try { 
        spider0.get("fc$$q");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~D08BtlYvv2l:r\"@");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("~D08BtlYvv2l:r\"@");
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      spider2.clearPipeline();
      spider0.getThreadAlive();
      Spider.Status.fromValue(0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      spider2.pipeline(collectorPipeline0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("~D08BtlYvv2l:r\"@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("fc$$q");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("fc$$q");
      Spider spider0 = Spider.create(simplePageProcessor1);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.clearPipeline();
      Request request0 = new Request();
      request0.addHeader("fc$$q", "~");
      request0.setMethod("~");
      Request request1 = new Request(", charset='");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MH%0)$^4j=Ah.r");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request2 = new Request();
      Request request3 = new Request();
      Page page0 = new Page();
      spider0.extractAndAddRequests(page0, false);
      // Undeclared exception!
      try { 
        spider0.get("fc$$q");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pe%((~`&?a");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      int int0 = 0;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(0, 0, 0, timeUnit0, linkedBlockingDeque0, threadPoolExecutor_AbortPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "Z~dYZb";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Z~dYZb");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityBlockingQueue<SpiderMonitor.MonitorSpiderListener> priorityBlockingQueue0 = new PriorityBlockingQueue<SpiderMonitor.MonitorSpiderListener>();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>(priorityBlockingQueue0);
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider1.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "write file error";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("write file error");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("write file error");
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[1];
      spider1.start();
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("write file error", (-3435));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "}";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      spider0.start();
      spider0.setExitWhenComplete(false);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      int int0 = spider1.getThreadAlive();
      Spider.Status.fromValue(int0);
      String string1 = "";
      // Undeclared exception!
      try { 
        Spider.Status.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.clearPipeline();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider2 = spider1.startUrls(linkedList0);
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider2.setSpawnUrl(false);
      Spider spider4 = spider3.addPipeline(jsonFilePipeline0);
      spider4.getSite();
      assertFalse(spider1.isSpawnUrl());
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.thread(30000);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(1000);
      Spider spider1 = spider0.downloader(phantomJSDownloader1);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider1.setPipelines(linkedList0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      // Undeclared exception!
      try { 
        spider1.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "peCZv7T";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("peCZv7T");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.spawnUrl = true;
      spider1.runAsync();
      spider0.stop();
      spider0.startRequest((List<Request>) null);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("fc$$q");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(1440);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("P+TpT}-4Yy,hB", "P+TpT}-4Yy,hB");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(1440);
      Spider spider2 = spider1.downloader(phantomJSDownloader1);
      assertTrue(spider2.isExitWhenComplete());
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      spider1.getCollectorPipeline();
      Spider spider3 = spider1.setUUID("fc$$q");
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      spider3.runAsync();
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider is already running!", "Spider is already running!");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider3 = spider2.scheduler(fileCacheQueueScheduler0);
      Spider spider4 = spider3.clearPipeline();
      Spider spider5 = spider4.thread(3);
      spider5.isSpawnUrl();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider6 = spider5.startUrls(linkedList0);
      assertTrue(spider6.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XPath error!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setEmptySleepTime(894);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XPath error!";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("wr6te file erOXr");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.thread(2058);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("wr6te file erOXr", "wr6te file erOXr");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(2058);
      Spider spider1 = spider0.downloader(phantomJSDownloader1);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      phantomJSDownloader1.setThread((-671));
      List<Request> list0 = spider1.getAll((Collection<String>) linkedTransferQueue0);
      spider1.getCollectorPipeline();
      phantomJSDownloader1.setThread(2058);
      Spider spider2 = spider0.startRequest(list0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2058, 2058, 0L, timeUnit0, linkedBlockingDeque0, threadPoolExecutor_DiscardOldestPolicy0);
      spider0.setExecutorService(threadPoolExecutor0);
      spider2.getPageCount();
      spider1.sleep(790);
      // Undeclared exception!
      try { 
        spider0.get("wr6te file erOXr");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("write file error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(2058);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("write file error", "write file error");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(1000);
      Spider spider2 = spider0.downloader(phantomJSDownloader1);
      assertTrue(spider2.isExitWhenComplete());
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider2.getAll((Collection<String>) linkedTransferQueue0);
      spider1.getCollectorPipeline();
      List<Request> list0 = spider1.getAll((Collection<String>) linkedTransferQueue0);
      Spider spider3 = spider0.startRequest(list0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1000, 2058, 0L, timeUnit0, linkedBlockingDeque0, threadPoolExecutor_DiscardOldestPolicy0);
      spider0.setExecutorService(threadPoolExecutor0);
      long long0 = spider3.getPageCount();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("write file error");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("write file error");
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "write file error";
      Pipeline pipeline0 = null;
      spider1.addPipeline((Pipeline) null);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.addPipeline(consolePipeline0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider3 = spider2.startRequest(list0);
      Spider spider4 = spider3.clearPipeline();
      Spider spider5 = spider4.thread(806);
      spider5.getStartTime();
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("us.codecraft.webmagic.Spider");
      Request[] requestArray0 = new Request[6];
      Request request0 = new Request();
      Request request1 = request0.setPriority(2277L);
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 1940);
      Request request2 = request1.putExtra("us.codecraft.webmagic.Spider", spider1);
      Request request3 = request2.setBinaryContent(false);
      request1.setMethod("us.codecraft.webmagic.Spider");
      request3.setBinaryContent(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request4 = new Request();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      request3.setPriority(5);
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I(whIpg");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      spider2.scheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~D08BtlYvv2l:r\"@");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("~D08BtlYvv2l:r\"@");
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      Spider spider3 = spider2.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider4 = spider3.addUrl(stringArray0);
      spider4.scheduler(fileCacheQueueScheduler0);
      Request request0 = new Request();
      request0.addHeader("~D08BtlYvv2l:r\"@", "~D08BtlYvv2l:r\"@");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        spider3.thread((ExecutorService) forkJoinPool0, (-4147));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Spider.Status.fromValue(2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      spider1.threadNum = 6325;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider.Status.fromValue((-1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = false;
      Spider spider1 = spider0.setSpawnUrl(false);
      spider1.getCollectorPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider1.setScheduler(duplicateRemovedScheduler0);
      Spider spider3 = spider2.setUUID("");
      spider3.getUUID();
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        hashSetDuplicateRemover0.isDuplicate(request0, spider3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("fc$$q");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("fc$$q", "fc$$q");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1440);
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 1440);
      Request request0 = new Request();
      request0.setBinaryContent(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[0] = (byte)6;
      HttpRequestBody.custom(byteArray0, "fc$$q", "l'8b6W 8R0MRAJB^M");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider1);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      spider0.isSpawnUrl();
      Page page0 = new Page();
      page0.setSkip(true);
      Page page1 = page0.setRawText("_cycle_tried_times");
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("write file error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 34);
      Request request1 = new Request();
      Request request2 = request0.setBinaryContent(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      HttpRequestBody.custom(byteArray0, "", "`jTnOvmS0m+cg");
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      request2.setRequestBody(httpRequestBody0);
      Request request3 = request2.setMethod("S48Y +.`;");
      Request request4 = request3.addHeader("", "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S48Y +.`;");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request request5 = new Request();
      FileSystemHandling.shouldAllThrowIOExceptions();
      request4.setUrl((String) null);
      spider0.getScheduler();
      spider0.setUUID("_cycle_tried_times");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[6];
      Request request0 = new Request();
      request0.setPriority((-226L));
      PipedReader pipedReader0 = new PipedReader();
      Request request1 = new Request("us.codecraft.webmagic.Spider");
      requestArray0[3] = request1;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      requestArray0[4] = null;
      request1.setPriority(2488L);
      priorityScheduler0.getLeftRequestsCount(spider0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      spider0.isExitWhenComplete();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~D08BtlYvv2l:r\"@");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("~D08BtlYvv2l:r\"@");
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      Spider spider3 = spider2.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider4 = spider3.addUrl(stringArray0);
      spider4.scheduler(fileCacheQueueScheduler0);
      Request request0 = new Request();
      Request request1 = request0.addHeader("~D08BtlYvv2l:r\"@", "~D08BtlYvv2l:r\"@");
      request1.setCharset("~D08BtlYvv2l:r\"@");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Request[] requestArray0 = new Request[5];
      requestArray0[0] = request1;
      requestArray0[1] = request1;
      request1.getExtras();
      Request request2 = request1.setExtras((Map<String, Object>) null);
      requestArray0[2] = request2;
      requestArray0[3] = request1;
      requestArray0[4] = request1;
      spider0.addRequest(requestArray0);
      Request request3 = new Request("V@fj{)Z+FO>N$v|+Y");
      request3.setUrl("/5)IU&5w>$eSbAu%N");
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      request0.setPriority((-226L));
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 34);
      HttpRequestBody httpRequestBody0 = HttpRequestBody.custom((byte[]) null, (String) null, "_cycle_tried_times");
      request0.setRequestBody(httpRequestBody0);
      Request request1 = request0.setMethod("");
      Request request2 = request1.addHeader((String) null, "us.codecraft.webmagic.selector.Html");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request request3 = new Request();
      FileSystemHandling.shouldAllThrowIOExceptions();
      request2.setUrl("V@fj{)Z+FO>N$v|+Y");
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      spider1.getStatus();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(30000);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "SUY$gg9w'A");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(1000);
      spider0.downloader(phantomJSDownloader1);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      phantomJSDownloader0.setThread(2);
      List<Request> list0 = spider1.getAll((Collection<String>) linkedTransferQueue0);
      spider0.getCollectorPipeline();
      List<Request> list1 = new LinkedList<Request>();
      phantomJSDownloader1.setThread((-671));
      Spider spider2 = spider1.startRequest(list0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SUY$gg9w'A";
      stringArray0[1] = "SUY$gg9w'A";
      stringArray0[2] = "SUY$gg9w'A";
      stringArray0[1] = "";
      stringArray0[4] = "SUY$gg9w'A";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("fc$$q");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("fc$$q");
      Spider spider0 = Spider.create(simplePageProcessor1);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("fc$$q");
      Spider spider2 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider3 = spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider4 = spider3.addUrl(stringArray0);
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      Request request0 = new Request();
      request0.setRequestBody(httpRequestBody0);
      request0.setMethod("{=Yema9`p6O}}e@-TPn");
      request0.addHeader((String) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request request1 = new Request();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("c", "");
      Spider spider5 = spider4.addUrl(stringArray0);
      Spider spider6 = spider5.setDownloader(phantomJSDownloader0);
      Spider spider7 = spider1.setSpawnUrl(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      spider7.run();
      spider0.stop();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<String> list0 = spider6.getAll((Collection<String>) linkedTransferQueue0);
      spider5.getAll((Collection<String>) linkedTransferQueue0);
      spider2.startUrls(list0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(30000);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "SUY$gg9w'A");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(1000);
      Spider spider2 = spider0.downloader(phantomJSDownloader1);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      phantomJSDownloader0.setThread(2);
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      List<Request> list0 = spider3.getAll((Collection<String>) linkedTransferQueue0);
      Spider spider4 = spider3.startRequest(list0);
      spider1.getThreadAlive();
      Spider.Status.fromValue(1231);
      spider4.setSpawnUrl(false);
      Request request0 = new Request();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      SimplePageProcessor simplePageProcessor1 = null;
      try {
        simplePageProcessor1 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("write file error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 34);
      request0.setCharset("write file error");
      Request request1 = request0.setUrl("write file error");
      Request request2 = request1.setMethod("bc]\"x&S];P@Bi k[*");
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.push(request1, spider0);
      Spider spider2 = spider0.scheduler(queueScheduler0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      spider2.pipeline(collectorPipeline0);
      QueueScheduler queueScheduler1 = new QueueScheduler();
      Request request3 = new Request();
      request2.setPriority(0L);
      spider0.clearPipeline();
      QueueScheduler queueScheduler2 = new QueueScheduler();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("n/m7-^zb U]+KqqS?0C");
      Spider spider3 = spider0.scheduler(fileCacheQueueScheduler0);
      spider3.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider1.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
