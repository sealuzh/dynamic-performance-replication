/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 03:02:32 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.EOFException;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.PMGClass;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte)78;
      byte[] byteArray1 = Utility.decode("return", false);
      Utility.compactClassName("float");
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)94;
      byteArray2[1] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray2[2] = (byte) (-37);
      byteArray2[3] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.toHexString(byteArray1);
      Utility.fillup("dup2_x2", (-2892), true, '`');
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "return";
      byte[] byteArray0 = Utility.decode("b,y4eX", false);
      Utility.compactClassName("char");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte) (-88);
      byteArray1[2] = (byte) (-37);
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.toHexString(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2945, (int) (byte) (-37));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[3] = (byte)39;
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)47;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)47;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[8] = (byte)67;
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 10, (int) (byte)39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8@+vAeF1Q}";
      stringArray0[1] = "8@+vAeF1Q}";
      stringArray0[2] = "8@+vAeF1Q}";
      stringArray0[3] = "cr-m";
      stringArray0[4] = "cr-m";
      Utility.methodTypeToSignature("8@+vAeF1Q}", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ifnonnull");
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)80;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte) (-88);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1509, (int) (byte)51, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte byte0 = (byte) (-8);
      byte byte1 = (byte)122;
      byte byte2 = (byte)66;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-100);
      byte byte0 = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-434), 39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ishr
         // 1:    ifge\t\t#20859
         // 4:    ishr
         // 5:    ishr
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = Utility.signatureToString("Illegal type for StackMapType: ", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "aload_1";
      stringArray0[1] = "aload_1";
      stringArray0[2] = "int";
      stringArray0[3] = "Illegal type for StackMapType: ";
      stringArray0[4] = "Illegal type for StackMapType: ";
      stringArray0[5] = "Illegal type for StackMapType: ";
      stringArray0[6] = "byte";
      stringArray0[7] = "int";
      Utility.methodTypeToSignature("aload_1", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte) (-101);
      byteArray0[3] = (byte)59;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=z?l?^G~4Uk5e9)9-");
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool1, false);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte) (-88);
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=z?l?^G~4Uk5e9)9-");
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      Utility.codeToString(byteSequence1, constantPool1, false);
      byteSequence1.read(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("jsr\t\t#0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr\t\t#0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-30);
      byte byte0 = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-75);
      byte byte1 = (byte)3;
      byteArray0[1] = (byte)3;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), 16384);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    iconst_0
         // 2:    fstore\t\t%226
         // 4:    iconst_0
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("cr-m", stringArray0);
      assertEquals("()Lcr-m;", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.methodSignatureToString("()Lcr-m;", "char", "The magic number must contain at least one byte");
      assertEquals("The magic number must contain at least one byte cr-m char()", string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "eCEc{L$W_";
      stringArray0[1] = "eCEc{L$W_";
      stringArray0[2] = "eCEc{L$W_";
      stringArray0[3] = "eCEc{L$W_";
      stringArray0[4] = "eCEc{L$W_";
      Utility.methodTypeToSignature("eCEc{L$W_", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1899, (-925));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(67, (byte) (-72));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 43704. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("cr-m", stringArray0);
      assertEquals("()Lcr-m;", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aload");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("90", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.compactClassName(" ");
      assertEquals(" ", string2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte) (-86);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = Utility.decode("og.apahe.bcel.classile.Utility$1", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("og$$apahe$$bcel$$classile$$Utility", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ddiv", string1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.setBit((-1168), (-1168));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)66;
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$ef$8d$5c$ff$f8z$dfB", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.mark((byte)98);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ixor", "cr-m", "cr-m", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ixor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-58);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.close();
      Utility.fillup("ifnull\t\t#0", (byte) (-84), true, '{');
      ConstantPool constantPool1 = new ConstantPool(byteSequence0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("bEI UHM6OW", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 49205548
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)68;
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte)113;
      byteArray1[1] = (byte)113;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.available();
      byteSequence1.readUnsignedShort();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byte byte0 = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = true;
      Utility.compactClassName("aload_0", "if_icmpeq\t\t#31572", true);
      try { 
        Utility.typeOfMethodSignature("aload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("lod_2", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("lod_2");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.compactClassName("lod_2");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence1, constantPool1, false);
      // Undeclared exception!
      try { 
        constantPool1.getConstant(1768, (byte)45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u/!", stringArray0);
      Utility.methodSignatureArgumentTypes("()Lu/!;", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      Utility.accessToString((int) (byte)109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 195, 1349);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("if_icmpge\t\t#-24009");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmpge\t\t#-24009'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5aQc6icekn.d,P0:Y";
      stringArray0[1] = "5aQc6icekn.d,P0:Y";
      stringArray0[2] = "5aQc6icekn.d,P0:Y";
      stringArray0[3] = "cr-m";
      stringArray0[4] = "5aQc6icekn.d,P0:Y";
      String string0 = Utility.methodTypeToSignature("5aQc6icekn.d,P0:Y", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte) (-88);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      int int0 = Utility.setBit(1765, (byte) (-85));
      assertEquals(3813, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-110);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-73);
      byteArray1[2] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.getSignature("(VjUcZ{hmlpNmcARf( q");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.compactClassName("a", "long", true);
      String string0 = Utility.compactClassName("a", true);
      assertEquals("a", string0);
      
      String string1 = Utility.fillup("", (-1809), false, '!');
      assertEquals("", string1);
      
      String string2 = Utility.getSignature("org.apache.bcel.classfile.JavaClass");
      assertEquals("Lorg/apache/bcel/classfile/JavaClass;", string2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = Utility.classOrInterface(40);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Constant[] constantArray0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      try { 
        Utility.typeOfSignature("+Nt5:M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nt5:M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.compactClassName("TSRz\"el716)Jg", "\"}t", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 41888. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(3, false);
      try { 
        Utility.typeOfSignature("2=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-17);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, constantPool0, true);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("ifge\t\t#16292", "ifge\t\t#16292");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"ifge\t\t#16292\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 40
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Constant[] constantArray0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("12 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 12 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.replace("Invalid method signature: ", "Invalid method signature: ", "Invalid method signature: ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.classOrInterface((byte) (-92));
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Constant[] constantArray0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("=ts@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =ts@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.setBit((-1168), (-1168));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, (-2159), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.methodSignatureReturnType("i2l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.signatureToString("Z`Zi!'_Rp", true);
      String string0 = Utility.accessToString(1471, true);
      assertEquals("public private protected static final transient native abstract", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Constant[] constantArray0 = null;
      String string0 = "org.apache.bcel.classfile.Utility$1";
      boolean boolean0 = false;
      Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      int int0 = (-1228);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("org.apache.bcel.classfile.Utility$1", "c@H6*4W?IMr%K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"c@H6*4W?IMr%K\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-89);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("}m,", "#uP)TXXi>", false);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 18. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType(")\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-121);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.methodSignatureReturnType("VizoeTH9-5*9");
      assertEquals("void", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("87", string1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      constantPool0.copy();
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      constantPool0.copy();
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)55;
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)101;
      byte byte1 = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)22;
      byte byte2 = (byte)0;
      byteArray0[4] = (byte)0;
      byte byte3 = (byte)112;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.typeOfSignature("bytes must not be null!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)103, (int) (byte)103, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)26;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.isJavaIdentifierPart('a');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("dstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)26;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 22616. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.clearBit((-1), (-1));
      Utility.printArray((Object[]) constantArray0, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, (int) (byte) (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.compactClassName("breakpoint", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.printArray((Object[]) constantArray0);
      try { 
        Utility.methodSignatureReturnType("areturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `areturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload\t\t%245", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("anewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anewarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.getSignature("%PsY\"omC0Nl");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("%PsY\"omC0Nl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%PsY\"omC0Nl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-85);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("!FiL72,_%n .F}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!FiL72,_%n .F}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte) (-86);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "!FiL72,_%n .F}";
      try { 
        Utility.methodSignatureReturnType("!FiL72,_%n .F}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!FiL72,_%n .F}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49344. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.");
      Utility.compactClassName("u:Cpk'+0:g*x", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte)8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(51, (byte) (-86), false, '~');
      String string0 = Utility.compactClassName("hj`qQ`qH);{");
      String string1 = Utility.signatureToString("ZQWoso<6v=,@ATQH", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.decode("O$jF/XM`", false);
      Utility.compactClassName("i.+BVs\"rU:e", "i.+BVs\"rU:e", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-86);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      Utility.codeToString(byteSequence0, constantPool0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("aload_0", "aload_0");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // aload_0
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "%dPs`\"omC0&Nl";
      Utility.replace("%dPs`\"omC0&Nl", "%dPs`\"omC0&Nl", "%dPs`\"omC0&Nl");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifnull\t\t#-4864", string0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("NZ#!WHR(}qI@zs]");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray1 = Utility.decode("T(5Z]}lV+yxo-DRuSn$", false);
      assertEquals(18, byteArray1.length);
      
      String string1 = Utility.compactClassName("NZ#!WHR(}qI@zs]");
      assertEquals("NZ#!WHR(}qI@zs]", string1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.accessToString((-1737), false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)32;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, (int) (byte)32, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("%dPs`\"omC0&Nl", true);
      // Undeclared exception!
      try { 
        Utility.decode("$6\"K1T{", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "eCEc{L$W_";
      stringArray0[1] = "eCEc{L$W_";
      stringArray0[2] = "eCEc{L$W_";
      stringArray0[3] = "eCEc{L$W_";
      stringArray0[4] = "eCEc{L$W_";
      String string0 = Utility.methodTypeToSignature("eCEc{L$W_", stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte byte0 = (byte) (-86);
      byte[] byteArray0 = new byte[18];
      constantPool0.copy();
      byteArray0[0] = (byte) (-86);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(VjU.{hmlpNmcAR ( q", (String) null, "class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `jU.{hmlpNmcAR ( q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-88);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-108);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 102, (int) (byte)101, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[10];
      constantPool0.copy();
      byteArray0[0] = (byte) (-115);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-115));
      Utility.codeToString(byteSequence0, constantPool0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("f2d");
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.UK;
      boolean boolean0 = false;
      String string0 = null;
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, false, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Constant[] constantArray1 = new Constant[0];
      constantPool0.setConstantPool(constantArray1);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)40;
      byteArray0[8] = (byte) (-50);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("10 b4 2e dc 3a 91 28 00 ce", string0);
      
      String string1 = Utility.accessToString(54);
      assertEquals("private protected final synchronized", string1);
      
      String string2 = Utility.methodSignatureReturnType("L;\"7JidR9[~d,2");
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("qV0w2iw(a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: qV0w2iw(a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\\", "\\", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.isSet(108, 108);
      Utility.setBit(118, 58);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)66;
      byteArray0[0] = (byte) (-62);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.close();
      Utility.fillup("Wj`So]oK}qi)G", (byte) (-96), true, 'm');
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.signatureToString("ZOjo");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = "double";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "< ;'%8q |&B:_MrM{";
      Utility.getSignature("< ;'%8q |&B:_MrM{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-9);
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-128);
      byte byte1 = (byte)66;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-30);
      byte byte2 = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), 16384);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    ior
         // 2:    lstore_3
         // 3:    <illegal opcode>
         // 4:    iconst_0
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ">";
      String string1 = ")";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z;S[.zB[F");
      // Undeclared exception!
      try { 
        Utility.getSignature("Z;S[.zB[F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[.zB[F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("<{:t#T4F,PFp6.w'", "<{:t#T4F,PFp6.w'", true);
      Utility.typeOfSignature("!V~1K");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(71, 2395);
      Utility.getSignature("");
      Utility.searchOpcode("monitorexit");
      Utility.methodSignatureReturnType("L;", false);
      try { 
        Utility.methodSignatureReturnType("*_<}8e`GK", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*_<}8e`GK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.clearBit(2213, (-569));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", length = ");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")");
      Utility.getSignature("< ;'%8q |&B:_MrM{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-57);
      byteArray0[0] = (byte) (-57);
      byte byte1 = (byte)100;
      byteArray0[1] = (byte)100;
      byte byte2 = (byte) (-47);
      byteArray0[2] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ldc_w", "ldc_w", "iconst_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ldc_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.getSignature("dload_3");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ldload_3;");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-8), 162);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(32, (-8));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.replace("g?|", "g?|", "g?|");
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)76;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.close();
      Utility.fillup("org.apache.bcel.classfile.DescendingVisitor", (byte) (-84), false, 'z');
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H");
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte)102;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, (int) (byte)102, (int) (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Utility.decode("return", false);
      Utility.compactClassName("float");
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)84;
      byteArray2[1] = (byte)84;
      byteArray2[2] = (byte) (-37);
      byteArray2[3] = (byte) (-124);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 74, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode(" &kc=\"r", false);
      String string0 = Utility.compactClassName("float");
      assertEquals("float", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool2, (-2860), (-329));
      assertEquals("0:    lload_2\n1:    dload_0\n2:    dmul\n3:    dadd\n4:    istore_2\n5:    fload_0\n6:    frem\n", string1);
      
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool2);
      String string2 = Utility.codeToString(byteSequence0, constantPool2);
      assertEquals("dadd", string2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 156, (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Utility.decode("jVi", false);
      Utility.compactClassName("float");
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray1, constantPool0, (-329), (-2860));
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("51 51 af 51 51", string0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      constantPool0.copy();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.accessToString((int) (byte)81);
      String string2 = Utility.compactClassName("public final volatile", "dconst_0", true);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Utility.decode("jVi", false);
      Utility.compactClassName("float");
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-329), (-2860));
      assertEquals("0:    fmul\n1:    sastore\n2:    lmul\n", string0);
      
      String string1 = Utility.compactClassName("putstatic", true);
      assertEquals("putstatic", string1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)36;
      byteArray1[2] = (byte)36;
      byteArray1[3] = (byte)36;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 5882, (int) (byte)36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(202, (byte)98);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool2, false);
      try { 
        Utility.typeOfSignature("istore\t\t%110");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore\t\t%110
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      Utility.compactClassName("invokspecial");
      Utility.compactClassName("invokespec");
      byte[] byteArray0 = Utility.decode("eTSh5K}0", false);
      Utility.compactClassName("monitorenter");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1277), 184);
      assertArrayEquals(new byte[] {(byte)101, (byte)84, (byte)83, (byte)104, (byte)53, (byte)75, (byte)125, (byte)48}, byteArray0);
      assertEquals("0:    lsub\n1:    bastore\n2:    aastore\n3:    imul\n4:    saload\n5:    astore_0\n6:    lushr\n7:    faload\n", string0);
      
      String string1 = Utility.compactClassName("invokspecial", false);
      assertEquals("invokspecial", string1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("a-rF-uN,e'>2Dxmw\"", "a-rF-uN,e'>2Dxmw\"", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, 392, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)35;
      byteArray0[0] = (byte)35;
      byte byte1 = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-18), (-6445), true);
      Utility.convertString("org.apache.bcel.classfile.ExceptionTable");
      Utility.fillup("org.apache.bcel.classfile.ExceptionTable", (byte)35, true, '*');
      try { 
        Utility.methodSignatureArgumentTypes("(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(202, (byte)98);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(202, (-789));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      Locale locale0 = Locale.CANADA;
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)110, 12, byteSequence1, constantPool2);
      assertEquals(110, localVariableTable0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Ty4es", "Ty4es", true);
      Object object1 = new Object();
      Utility.typeOfSignature("Ty4es");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(32, 57);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.searchOpcode("invokedynamic");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)14;
      Utility.codeToString(byteArray1, (ConstantPool) null, (-2727), 24);
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokedynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokedynamic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("51 51 ad 51 51", string0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, constantPool0);
      String string1 = Utility.compactClassName("RVG`+Yqq+1U9)", "fastore", false);
      assertEquals("RVG`+Yqq+1U9)", string1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)47;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantPool0.copy();
      ConstantUtf8.getInstance("2f 00");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) null, true, true);
      Utility.printArray((Object[]) constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantPool constantPool3 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool3, 96, (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = new Integer((-1483));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("freturn");
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "dload_3";
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(202, (byte)98);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(202, (-789));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 65, (int) (byte)110, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "Moas%yDAPwx";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Moas%yDAPwx", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Moas%yDAPwx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "u/!";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u/!", stringArray0);
      boolean boolean0 = false;
      Utility.methodSignatureArgumentTypes("()Lu/!;", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      byte byte0 = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[3] = (byte)105;
      byte byte1 = (byte) (-90);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)105, (byte)102);
      int int0 = 794;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)109, (int) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Utility.getSignature("dload_3");
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(39, 162);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(32, 39);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 32, 255, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)67;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte) (-98);
      byteArray1[5] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.compactClassName("g");
      assertEquals("g", string0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.replace("ifle\t\t#17156", "ifle\t\t#10307", "dload_2");
      assertEquals("ifle\t\t#17156", string2);
      
      String string3 = Utility.toHexString(byteArray1);
      assertEquals("9e 28 43 28 9e 43 00", string3);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte) (-101);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)45;
      byteArray0[7] = (byte)97;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(90, 1358);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 794);
      assertEquals("0:    iflt\t\t#0\n3:    impdep2\n4:    istore_2\n5:    aload_3\n6:    nop\n7:    ladd\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-1), (int) (byte) (-1));
      String string1 = Utility.compactClassName("JlRTq#pprT~%^0n' >L", true);
      assertEquals("JlRTq#pprT~%^0n' >L", string1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readBoolean();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)84, (int) (byte)84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("iload_2", false);
      Utility.compactClassName("iload_2");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 87, 87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte) (-101);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)40;
      byteArray0[7] = (byte)97;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(90, 1358);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 794);
      assertEquals("0:    iflt\t\t#0\n3:    impdep2\n4:    istore_2\n5:    dload_2\n6:    nop\n7:    ladd\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-1), (int) (byte) (-1));
      String string1 = Utility.compactClassName("JlRTq#pprT~%^0n' >L", true);
      assertEquals("JlRTq#pprT~%^0n' >L", string1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[4] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-110);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(32, (byte) (-86));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-110), (byte) (-110));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)98;
      Utility.codeToString(byteArray1, constantPool0, (-3271), (int) (byte) (-110), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.compactClassName("_ybs(GEGt]FfTYQFR");
      String string0 = "invokespec";
      Utility.compactClassName("J@h2");
      byte byte0 = (byte) (-91);
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-34), (int) (byte) (-91));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readChar();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      Utility.compactClassName("dup_x2", "dup_x2", true);
      Utility.methodSignatureReturnType(",(Z%)S#oOfinfcEy2a", true);
      Utility.convertString(",(Z%)S#oOfinfcEy2a");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",(Z%)S#oOfinfcEy2a";
      stringArray0[1] = "short";
      stringArray0[2] = ",(Z%)S#oOfinfcEy2a";
      stringArray0[3] = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",(Z%)S#oOfinfcEy2a");
      stringArray0[4] = ">Ty4es";
      Utility.methodTypeToSignature("^t Bkz D5<-=2S_yYoia", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 62, (int) (byte)58, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ifnull");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      byte[] byteArray1 = new byte[0];
      Utility.codeToString(byteArray1, constantPool0, (-26), 36, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)14, (int) (byte)107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("fmul");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      byte[] byteArray1 = new byte[0];
      Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-82), (int) (byte)114, true);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, (int) (byte)114, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-78);
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-78);
      byteArray0[4] = (byte)2;
      byteArray0[6] = (byte) (-52);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      Utility.typeOfSignature("V");
      Utility.compactClassName("a-rF-uN,e'>2Dxmw\"", false);
      Utility.clearBit(256, 1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cache hit ");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte)48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.getSignature("dload_3");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("<Ft]]g~!&h;X");
      int int0 = 2389;
      Utility.accessToString(2389);
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)84, (byte)101, byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.ParameterAnnotations", "NLww'#*(^W8).pv", "<Ft]]g~!&h;X", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.ParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.getSignature("dload_3");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("<Ft]]g~!&h;X");
      Utility.accessToString(2389);
      byte byte0 = (byte) (-96);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = new Integer((-1483));
      Utility.classOrInterface(66);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)36;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)114, (int) (byte)84, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[1] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      int int0 = Utility.setBit((byte) (-18), (byte) (-18));
      assertEquals((-18), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte byte0 = (byte) (-124);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 240;
      Utility.clearBit(240, 887);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(240, 887);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(887, 240);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong(1259L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("u/!", stringArray0);
      boolean boolean0 = false;
      Utility.methodSignatureArgumentTypes("()Lu/!;", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-54);
      byte byte0 = (byte)94;
      byteArray0[8] = (byte)94;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.getSignature("double");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("e95WWF:(");
      Utility.accessToString(2389);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)123, (-921), byteSequence0, constantPool0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "newarray", "if_icmpgt", true, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = new Object();
      byte byte0 = (byte)114;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("OiS=6jJIhGl>x-\r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OiS=6jJIhGl>x-\r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte)66);
      constantArray0[0] = (Constant) constantLong0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-50));
      constantArray0[1] = (Constant) constantClass0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string0 = "9~tFW'a";
      try { 
        Utility.typeOfSignature("9~tFW'a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9~tFW'a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[19];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 1080);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      String[] stringArray0 = new String[8];
      byteSequence3.readInt();
      stringArray0[0] = "il925 $!*\"mTyY\"0B #";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "2}&+V~PZPO;;.";
      stringArray0[2] = "il925 $!*\"mTyY\"0B #";
      stringArray0[3] = "nop";
      stringArray0[4] = "nop";
      stringArray0[5] = "d{o:eUf]";
      stringArray0[6] = "2}&+V~PZPO;;.";
      stringArray0[7] = "il925 $!*\"mTyY\"0B #";
      Utility.methodTypeToSignature("2}&+V~PZPO;;.", stringArray0);
      try { 
        Utility.decode("il925 $!*\"mTyY\"0B #", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-110));
      byteSequence0.readChar();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature("u'6@[|2)w]a*?wH<N");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(67, 2548);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)43;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-11);
      byteArray2[1] = (byte)43;
      byteArray2[2] = (byte)64;
      byteArray2[3] = (byte)43;
      byteArray2[4] = (byte) (-20);
      byteArray2[5] = (byte)64;
      byteArray2[6] = (byte)43;
      byteArray2[7] = (byte) (-20);
      byteArray2[8] = (byte) (-20);
      ByteSequence byteSequence3 = new ByteSequence(byteArray2);
      Utility.codeToString(byteSequence3, constantPool0);
      String string1 = Utility.compactClassName("[Lu'6@;", "W#o_tcLy%%Iu<", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[2] = (byte) (-50);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-13);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.clearBit((byte)100, (byte) (-13));
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 255, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 19443. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.replace("g?|", "g?|", "g?|");
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)102;
      byteArray0[6] = (byte) (-84);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.printArray((Object[]) null, false, false);
      Utility.format((byte)41, 2890, false, '4');
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("WLI$vf$A$ac", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-56), 1080);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "il925 $!*\"mTyY\"0B #";
      stringArray0[1] = "2}&+V~PZPO;;.";
      stringArray0[2] = "il925 $!*\"mTyY\"0B #";
      stringArray0[3] = "goto_w\t\t#0";
      stringArray0[4] = "goto_w\t\t#0";
      stringArray0[5] = "d{o:eUf]";
      stringArray0[6] = "2}&+V~PZPO;;.";
      stringArray0[7] = "il925 $!*\"mTyY\"0B #";
      Utility.methodTypeToSignature("2}&+V~PZPO;;.", stringArray0);
      try { 
        Utility.decode("il925 $!*\"mTyY\"0B #", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      Utility.compactClassName("invokespec");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      ConstantClass constantClass0 = new ConstantClass(125);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantDouble constantDouble0 = new ConstantDouble((-1119.65402852177));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantLong constantLong0 = new ConstantLong((byte)48);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass1;
      constantArray0[3] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.compactClassName("sTX;XdLw;IQBI");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.codeToString(byteSequence1, constantPool0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("istore\t\t%0", string0);
      
      String string1 = Utility.compactClassName("sTX;XdLw;IQBI", false);
      assertEquals("sTX;XdLw;IQBI", string1);
      
      String string2 = Utility.accessToString((int) (byte)11, false);
      assertEquals("public private static", string2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantNameAndType0.clone();
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.clearBit((byte)0, (-209));
      Utility.searchOpcode("dload_3");
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("Ho~+?qgnhD]I(u@1<BG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ho~+?qgnhD]I(u@1<BG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("[]");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Method method0 = new Method();
      String string0 = "|%Zw<,2g@r_$Yk-";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("|%Zw<,2g@r_$Yk-", "[]", "[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |%Zw<,2g@r_$Yk-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)0;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-171), (-512));
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 76, (-2020), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("51 51 ad 51 51", string0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("51 51 ad 51 51");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool2, false);
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.printArray((Object[]) null, true, true);
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = new Object();
      Utility.compactClassName("invokspecial");
      String string0 = Utility.compactClassName("invokespec");
      assertEquals("invokespec", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-91);
      byteArray0[4] = (byte) (-34);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1689), (int) (byte)40);
      assertEquals("0:    iaload\n1:    dload_2\n2:    if_acmpeq\t\t#224\n", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_acmpeq\t\t#224", string2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.replace("g?|", "g?|", "g?|");
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-84);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)102, (int) (byte)87, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Object object0 = new Object();
      Utility.compactClassName("invokspecial");
      Utility.compactClassName("invokespec");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-91);
      byteArray0[4] = (byte) (-34);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1689), (int) (byte)40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.getSignature("%uo^nn:tD");
      Utility.compactClassName("%uo^nn:tD", "%uo^nn:tD", false);
      Utility.methodSignatureReturnType(",(Z%)S#oOfinfcEy2a", true);
      Utility.convertString(",(Z%)S#oOfinfcEy2a");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",(Z%)S#oOfinfcEy2a";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%uo^nn:tD");
      Utility.convertString("short");
      try { 
        Utility.methodSignatureArgumentTypes("(Ld U", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ld U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.isJavaIdentifierPart('a');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1372, 1372);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle((byte)97, (byte)40);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 97, 97, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "a-rF-uN,e'>2Dxmw\"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 57, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = false;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, 59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dwl+Aj[M3`6gj3");
      assertEquals((byte)7, byte0);
      
      Utility.signatureToString("Dwl+Aj[M3`6gj3", true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "double";
      objectArray0[1] = (Object) "double";
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("double, double", string0);
      
      int int0 = Utility.clearBit((byte)7, 0);
      assertEquals(6, int0);
      
      String string1 = Utility.format((-2805), 0, true, 'x');
      assertEquals("-2805", string1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)67;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte) (-98);
      byteArray1[5] = (byte) (-93);
      byteArray1[6] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantPool0.setConstantPool(constantArray0);
      Utility.compactClassName("g");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.replace("g?|", "g?|", "g?|");
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object object0 = new Object();
      Utility.getSignature("%uo^nn:tD");
      Object object1 = new Object();
      Utility.getSignature("L%uo^nn:tD;");
      Utility.accessToString(76);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.methodSignatureReturnType("[B}5NkF}1|J2");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("N|h|S4!q{uW", "\t\t%", "[B}5NkF}1|J2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N|h|S4!q{uW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      Attribute[] attributeArray0 = new Attribute[1];
      PMGClass pMGClass0 = new PMGClass(243, 74, 43, 243, (ConstantPool) null);
      PMGClass pMGClass1 = new PMGClass(pMGClass0);
      attributeArray0[0] = (Attribute) pMGClass0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string0 = Utility.compactClassName(">\t", "dsub", false);
      assertEquals(">\t", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-110));
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, constantPool0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object object0 = new Object();
      Utility.getSignature("%uo^nn:tD");
      Utility.compactClassName("%uo^nn:tD", "%uo^nn:tD", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L%uo^nn:tD;");
      Utility.methodSignatureReturnType(",(Z%)S#oOfinfcEy2a", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-104);
      byte byte0 = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte) (-104);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-93), (int) (byte) (-76), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    dcmpg
         // 4:    dcmpg
         // 5:    dcmpl
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.compactClassName("Q\">#',fG");
      Utility.compactClassName("Q\">#',fG");
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1689), (int) (byte)40);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q\">#',fG", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q\">#',fG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object object0 = new Object();
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)98, (byte)98);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-661), 2149);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(113, 171);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 198, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    frem\n1:    nop\n2:    fadd\n3:    fadd\n4:    nop\n5:    frem\n6:    nop\n7:    nop\n8:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    frem
         // 1:    nop
         // 2:    fadd
         // 3:    fadd
         // 4:    nop
         // 5:    frem
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.format(2030, 88, true, 'm');
      Utility.format(88, 73, false, '7');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2030mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm");
      Utility.classOrInterface(3486);
      Utility.convertString("java.lang.");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 1819, (-358));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.compactClassName("CAceo", "dsub", false);
      assertEquals("CAceo", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "invokspecial";
      Utility.compactClassName("invokspecial");
      String string1 = "\t";
      Utility.compactClassName("\t");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1109643708), 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fcmpl
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("51 51 ad 51 51", string0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-1402), 72, true);
      assertEquals("0:    fastore\n1:    fastore\n2:    lreturn\n3:    fastore\n4:    fastore\n", string1);
      
      String string2 = Utility.printArray((Object[]) constantArray0, true, true);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)102, 51, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(180, 2051);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2051, 822, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      Utility.typeOfSignature("V");
      Utility.compactClassName("a-rF-uN,e'>2Dxmw\"", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte) (-104);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 174, (int) (byte) (-90), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.codeToString(byteSequence2, constantPool0);
      String string0 = Utility.compactClassName("CAceo", "CAceo", false);
      assertEquals("CAceo", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)81;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)81, (-1402), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-110);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(32, (byte) (-86));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-110), (byte) (-110));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)98;
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-3271), (int) (byte) (-110), true);
      assertEquals("0:    fadd\n1:    fadd\n", string0);
      
      String string1 = Utility.convertString("0:    fadd\n1:    fadd\n");
      assertEquals("0:    fadd\\n1:    fadd\\n", string1);
      
      String string2 = Utility.classOrInterface((byte) (-86));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-68);
      byteArray0[15] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, constantPool0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("u'6@[|2)w]a*?wH<N");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(67, 2548);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 87, 2548, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.close();
      String string0 = Utility.fillup("1LktT/", (byte)43, false, 'J');
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      Attribute[] attributeArray0 = new Attribute[1];
      PMGClass pMGClass0 = new PMGClass(243, 74, 43, 243, (ConstantPool) null);
      PMGClass pMGClass1 = new PMGClass(pMGClass0);
      attributeArray0[0] = (Attribute) pMGClass0;
      pMGClass0.setConstantPool((ConstantPool) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(74, 121);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-171), 1527);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(121, 1527);
      Constant[] constantArray0 = new Constant[7];
      ConstantString constantString0 = new ConstantString((-72047442));
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantFieldref0;
      constantArray0[5] = (Constant) constantMethodHandle1;
      constantArray0[6] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1217), (-1097971799), false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-110);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-73);
      byteArray1[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Utility.methodTypeToSignature("", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("cYp", "(L;)L;", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cYp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray1 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      Utility.codeToString(byteSequence0, constantPool0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("bipush\t\t0", "invokeinterface");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // invokeinterface
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)85;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-101);
      byteArray1[1] = (byte) (-101);
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[1];
      Utility.printArray((Object[]) constantArray0, false, false);
      try { 
        Utility.methodSignatureToString("null", (String) null, "=~g&-H", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-64);
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)86;
      byteArray1[3] = (byte) (-64);
      byteArray1[4] = (byte)71;
      byteArray1[5] = (byte)70;
      byteArray1[6] = (byte) (-64);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-110);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(32, (byte) (-86));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-110), (byte) (-110));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(112, (-1703));
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)98;
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-3271), (int) (byte) (-110), true);
      assertEquals("0:    fadd\n1:    fadd\n", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      Utility.clearBit((byte)91, 3847);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)0, 4353);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("1a2\"@yK8a09mx3O");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble(4353);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodref0.accept(emptyVisitor0);
      ConstantString constantString0 = new ConstantString(171);
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = constantPool0.toString();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.AnnotationElementValue", "", "", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.AnnotationElementValue
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.fillup("fstore_3", (byte)91, false, 'z');
      assertEquals("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzfstore_3", string0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("wide\t(wide)", string1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Utility.compactClassName("invokspecial");
      Utility.compactClassName("invokespec");
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-91);
      byteArray0[0] = (byte) (-34);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1689), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)82;
      byte byte0 = (byte) (-62);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 178, (-1441));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.clearBit((byte)0, 3847);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = byteSequence1.readBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1396, (byte)0);
      constantArray0[1] = (Constant) constantNameAndType0;
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((byte)0, (-236), byteSequence0, (ConstantPool) null);
      enclosingMethod0.getEnclosingMethod();
      constantArray0[0] = (Constant) null;
      ConstantInteger constantInteger0 = new ConstantInteger(252);
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, false);
      Utility.searchOpcode("nop");
      Utility.searchOpcode("long");
      try { 
        Utility.methodSignatureReturnType("v4[*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `v4[*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-361), (int) (byte) (-64));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)91, 3666);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-86), 86);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle((-171), (-512));
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-2380), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_1
         // 1:    nop
         // 2:    aload_1
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.fillup("iload\t\t%91", (byte)91, false, 'z');
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)63;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("Z$l$85$3cH$ca0$c7$3f", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Utility.replace("g?|", "g?|", "g?|");
      assertEquals("g?|", string0);
      
      Object object0 = new Object();
      String string1 = Utility.classOrInterface((-1105));
      assertEquals("interface", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = Utility.isSet((byte)105, 0);
      boolean boolean1 = Utility.isJavaIdentifierPart('/');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Ljava/lang/Object");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)98;
      Utility.searchOpcode("java.lang.Object");
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)71;
      Utility.clearBit((byte)71, 3847);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      String string0 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.clearBit(161, (-209));
      Utility.printArray((Object[]) constantArray0, false, false);
      try { 
        Utility.methodSignatureToString("", "V", "V", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.fillup("m+xss=ZN^d", (byte) (-28), false, '1');
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)21;
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)34;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)21;
      byteArray1[4] = (byte) (-28);
      byteArray1[5] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "BMd<Mf";
      Utility.signatureToString("BMd<Mf", true);
      byte byte0 = (byte)105;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)105;
      try { 
        Utility.methodSignatureArgumentTypes("=|}Gb$R5#-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =|}Gb$R5#-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      Utility.accessToString((-1307), false);
      int int0 = Utility.setBit((-1105339747), (-1105339747));
      assertEquals((-1105339747), int0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      Utility.convertString("-dej{^J7<{w_");
      String string1 = Utility.convertString("dload_3");
      assertEquals("dload_3", string1);
      
      int int1 = new Integer((-417));
      String string2 = Utility.accessToString((-1105339747), false);
      assertEquals("public protected static final transient interface strictfp synthetic enum", string2);
      
      Utility.decode("", false);
      String string3 = Utility.compactClassName("", "dload_3", false);
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("CL]d2,rA}nx_-");
      Utility.signatureToString("CL]d2,rA}nx_-", false);
      Utility.accessToString(82);
      Utility.getSignature("char");
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-110);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-73);
      byteArray1[2] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (-1684));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-27);
      Utility.isJavaIdentifierPart('v');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-110);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-73);
      byteArray1[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)70, (-1608), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte) (-42);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("Ty4es", ">", true);
      assertEquals("Ty4es", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-2014390843), (-2601), true);
      assertEquals("0:    nop\n1:    fneg\n2:    dconst_0\n3:    wide\t(wide)\n4:    faload\n5:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfMethodSignature("PFUrv[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PFUrv[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.replace("g?|", "g?|", "g?|");
      Utility.getSignature("g?|");
      Utility.accessToString(2389);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.compactClassName(" fields:\n", "\u0004]clcD/;1", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)70, 1115);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)81);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantFloat constantFloat2 = new ConstantFloat((-1.0F));
      constantArray0[2] = (Constant) constantFloat2;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[3] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("guxBQt('");
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat3 = new ConstantFloat(constantFloat0);
      constantArray0[5] = (Constant) constantFloat3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.getSignature("dload_3");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature("<Ft]]g~!&h;X");
      assertEquals("L<Ft]]g~!&h;X;", string0);
      
      String string1 = Utility.accessToString(2389);
      assertEquals("public protected final volatile native strictfp", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lsub", string2);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmpne\t\t#-18605", string3);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)71;
      Utility.clearBit((byte)71, 3847);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = Utility.decode("b8&vALk8L&I*P1n$m", false);
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.replace("g?|", "g?|", "g?|");
      Object object0 = new Object();
      Utility.getSignature("invokespecial");
      Utility.accessToString(91);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-73);
      Utility.toHexString(byteArray0);
      Utility.setBit((byte) (-73), (byte) (-73));
      Utility.decode("9|`PN$_MR#LGW&TWX", false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "g?|";
      stringArray0[2] = "g?|";
      stringArray0[3] = "invokespecial";
      stringArray0[4] = "7b b7 54 b7 b7 b7 b7";
      stringArray0[5] = "public private static final volatile";
      stringArray0[6] = "Linvokespecial;";
      stringArray0[8] = "g?|";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("g?|", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.compactClassName("g?|");
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "M(E_%9Yv\\i\\u";
      // Undeclared exception!
      try { 
        Utility.signatureToString(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M(E_%9Yv\\i\\u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)122;
      byteArray0[4] = (byte) (-16);
      byteArray0[6] = (byte)106;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-3643), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.getSignature("%uo^nn:tD");
      assertEquals("L%uo^nn:tD;", string0);
      
      String string1 = Utility.compactClassName("%uo^nn:tD", "%uo^nn:tD", false);
      assertEquals("%uo^nn:tD", string1);
      
      String string2 = Utility.methodSignatureReturnType(",(Z%)S#oOfinfcEy2a", true);
      assertEquals("short", string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-104);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      classPath0.getResourceAsStream("void");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-42), (int) (byte) (-42));
      assertEquals("0:    impdep2\n1:    <illegal opcode>\n2:    astore_3\n3:    dcmpg\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string3);
      
      String string4 = Utility.fillup("void", (byte) (-104), true, '%');
      assertEquals("void", string4);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("[]");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-54);
      byteArray0[8] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.decode("iload_2", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute.removeAttributeReader("f,ab6=1]naq{gs");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute.removeAttributeReader("\"");
      Utility.decode("CONSTANT_String", false);
      String string0 = Utility.signatureToString("V", false);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Object object0 = new Object();
      Utility.getSignature("%uo^nn:tD");
      Utility.compactClassName("%uo^nn:tD", "%uo^nn:tD", false);
      Utility.methodSignatureReturnType(",(Z%)S#oOfinfcEy2a", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)72;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), (int) (byte) (-105), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    <illegal opcode>
         // 2:    astore_3
         // 3:    dcmpg
         // 4:    i2f
         // 5:    dcmpl
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.getSignature("%uo^nn:tD");
      Utility.compactClassName("%uo^nn:tD", "%uo^nn:tD", false);
      Utility.methodSignatureReturnType(",(Z%)S#oOfinfcEy2a", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("impdep2", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-54);
      byteArray0[8] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("swap", string0);
      
      byte[] byteArray1 = Utility.decode("newarray", false);
      assertArrayEquals(new byte[] {(byte)110, (byte)101, (byte)119, (byte)97, (byte)114, (byte)114, (byte)97, (byte)121}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)34;
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)83, (-171));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)83, 95);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(183, (-512));
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, 3, 928, true);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-101), 3, false);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.replace("g?|", "g?|", "g?|");
      Object object0 = new Object();
      Utility.getSignature("invokespecial");
      Utility.accessToString(91);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = Utility.getSignature("load_3");
      assertEquals("Lload_3;", string0);
      
      String string1 = Utility.classOrInterface((-1096));
      assertEquals("interface", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore_0", string2);
      
      byte[] byteArray1 = Utility.decode("<Ft]]g~!&h;X", false);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.methodSignatureReturnType("CL]d2,rA}nx_-");
      Utility.signatureToString("CL]d2,rA}nx_-", false);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)65, 2896);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      constantArray0[5] = (Constant) constantInvokeDynamic0;
      constantArray0[6] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)65, (int) (byte)65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-6254817), (-6254817));
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit(195, 195);
      assertEquals(195, int0);
      
      String string0 = Utility.format((-6254817), (-6254817), false, '*');
      assertEquals("-6254817", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "Byte code error: ";
      Utility.methodSignatureReturnType("Byte code error: ", true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.isJavaIdentifierPart('a');
      Object object0 = new Object();
      String string0 = ">>v)u'Q+$TqA";
      try { 
        Utility.typeOfSignature(">>v)u'Q+$TqA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >>v)u'Q+$TqA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)67;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 10, 108, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.getSignature("< ;'%8q |&B:_MrM{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature("u'6@[|2)w]a*?wH<N");
      assertEquals("[Lu'6@;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("astore_1", string1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.compactClassName("k#k`W3c8&lA>tS", false);
      Utility.convertString("");
      Utility.classOrInterface(26);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("class");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.convertString("\t(side)");
      assertEquals("\t(side)", string0);
      
      String string1 = Utility.format(255, 1, false, 'A');
      assertEquals("255", string1);
      
      short short0 = Utility.searchOpcode("255");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JbK{&QPOtQ&t?sB");
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("JbK{&QPOtQ&t?sB", stringArray0);
      assertEquals("()LJbK{&QPOtQ&t?sB;", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(21, 151);
      try { 
        Utility.typeOfSignature("8t)N.o6Zp6)%~/_VL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8t)N.o6Zp6)%~/_VL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.setBit((-3990), (-3990));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("('}lam5D?>Q&l\"c{", "org.apache.bcel.classfile.ConstantUtf8", "vUG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `'}lam5D?>Q&l\"c{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-39);
      byte byte0 = (byte) (-15);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-62);
      ConstantPool constantPool0 = null;
      int int0 = (-1281);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1281), (-1380));
      Utility.getSignature("0:    dconst_0\n1:    dup_x2\n2:    dmul\n3:    drem\n4:    <illegal opcode>\n5:    <illegal opcode>\n6:    l2d\n7:    monitorenter\n");
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfMethodSignature("i2b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfMethodSignature("daload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: daload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)106;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3160), (int) (byte) (-16), true);
      assertEquals("0:    fload_1\n1:    <illegal opcode>\n2:    caload\n3:    istore_2\n4:    ishr\n5:    <illegal opcode>\n6:    fmul\n", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "(NOp4y*{BwY+Nsz";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Object object0 = new Object();
      Utility.methodSignatureReturnType("Z!\"~Pn*?\"1cL**&gQ");
      try { 
        Utility.typeOfMethodSignature("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "WQ%`G/yKsR";
      try { 
        Utility.methodSignatureReturnType("WQ%`G/yKsR", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WQ%`G/yKsR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.compactClassName("java.lang.");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(NOp4y*{BwY+Nsz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (NOp4y*{BwY+Nsz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Utility.isJavaIdentifierPart('<');
      try { 
        Utility.typeOfSignature("K0$_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K0$_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.isJavaIdentifierPart('9');
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("rsu?^n==~QpNd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: rsu?^n==~QpNd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = Utility.isSet(61, 61);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte) (-51);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-1L));
      constantArray0[0] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-42), (int) (byte)85, false);
      assertEquals("0:    dastore\n1:    castore\n2:    dstore_1\n3:    <illegal opcode>\n4:    ishl\n5:    fstore_1\n6:    dload_3\n7:    lstore_1\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 58, 50, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Types", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Types
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Utility.isSet(45, 45);
      Utility.clearBit(45, 45);
      try { 
        Utility.typeOfSignature("3f(<('-Q{XUy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3f(<('-Q{XUy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "", "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("goto_w\t\t#2068471637", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('^');
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("$qR2ZM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $qR2ZM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Utility.isJavaIdentifierPart('');
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("XtY$;#P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XtY$;#P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@~vXo7>p{&_G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @~vXo7>p{&_G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("?ayFF%rcku");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?ayFF%rcku
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Utility.replace("U[I%QPgH", "U[I%QPgH", "U[I%QPgH");
      Utility.isJavaIdentifierPart('<');
      try { 
        Utility.typeOfSignature("Ompdel2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ompdel2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorexit");
      Object object0 = new Object();
      Utility.typeOfSignature("F4&EPP$O{Yuf/T");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.replace("bcel.statistics", "bcel.statistics", "bcel.statistics");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)109;
      Utility.toHexString(byteArray0);
      Utility.fillup("~KT?#  I{rP]X|pA-O", 180, true, '8');
      // Undeclared exception!
      try { 
        Utility.signatureToString("~KT?#  I{rP]X|pA-O888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~KT?#  I{rP]X|pA-O888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Utility.isJavaIdentifierPart('');
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature(":%tS#vAk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :%tS#vAk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-114);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-73);
      byteArray1[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("c", "long", "-f");
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("-f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Utility.methodSignatureReturnType("CL]d2,rA}nx_-");
      String string0 = Utility.signatureToString("CL]d2,rA}nx_-", false);
      assertEquals("char", string0);
      
      String string1 = Utility.accessToString(82);
      assertEquals("private final volatile", string1);
      
      String string2 = Utility.getSignature("char");
      assertEquals("C", string2);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("4}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Utility.classOrInterface((-1622));
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "class", "class", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q:uK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q:uK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)34;
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)83, (-171));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)83, 95);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(183, (-512));
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 3, 928, true);
      assertEquals("5:    dload_2\n6:    ladd\n7:    fload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Utility.replace("invokevirtual", "LlOB!Y", "");
      Object object0 = new Object();
      Utility.typeOfSignature("Ju?9NqQm]ae9z9H-`z");
      try { 
        Utility.methodSignatureReturnType("LlOB!Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LlOB!Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Utility.convertString("");
      String string0 = Utility.fillup("", 59, false, 'b');
      assertEquals("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YZecKa,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YZecKa,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Utility.getSignature("\t\t#");
      Utility.signatureToString("L#;");
      String string0 = ")ZvFWIMA#*jP=rM6w+";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("#", ")ZvFWIMA#*jP=rM6w+", "bekpont");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.searchOpcode("!crBH)");
      try { 
        Utility.methodSignatureReturnType("QI1m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QI1m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("XkM.Hz6%YE_~dP", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XkM.Hz6%YE_~dP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "";
      Utility.decode("", false);
      String string1 = "";
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = "iadd";
      String string1 = "&IZ+p=DaQolr>M,b\"5&";
      try { 
        Utility.typeOfSignature("&IZ+p=DaQolr>M,b\"5&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &IZ+p=DaQolr>M,b\"5&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = Utility.getSignature("u'6@[|2)w]a*?wH<N");
      assertEquals("[Lu'6@;", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = Utility.getSignature(" ");
      String string1 = Utility.format(1301, 1301, true, 'u');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = Utility.replace("%uo^nn:tD", "%uo^nn:tD", "org.apache.bcel.classfile.ElementVal|e");
      assertEquals("org.apache.bcel.classfile.ElementVal|e", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("caload", string1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Yrbp_L679JE5.GN\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yrbp_L679JE5.GN\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("LineNumber(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LineNumber(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = "[";
      // Undeclared exception!
      try { 
        Utility.getSignature("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("JF", false);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload\t\t%40", string0);
      
      byte[] byteArray1 = Utility.decode("java.lang.char", false);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Object object0 = new Object();
      Utility.typeOfSignature("S%'t1X(Dw0&viGaqR");
      Utility.clearBit((-4012), (-3122));
      String[] stringArray0 = Constants.ATTRIBUTE_NAMES;
      assertEquals(17, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Object object0 = new Object();
      Utility.methodSignatureReturnType("DHLNUMin_@", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `jsr_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = ", npairs = ";
      Utility.isJavaIdentifierPart('A');
      // Undeclared exception!
      try { 
        Utility.signatureToString(", npairs = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, npairs = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "MP23m,|9q";
      try { 
        Utility.typeOfSignature("MP23m,|9q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MP23m,|9q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      Utility.format(3411, 4, false, 'v');
      try { 
        Utility.methodSignatureReturnType("faload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `faload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      try { 
        Utility.typeOfSignature("63)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 63)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = ":\\['(pRZa:_XMJ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":['(pRZa:_XMJ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ":['(pRZa:_XMJ");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(printWriter0, objectArray0);
      String string1 = "Type of ConstValue invalid: ";
      Utility.compactClassName("Type of ConstValue invalid: ", false);
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      String string2 = null;
      String string3 = "Illegally nested brackets:";
      int int0 = 16;
      int int1 = 77;
      int int2 = (-2130);
      Attribute[] attributeArray0 = new Attribute[9];
      ExceptionTable exceptionTable0 = null;
      try {
        exceptionTable0 = new ExceptionTable((ExceptionTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ExceptionTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = "H+QQ! idMxu4COI)mNq";
      try { 
        Utility.typeOfSignature("H+QQ! idMxu4COI)mNq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H+QQ! idMxu4COI)mNq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      int int0 = 186;
      Utility.accessToString(186);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("YRO6S3W*X\"!mFcO", (String[]) null);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("private static final synchronized transient", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private static final synchronized transient'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)65;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-711), (-1803));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)78, (int) (byte) (-41));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 93, true, 'Q');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Utility.signatureToString("CL]d2,rA}nx_-");
      String string0 = Utility.signatureToString("CL]d2,rA}nx_-", false);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7iq2c- 0I?Z,a%@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7iq2c- 0I?Z,a%@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a-rF-uN,e'>2Dxmw\"");
      boolean boolean0 = false;
      int int0 = 243;
      Attribute[] attributeArray0 = new Attribute[1];
      ConstantPool constantPool0 = null;
      PMGClass pMGClass0 = new PMGClass(243, 2424, 43, 243, (ConstantPool) null);
      Attribute attribute0 = pMGClass0.copy((ConstantPool) null);
      attributeArray0[0] = attribute0;
      pMGClass0.setConstantPool((ConstantPool) null);
      Method method0 = new Method(243, 243, 243, attributeArray0, (ConstantPool) null);
      method0.copy_((ConstantPool) null);
      Attribute.removeAttributeReader("f,ab6=1]naq{gs");
      method0.getLocalVariableTable();
      try { 
        Utility.methodSignatureToString("V", "V", "V", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Utility.accessToString((-1746));
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("anewarray", "J5h\"=\"}<fq", "private protected static synchronized native strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: anewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.convertString("?y*='");
      assertEquals("?y*=\\'", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 29;
      Utility.accessToString(29);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public protected static final", (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = "DDy&o~nL0Xj\"L8\"6H";
      Utility.getSignature("DDy&o~nL0Xj\"L8\"6H");
      Utility.typeOfSignature("DDy&o~nL0Xj\"L8\"6H");
      try { 
        Utility.methodSignatureReturnType("java.lang.g?|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.g?|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Utility.compactClassName("EzyU\"p?78 FN|)m8d>=");
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("RY^\"n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RY^\"n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = ")";
      Utility.replace("g^'J(0PCEqSIB<", ")", ":l");
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.replace("ZZfA$93/}6-n", "ZZfA$93/}6-n", "Invalid method signature: ");
      assertEquals("Invalid method signature: ", string0);
      
      String string1 = Utility.classOrInterface((-537));
      assertEquals("class", string1);
      
      byte byte0 = Utility.typeOfSignature("ZZfA$93/}6-n");
      assertEquals((byte)4, byte0);
      
      byte[] byteArray0 = Utility.decode("Invalid method signature: ", false);
      assertEquals(26, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = "X@j+";
      String string1 = "\t\t%";
      try { 
        Utility.typeOfMethodSignature("\t\t%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("#m1I<[6>'NY4pgWI");
      try { 
        Utility.typeOfSignature("#]6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #]6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = "):=q|QD3w-M\"+\\";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = ":";
      String string2 = ">\t";
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Object object0 = new Object();
      Utility.getSignature("%uo^nn:tD");
      Utility.compactClassName("%uo^nn:tD", "%uo^nn:tD", false);
      Utility.methodSignatureReturnType(",(Z%)S#oOfinfcEy2a", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)72;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-90), (int) (byte) (-105), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    <illegal opcode>
         // 2:    astore_3
         // 3:    dcmpg
         // 4:    i2f
         // 5:    dcmpl
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Utility.replace("g?|", "g?|", "g?|");
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("ASN%s\"+bb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ASN%s\"+bb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      int int0 = 3;
      Utility.accessToString(3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fdiv");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "public private";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Utility.replace("The magic number cannot be null", "<UEnSaEfZOlY]8", "T(i_VB2w$Ud");
      Utility.typeOfSignature("The magic number cannot be null");
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.compactClassName("fstore_2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("VGfuI:GOcM=.c;$;_0B");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.compactClassName("iDG/T_kVQF", "U[I%QPgH", true);
      assertEquals("iDG.T_kVQF", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = "T(i_VB2w$Ud";
      Utility.compactClassName("T(i_VB2w$Ud", true);
      Utility.getSignature("T(i_VB2w$Ud");
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte) (-123);
      boolean boolean1 = false;
      Utility.encode(byteArray0, false);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("T(i_VB2w$Ud", (String) null, "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: T(i_VB2w$Ud
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = "U[I%QPgH";
      Utility.replace("U[I%QPgH", "U[I%QPgH", "U[I%QPgH");
      try { 
        Utility.typeOfSignature("\"liG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"liG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = ",]]tM";
      Utility.compactClassName(",]]tM");
      try { 
        Utility.typeOfSignature("N]MlWK~MvMtY}(%Y4g9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N]MlWK~MvMtY}(%Y4g9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = Utility.replace("):=q|QD3w-M\"+", "v^LnJ2Gtdqb;dWQbN4", "):=q|QD3w-M\"+");
      assertEquals("):=q|QD3w-M\"+", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{null}", string1);
      
      String string2 = Utility.printArray(objectArray0, false, false);
      assertEquals("null", string2);
      
      String string3 = Utility.getSignature("v^LnJ2Gtdqb;dWQbN4");
      assertEquals("Lv^LnJ2Gtdqb;dWQbN4;", string3);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      Utility.convertString("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.<UEntaEfZOlY]8", "", "vuZ&_R(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.<UEntaEfZOlY]8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Utility.compactClassName("<UEntaEfZOlY]8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("<UEntaEfZOlY]8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <UEntaEfZOlY]8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Utility.compactClassName("[]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("[]");
      try { 
        Utility.methodSignatureReturnType("x4h>8_4T?YxFv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `x4h>8_4T?YxFv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "java.lang.):=q|QD3w-M\"+\\";
      Utility.replace(".zip", "java.lang.):=q|QD3w-M\"+", "monitorenter");
      try { 
        Utility.typeOfSignature(".zip");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .zip
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = "PF}W";
      try { 
        Utility.methodSignatureReturnType("PF}W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PF}W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Utility.compactClassName("invokspecial");
      String string0 = Utility.compactClassName("invokespec");
      assertEquals("invokespec", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-34);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1689), (int) (byte)40);
      assertEquals("0:    iaload\n1:    dload_2\n2:    if_acmpeq\t\t#14560\n", string1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.typeOfSignature("IEIKJY");
      Utility.methodSignatureReturnType("IEIKJY");
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("<UEntaEfZOlY]8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("GDU", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GDU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "The list of suffixes must not be null";
      Utility.typeOfSignature("The list of suffixes must not be null");
      String string1 = "2nzP";
      try { 
        Utility.methodSignatureReturnType("2nzP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2nzP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Utility.compactClassName(",]]tM");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(",]]tM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,]]tM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Utility.compactClassName("<UEntaEfZOlY]8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(";#uh?M0Y8Rml:-I%`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;#uh?M0Y8Rml:-I%`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('5');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "%freturn";
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("%freturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Utility.replace(")f", ")f", ")f");
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature(")f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = "<UEntaEfZOlY]8";
      Utility.compactClassName("<UEntaEfZOlY]8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("GDU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GDU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = Utility.classOrInterface((-889275714));
      assertEquals("interface", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ")f";
      objectArray0[1] = (Object) "interface";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\")f\", \"interface\"}", string1);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = "<UEntaEfZOlY]8";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t\t", "/MX~^$C`Md", "<UEntaEfZOlY]8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureToString("u902A~m8Ve}fi[", "i2N/gl@kA4WH", "void", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: u902A~m8Ve}fi[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("T*fj853E8z`_v{4Jh|M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T*fj853E8z`_v{4Jh|M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = Utility.classOrInterface(84);
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "monitorenter";
      Utility.methodTypeToSignature("monitorenter", stringArray0);
      Utility.format((-2604), (-3666), false, '8');
      // Undeclared exception!
      try { 
        Utility.signatureToString("monitorenter", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorenter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Utility.accessToString(0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(");
      try { 
        Utility.decode("V_~4Q>F[dfxjU^", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">ALZ`_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >ALZ`_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Object object0 = new Object();
      Utility.getSignature("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("~[(GP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~[(GP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Utility.classOrInterface(84);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = Utility.replace("U[I%QPgH", "U[I%QPgH", "U[I%QPgH");
      assertEquals("U[I%QPgH", string0);
      
      String string1 = Utility.signatureToString("I|4>rn|MYzp[+6Z \".w", true);
      assertEquals("int", string1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('q');
      Utility.printArray(printWriter0, (Object[]) null);
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = Utility.replace("NMIxaI!gF|", "NMIxaI!gF|", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = "V";
      Utility.methodSignatureReturnType("V");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "^";
      stringArray0[1] = "void";
      stringArray0[2] = "^";
      String string1 = "w";
      stringArray0[3] = "w";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[4] = "^";
      stringArray0[5] = "^";
      stringArray0[6] = "^";
      stringArray0[7] = "^";
      try { 
        Utility.methodTypeToSignature("^", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int int0 = Utility.setBit((-1483), (-1483));
      assertEquals((-1483), int0);
      
      String string0 = Utility.classOrInterface(66);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)91;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$a00$ae$7f$5b", string1);
      
      int int1 = Utility.setBit(2442, (byte)48);
      assertEquals(67978, int1);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Utility.replace("g?|", "g?|", "g?|");
      Object object0 = new Object();
      Utility.classOrInterface((-1096));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Utility.typeOfSignature("Clone Not Supported");
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokestatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("FS");
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      short short0 = Utility.searchOpcode("FS");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iload\t\t%91", string0);
      
      String string1 = Utility.fillup("iload\t\t%91", (byte)111, false, 'z');
      assertEquals("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzziload\t\t%91", string1);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_0", string2);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = "%freturn";
      Utility.compactClassName("%freturn", "%freturn", true);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.signatureToString("IEIKJY", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Utility.methodSignatureReturnType("SENSITIVE", false);
      try { 
        Utility.methodSignatureReturnType("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.methodSignatureReturnType("C0+I<xZn");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = "U[I%QPgH";
      // Undeclared exception!
      try { 
        Utility.getSignature("U[I%QPgH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[I%QPgH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = "U[I%QPgH";
      Utility.replace("U[I%QPgH", "U[I%QPgH", "U[I%QPgH");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(87, 87);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[=EE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=EE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Utility.compactClassName("freturn", "freturn", false);
      String string0 = Utility.signatureToString("VG~a_19zi6[|Ep");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      // Undeclared exception!
      Utility.replace(",}yU/)mM<H=A#WE 0v4", "", "if_icmplt");
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.isJavaIdentifierPart('z');
      // Undeclared exception!
      try { 
        Utility.signatureToString("[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = Utility.compactClassName("U[I%QPgH");
      assertEquals("U[I%QPgH", string0);
      
      String string1 = Utility.convertString(",j+\"q}j.6*c9kC71");
      assertEquals(",j+\\\"q}j.6*c9kC71", string1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(87, 87);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E-u+yMrgPDgNjbo:", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E-u+yMrgPDgNjbo:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u008A');
      Utility.isSet(91, 91);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = Utility.isSet(72, 72);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("null", string0);
      
      short short0 = Utility.searchOpcode("areturn");
      assertEquals((short)176, short0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Utility.signatureToString("StackMapTable", false);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = Utility.replace("\t<", "\t<", "\t<");
      assertEquals("\t<", string0);
      
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      String string1 = Utility.format(16, 16, false, '~');
      assertEquals("~~~~~~~~~~~~~~16", string1);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      boolean boolean0 = Utility.isSet(72, 72);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)89;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$a9$e9Q5Y", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Utility.compactClassName("U[I%QPgH");
      Utility.isJavaIdentifierPart('<');
      // Undeclared exception!
      try { 
        Utility.signatureToString("U[I%QPgH", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U[I%QPgH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.compactClassName("U[I%[PYH");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("U[I%[PYH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U[I%[PYH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("\"N3IfNf<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"N3IfNf<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u008A');
      try { 
        Utility.typeOfMethodSignature("org.apache.bcel.classfile.LocalVariableTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.LocalVariableTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = Utility.compactClassName("PMGClass(", false);
      assertEquals("PMGClass(", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-46);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)25;
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-38);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Utility.compactClassName("", true);
      String string0 = Utility.signatureToString("LCode;V", true);
      assertEquals("Code", string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = Utility.compactClassName("@>R-\"x:7>V", true);
      assertEquals("@>R-\"x:7>V", string0);
      
      String string1 = Utility.convertString("@>R-\"x:7>V");
      assertEquals("@>R-\\\"x:7>V", string1);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = Utility.replace("U[I%QPgH", "U[I%QPgH", "U[I%QPgH");
      assertEquals("U[I%QPgH", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('<');
      assertFalse(boolean0);
      
      String string1 = Utility.signatureToString("FAIi", false);
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Utility.clearBit((-1508), (-1508));
      String[] stringArray0 = Constants.ATTRIBUTE_NAMES;
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = "!wl+Aj[M3`6gj3";
      try { 
        Utility.typeOfSignature("!wl+Aj[M3`6gj3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wl+Aj[M3`6gj3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      boolean boolean0 = false;
      Utility.signatureToString("SourceFile", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("short", "SourceFile", "aastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Utility.isSet(72, 72);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Utility.compactClassName("U[I%QPgH");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = Utility.compactClassName("U[I%QPgH");
      assertEquals("U[I%QPgH", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('<');
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface(1774);
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("NMIxaI!gF|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NMIxaI!gF|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Utility.compactClassName("c9P*A$rKwa2$D");
      Utility.isJavaIdentifierPart('&');
      // Undeclared exception!
      try { 
        Utility.signatureToString("c9P*A$rKwa2$D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c9P*A$rKwa2$D'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "putstatic";
      stringArray0[1] = "putstatic";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = Utility.compactClassName("U[I%QPgH");
      assertEquals("U[I%QPgH", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("? super ", (String) null, "? super ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("U[I%QPgH", (String) null, "U[I%QPgH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U[I%QPgH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("U[I%QPgH", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U[I%QPgH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Utility.isJavaIdentifierPart('P');
      PrintStream printStream0 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Utility.replace("", "kd", "g^'J(0PCEqSIB<");
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("02V]A/Y,2>2yGsd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 02V]A/Y,2>2yGsd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = "K\\8Ib!|QrT]/";
      try { 
        Utility.methodSignatureReturnType("P5 22*#Y\"+eMm`)~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Utility.compactClassName("=|}Gb$R5#-", false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\t\t#";
      objectArray0[1] = (Object) "\t\t#";
      objectArray0[2] = (Object) "=|}Gb$R5#-";
      objectArray0[3] = (Object) "=|}Gb$R5#-";
      objectArray0[4] = (Object) "=|}Gb$R5#-";
      objectArray0[5] = (Object) "\t\t#";
      objectArray0[6] = (Object) "=|}Gb$R5#-";
      objectArray0[7] = (Object) "\t\t#";
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{\t\t#, \t\t#, =|}Gb$R5#-, =|}Gb$R5#-, =|}Gb$R5#-, \t\t#, =|}Gb$R5#-, \t\t#}", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("", string1);
      
      String string2 = Utility.compactClassName("~G}z+L");
      assertEquals("~G}z+L", string2);
      
      String string3 = Utility.accessToString(105);
      assertEquals("public static synchronized volatile", string3);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V+n ewK^wPtwGwM=B.");
      assertEquals("void", string0);
      
      Utility.compactClassName("new", true);
      String string1 = Utility.compactClassName("getfield", "BYNVvn`YIv1", true);
      assertEquals("getfield", string1);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LYVta,");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      String string0 = Utility.accessToString((int) (byte)14, false);
      assertEquals("private protected static", string0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)14;
      byteArray2[1] = (byte)14;
      byteArray2[2] = (byte)14;
      boolean boolean0 = Utility.equals(byteArray1, byteArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("wide", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "invokeinterface";
      objectArray0[1] = (Object) "invokeinterface";
      objectArray0[2] = (Object) "invokeinterface";
      objectArray0[3] = (Object) "invokeinterface";
      objectArray0[4] = (Object) "invokeinterface";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "invokeinterface";
      objectArray0[7] = (Object) "invokeinterface";
      objectArray0[8] = (Object) "invokeinterface";
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Utility.compactClassName("=|}Gb$R5#-", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("R!1#6", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R!1#6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Utility.compactClassName("=|}Gb$R5#-", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("X#|8{;#dd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X#|8{;#dd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Utility.isSet(72, 72);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature("PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      int int0 = 72;
      Utility.isSet(72, 72);
      Utility.clearBit(72, 72);
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("5}b'`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5}b'`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = Utility.replace("g?|", "g?|", "g?|");
      assertEquals("g?|", string0);
      
      String string1 = Utility.accessToString(59, true);
      assertEquals("public private static final", string1);
      
      String string2 = Utility.accessToString((-1092), true);
      assertEquals("protected static final transient native strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Utility.replace("g?|", "g?|", "g?|");
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("EzyU\"p?78 FN|)m8d>=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EzyU\"p?78 FN|)m8d>=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = Utility.accessToString(1378, true);
      assertEquals("private volatile native abstract", string0);
      
      String string1 = Utility.compactClassName("ifnonnull", "private volatile native abstract", true);
      assertEquals("ifnonnull", string1);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Utility.isSet(72, 72);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("? super ", (String) null, "? super ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String string0 = Utility.accessToString(1378, true);
      assertEquals("private volatile native abstract", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('b');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = Utility.replace("g?|", "g?|", "g?|");
      String string1 = Utility.replace("g?|", "s]Mcrb", "g?|");
      assertTrue(string1.equals((Object)string0));
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = "5;<9?K~u";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5;<9?K~u";
      stringArray0[1] = "5;<9?K~u";
      stringArray0[2] = "5;<9?K~u";
      Utility.methodTypeToSignature("5;<9?K~u", stringArray0);
      Utility.compactClassName("5;<9?K~u", "5;<9?K~u", true);
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, true);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.accessToString(66);
      Utility.searchOpcode("private volatile");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "private volatile";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BEB$Lv sXD}5?xa=");
      objectArray0[5] = (Object) "private volatile";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      Utility.printArray(objectArray0);
      Utility.setBit(163, 66);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "TKiU1yV=vZ l03vaj", "double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.fillup("D*o", 2773, true, 'l');
      String string1 = Utility.fillup("q", 2773, true, 'U');
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D*o";
      stringArray0[1] = string1;
      stringArray0[3] = "0=";
      stringArray0[5] = string0;
      stringArray0[6] = "D*o";
      stringArray0[7] = "D*o";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("0=", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Utility.fillup("q", 76, true, 'U');
      Utility.fillup("D:R%6,LX;", 76, true, ';');
      Utility.accessToString(74, false);
      try { 
        Utility.typeOfMethodSignature("LwDBCdm1;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LwDBCdm1;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Mt0V9t}d", false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)25;
      byteArray1[1] = (byte) (-9);
      Utility.equals(byteArray1, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Utility.getSignature(". Constant pool size is: ");
      Utility.clearBit((-169), 0);
      Utility.getSignature(". Constant pool size is: ");
      Utility.typeOfSignature("B1X%g");
      Utility.isSet(0, (-170));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.fillup(". Constant pool size is: ", (-83), true, 'U');
      Utility.fillup("D:R%6,LX;", (byte)60, false, 'X');
      try { 
        Utility.methodSignatureArgumentTypes("caload", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: caload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("K8Ib!|QrT]/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K8Ib!|QrT]/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Utility.classOrInterface(40);
      Utility.clearBit(40, 40);
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K8Ib!|QrT]/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K8Ib!|QrT]/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      String string0 = "dstore_3";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{java.lang.Object@6753d9a7, java.lang.Object@4a3702cc}", "{java.lang.Object@6753d9a7, java.lang.Object@4a3702cc}", "dstore_3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@6753d9a7, java.lang.Object@4a3702cc}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = Utility.fillup("D*o", 2773, true, 'l');
      Utility.fillup("q", 76, true, 'U');
      Utility.fillup("D:R%6,LX;", 76, true, ';');
      try { 
        Utility.methodSignatureArgumentTypes(string0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D*ollllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String string0 = Utility.compactClassName("UZNW,`Xn+7U1Fr5oZ?", "", false);
      assertEquals("UZNW,`Xn+7U1Fr5oZ?", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)0;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("i$f1$T$c8$A$A$l$A", string1);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Utility.getSignature(". Constant pool size is: ");
      int int0 = (-169);
      Utility.clearBit((-169), 0);
      Utility.getSignature(". Constant pool size is: ");
      Utility.typeOfSignature("B1X%g");
      Utility.isSet(0, (-170));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("K8Ib!|QrT]/", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K8Ib!|QrT]/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Utility.accessToString(0, true);
      Utility.format(0, 0, false, '<');
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Utility.compactClassName("=|}Gb$R5#-", false);
      try { 
        Utility.methodSignatureReturnType("\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = Utility.accessToString(1356, true);
      assertEquals("protected static volatile native abstract", string0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Utility.accessToString((-203));
      Utility.setBit(0, (-2115));
      MockFile mockFile0 = new MockFile("public protected final synchronized native interface abstract strictfp synthetic annotation enum", "public protected final synchronized native interface abstract strictfp synthetic annotation enum");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "public protected final synchronized native interface abstract strictfp synthetic annotation enum");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      Object[] objectArray0 = new Object[1];
      mockPrintStream1.print(1.0);
      mockFile0.toURL();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte)0;
      mockPrintStream0.write(byteArray0);
      objectArray0[0] = (Object) printStream0;
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      assertEquals(168L, mockFile0.length());
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-127);
      byteArray1[1] = (byte) (-84);
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte)0;
      Utility.equals(byteArray1, byteArray1);
      String string0 = Utility.format(80, 0, true, 'e');
      assertEquals("80", string0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Utility.accessToString((-548), false);
      Utility.format(2653, (-548), false, ':');
      byte[] byteArray0 = Utility.decode("2653", false);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("32 36 35 33");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `32 36 35 33'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.classOrInterface(40);
      Utility.clearBit(40, 40);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "class";
      objectArray0[5] = (Object) "class";
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) "class";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.classOrInterface(122);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      int int0 = Utility.setBit(4999, 0);
      assertEquals(4999, int0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("");
      int int0 = (-1826);
      Utility.accessToString((-1826));
      Utility.classOrInterface((-1826));
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "{java.lang.Object@71b4a6b1, java.lang.Object@74a40191, java.lang.Object@4e60654f, java.lang.Object@152ac512, java.lang.Object@41ff6828, java.lang.Object@1583410f, java.lang.Object@580404ed, java.lang.Object@1b4558aa}", "lXF}{m#L)II");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String string0 = "Ljava/lang/Object";
      Utility.typeOfSignature("Ljava/lang/Object");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byte byte0 = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byte byte1 = (byte)98;
      byteArray0[5] = (byte)98;
      Utility.toHexString(byteArray0);
      String string1 = "";
      String string2 = "c\"+Cd2ZrL";
      boolean boolean0 = false;
      int int0 = 222;
      LocalVariable[] localVariableArray0 = new LocalVariable[4];
      int int1 = 1974;
      Constant[] constantArray0 = new Constant[3];
      File file0 = MockFile.createTempFile("0e 0e 07 0e 0e 62", "multianewarray");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Utility.classOrInterface((-660));
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Unreachable default case reached!";
      stringArray0[1] = "Unreachable default case reached!";
      stringArray0[2] = "Unreachable default case reached!";
      stringArray0[3] = "Unreachable default case reached!";
      String string0 = Utility.methodTypeToSignature("Unreachable default case reached!", stringArray0);
      assertEquals("(LUnreachable;LUnreachable;LUnreachable;LUnreachable;)LUnreachable;", string0);
      
      String string1 = Utility.printArray((Object[]) stringArray0);
      assertNotNull(string1);
      assertEquals("{Unreachable default case reached!, Unreachable default case reached!, Unreachable default case reached!, Unreachable default case reached!}", string1);
      
      String string2 = Utility.accessToString((-1555), true);
      assertEquals("public protected static volatile transient native strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = "yCaa>G";
      boolean boolean0 = true;
      try { 
        Utility.decode("yCaa>G", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Utility.accessToString(0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("X@j+", "X@j+", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Utility.accessToString((-1439), false);
      Utility.fillup("public synchronized volatile interface strictfp synthetic annotation enum", 0, false, 'x');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "public synchronized volatile interface strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "public synchronized volatile interface strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "public synchronized volatile interface strictfp synthetic annotation enum";
      objectArray0[3] = (Object) "public synchronized volatile interface strictfp synthetic annotation enum";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureArgumentTypes("public synchronized volatile interface strictfp synthetic annotation enum, public synchronized volatile interface strictfp synthetic annotation enum, public synchronized volatile interface strictfp synthetic annotation enum, public synchronized volatile interface strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public synchronized volatile interface strictfp synthetic annotation enum, public synchronized volatile interface strictfp synthetic annotation enum, public synchronized volatile interface strictfp synthetic annotation enum, public synchronized volatile interface strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = "Hd?1O<dd";
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Hd?1O<dd", "Hd?1O<dd", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hd?1O<dd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = Utility.compactClassName("^&)H", "/t", false);
      assertEquals("^&)H", string0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String string0 = Utility.accessToString(2940);
      String string1 = Utility.convertString("protected static final synchronized volatile native interface strictfp");
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "protected static final synchronized volatile native interface strictfp";
      objectArray0[1] = (Object) "protected static final synchronized volatile native interface strictfp";
      objectArray0[2] = (Object) "protected static final synchronized volatile native interface strictfp";
      objectArray0[3] = (Object) "protected static final synchronized volatile native interface strictfp";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "protected static final synchronized volatile native interface strictfp";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "protected static final synchronized volatile native interface strictfp";
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)123;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$u$5bD$z$A$db$A$7b", string2);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Utility.format((-546), (-546), true, 'h');
      Utility.fillup("-546", 236, true, 'v');
      Utility.setBit((-546), 184);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String string0 = "*f";
      // Undeclared exception!
      try { 
        Utility.signatureToString("*f", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = "nvND f8._<fX;!bR`J";
      try { 
        Utility.methodSignatureArgumentTypes("nvND f8._<fX;!bR`J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nvND f8._<fX;!bR`J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String string0 = "! ?";
      Utility.compactClassName("! ?");
      int int0 = 0;
      Utility.classOrInterface(0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Utility.isSet(72, 72);
      // Undeclared exception!
      try { 
        Utility.replace("? super ", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Utility.isSet((-1546), (-1546));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)53;
      Utility.equals(byteArray0, byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Locale locale0 = Locale.PRC;
      mockPrintStream0.flush();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) (byte)18;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "^Mz:RWJ", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(72, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String string0 = Utility.fillup("wDBCdm1", 0, true, 't');
      assertEquals("wDBCdm1", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wDBCdm1";
      stringArray0[1] = "wDBCdm1";
      stringArray0[2] = "wDBCdm1";
      stringArray0[3] = "wDBCdm1";
      String string1 = Utility.methodTypeToSignature("wDBCdm1", stringArray0);
      assertEquals("(LwDBCdm1;LwDBCdm1;LwDBCdm1;LwDBCdm1;)LwDBCdm1;", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("6f b5 17 5b 00", string2);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String string0 = Utility.getSignature("<iG;HA;T8");
      assertEquals("L<iG;HA;T8;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)39;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00 42 df 00 00 00 33 00 27", string1);
  }
}
