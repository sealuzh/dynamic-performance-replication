/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 14:19:33 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<HashMap<String, Integer>, Map<String, Integer>> hashMap1 = new HashMap<HashMap<String, Integer>, Map<String, Integer>>();
      Class<Map> class0 = Map.class;
      hashMap1.put(hashMap0, hashMap0);
      DoubleKeyMap<HashMap<String, Integer>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, Integer>(hashMap1, class0);
      Map<String, Integer> map0 = doubleKeyMap0.get(hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Object>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, HashMap<Object, Integer>>();
      Map<Map<Object, Object>, HashMap<Object, Integer>> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap0.put((Object) "", (Object) "", (Object) integer0);
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(object0, "", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      DoubleKeyMap<Map<Object, Object>, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Map<Object, Object>, String, Integer>();
      Integer integer0 = doubleKeyMap2.remove(map0, ",oaw.6k");
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap3 = new DoubleKeyMap<Object, String, Object>(hashMap0);
      Object object0 = doubleKeyMap3.put((Object) integer0, "^vIY=", (Object) doubleKeyMap3);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, Map<Object, String>>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>();
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put((Map<Object, Object>) null, (Map<Object, Object>) null, map0);
      Map<Map<Object, Object>, Map<Object, String>> map1 = doubleKeyMap0.remove((Map<Object, Object>) null);
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Map<Object, Object>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<Object, Object>>, Object, String>();
      DoubleKeyMap<Object, Object, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Map<Object, String> map0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) doubleKeyMap0, (Map<Object, String>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, String>();
      Map<String, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(map0);
      Object object0 = doubleKeyMap1.get("", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Integer, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Integer, HashMap<Integer, String>>();
      Integer integer0 = new Integer(0);
      HashMap<Integer, String> hashMap0 = doubleKeyMap0.get((Map<String, String>) null, integer0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String>();
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      Map<Object, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, String>>((Map<Object, Map<String, HashMap<Object, String>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap0.get((Map<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Integer integer0 = new Integer(14);
      doubleKeyMap0.put((Object) "", (Object) "", (Object) integer0);
      Object object0 = doubleKeyMap0.remove((Object) "", (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Object>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put("mHGK+Mm", (Map<Object, Object>) null, hashMap0);
      HashMap<Object, Integer> hashMap1 = doubleKeyMap0.put("mHGK+Mm", (Map<Object, Object>) null, hashMap0);
      assertSame(hashMap0, hashMap1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer0 = doubleKeyMap1.get((Object) doubleKeyMap0, "'4_0x");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      doubleKeyMap0.put("", (Object) null, (Object) "");
      Object object0 = doubleKeyMap0.get("", (Object) null);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Map<Map<Object, Object>, HashMap<Object, Integer>>> hashMap0 = new HashMap<String, Map<Map<Object, Object>, HashMap<Object, Integer>>>();
      DoubleKeyMap<String, Map<Object, Object>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, HashMap<Object, Integer>>(hashMap0);
      HashMap<Map<Object, Object>, HashMap<Object, Integer>> hashMap1 = new HashMap<Map<Object, Object>, HashMap<Object, Integer>>();
      hashMap0.put("", hashMap1);
      Map<Map<Object, Object>, HashMap<Object, Integer>> map0 = doubleKeyMap0.remove("");
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Object>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, HashMap<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put("HGK+Mm", (Map<Object, Object>) null, hashMap0);
      HashMap<Object, Integer> hashMap1 = doubleKeyMap0.remove("HGK+Mm", (Map<Object, Object>) null);
      assertTrue(hashMap1.isEmpty());
  }
}
