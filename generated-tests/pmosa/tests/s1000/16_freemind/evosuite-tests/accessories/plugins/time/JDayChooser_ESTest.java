/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:39:47 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.view.mindmapview.MapView;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalTime;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Vector;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;
import javax.swing.JWindow;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.multi.MultiTableUI;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.StyleContext;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xerces.impl.xs.SchemaGrammar;
import org.apache.xerces.impl.xs.XSDDescription;
import org.apache.xerces.util.SymbolTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getRootPane();
      jDayChooser0.addFocusListener(jYearChooser0);
      jDayChooser0.setName("");
      jDayChooser0.init();
      jDayChooser0.setFocus();
      jDayChooser0.transferFocusDownCycle();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getAutoscrolls();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.clearSelectedPath();
      jDayChooser0.getWidth();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, 0, 1351, 1351, 'i', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.getMenuSelectionManager();
      jDayChooser0.keyTyped(menuKeyEvent0);
      jDayChooser0.getMaxSelectableDate();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.getLocale();
      jDayChooser0.setForeground(color0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDecorationBordersVisible(false);
      FocusEvent focusEvent0 = null;
      try {
        focusEvent0 = new FocusEvent((Component) null, 0, false, (Component) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setAlignmentX(14);
      jDayChooser_DecoratorButton0.getActionCommand();
      jDayChooser0.getAncestorListeners();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDay();
      LocalTime localTime0 = MockLocalTime.now();
      Time time0 = Time.valueOf(localTime0);
      jDayChooser0.setMaxSelectableDate(time0);
      jDayChooser0.getSelectedDay();
      int int0 = 831;
      time0.setTime(14);
      jDayChooser_DecoratorButton0.transferFocus();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 2046, 0L, 831, 2046, '<', 2046);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 33, 49, 33, ',');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxDayCharacters();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.decorationBordersVisible = false;
      jDayChooser0.updateUI();
      jDayChooser0.repaint();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Element element0 = defaultStyledDocument0.getBidiRootElement();
      LabelView labelView0 = new LabelView(element0);
      labelView0.getBackground();
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setSundayForeground((Color) null);
      Timestamp timestamp0 = new Timestamp(0L);
      jDayChooser0.setMinSelectableDate(timestamp0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate((-2981), (-2981), (-2262));
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      int int0 = 0;
      jDayChooser0.setYear(0);
      jDayChooser0.isDayBordersVisible();
      Color color0 = null;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      String string0 = "}YXf&zH";
      // Undeclared exception!
      try { 
        mockSimpleDateFormat0.applyLocalizedPattern("}YXf&zH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern  character 'Y'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JDayChooser jDayChooser1 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setVisible(true);
      jDayChooser1.paintImmediately(131, 195, 131, 131);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.updateUI();
      boolean boolean0 = jDayChooser1.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KeyEvent.getKeyModifiersText(8);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusTraversalPolicy();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8, (-810L), 8, 8, 'c');
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = MapView.standardNodeTextColor;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'c';
      floatArray0[1] = (float) (-1939);
      floatArray0[2] = (float) 8;
      floatArray0[3] = (float) 9;
      floatArray0[4] = (float) (-810L);
      floatArray0[5] = (float) (-810L);
      floatArray0[6] = (float) (-1939);
      floatArray0[7] = (float) 9;
      Color.RGBtoHSB(9, (-1939), 8, floatArray0);
      SystemColor systemColor0 = SystemColor.textText;
      systemColor0.getColorComponents(floatArray0);
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setMaxDayCharacters((-1434));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser0.setMaxDayCharacters(1255);
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      Locale locale0 = Locale.JAPAN;
      jDayChooser0.getGraphicsConfiguration();
      String string0 = "West";
      Locale.setDefault(locale0);
      Locale.forLanguageTag("West");
      locale0.getUnicodeLocaleAttributes();
      jDayChooser0.setLocale(locale0);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      MultiTableUI multiTableUI0 = new MultiTableUI();
      // Undeclared exception!
      try { 
        multiTableUI0.getMaximumSize((JComponent) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setVerifyInputWhenFocusTarget(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.getBackground();
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser1.drawDays();
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DebugGraphics.flashColor();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SymbolTable symbolTable0 = new SymbolTable(41);
      SchemaGrammar schemaGrammar0 = new SchemaGrammar("day", (XSDDescription) null, symbolTable0);
      schemaGrammar0.getImportedGrammars();
      JTable jTable0 = new JTable((Vector) null, (Vector) null);
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JMenu jMenu0 = new JMenu("day", false);
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      JMenuItem jMenuItem0 = jMenu0.add((Action) defaultEditorKit_DefaultKeyTypedAction0);
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jTable0, 41, 41, 41, 4, 'Z', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      SystemColor systemColor0 = SystemColor.windowText;
      Color color0 = systemColor0.brighter();
      jDayChooser0.setForeground(color0);
      Color color1 = DebugGraphics.flashColor();
      jDayChooser0.setDecorationBackgroundColor(color1);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setSundayForeground(color0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      FocusEvent focusEvent0 = new FocusEvent(jMonthChooser0, 8928, false, jMonthChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate(3158, (-59), (-59));
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(23);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 15, "14", 15);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.paint((Graphics) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Insets insets0 = jDayChooser0.getInsets();
      jDayChooser0.getInsets(insets0);
      jDayChooser0.setEnabled(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 38;
      floatArray0[1] = (float) 38;
      floatArray0[2] = (float) 38;
      floatArray0[3] = (float) 38;
      float[] floatArray1 = Color.RGBtoHSB(38, 38, 38, floatArray0);
      SystemColor systemColor0 = SystemColor.textText;
      systemColor0.getColorComponents(floatArray1);
      jDayChooser0.setWeekdayForeground(systemColor0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.getComponents();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser1, 38, (-3634L), 38, 388, 'D', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser1.keyTyped(menuKeyEvent0);
      jDayChooser1.setMaxDayCharacters(2358);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser1.getMinSelectableDate();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getWeekdayForeground();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      int int0 = 90;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 90, 0L, (-1018), 3187, '=');
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      keyEvent0.setSource((Object) null);
      int int1 = 34;
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 3187, 3187, 3187, 34, 'B');
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 90, 0L, (-1018), 3187, '=');
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      keyEvent0.setSource((Object) null);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 3187, 3187, 3187, 39, 'B');
      jDayChooser1.keyPressed(keyEvent1);
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser1.getBackground();
      KeyEvent keyEvent2 = new KeyEvent(jDayChooser1, 90, (-1018), (-3083), (-1018), 'B');
      jDayChooser0.keyPressed(keyEvent1);
      assertEquals(15, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 90, 0L, 19, (-1018), 'H');
      jDayChooser0.getVerifyInputWhenFocusTarget();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 39, 19, (-2), 33, 'P');
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.desktop;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-430), (-430), (-430), 38, 'r');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 0L, 33, 40, 'X');
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("zbK");
      KeyEvent keyEvent1 = new KeyEvent(jRadioButtonMenuItem0, 40, 33, (-2411), (-3350), 'S');
      KeyEvent keyEvent2 = new KeyEvent(jDayChooser0, 2899, 0L, 10, 160, 'L');
      jDayChooser0.keyPressed(keyEvent2);
      Color color0 = jDayChooser0.selectedColor;
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocusInWindow();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, (-7L), 40, 40, 'Z');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1968), (-1968), (-1968), 35, 'r');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMaxSelectableDate();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-698), 1307, 1307, 36, 'r');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 'y', 38, 38, 'y');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 38, 38, 38, 37, '(');
      keyEvent1.paramString();
      jDayChooser0.keyPressed(keyEvent1);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton[] jButtonArray0 = new JButton[3];
      jDayChooser0.getSelectedDay();
      jButtonArray0[0] = null;
      ImageIcon imageIcon0 = new ImageIcon();
      JButton jButton0 = new JButton(imageIcon0);
      jButtonArray0[1] = jButton0;
      JButton jButton1 = new JButton("day", imageIcon0);
      jButtonArray0[2] = jButton1;
      jDayChooser0.weeks = jButtonArray0;
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }
}
