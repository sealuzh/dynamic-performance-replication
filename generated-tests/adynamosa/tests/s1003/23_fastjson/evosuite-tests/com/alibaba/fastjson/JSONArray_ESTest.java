/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 02:09:34 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.URISyntaxException;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 867;
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray0.addAll(827, (Collection<?>) jSONArray0);
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      simplePropertyPreFilter0.apply(jSONSerializer0, (Object) null, "yyyy-MM-dd HH:mm:ss");
      simplePropertyPreFilter0.setMaxLevel(989);
      simplePropertyPreFilter0.getClazz();
      JSONArray jSONArray2 = new JSONArray();
      JSONArray jSONArray3 = (JSONArray)jSONArray1.clone();
      jSONArray0.getJSONObject(1003);
      SerializeConfig serializeConfig0 = new SerializeConfig(867);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3089);
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      int int1 = 841;
      jSONArray2.addAll((Collection<?>) jSONArray3);
      jSONArray0.getByteValue(864);
      Class<Feature> class0 = Feature.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-2619), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "@type";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>();
      jSONArray0.contains("1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(867);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringReader stringReader0 = new StringReader("o0[kWpXFrJcsy/*m6u");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 842);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      JSONObject jSONObject0 = new JSONObject(true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      serializeConfig0.setPropertyNamingStrategy(propertyNamingStrategy0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, serializeConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      jSONArray0.clone();
      jSONArray1.getJSONObject(3089);
      SerializeConfig serializeConfig1 = new SerializeConfig(3089);
      ParserConfig parserConfig1 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("", parserConfig1, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      jSONArray1.fluentSet(462, serializerFeature0);
      jSONArray2.getFloatValue(97);
      jSONArray0.getFloat(989);
      JSONArray jSONArray3 = jSONArray1.fluentRemoveAll(jSONArray2);
      jSONArray3.setRelatedArray(jSONArray2);
      JSONArray jSONArray4 = new JSONArray(jSONArray1);
      JSONArray jSONArray5 = new JSONArray(742);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray5.getObject(860, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 860, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(188);
      StringReader stringReader0 = new StringReader("E\"B#{Tv-d=p");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 3089);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      JSONObject jSONObject0 = new JSONObject(true);
      JSON.handleResovleTask(defaultJSONParser0, (Object) "E\"B#{Tv-d=p");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      serializeConfig0.setPropertyNamingStrategy(propertyNamingStrategy0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONObject0);
      jSONArray0.isEmpty();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      String[] stringArray0 = new String[12];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.isEmpty();
      int int0 = 3600;
      jSONArray1.remove((Object) jSONArray0);
      int int1 = (-319);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(867);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(842);
      jSONArray0.fluentSet(842, "@type");
      String[] stringArray0 = new String[12];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 843
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<Boolean> linkedHashSet1 = new LinkedHashSet<Boolean>();
      jSONArray0.contains(fileSystemHandling0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(1118);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1118, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(852);
      boolean boolean0 = jSONArray0.containsAll(jSONArray0);
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Feature feature0 = Feature.NonStringKeyAsString;
      ClassLoader.getSystemClassLoader();
      Feature[] featureArray0 = new Feature[1];
      featureArray0[0] = feature0;
      jSONArray0.size();
      JSONArray jSONArray1 = new JSONArray(989);
      boolean boolean1 = jSONArray0.addAll(0, (Collection<?>) linkedHashSet0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature feature0 = Feature.SupportNonPublicField;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1171, feature0);
      jSONArray0.getString(1171);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeConfig serializeConfig1 = new SerializeConfig(false);
      JSON.toJSON((Object) serializeConfig0, serializeConfig1);
      int int0 = 1697;
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(3089, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1172
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 867;
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      int int1 = 462;
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      jSONArray0.addAll(810, (Collection<?>) jSONArray2);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONArray jSONArray3 = jSONArray1.fluentSet(989, serializeConfig0);
      jSONArray1.isEmpty();
      jSONArray3.getJSONObject(462);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      jSONArray1.getObject(3089, class0);
      jSONArray2.remove(989);
      Feature feature0 = Feature.AllowComment;
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(feature0, serializeConfig0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      jSONArray0.addAll(810, (Collection<?>) jSONArray2);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Class<Integer> class0 = Integer.class;
      JSONArray jSONArray3 = jSONArray1.fluentSet(989, serializeConfig0);
      jSONArray1.isEmpty();
      jSONArray3.getJSONObject(462);
      jSONArray3.contains(class0);
      Class<Object> class1 = Object.class;
      jSONArray1.toJavaList(class1);
      jSONArray0.fluentAddAll(3089, (Collection<?>) jSONArray2);
      assertEquals(6944, jSONArray2.size());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(989, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 868
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      Class<JSONObject> class0 = JSONObject.class;
      serializeConfig0.config(class0, serializerFeature0, false);
      jSONArray2.containsAll(jSONArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.DEFAULT_TYPE_KEY = "@type";
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      int int0 = 82;
      Class<SerializerFeature> class1 = SerializerFeature.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#8D0TfW|QVojg{r#'F");
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.serializer.SerializerFeature
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONArray0.addAll(989, (Collection<?>) jSONArray2);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Class<Integer> class0 = Integer.class;
      serializeConfig0.config(class0, serializerFeature0, false);
      JSONArray jSONArray3 = jSONArray1.fluentSet(989, serializeConfig0);
      jSONArray3.addAll(3119, (Collection<?>) jSONArray2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "@type";
      stringArray0[3] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.setMaxLevel(3119);
      simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        jSONArray3.getObject(989, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.serializer.SerializeConfig@76
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 867;
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(989, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 868
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      jSONArray0.isEmpty();
      boolean boolean0 = false;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Class<Integer> class0 = Integer.class;
      serializeConfig0.config(class0, serializerFeature0, false);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, serializeConfig0);
      jSONArray1.isEmpty();
      jSONArray2.getJSONObject(462);
      jSONArray2.getBooleanValue(1);
      Class<JSONArray> class1 = JSONArray.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("Ljava/lang/Object;Ljava/lang/String;", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : Ljava/lang/Object;Ljava/lang/String;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      jSONArray0.addAll(827, (Collection<?>) jSONArray2);
      String[] stringArray0 = new String[12];
      stringArray0[0] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>();
      jSONArray0.contains(simplePropertyPreFilter0);
      jSONArray0.getIntValue(989);
      jSONArray2.addAll((Collection<?>) jSONArray1);
      jSONArray2.get(825);
      assertEquals(6944, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializeConfig0.config(class0, serializerFeature0, false);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3048, serializeConfig0);
      jSONArray1.isEmpty();
      jSONArray1.getJSONObject(17);
      jSONArray1.getObject(828, (Type) class0);
      Class<RoundingMode> class1 = RoundingMode.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      ListIterator<Object> listIterator0 = jSONArray1.listIterator();
      jSONArray1.equals(listIterator0);
      assertTrue(jSONArray1.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      jSONArray0.fluentSet(867, "@type");
      Integer integer0 = new Integer(417);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@type";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.setMaxLevel(867);
      jSONArray0.fluentAdd((Object) "@type");
      simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(867, (Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 867;
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      jSONArray0.addAll(829, (Collection<?>) jSONArray2);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Class<Integer> class0 = Integer.class;
      serializeConfig0.config(class0, serializerFeature0, false);
      jSONArray1.fluentSet(989, serializeConfig0);
      jSONArray2.fluentRemove((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(989);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      serializeConfig0.config(class0, serializerFeature0, false);
      jSONArray0.isEmpty();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray0.containsAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(867, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.ByteArrayInputStream
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.getFloatValue(22);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(867);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      JSON.setDefaultTypeKey("yyyy-MM-dd HH:mm:ss");
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      serializeConfig0.getObjectWriter(class0);
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullListAsEmpty;
      serializeConfig0.config(class0, serializerFeature1, false);
      int int0 = 17;
      JSONArray jSONArray1 = jSONArray0.fluentSet(17, serializerFeature0);
      jSONArray0.containsAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : MapSortField
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(867);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      jSONArray0.fluentSet(867, "@type");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      Class<JSONArray> class0 = JSONArray.class;
      serializeConfig0.config(class0, serializerFeature0, false);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3277, (Object) null);
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(867);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(866);
      JSONArray jSONArray1 = jSONArray0.fluentSet(866, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray2.getInteger(512);
      jSONArray1.addAll(989, (Collection<?>) jSONArray0);
      Predicate.isEqual((Object) jSONArray3);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray1.fluentAddAll(989, (Collection<?>) linkedList0);
      jSONArray0.addAll((Collection<?>) jSONArray2);
      jSONArray2.getLongValue(2886);
      jSONArray0.getString(3089);
      // Undeclared exception!
      try { 
        jSONArray3.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullListAsEmpty;
      serializeConfig0.config(class0, serializerFeature1, false);
      JSONArray jSONArray1 = jSONArray0.fluentSet(17, serializerFeature0);
      jSONArray0.isEmpty();
      jSONArray0.containsAll(jSONArray1);
      jSONArray1.toArray();
      jSONArray1.getDouble(1);
      jSONArray1.getObject(0, class0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue((-296));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      int int0 = 999;
      JSONArray jSONArray1 = new JSONArray(999);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int1 = 822;
      // Undeclared exception!
      try { 
        jSONArray1.remove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(159);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2766, (Object) null);
      jSONArray0.isEmpty();
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray3 = (JSONArray)jSONArray0.clone();
      jSONArray2.fluentAdd((Object) jSONArray1);
      jSONArray0.getDate(853);
      JSONObject jSONObject0 = new JSONObject();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      jSONObject0.fluentPutAll(concurrentHashMap0);
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      jSONArray3.add(41, (Object) hashMap0);
      jSONArray2.getBigDecimal(41);
      jSONArray0.retainAll(jSONArray3);
      jSONArray0.equals(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray2.getTimestamp(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2766
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.fluentAddAll(29, (Collection<?>) jSONArray0);
      JSON.parse((String) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jSONArray2.getByte(867);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray3.replaceAll((UnaryOperator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullListAsEmpty;
      boolean boolean0 = false;
      serializeConfig0.config(class0, serializerFeature1, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      JSONArray jSONArray1 = jSONArray0.fluentSet(47, serializerFeature0);
      jSONArray0.isEmpty();
      jSONArray0.containsAll(jSONArray1);
      jSONArray0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : MapSortField
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.getFloat(456);
      jSONArray1.getInteger(437);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        jSONArray1.addAll((-2767), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2767, Size: 868
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      jSONArray0.fluentSet(867, "@type");
      jSONArray0.getFloatValue(22);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      StringBuffer stringBuffer0 = new StringBuffer(989);
      JSON.parseArray("");
      Class<Field> class0 = Field.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("F^HoJS^-47", hashMap0);
      Class<JSONArray> class1 = JSONArray.class;
      FieldInfo.getFieldType(class1, class1, class0);
      jSONArray0.getLongValue(0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(881);
      JSONArray jSONArray1 = jSONArray0.fluentSet(881, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll(1, (Collection<?>) jSONArray1);
      JSONArray jSONArray4 = jSONArray1.fluentRemove((Object) "1.2.46");
      jSONArray1.clone();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray2.forEach(consumer0);
      jSONArray3.getDate(983);
      jSONArray4.add(137, (Object) jSONArray1);
      jSONArray4.getBigDecimal(1);
      jSONArray1.retainAll(jSONArray4);
      jSONArray4.equals((Object) null);
      jSONArray4.getTimestamp(989);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(8192);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8192, Size: 3529
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(159);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2773, (Object) null);
      jSONArray1.isEmpty();
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      jSONArray0.getComponentType();
      jSONArray0.getObject(2773, (Type) null);
      jSONArray0.fluentAdd((Object) feature0);
      int int0 = jSONArray0.lastIndexOf(feature0);
      assertEquals(2775, jSONArray0.size());
      assertEquals(2774, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      ZoneId.getAvailableZoneIds();
      jSONArray0.fluentAddAll(867, (Collection<?>) jSONArray1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) pipedInputStream0);
      jSONArray1.getJSONArray(1254);
      JSONArray jSONArray3 = jSONArray0.fluentAdd(58, (Object) jSONArray2);
      jSONArray3.getShortValue(848);
      // Undeclared exception!
      try { 
        JSON.parse("@type", 989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      JSON.parse((String) null);
      jSONArray0.getBooleanValue(196);
      jSONArray2.addAll(462, (Collection<?>) jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("@aR", concurrentSkipListMap0);
      LinkedHashSet<ByteArrayInputStream> linkedHashSet0 = new LinkedHashSet<ByteArrayInputStream>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature2;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      serializerFeatureArray0[5] = serializerFeature1;
      JSON.toJSONBytes((Object) linkedHashSet0, serializerFeatureArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONArray1.getTimestamp(2614);
      jSONArray0.getComponentType();
      jSONArray0.clone();
      jSONArray0.listIterator(134);
      jSONArray0.addAll((Collection<?>) jSONArray1);
      assertEquals(6944, jSONArray1.size());
      assertEquals(6944, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      Integer integer0 = new Integer(867);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) set0);
      jSONArray0.fluentAdd((Object) jSONArray2);
      jSONArray1.getJSONObject(989);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray3 = new JSONArray(jSONArray1);
      jSONArray3.remove((Object) integer0);
      JSONArray jSONArray4 = new JSONArray();
      jSONArray1.set(0, "yyyy-MM-dd HH:mm:ss");
      assertEquals(1468, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      charArrayWriter0.close();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(825, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 825, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(885);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      jSONArray0.set(861, (Object) null);
      jSONArray0.getSqlDate(244);
      jSONArray0.getJSONObject(837);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) pipedInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      jSONArray1.remove((Object) pipedInputStream1);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(837);
      // Undeclared exception!
      try { 
        jSONArray2.getLongValue(861);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.io.PipedInputStream@77105d62
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.getLongValue(808);
      int int0 = 0;
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) set0);
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONArray(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray2.getInteger(512);
      jSONArray1.addAll(989, (Collection<?>) jSONArray0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONArray3);
      jSONArray3.removeIf(predicate0);
      jSONArray3.fluentAdd((Object) jSONArray2);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      jSONArray1.getObject(3089, class0);
      jSONArray0.getByteValue(512);
      jSONArray1.getBigDecimal(3089);
      jSONArray0.isEmpty();
      jSONArray1.addAll((Collection<?>) jSONArray2);
      assertEquals(6944, jSONArray2.size());
      assertEquals(6944, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(188);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2766, (Object) null);
      jSONArray0.remove(844);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      // Undeclared exception!
      JSON.toJSONBytes((Object) jSONArray1, (SerializeFilter) null, serializerFeatureArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      jSONArray0.fluentSet(867, "@type");
      // Undeclared exception!
      try { 
        jSONArray0.getLong(867);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(885);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 244);
      JSONArray jSONArray1 = jSONArray0.fluentSet(244, pipedInputStream0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(244);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.io.PipedInputStream@38167b85
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      jSONArray0.fluentSet(867, "@type");
      int int0 = 0;
      jSONArray0.getFloatValue(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = (-2664);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-2664));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(989);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray1.setRelatedArray(jSONArray0);
      HashMap<InputStream, JSONObject> hashMap0 = new HashMap<InputStream, JSONObject>();
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      jSONArray0.add(0, (Object) roundingMode0);
      jSONArray0.setRelatedArray(roundingMode0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      jSONArray1.clone();
      jSONArray0.getFloat(999);
      // Undeclared exception!
      try { 
        JSON.parseObject("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.fluentAdd(0, (Object) fileSystemHandling0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.testdata.FileSystemHandling@3368a079
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray1.forEach(consumer0);
      jSONArray2.getDate(867);
      jSONArray2.containsAll(jSONArray0);
      jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray0.getBigInteger(7);
      JSONArray jSONArray3 = new JSONArray(jSONArray1);
      JSONArray jSONArray4 = jSONArray2.fluentAdd(989, (Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray4.getBoolean(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.getLong(830);
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      JSONObject jSONObject2 = jSONObject1.fluentRemove(serializerFeature0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      jSONArray0.getShort(830);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONObject2, serializeFilterArray0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 867;
      JSONArray jSONArray0 = new JSONArray(867);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 244);
      JSONArray jSONArray1 = jSONArray0.fluentSet(244, pipedInputStream0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) pipedOutputStream0);
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray2.getDoubleValue(867);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 867, Size: 246
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.getLong(830);
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      JSONObject jSONObject2 = jSONObject1.fluentRemove(serializerFeature0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      JSON.toJSONString((Object) jSONObject2, serializeFilterArray0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.toArray((Object[]) serializeFilterArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = (JSONArray)jSONArray1.clone();
      jSONArray2.getInteger(512);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      jSONArray1.addAll(989, (Collection<?>) jSONArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray3.fluentAdd((Object) jSONArray2);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      jSONArray1.getObject(1361, class0);
      jSONArray0.getByteValue(512);
      jSONArray1.getBigDecimal(3089);
      assertEquals(3472, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray1.forEach(consumer0);
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray2.getObject(462, class0);
      ConcurrentHashMap.KeySetView<JSONObject, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(989);
      jSONArray2.retainAll(jSONArray1);
      LinkedHashSet<PipedInputStream> linkedHashSet0 = new LinkedHashSet<PipedInputStream>();
      jSONArray1.set(663, concurrentHashMap_KeySetView0);
      assertEquals(1736, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      int int0 = 462;
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      JSON.parse((String) null);
      jSONArray1.fluentAdd((Object) null);
      jSONArray1.isEmpty();
      jSONArray2.getDoubleValue(462);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray3.replaceAll((UnaryOperator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      jSONArray0.fluentAdd((Object) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(159);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2773, (Object) null);
      jSONArray1.isEmpty();
      jSONArray0.getComponentType();
      jSONArray1.getObject(989, (Type) null);
      jSONArray0.fluentAdd((Object) jSONArray1);
      assertEquals(2775, jSONArray1.size());
      assertEquals(2775, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      int int0 = 462;
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = jSONArray0.fluentRemove((Object) null);
      jSONArray3.clone();
      int int1 = (-5262);
      jSONArray2.getInteger(512);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer(3089);
      FieldPosition fieldPosition0 = new FieldPosition(989);
      StringBuffer stringBuffer1 = decimalFormat0.format((long) 989, stringBuffer0, fieldPosition0);
      // Undeclared exception!
      try { 
        jSONArray0.writeJSONString((Appendable) stringBuffer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(159);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2773, (Object) null);
      jSONArray1.isEmpty();
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      jSONArray0.getComponentType();
      jSONArray0.getObject(815, (Type) null);
      jSONArray0.fluentAdd((Object) feature0);
      assertEquals(2775, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      Class<JSONObject> class0 = JSONObject.class;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) jSONArray0);
      LinkedList<ByteArrayInputStream> linkedList0 = new LinkedList<ByteArrayInputStream>();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-20), (byte)2);
      linkedList0.addFirst(byteArrayInputStream0);
      jSONArray2.fluentRemoveAll(linkedList0);
      jSONArray1.setRelatedArray(class0);
      assertEquals(1, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(159);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2766, (Object) null);
      jSONArray1.isEmpty();
      jSONArray0.contains((Object) null);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2767
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray3 = jSONArray1.fluentSet(2917, jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.getBoolean(2917);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.getLongValue(808);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONArray1.set(867, pipedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(462);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONPObject", hashMap0);
      jSONArray0.set(667, (Object) null);
      jSONArray0.getSqlDate(462);
      assertEquals(668, jSONArray0.size());
      
      jSONArray0.getBigInteger(667);
      jSONArray0.isEmpty();
      Class<Boolean> class0 = Boolean.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(462);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONPObject", hashMap0);
      jSONArray0.set(667, (Object) null);
      jSONArray0.getSqlDate(462);
      jSONArray0.getJSONObject(667);
      jSONArray0.remove((Object) null);
      jSONArray0.getComponentType();
      assertEquals(667, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(188);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      Class<JSONObject> class0 = JSONObject.class;
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(0);
      jSONArray3.toJavaList(class0);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.getLongValue(808);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONArray0.contains(set0);
      jSONArray0.getComponentType();
      jSONArray1.getBooleanValue(808);
      boolean boolean0 = jSONArray0.containsAll(set0);
      assertEquals(868, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(188);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2766, (Object) null);
      jSONArray1.isEmpty();
      jSONArray0.containsAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2767
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.getLongValue(808);
      JSONObject jSONObject0 = new JSONObject(62, true);
      JSONObject jSONObject1 = jSONObject0.fluentRemove(jSONArray0);
      JSONArray jSONArray2 = new JSONArray();
      JSONObject jSONObject2 = jSONObject1.fluentPut((String) null, jSONArray2);
      jSONObject2.fluentPutAll(jSONObject1);
      jSONObject0.fluentPut((String) null, jSONObject1);
      JSONObject jSONObject3 = jSONObject0.fluentRemove(">F%u4l4");
      jSONObject0.getBoolean(";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;");
      jSONArray0.remove((Object) jSONObject3);
      // Undeclared exception!
      try { 
        jSONArray2.getShort((-3008));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1254);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentSet((-2199), iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(462, (Collection<?>) jSONArray0);
      jSONArray2.getDate(867);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1736
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      JSON.setDefaultTypeKey("yyyy-MM-dd HH:mm:ss");
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.setComponentType(class1);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(2212);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2212, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(462);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2766, (Object) null);
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(989);
      int int0 = jSONArray3.getIntValue(1237);
      assertEquals(5533, jSONArray0.size());
      assertEquals(0, int0);
      
      jSONArray2.add((Object) null);
      assertEquals(5534, jSONArray1.size());
      assertEquals(5534, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.getLongValue(808);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) set0);
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) jSONArray2);
      jSONArray3.getJSONArray(1254);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Asia/Aden\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)53;
      byte byte0 = (byte) (-64);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray0.removeAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate((-1166));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2754, linkedHashSet0);
      jSONArray1.fluentAdd((Object) linkedHashSet0);
      jSONArray1.getBigDecimal(2588);
      assertEquals(2756, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(462);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2766, (Object) null);
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(989);
      jSONArray3.getIntValue(1237);
      jSONArray2.getDouble(989);
      jSONArray3.getBigInteger(989);
      assertEquals(5533, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(462);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2766, (Object) null);
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray1.toJavaList(class0);
      jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(989);
      jSONArray2.getIntValue(1237);
      jSONArray2.addAll(225, (Collection<?>) list0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2766);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, (-858));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<PipedInputStream> class0 = PipedInputStream.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[3] = "@type";
      stringArray0[4] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Set<String> set0 = simplePropertyPreFilter0.getExcludes();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((int) (byte)0, (Collection<?>) set0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      jSONArray2.fluentAdd((Object) simplePropertyPreFilter0);
      int int0 = 788;
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(788);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 788, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 825;
      JSONArray jSONArray0 = new JSONArray(825);
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<JSONArray> class2 = JSONArray.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("", class1, class2, class2, (Field) null, 704, 834, 0);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<Annotation> class3 = Annotation.class;
      beanContext0.getAnnation(class3);
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", hashMap0);
      jSONArray1.getBoolean(823);
      // Undeclared exception!
      try { 
        jSONArray1.set((-320), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1254);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("p<FpgZPhn5$<}UD_i", hashMap0);
      hashMap0.put("year", (Field) null);
      ParserConfig.getFieldFromCache("yyyy-MM-dd HH:mm:ss", hashMap0);
      jSONArray0.set(1254, hashMap0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[8];
      jSONArray0.indexOf((Object) null);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)82;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONArray0.remove((int) (byte)91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1254);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.getLongValue(808);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) set0);
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) jSONArray2);
      jSONArray3.getJSONArray(1254);
      jSONArray0.contains(set0);
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object[] objectArray0 = new Object[0];
      jSONArray0.toArray(objectArray0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(2762);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2762, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(462);
      JSON.parseObject((String) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2766, (Object) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray1.spliterator();
      int int0 = jSONArray1.size();
      assertEquals(2767, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.toArray((JSONArray[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1);
      int int0 = jSONArray0.indexOf(bufferedInputStream0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-363);
      Object object0 = new Object();
      jSONArray0.fluentRemove(object0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-363));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3149);
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.getJSONArray("yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONArray(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.sort((Comparator<? super Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-127);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-127));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -127
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(714);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal((-1129));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.removeAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-2276));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.lastIndexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-873));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 657;
      Integer integer0 = new Integer(657);
      JSONArray jSONArray0 = new JSONArray();
      int int1 = (-1639);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-1639), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1639, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      boolean boolean1 = jSONArray0.contains("yyyy-MM-dd HH:mm:ss");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = (-4024);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-4024));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-1979));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(462);
      JSON.parseObject((String) null);
      jSONArray0.fluentSet(2766, (Object) null);
      jSONArray0.getBigInteger(2766);
      jSONArray0.spliterator();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONStringWithDateFormat(jSONArray0, "@type", serializerFeatureArray0);
      int int0 = 631;
      // Undeclared exception!
      try { 
        jSONArray0.get(631);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 631, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.addAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-1671));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-574));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator();
      float float0 = new Integer(3089);
      Class<Field>[] classArray0 = (Class<Field>[]) Array.newInstance(Class.class, 2);
      Class<Field> class0 = Field.class;
      classArray0[0] = class0;
      Class<Field> class1 = Field.class;
      classArray0[1] = class1;
      Class<Field>[] classArray1 = jSONArray0.toArray(classArray0);
      assertSame(classArray1, classArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = new Integer(989);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.add(989, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.add((Object) linkedHashSet0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(2386);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2386, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(765);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 765, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.lastIndexOf(fileSystemHandling0);
      Type type0 = jSONArray0.getComponentType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(579);
      Integer integer0 = new Integer(3089);
      jSONArray0.setRelatedArray(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(1866);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1866, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-1791));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray1.indexOf(jSONArray0);
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray0.subList(989, 989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(806);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(806);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 806, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1254);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.iterator();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd((-946), (Object) jSONObject0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -946, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1278);
      int int0 = (-1273);
      // Undeclared exception!
      try { 
        jSONArray0.getString((-1273));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(863);
      jSONArray0.clear();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-1673));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(809);
      Class<Integer> class0 = Integer.class;
      int int0 = 182;
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.JSONArray");
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'L';
      charArray0[2] = 'O';
      charArray0[3] = ']';
      charArray0[4] = '0';
      charArray0[5] = 'j';
      charArray0[6] = '>';
      StringBuffer stringBuffer0 = new StringBuffer();
      jSONArray0.writeJSONString((Appendable) stringBuffer0);
      charArray0[7] = 'T';
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-996));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(855);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) 3089);
      jSONArray0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(1281);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1281, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 863;
      JSONArray jSONArray0 = new JSONArray(863);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(863, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 863, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(687);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 687, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(827);
      float float0 = new Integer(1306);
      jSONArray0.set(1306, (Object) null);
      assertEquals(1307, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(579);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@type";
      // Undeclared exception!
      try { 
        jSONArray0.getLong(2193);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2193, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(809);
      Integer integer0 = new Integer(3089);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@type";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(20, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(579);
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(832);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(523);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 523, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      JSON.setDefaultTypeKey("yyyy-MM-ddTHH:mm:ss");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-475), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(855);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-1406));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(825, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(3094);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3094, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      JSON.setDefaultTypeKey("yyyy-MM-dd HH:mm:ss");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.setComponentType((Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(2212);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2212, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.writeJSONString((Writer) charArrayWriter0, (Object) jSONArray0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(8192);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8192, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-893), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -893, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 825;
      JSONArray jSONArray0 = new JSONArray(825);
      JSON.setDefaultTypeKey("");
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue((-4213));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(842);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      int int0 = 848;
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(848);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 848, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      jSONArray0.getRelatedArray();
      int int0 = jSONArray0.indexOf("2d6Z");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      jSONArray0.toJSONString();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-6816));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      int int0 = 988;
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAddAll(3089, (Collection<?>) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONString();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      jSONArray0.remove((Object) "@type");
      float float0 = new Integer(3089);
      assertEquals(3089, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      int int0 = (-4255);
      // Undeclared exception!
      try { 
        jSONArray0.add((-4255), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4255, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class1, class1, (Field) null, 3089, 1556, 989);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      jSONArray0.setRelatedArray((Object) null);
      JSON.setDefaultTypeKey("@type");
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(825);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 825, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues("yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      boolean boolean0 = jSONArray1.retainAll(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.toArray();
      JSONArray jSONArray2 = new JSONArray(849);
      jSONArray0.toJSONString();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3089, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(832);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(988);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 988, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      Class<JSONArray> class2 = JSONArray.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("", class1, class2, class2, (Field) null, 704, 834, 0);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class3 = beanContext0.getBeanClass();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(825, (Type) class3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 825, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = new JSONArray(3089);
      jSONArray1.toJSONString();
      JSON.setDefaultTypeKey("yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) "[]");
      // Undeclared exception!
      try { 
        jSONArray3.getFloatValue((-2327));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(988);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 988, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      jSONArray0.toJSONString();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1778, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1778, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 224;
      JSONArray jSONArray0 = new JSONArray(224);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(813);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 813, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(820);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.toJSONString();
      JSON.setDefaultTypeKey("1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(194);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 194, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Feature[] featureArray0 = new Feature[5];
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      jSONArray1.listIterator();
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseObjectArray;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableFieldSmartMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowSingleQuotes;
      featureArray0[4] = feature4;
      // Undeclared exception!
      try { 
        JSON.parseObject("com.alibaba.fastjson.JSONArray", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(825);
      jSONArray0.toJSONString();
      JSON.setDefaultTypeKey("1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(827, (Object) "$o+ kTCFQ|N1fc?xT$5");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 827, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3233);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-179));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 845;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      JSONArray jSONArray0 = new JSONArray(845);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) parserConfig0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentSet((-3046), jSONArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2727);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-957), 3372);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -957
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray1.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-70));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3233);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.toJSONString();
      String string0 = "$o+ kTCFQ|N1fc?xT$5";
      Integer integer0 = new Integer(1394);
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      jSONArray0.toArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList((-2727), (-2727));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2727
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(806);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getString(224);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 224, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3233);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.toJSONString();
      JSON.setDefaultTypeKey("$o+ kTCFQ|N1fc?xT$5");
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue((-2856));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(124);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONString((Object) jSONArray0, serializeConfig0, serializerFeatureArray0);
      jSONArray0.removeAll(linkedHashSet0);
      jSONArray0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      assertEquals(2, jSONArray0.size());
      
      jSONArray1.indexOf(jSONArray0);
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray2.subList(989, 989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 825;
      JSONArray jSONArray0 = new JSONArray(825);
      // Undeclared exception!
      try { 
        jSONArray0.remove(818);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 818, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), (Object) null);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray1.indexOf(jSONArray0);
      Class<Object> class0 = Object.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      jSONArray0.hashCode();
      JSON.parseObject("");
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3233);
      jSONArray0.toJSONString();
      byte byte0 = (byte)96;
      Feature feature0 = Feature.CustomMapDeserializer;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)50;
      Feature[] featureArray0 = new Feature[4];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[3] = feature0;
      JSON.parse(byteArray0, featureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-1), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(845);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(124);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONString((Object) jSONArray1, serializeConfig0, serializerFeatureArray0);
      jSONArray1.removeAll(linkedHashSet0);
      jSONArray0.containsAll(linkedHashSet0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)0;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onMalformedInput(codingErrorAction0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove((-897));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(124);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONString((Object) jSONArray1, serializeConfig0, serializerFeatureArray0);
      jSONArray1.removeAll(linkedHashSet0);
      jSONArray0.containsAll(linkedHashSet0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)0;
      jSONArray0.lastIndexOf("[]");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onMalformedInput(codingErrorAction0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x");
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(2534);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2534, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-28));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = 825;
      JSONArray jSONArray0 = new JSONArray(825);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(999999999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999999999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = 845;
      JSONArray jSONArray0 = new JSONArray(845);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(list0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        jSONArray1.getString(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(845);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(list0);
      jSONArray0.set((-1), list0);
      byte[] byteArray0 = new byte[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      uTF8Decoder0.reset();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SortFeidFastMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.UseObjectArray;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 0, 3089, charsetDecoder0, (Type) class0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-70));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(867);
      JSONArray jSONArray1 = jSONArray0.fluentSet(867, "@type");
      jSONArray1.getLongValue(808);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      int int0 = (-582);
      // Undeclared exception!
      try { 
        jSONArray2.getDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 868
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(850);
      JSONArray jSONArray1 = jSONArray0.fluentSet(850, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject((-582));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(850);
      JSONArray jSONArray1 = jSONArray0.fluentSet(850, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      int int0 = (-582);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject((-582));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = 3725;
      JSONArray jSONArray0 = new JSONArray(3725);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(329);
      String string0 = null;
      jSONArray0.fluentRemove((Object) null);
      Class<JSONObject> class0 = JSONObject.class;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 329, 329, (CharsetDecoder) null, 329);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((-70), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -70, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(224);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(224);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 224, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(set0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) set0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(906, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 906, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONString();
      int int0 = 2052;
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(2052);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2052
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3233);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.toJSONString();
      JSON.setDefaultTypeKey("$o+ kTCFQ|N1fc?xT$5");
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = 845;
      JSONArray jSONArray0 = new JSONArray(845);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(list0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(845);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 845, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(124);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONString((Object) jSONArray1, serializeConfig0, serializerFeatureArray0);
      jSONArray1.removeAll(linkedHashSet0);
      jSONArray0.containsAll(linkedHashSet0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)0;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.OrderedField;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, 124, (-981), charsetDecoder0, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.hashCode();
      jSONArray0.listIterator(0);
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      try { 
        MockURI.URI("@ZH", "yyyy-MM-dd HH:mm:ss", "byte", 989, "k[`4LX<b=F", "k[`4LX<b=F", "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: @ZH://yyyy-MM-dd%20HH:mm:ss@byte:989k%5B%604LX%3Cb=F?k[%604LX%3Cb=F#yyyy-MM-dd%20HH:mm:ss
         //
         verifyException("java.net.URI", e);
      }
  }
}
