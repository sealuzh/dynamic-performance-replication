/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:16:03 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import okio.Segment;
import okio.SegmentPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Segment_ESTest extends Segment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Segment segment0 = new Segment(byteArray0, (-82), (-82), true, false);
      segment0.pos = (-82);
      // Undeclared exception!
      try { 
        segment0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Segment segment0 = new Segment();
      Segment segment1 = new Segment(byteArray0, 727, (-141), true, true);
      segment0.next = segment1;
      // Undeclared exception!
      try { 
        segment0.split(727);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Segment segment0 = new Segment(byteArray0, 587, (byte)0, false, true);
      Segment segment1 = new Segment();
      // Undeclared exception!
      try { 
        segment0.push(segment1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-77);
      Segment segment1 = new Segment(byteArray0, (byte) (-77), (byte) (-77), true, false);
      // Undeclared exception!
      try { 
        segment0.writeTo(segment1, (byte) (-77));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        segment0.split((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      Segment segment1 = new Segment(byteArray0, (byte)20, (byte)20, true, true);
      segment0.prev = segment1;
      byteArray0[1] = (byte) (-77);
      // Undeclared exception!
      try { 
        segment0.compact();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-13);
      Segment segment0 = new Segment(byteArray0, (byte)127, (byte) (-13), true, true);
      Segment segment1 = new Segment();
      segment1.owner = true;
      segment0.prev = segment1;
      int int0 = 8192;
      // Undeclared exception!
      try { 
        segment0.compact();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-3);
      Segment segment0 = new Segment(byteArray0, (byte)127, (byte)0, true, true);
      segment0.prev = segment0;
      int int0 = 8192;
      // Undeclared exception!
      try { 
        segment0.compact();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      segment0.prev = segment0;
      byteArray0[0] = (byte)20;
      Segment segment1 = new Segment(byteArray0, 3045, 3045, false, false);
      segment0.prev.prev = segment1;
      segment0.compact();
      assertNotSame(segment0, segment1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-24);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)6;
      int int0 = (-4116);
      Segment segment1 = new Segment(byteArray1, (-4116), (byte)6, false, false);
      // Undeclared exception!
      try { 
        segment1.split((byte)6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      segment0.prev = segment0;
      byteArray0[1] = (byte) (-77);
      int int0 = 2434;
      Segment segment1 = new Segment(byteArray0, (-1), 2434, true, false);
      // Undeclared exception!
      try { 
        segment1.split(2269);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)127;
      Segment segment0 = new Segment(byteArray0, (byte)127, (byte)127, true, true);
      Segment segment1 = new Segment();
      // Undeclared exception!
      try { 
        segment1.writeTo(segment0, 8192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)6;
      Segment segment0 = new Segment(byteArray0, (byte)6, (byte)6, true, false);
      Segment segment1 = new Segment();
      Segment segment2 = new Segment();
      Segment segment3 = segment0.unsharedCopy();
      // Undeclared exception!
      try { 
        segment1.writeTo(segment3, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)6;
      Segment segment0 = new Segment(byteArray0, (byte)6, (byte)6, true, false);
      Segment segment1 = new Segment();
      Segment segment2 = new Segment();
      segment2.sharedCopy();
      segment1.writeTo(segment2, 1024);
      Segment segment3 = segment0.unsharedCopy();
      Segment segment4 = new Segment();
      // Undeclared exception!
      try { 
        segment1.writeTo(segment3, 8214);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentPool.byteCount = (long) 30;
      segment0.limit = 8171;
      Segment segment1 = segment0.unsharedCopy();
      segment0.limit = 30;
      Segment segment2 = new Segment();
      segment1.prev = segment0;
      Segment segment3 = new Segment();
      segment1.compact();
      segment0.writeTo(segment1, 0);
      Segment segment4 = new Segment((byte[]) null, 0, (-1600), true, false);
      Segment segment5 = new Segment();
      Segment segment6 = segment5.unsharedCopy();
      assertNotSame(segment6, segment4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Segment segment0 = new Segment();
      int int0 = 13;
      SegmentPool.byteCount = (long) 13;
      Segment segment1 = segment0.unsharedCopy();
      segment0.limit = 13;
      Segment segment2 = new Segment();
      segment1.prev = segment0;
      segment1.next = segment0;
      segment0.next = segment1.next;
      // Undeclared exception!
      try { 
        segment1.next.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }
}
