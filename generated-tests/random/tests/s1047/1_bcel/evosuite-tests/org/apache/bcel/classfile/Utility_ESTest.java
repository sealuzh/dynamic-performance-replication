/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 17:25:15 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.IllegalFormatConversionException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.StackMap;
import org.apache.bcel.classfile.Synthetic;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)6;
      String string0 = Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), (int) (byte) (-12));
      String string1 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", false);
      assertTrue(string1.equals((Object)string0));
      
      Utility.getSignature("$l$8b$I$A$A$A$A$A$A$A");
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1149), (int) (byte) (-12), true);
      assertEquals("0:    astore_1\n1:    astore\t\t%244\n3:    aload\t\t%90\n5:    iconst_3\n", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0:    astore_1\n1:    astore\t\t%244\n3:    aload\t\t%90\n5:    iconst_3\n";
      stringArray0[1] = "astore_1";
      String string3 = Utility.methodTypeToSignature("5($00@D#QtomY", stringArray0);
      assertEquals("(L0:;Lastore_1;)L5($00@D#QtomY;", string3);
      
      int int0 = Utility.setBit(69, (byte)58);
      assertEquals(67108933, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("YerR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YerR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)8;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.close();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, false);
      assertEquals("", string1);
      
      short short0 = Utility.searchOpcode("i2c");
      assertEquals((short)146, short0);
      
      String string2 = Utility.printArray((Object[]) constantArray0, false, false);
      assertNotNull(string2);
      
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("$92$Nm$I$y$86$dc", string3);
      
      String string4 = Utility.compactClassName("w=T2qN(Y-", false);
      assertEquals("w=T2qN(Y-", string4);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)63;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 541, 97, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byte byte0 = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-100);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), 1796, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dsub
         // 1:    dsub
         // 2:    d2f
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.isSet(433, 433);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)48;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 92, 1207, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-23);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.replace("|+F;", "|+F;", "|+F;");
      assertEquals("|+F;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("|JI`o.BU`(!@nyk2{");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)44, (byte) (-92));
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1462), (-915));
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmple\t\t#18527", string1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorexi");
      stringArray0[0] = "monitorexi";
      stringArray0[1] = "monitorexi";
      stringArray0[2] = "monitorexi";
      stringArray0[3] = "monitorexi";
      stringArray0[4] = "monitorexi";
      Utility.methodTypeToSignature("monitorexi", stringArray0);
      Utility.methodSignatureArgumentTypes("(Lmonitorexi;Lmonitorexi;Lmonitorexi;Lmonitorexi;Lmonitorexi;)Lmonitorexi;");
      String string0 = Utility.classOrInterface((-522));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      Utility.fillup("{java.lang.Object@4421dc55, java.lang.Object@33c33e0e, java.lang.Object@7e4b93d, java.lang.Object@72a3fa50, java.lang.Object@382a4325, java.lang.Object@12b33960, java.lang.Object@303c575a, java.lang.Object@5d205a77, java.lang.Object@3779099d}", 73, true, 'l');
      Utility.convertString("{java.lang.Object@4421dc55, java.lang.Object@33c33e0e, java.lang.Object@7e4b93d, java.lang.Object@72a3fa50, java.lang.Object@382a4325, java.lang.Object@12b33960, java.lang.Object@303c575a, java.lang.Object@5d205a77, java.lang.Object@3779099d}");
      Utility.replace("void", "{java.lang.Object@4421dc55, java.lang.Object@33c33e0e, java.lang.Object@7e4b93d, java.lang.Object@72a3fa50, java.lang.Object@382a4325, java.lang.Object@12b33960, java.lang.Object@303c575a, java.lang.Object@5d205a77, java.lang.Object@3779099d}", "{java.lang.Object@4421dc55, java.lang.Object@33c33e0e, java.lang.Object@7e4b93d, java.lang.Object@72a3fa50, java.lang.Object@382a4325, java.lang.Object@12b33960, java.lang.Object@303c575a, java.lang.Object@5d205a77, java.lang.Object@3779099d}");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 73, 85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte) (-58);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)118, 1);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)118, (-3866));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)8;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("if_icmpeq\t\t#3437", string0);
      
      Utility.encode(byteArray0, true);
      Utility.printArray((Object[]) constantArray0, false);
      short short0 = Utility.searchOpcode("if_icmpeq\t\t#3437");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, false, false);
      assertEquals("", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$9f$Nm$I$y$86$dc", string2);
      
      String string3 = Utility.compactClassName("w=T2qN(Y-", false);
      assertEquals("w=T2qN(Y-", string3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "G#9tNS>}zS_gT%A=";
      try { 
        Utility.methodSignatureReturnType("G#9tNS>}zS_gT%A=", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G#9tNS>}zS_gT%A='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(181);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      int int0 = (-704);
      int int1 = 51;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-704), 51, false);
      String string0 = null;
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable(1034, (byte)39, localVariableArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "\"![iYR%Z) /5L#", (String) null, true, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "kf$e";
      boolean boolean0 = true;
      try { 
        Utility.decode("kf$e", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid IOCase name: ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-127);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, 3262, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature(". Constant pool size is: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: . Constant pool size is: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.convertString("static");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)15;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)15, 466);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfSignature("El4h97\"5w3I(R:V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: El4h97\"5w3I(R:V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.searchOpcode("%>jT@-^-b");
      Utility.methodTypeToSignature("%>jT@-^-b", (String[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-106);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)63, (int) (byte)65, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.compactClassName("bastore", "bastore", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-91);
      byteArray0[8] = (byte) (-7);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 45, 221);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)60;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 630, 2804, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.accessToString(392, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte) (-38);
      byteArray0[8] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (-1588));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte)4;
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(3986, 80);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(90, 1127);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-202), 90);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantClass constantClass0 = new ConstantClass((-474));
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)120, (int) (byte)106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.isSet(163, 1227);
      String string0 = "3RvrE`bC$-@V=V5^";
      try { 
        Utility.typeOfSignature("3RvrE`bC$-@V=V5^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3RvrE`bC$-@V=V5^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("7,$3z*,g&0b[3ks", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      Utility.accessToString((-1090084244));
      Utility.methodTypeToSignature("yJ+9", (String[]) null);
      Utility.compactClassName("byte", "byte", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (-53786696));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)101;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("$9ae", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)101;
      objectArray0[1] = (Object) (byte)101;
      Utility.printArray(objectArray0);
      Utility.classOrInterface((byte)101);
      Utility.replace("#MJ^", "#MJ^", ".pb@N#O*L5f");
      Utility.searchOpcode("$9ae");
      Utility.encode(byteArray1, false);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)48;
      byteArray2[1] = (byte) (-102);
      byteArray2[2] = (byte)101;
      byteArray2[3] = (byte)101;
      byteArray2[4] = (byte)101;
      byteArray2[5] = (byte)101;
      Utility.equals(byteArray1, byteArray2);
      Utility.format((byte)48, (byte) (-102), false, '+');
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)69;
      byteArray0[0] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "Q";
      boolean boolean0 = true;
      Utility.compactClassName("Q", true);
      try { 
        Utility.typeOfSignature("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "2bPR";
      try { 
        Utility.typeOfSignature("2bPR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2bPR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('+');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte) (-19);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("9a 84 0e c5 bd c5 cd ed", string0);
      
      byte[] byteArray1 = Utility.decode("9a 84 0e c5 bd c5 cd ed", false);
      String string1 = Utility.classOrInterface((-799));
      assertEquals("class", string1);
      
      String string2 = Utility.accessToString((-668));
      assertEquals("protected synchronized volatile native abstract strictfp synthetic annotation enum", string2);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string3 = Utility.codeToString(byteArray1, constantPool0, (int) (byte)14, (-668), true);
      assertEquals("16:   saload\n17:   lload_2\n18:   dadd\n19:   isub\n20:   lload_2\n21:   lsub\n22:   isub\n", string3);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      Utility.clearBit(192, 70);
      Utility.compactClassName("java.lang.Object@776f1cbc, java.lang.Object@13dfb186, java.lang.Object@7f5e7e2f, java.lang.Object@4a6e3050, java.lang.Object@456b5f5d, java.lang.Object@2bd685f7");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)82;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)82, (-1123));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)29, (int) (byte)114, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokespecial");
      String string0 = Utility.compactClassName("invokespecial", "invokespecial", false);
      assertEquals("invokespecial", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)29;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3060), 3063, true);
      assertEquals("0:    dneg\n1:    l2i\n2:    iload_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "Invalid signature: ";
      String[] stringArray0 = new String[7];
      String string1 = "getstatic";
      stringArray0[0] = "getstatic";
      stringArray0[1] = "Invalid signature: ";
      stringArray0[2] = "Invalid signature: ";
      stringArray0[3] = "Invalid signature: ";
      stringArray0[4] = "Invalid signature: ";
      stringArray0[5] = "Invalid signature: ";
      stringArray0[6] = "Invalid signature: ";
      Utility.methodTypeToSignature("Invalid signature: ", stringArray0);
      int int0 = 97;
      Utility.isSet(40, 97);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)29;
      byte byte0 = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)57;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, (int) (byte)57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Utility.accessToString(79, true);
      assertEquals("public private protected static volatile", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte) (-84);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-1530), (-2049));
      assertEquals("0:    dstore_0\n1:    dconst_1\n2:    dsub\n3:    astore\t\t%9\n5:    dload_3\n6:    astore_2\n7:    dstore\t\t%172\n", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "dstore_0";
      stringArray0[1] = "public private protected static volatile";
      stringArray0[2] = "0:    dstore_0\n1:    dconst_1\n2:    dsub\n3:    astore\t\t%9\n5:    dload_3\n6:    astore_2\n7:    dstore\t\t%172\n";
      stringArray0[3] = "0:    dstore_0\n1:    dconst_1\n2:    dsub\n3:    astore\t\t%9\n5:    dload_3\n6:    astore_2\n7:    dstore\t\t%172\n";
      String string2 = Utility.methodTypeToSignature("dstore_0", stringArray0);
      assertEquals("(Ldstore_0;Lpublic;L0:;L0:;)Ldstore_0;", string2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.format(107, 2850, true, '(');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      Utility.methodTypeToSignature("short", stringArray0);
      try { 
        Utility.typeOfSignature("=-FE4:_K9Lao}Fz4z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =-FE4:_K9Lao}Fz4z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)18;
      byteArray0[0] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte)18, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.classOrInterface(98);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      byte byte1 = (byte)4;
      byteArray0[1] = (byte)4;
      byte byte2 = (byte)59;
      byteArray0[2] = (byte)59;
      byte byte3 = (byte)77;
      byteArray0[3] = (byte)77;
      byte byte4 = (byte) (-11);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)101;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, (int) (byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*8NZEem~\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8NZEem~\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)73;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte)48, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.clearBit((-3634), 60);
      Utility.compactClassName("\t\t<", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\t\t<");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "\t\t<";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "\t\t<";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\t\t<", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte)11);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21515. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.format(2397, 1836, true, 'r');
      String string0 = "9a";
      try { 
        Utility.typeOfSignature("9a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-4);
      byte byte0 = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-80);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), 8192);
      try { 
        Utility.methodSignatureArgumentTypes("0:    nop\n1:    istore_1\n2:    i2d\n3:    areturn\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    istore_1
         // 2:    i2d
         // 3:    areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ViTXk");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")");
      Utility.fillup("ViTXk", (-964), true, '\"');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-964), 1609, false);
      assertEquals("0:    lastore\n1:    dstore_2\n2:    arraylength\n3:    fstore_0\n4:    ior\n", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-66), true);
      assertEquals("private protected static final transient native abstract strictfp synthetic annotation enum", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-128));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.convertString("ViTXk");
      assertEquals("ViTXk", string3);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string4 = Utility.printArray(objectArray0, true, true);
      assertEquals("{null}", string4);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "Ol}#t|X";
      try { 
        Utility.typeOfSignature("Ol}#t|X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ol}#t|X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, (int) (byte)6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-10);
      byteArray0[8] = (byte)93;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-5);
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)78;
      byteArray1[5] = (byte)66;
      byteArray1[6] = (byte)8;
      byteArray1[7] = (byte)66;
      byteArray1[8] = (byte) (-54);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[0] = (byte) (-85);
      byteArray0[2] = (byte)63;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 541, 97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-124);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (-2229), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fcmpl
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("di]q:zj1[m*:~,d])", stringArray0);
      Utility.methodSignatureReturnType("()[Ldi]q:zj1;", true);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)63;
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)61;
      Constant[] constantArray0 = new Constant[9];
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("unknown");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "MAc!10g";
      boolean boolean0 = false;
      Utility.decode("MAc!10g", false);
      Utility.compactClassName("");
      String string1 = "iload_3";
      Utility.compactClassName("iload_3", false);
      Utility.compactClassName("iload_3");
      String string2 = "F't^}$.%y.";
      Utility.typeOfSignature("F't^}$.%y.");
      String string3 = "?S(qjGTD5~Nq";
      // Undeclared exception!
      try { 
        Utility.signatureToString("?S(qjGTD5~Nq", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?S(qjGTD5~Nq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)5;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte)5);
      assertEquals("4:    lstore_0\n5:    astore_0\n6:    pop\n7:    iconst_2\n", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte)5;
      objectArray0[2] = (Object) "4:    lstore_0\n5:    astore_0\n6:    pop\n7:    iconst_2\n";
      objectArray0[3] = (Object) (byte)2;
      objectArray0[4] = (Object) (byte)2;
      objectArray0[5] = (Object) (byte)89;
      objectArray0[6] = (Object) (byte)89;
      objectArray0[7] = (Object) (byte)87;
      String string1 = Utility.printArray(objectArray0, true);
      assertNotNull(string1);
      assertEquals("{null, 5, 4:    lstore_0\n5:    astore_0\n6:    pop\n7:    iconst_2\n, 2, 2, 89, 89, 87}", string1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.classOrInterface(25);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((-1928.722F));
      Constant constant0 = constantFloat0.copy();
      constantArray0[0] = constant0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1508), 6);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(46);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-615), (byte) (-107));
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.compactClassName("Lfr");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)40;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 980, (int) (byte) (-74), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.format(839, (-5073), true, '2');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)94;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.compactClassName("{}");
      Utility.decode("{}", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 433, 3044);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      byteSequence0.close();
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.skip((-744L));
      Utility.codeToString(byteSequence0, constantPool1);
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.methodTypeToSignature("{ANFG", (String[]) null);
      boolean boolean0 = false;
      Utility.methodSignatureToString("()L{ANFG;", "()L{ANFG;", "()L{ANFG;", false);
      Utility.replace("\t(wide)", "{ANFG", "R+>2]~2G6 g");
      String string0 = "\\O)0t\"oO0^\\";
      String string1 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.searchOpcode("if_icmpge");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte) (-27);
      byteArray0[8] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)74;
      objectArray0[1] = (Object) "if_icmpge";
      objectArray0[2] = (Object) (byte) (-27);
      objectArray0[3] = (Object) (byte) (-96);
      objectArray0[4] = (Object) (byte) (-27);
      objectArray0[5] = (Object) (byte) (-96);
      Object object0 = new Object();
      objectArray0[6] = object0;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      Utility.printArray(objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("org.apache.commons.io.filefilter.FalseFileFilter", false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, 4111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l!7!x=j~l;*8''&");
      try { 
        Utility.typeOfSignature("0e0Q^\"$(}RTizy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0e0Q^\"$(}RTizy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)101;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)83;
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte)23;
      objectArray0[2] = (Object) (byte)83;
      objectArray0[3] = (Object) (byte)64;
      objectArray0[4] = (Object) null;
      Utility.printArray(objectArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_I0akC7Cxp;+TjF<P", true);
      mockFileOutputStream0.getChannel();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) mockPrintStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray1);
      try { 
        Utility.typeOfSignature("6%.\"k%Wu(jGWOcEv=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6%.\"k%Wu(jGWOcEv=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      Utility.fillup("land", (-773), true, 't');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, 627);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = Utility.isSet(2894, 2894);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(7, 7);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ifgt\t\t#-19955", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.compactClassName("|Z.weyyYmd<8Dl%Pc*S", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[0] = (Constant) constantFloat0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";|<{w\"[Etmr~");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int0 = 2;
      Utility.isSet(1035, 2);
      Utility.isJavaIdentifierPart('E');
      String string0 = "#M7";
      try { 
        Utility.typeOfSignature("#M7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #M7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)66;
      byteArray0[0] = (byte)66;
      ConstantPool constantPool0 = null;
      int int0 = (-1);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1), 2945, false);
      try { 
        Utility.decode("0:    lstore_3\n", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-80);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-46), 8192);
      try { 
        Utility.methodSignatureArgumentTypes("0:    <illegal opcode>\n1:    istore_1\n2:    <illegal opcode>\n3:    areturn\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         // 1:    istore_1
         // 2:    <illegal opcode>
         // 3:    areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, 1082);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-30), (-136));
      Utility.decode("0:    lneg\n1:    fstore_1\n2:    <illegal opcode>\n3:    ishr\n4:    <illegal opcode>\n5:    idiv\n6:    nop\n7:    dmul\n", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.MethodParameter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.MethodParameter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("y``J}7n");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[3] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Utility.fillup("w%< ?-|}b=37Ws|ss", 115, true, 'J');
      Utility.searchOpcode("w%< ?-|}b=37Ws|ssJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ");
      Utility.convertString("58w2aI]W$,y|t!");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.isSet(1002, (-5190));
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)13;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 7, 76, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte) (-8);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((-2404));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)26, (int) (byte)112, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("drem");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "drem");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload\t\t%3", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)57;
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2623), (byte)113);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1877), 4257);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-32), 1137, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 58252. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z5+f?rsn";
      stringArray0[1] = "z5+f?rsn";
      Utility.methodTypeToSignature("z5+f?rsn", stringArray0);
      Utility.methodSignatureArgumentTypes("(Lz5+f?rsn;Lz5+f?rsn;)Lz5+f?rsn;", false);
      Utility.printArray((Object[]) stringArray0, false);
      try { 
        Utility.typeOfSignature("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureReturnType("L&E%}<dA#B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L&E%}<dA#B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      byte byte1 = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byte byte2 = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-82);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (int) (byte)89, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.accessToString(2456);
      Utility.isJavaIdentifierPart('>');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 2142;
      Utility.setBit(2142, 512);
      String string0 = "H>kG>_";
      try { 
        Utility.typeOfSignature("H>kG>_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H>kG>_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("KDaO&_W'S*X31YG@TZw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KDaO&_W'S*X31YG@TZw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = ".,JV;y0|),x\\/c(r#";
      Utility.convertString(".,JV;y0|),x/c(r#");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, (int) (byte)95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = ")@";
      try { 
        Utility.typeOfSignature(")@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format((-1269), (-1269), true, 'm');
      try { 
        Utility.typeOfSignature("-1269");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1269
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, false);
      Utility.clearBit(192, 70);
      String string1 = Utility.compactClassName("java.lang.Object@62f4d046, java.lang.Object@3ed2ab8b, java.lang.Object@11cff605, java.lang.Object@465d7c00, java.lang.Object@26ff26d, java.lang.Object@294a9f58");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "jE53<U=\"d:+a%|O";
      Utility.convertString("jE53<U=\"d:+a%|O");
      Utility.convertString("jE53<U=\"d:+a%|O");
      String string1 = "*=Y0F";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*=Y0F");
      boolean boolean0 = false;
      Utility.compactClassName("K/z^F2`", false);
      int int0 = 637;
      Utility.isSet(637, 12);
      String string2 = "M2=ap+5";
      try { 
        Utility.typeOfSignature("M2=ap+5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M2=ap+5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-72);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-72), (int) (byte) (-16), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-127);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-51), 42);
      String string0 = "Warning: Padding byte != 0 in ";
      Utility.compactClassName("0:    pop\n1:    <illegal opcode>\n2:    ret\t\t%235\n4:    <illegal opcode>\n5:    fstore\t\t%129\n", "Warning: Padding byte != 0 in ", false);
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.fillup("\t(wide)", 40, false, 'N');
      String string0 = "[zaJ`8'mnK\\GOlil:";
      // Undeclared exception!
      try { 
        Utility.getSignature("[zaJ`8'mnKGOlil:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [zaJ`8'mnKGOlil:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.methodTypeToSignature("long", (String[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-54);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-56);
      Utility.equals(byteArray0, byteArray0);
      Utility.typeOfMethodSignature("()J");
      String string0 = "D<Rg8";
      Utility.fillup("D<Rg8", (byte) (-54), true, '?');
      boolean boolean0 = true;
      Utility.format((byte) (-54), (byte)11, true, '?');
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-23);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("HpsTC1,\"T}WAEhmH.");
      boolean boolean0 = false;
      Utility.compactClassName("HpsTC1,\"T}WAEhmH.", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("HpsTC1,\"T}WAEhmH.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HpsTC1,\"T}WAEhmH.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)101;
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)82;
      byte byte1 = (byte) (-101);
      byteArray0[3] = (byte) (-101);
      byte byte2 = (byte) (-49);
      byteArray0[4] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readChar();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray1 = null;
      // Undeclared exception!
      try { 
        byteSequence0.read(byteArray0, (int) (byte)82, (int) (byte) (-101));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "JmfxRY1FSu0g1#A";
      stringArray0[1] = "JmfxRY1FSu0g1#A";
      stringArray0[2] = "JmfxRY1FSu0g1#A";
      stringArray0[3] = "JmfxRY1FSu0g1#A";
      stringArray0[4] = "Long";
      stringArray0[5] = "JmfxRY1FSu0g1#A";
      Utility.methodTypeToSignature("JmfxRY1FSu0g1#A", stringArray0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)53;
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-115);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), (int) (byte)53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-91);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("AnnotationDefault");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AnnotationDefault
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "? super ";
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.getSignature("org.apache.bcel.classfile.ConstantString");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-77), (int) (byte) (-87), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)20;
      byte byte0 = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-100);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), 1796, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char char0 = 'B';
      Utility.isJavaIdentifierPart('B');
      int int0 = 212;
      boolean boolean0 = false;
      Utility.format(212, 123, false, '\'');
      try { 
        Utility.typeOfSignature("''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''212");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''212
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "):\n");
      Utility.accessToString(122);
      Utility.setBit(122, (-146));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("private static final synchronized volatile");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.accessToString((-773));
      Constant.setComparator((BCELComparator) null);
      boolean boolean0 = false;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((byte)32, 87, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[2] = (byte)63;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 541, 97, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString((-446), false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[3] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[6] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[7] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-22);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-446), 242, true);
      Utility.compactClassName("private volatile interface abstract strictfp synthetic annotation enum", "if_icmpeq", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    nop\n1:    nop\n2:    return\n3:    <illegal opcode>\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    nop
         // 2:    return
         // 3:    <illegal opcode>
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)28;
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$A$bd$R$i";
      stringArray0[1] = "$A$bd$R$i";
      stringArray0[2] = "$A$bd$R$i";
      stringArray0[3] = "$A$bd$R$i";
      stringArray0[4] = "$A$bd$R$i";
      stringArray0[5] = "$A$bd$R$i";
      stringArray0[6] = "$A$bd$R$i";
      stringArray0[7] = "$A$bd$R$i";
      Utility.methodTypeToSignature("$A$bd$R$i", stringArray0);
      Utility.decode("$A$bd$R$i", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$A$bd$R$i", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$A$bd$R$i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("arraylength", true);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "arraylength";
      boolean boolean1 = false;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-32);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, (int) (byte) (-32));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)95;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2559), (-2528));
      constantMethodref0.setClassIndex((byte)2);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, (int) (byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)98;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-115));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-59), 701);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "I";
      Utility.typeOfSignature("I");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byte byte0 = (byte)102;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)10;
      Utility.equals(byteArray0, byteArray0);
      Utility.format((byte)10, (-2191), true, 'E');
      Utility.setBit(56, (byte)10);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("I", "10", "I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)30;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = (-33);
      boolean boolean0 = false;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-33), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.accessToString(154);
      Utility.setBit((-3915), 154);
      Utility.compactClassName("5", false);
      Utility.decode("&)Q NNa<TlNX", false);
      Utility.accessToString(154, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("EV`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EV`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)38, 2975, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.compactClassName("", "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-84));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "daload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(anonymous)", "(anonymous)", "(anonymous)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anonymous)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1252, (-1721));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Utility.replace("DGeB-", "DGeB-", "fstore_3");
      Utility.methodSignatureReturnType("DGeB-", false);
      Utility.classOrInterface((-3886));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "5lNb85gB.TZ\\";
      try { 
        Utility.typeOfSignature("5lNb85gB.TZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5lNb85gB.TZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.searchOpcode("01v8*O/XYKs5RxxsL");
      Utility.setBit(1132, 79);
      Utility.accessToString(2068, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "protected final strictfp";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "01v8*O/XYKs5RxxsL";
      Object object1 = new Object();
      Object object2 = new Object();
      objectArray0[5] = object2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[6] = (Object) "protected final strictfp";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-7);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81), true);
      String string0 = Utility.methodSignatureReturnType("V*h_P", true);
      Utility.setBit(74, (byte) (-7));
      Utility.convertString("0:    dreturn\n1:    <illegal opcode>\n");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      String string0 = Utility.printArray((Object[]) constantArray0, true);
      assertEquals("{CONSTANT_NameAndType[12](name_index = 61697, signature_index = 21594), CONSTANT_String[8](string_index = 62017), CONSTANT_MethodType[16](descriptor_index = 32341)}", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool2, (int) (byte)1, (int) (byte) (-14), true);
      assertEquals("1:    aconst_null\n2:    bastore\n3:    dup_x1\n4:    <illegal opcode>\n5:    lstore_2\n6:    iand\n7:    castore\n8:    iconst_1\n", string1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short short0 = Utility.searchOpcode("01v8*O/XYKs5RxxsL");
      assertEquals((short) (-1), short0);
      
      Utility.setBit(1132, 79);
      String string0 = Utility.accessToString(2068, false);
      assertEquals("protected final strictfp", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "protected final strictfp";
      objectArray0[1] = (Object) "01v8*O/XYKs5RxxsL";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "01v8*O/XYKs5RxxsL";
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[6] = (Object) "protected final strictfp";
      String string1 = Utility.printArray(objectArray0, false);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-7);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81), true);
      assertEquals("0:    dreturn\n1:    <illegal opcode>\n", string2);
      
      String string3 = Utility.methodSignatureReturnType("V*h_P", true);
      assertEquals("void", string3);
      
      int int0 = Utility.setBit(74, (byte) (-7));
      assertEquals(33554506, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = true;
      boolean boolean1 = false;
      Utility.printArray(objectArray0, true, false);
      Utility.typeOfSignature("Z7+!X)kG-/{eL+X");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@70b0b09c\", \"java.lang.Object@2469611e\", \"java.lang.Object@5e398b21\", \"java.lang.Object@116f33dc\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@70b0b09c\", \"java.lang.Object@2469611e\", \"java.lang.Object@5e398b21\", \"java.lang.Object@116f33dc\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      Constant[] constantArray0 = new Constant[1];
      int int0 = (-861);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(77, (-861));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantInterfaceMethodref0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)103, 77, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.convertString(":('FML<wM~v2");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)111;
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " entries\n");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 114, 189, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('l');
      Utility.setBit((-1), 176);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-102), (int) (byte)21, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iinc\t\t%21\t55
         // 3:    istore_3
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.typeOfSignature("Tc?e-W=M");
      String string0 = "0";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0";
      stringArray0[1] = "Tc?e-W=M";
      stringArray0[2] = "0";
      stringArray0[3] = "0";
      Utility.methodTypeToSignature("0", stringArray0);
      try { 
        Utility.decode("(L0;LTc?e-W=M;L0;L0;)L0;", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.compactClassName("putfield");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-71));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("putfield");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)85;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.compactClassName("{}");
      Utility.decode("{}", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 433, 3044);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-47);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)54;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-47), 278);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ineg
         // 1:    <illegal opcode>
         // 2:    pop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("WlQ#7{e2DyqrpWo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WlQ#7{e2DyqrpWo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('(');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-21);
      byteArray0[8] = (byte)84;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-40), (int) (byte)33);
      assertEquals("0:    lload_3\n1:    dstore_0\n2:    <illegal opcode>\n3:    ineg\n4:    <illegal opcode>\n5:    impdep2\n6:    lushr\n7:    <illegal opcode>\n8:    bastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "ZRDX&";
      Utility.methodSignatureReturnType("ZRDX&", false);
      String string1 = "XK\\A^+va";
      Utility.compactClassName("boolean", "XKA^+va", true);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "interface";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "interface");
      Utility.getSignature("impdep2");
      try { 
        Utility.typeOfSignature("Pk!dnLG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pk!dnLG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byte byte0 = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)122;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)121, 16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "Ws>N>\\q[I4G*R<[nz";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ws>N>q[I4G*R<[nz";
      stringArray0[1] = "Ws>N>q[I4G*R<[nz";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Ws>N>q[I4G*R<[nz", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[I4G*R<[nz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.compactClassName("lookupswitch");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      ConstantPool constantPool0 = null;
      int int0 = 883;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), 883, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.clearBit((-4089), 101);
      Utility.decode("arraylength", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-44), (int) (byte) (-83), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    d2i
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "RT_6;LpC6(a";
      try { 
        Utility.methodSignatureReturnType("RT_6;LpC6(a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RT_6;LpC6(a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "KpU5";
      try { 
        Utility.typeOfSignature("KpU5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KpU5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)63;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 541, 97, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("(descriptor_index = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `descriptor_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "\"G3$%2S{RJ\\i%\\8";
      try { 
        Utility.decode("\"G3$%2S{RJi%8", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3025, 1653, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("j;VT :P]:nJ", false);
      Utility.setBit(512, 512);
      String string0 = "M?:M";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.searchOpcode("M?:M");
      Utility.toHexString(byteArray0);
      Utility.methodSignatureReturnType("F=& wLKL^%dkmo=@WN");
      String[] stringArray0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodTypeToSignature("M?:M", (String[]) null);
      int int0 = 1799;
      Utility.fillup("=\"y!", 1799, false, 'm');
      Utility.printArray((Object[]) null, false, false);
      Utility.searchOpcode("6a 3b 56 54 20 3a 5c 50 5d 3a 6e 4a");
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "Hq`,gIKOT[S/K}Ub";
      Utility.convertString("Hq`,gIKOT[S/K}Ub");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "Jo'v4Mk^:tL:A','";
      Utility.methodSignatureReturnType("Jo'v4Mk^:tL:A','");
      int int0 = (-248);
      boolean boolean0 = true;
      Utility.accessToString((-248), true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "aQ04PBSGA7@sf3x5O";
      Utility.fillup("aQ04PBSGA7@sf3x5O", 57, true, '8');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet((-598), (-598));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-37);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-23), false);
      Utility.methodSignatureReturnType("SENSITIVE", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("short", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.skipBytes((byte) (-110));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("fload_2", true);
      try { 
        Utility.methodSignatureArgumentTypes(")", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "*+l";
      try { 
        Utility.typeOfSignature("*+l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("n!5@0yqr", false);
      assertArrayEquals(new byte[] {(byte)110, (byte)33, (byte)53, (byte)64, (byte)48, (byte)121, (byte)113, (byte)114}, byteArray0);
      
      int int0 = Utility.clearBit((-1704), (-1704));
      assertEquals((-16778920), int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("XnL[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XnL['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":97,6DT*CM!IKD#rEs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :97,6DT*CM!IKD#rEs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "4EfjD/";
      try { 
        Utility.typeOfSignature("4EfjD/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4EfjD/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.isJavaIdentifierPart('L');
      Utility.typeOfSignature("[]");
      Utility.compactClassName("[]", true);
      Utility.replace("[]", "[]", "[]");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)13);
      constantArray0[0] = (Constant) constantInteger0;
      int int0 = 85;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)13, 85);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)103;
      ConstantPool constantPool0 = null;
      int int0 = (-1879826647);
      int int1 = 4096;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1879826647), 4096);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.replace("=oEa>3q<7}R", "=oEa>3q<7}R", "lstore_2");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-70), (byte) (-70));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong((-1866L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)93, (byte)93);
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      constantArray0[4] = (Constant) constantLong2;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(byteSequence0);
      constantArray0[5] = (Constant) constantNameAndType1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1625, (byte) (-62));
      constantArray0[6] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.convertString("=vU\"YS&5BvYg_(wjkf");
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ev!1;6K");
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.classOrInterface(108);
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "ev!1;6K";
      objectArray0[1] = (Object) "V";
      objectArray0[2] = (Object) "ev!1;6K";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) (byte)37;
      objectArray0[6] = (Object) (byte)74;
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("ev!1;6K, V, ev!1;6K, null, null, 37, 74", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)110;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)64, (int) (byte)110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("lookupswitch");
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setExecutable(false, false);
      Object[] objectArray0 = new Object[1];
      int int0 = 505;
      mockPrintStream0.print(505);
      objectArray0[0] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      try { 
        Utility.typeOfSignature("X{Wa{MVT}%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X{Wa{MVT}%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "UR'umNR(0l";
      try { 
        Utility.typeOfSignature("UR'umNR(0l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UR'umNR(0l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "DBs\"7";
      Utility.typeOfSignature("DBs\"7");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("impdep1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `impdep1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)30;
      byteArray0[0] = (byte)30;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, constantPool0, (-33), (int) (byte)30, false);
      String string0 = "return";
      String string1 = "]3$:.)ez-";
      int int0 = (-56);
      Attribute[] attributeArray0 = new Attribute[4];
      Signature signature0 = new Signature((byte)30, (-56), (byte)30, constantPool0);
      attributeArray0[0] = (Attribute) signature0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Synthetic synthetic0 = new Synthetic((-33), (-33), byteSequence0, constantPool0);
      attributeArray0[1] = (Attribute) synthetic0;
      Synthetic synthetic1 = new Synthetic((-33), (-56), byteArray0, constantPool0);
      attributeArray0[2] = (Attribute) synthetic1;
      StackMap stackMap0 = null;
      try {
        stackMap0 = new StackMap((-159), 90, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.isSet(1458, 49);
      String string0 = "LuI#agEOR@E5eT";
      Utility.typeOfSignature("LuI#agEOR@E5eT");
      // Undeclared exception!
      try { 
        Utility.signatureToString("LuI#agEOR@E5eT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LuI#agEOR@E5eT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      boolean boolean0 = true;
      try { 
        Utility.decode("T$d69qoMvWO#oI>=GKW", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "j=1'/*iPml";
      Utility.convertString("j=1'/*iPml");
      // Undeclared exception!
      try { 
        Utility.signatureToString("j=1'/*iPml");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `j=1'/*iPml'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "lload_3";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.searchOpcode("lload_3");
      String string1 = "}|ndY7/DDB<";
      Utility.replace("lload_3", "}|ndY7/DDB<", "lload_3");
      Utility.signatureToString("SAME_LOCALS_1_STACK", false);
      String string2 = "^y,4/<k<I(HPUwN=%a";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("short", "^y,4/<k<I(HPUwN=%a", "lload_3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = ",M";
      try { 
        Utility.typeOfSignature(",M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(">gq_&2|s<oDG|zFw$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >gq_&2|s<oDG|zFw$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = new String[9];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[0] = "Invalid signature: `";
      stringArray0[1] = "Invalid signature: `";
      stringArray0[2] = "Invalid signature: `";
      stringArray0[3] = " methods:\n";
      stringArray0[4] = "Invalid signature: `";
      stringArray0[5] = "Invalid signature: `";
      stringArray0[6] = "Invalid signature: `";
      stringArray0[7] = "Invalid signature: `";
      stringArray0[8] = "Illegally nested brackets:";
      String string0 = Utility.methodTypeToSignature("Invalid signature: `", stringArray0);
      assertEquals("(LInvalid;LInvalid;LInvalid;Lmethods:;LInvalid;LInvalid;LInvalid;LInvalid;LIllegally;)LInvalid;", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.accessToString(228);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-37);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1050, (int) (byte) (-109), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte) (-108);
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte)9;
      byteArray1[5] = (byte)90;
      byteArray1[6] = (byte)67;
      Utility.equals(byteArray1, byteArray1);
      int int0 = (-1190);
      Utility.codeToString(byteArray1, (ConstantPool) null, (-1190), 55, true);
      try { 
        Utility.methodSignatureReturnType("0:    fstore_0\n1:    lcmp\n2:    fstore_3\n3:    lconst_0\n4:    lconst_0\n5:    dup_x1\n6:    fstore_0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    fstore_0
         // 1:    lcmp
         // 2:    fstore_3
         // 3:    lconst_0
         // 4:    lconst_0
         // 5:    dup_x1
         // 6:    fstore_0
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "LGMfx)DL\"@gwljWq";
      // Undeclared exception!
      try { 
        Utility.signatureToString("LGMfx)DL\"@gwljWq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LGMfx)DL\"@gwljWq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.replace("void", "5{", "5{");
      Utility.compactClassName("");
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "Bq:CybD(<Ey6+";
      Utility.convertString("Bq:CybD(<Ey6+");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bq:CybD(<Ey6+");
      Utility.signatureToString("Bq:CybD(<Ey6+", true);
      String string1 = "s|s`X1%rChSJbJnU@q1";
      // Undeclared exception!
      try { 
        Utility.signatureToString("s|s`X1%rChSJbJnU@q1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `s|s`X1%rChSJbJnU@q1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y4h", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y4h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-6);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t(wide)");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byteSequence0.readUnsignedShort();
      Utility.replace("dup2", "#", "{2pcp-P#7j(Kinh6%");
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.accessToString((-446), false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[3] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[6] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[7] = (Object) "private volatile interface abstract strictfp synthetic annotation enum";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-22);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-446), 242, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.typeOfSignature("Synthetic attribute with length > 0");
      String string0 = "";
      Utility.replace("", "nd", "");
      String string1 = "PMGClass(";
      String string2 = "\"/Lve,y[WZm$)/";
      int int0 = 2;
      LocalVariable[] localVariableArray0 = new LocalVariable[4];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      Constant constant0 = constantString0.copy();
      constantArray0[1] = constant0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(917, (byte)9);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[2] = (Constant) constantFieldref1;
      int int1 = 1066;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1066);
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref((ConstantInterfaceMethodref) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInterfaceMethodref", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "boolean");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "boolean";
      objectArray0[2] = (Object) "boolean";
      objectArray0[3] = (Object) "boolean";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "boolean";
      Object object0 = new Object();
      objectArray0[8] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.clearBit((-1250), 43);
      boolean boolean0 = true;
      Utility.signatureToString("Could not create the directory ", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "tableswitch";
      Utility.replace("Byte code error: ", "\r", "tableswitch");
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "\t\t#";
      boolean boolean0 = true;
      try { 
        Utility.decode("\t\t#", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-56);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 176, 2062, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "I|4Gi?1?_";
      Utility.signatureToString("I|4Gi?1?_", true);
      int int0 = (-721);
      Utility.isSet(66, (-721));
      File file0 = MockFile.createTempFile("int", "");
      String string1 = "Invalid StackMap frame_type";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "Invalid StackMap frame_type");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Invalid StackMap frame_type
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)5;
      Utility.toHexString(byteArray0);
      String string0 = "MethodParameters";
      Utility.compactClassName("MethodParameters", false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "MethodParameters";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "05";
      objectArray0[3] = (Object) "MethodParameters";
      objectArray0[4] = (Object) "MethodParameters";
      objectArray0[5] = (Object) "MethodParameters";
      objectArray0[6] = (Object) "05";
      Object object1 = new Object();
      objectArray0[7] = object1;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("MethodParameters");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MethodParameters'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[]");
      try { 
        Utility.methodSignatureReturnType("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "U[Z&^tmPc(";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U[Z&^tmPc(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U[Z&^tmPc('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "char";
      stringArray0[1] = ")\t";
      stringArray0[2] = "newarray";
      stringArray0[3] = "newarray";
      stringArray0[4] = "newarray";
      String string0 = Utility.methodTypeToSignature("newarray", stringArray0);
      assertEquals("(CL);Lnewarray;Lnewarray;Lnewarray;)Lnewarray;", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "&1'[ym)x3QB|0";
      stringArray0[1] = "&1'[ym)x3QB|0";
      stringArray0[2] = "&1'[ym)x3QB|0";
      stringArray0[3] = "&1'[ym)x3QB|0";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("&1'[ym)x3QB|0", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[ym)x3QB|0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = 444;
      boolean boolean0 = true;
      Utility.accessToString(444, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("protected static final transient native", "protected static final transient native", "protected static final transient native");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected static final transient native
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)13;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$5b$f50$I$O$H$D$N", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.DelegateFileFilter";
      Utility.replace("multianewarray", "org.apache.commons.io.filefilter.DelegateFileFilter", "multianewarray");
      Utility.accessToString(1672);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("multianewarray", (String[]) null);
      Utility.convertString("org.apache.commons.io.filefilter.DelegateFileFilter");
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit((-3587), 233);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "P0=bW;f!4TU[/ ";
      try { 
        Utility.methodSignatureReturnType("P0=bW;f!4TU[/ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P0=bW;f!4TU[/ '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.getSignature("F't^}$.%y/F");
      Utility.methodSignatureReturnType("LF't^}$/%y/F;");
      Utility.getSignature("F't^}$.%y.F");
      String string0 = "+}%'p[oH!ZdC7gO.p";
      String string1 = "long";
      String string2 = "\\b";
      boolean boolean0 = true;
      int int0 = 150;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.accessToString(123, true);
      try { 
        Utility.typeOfSignature("%&iZF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %&iZF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.methodSignatureReturnType("Visiting non-standard PMGClass object");
      Utility.isSet(123, 123);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Visiting non-standard PMGClass object";
      stringArray0[1] = "ifeq";
      stringArray0[2] = "drem";
      stringArray0[3] = "void";
      stringArray0[4] = "S>h$\"T1<q\"s";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.accessToString((-353));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-60);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "lreturn";
      Utility.searchOpcode("lreturn");
      try { 
        Utility.methodSignatureReturnType("NneVo~,`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NneVo~,`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("OV.;Br-OGOTpS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OV.;Br-OGOTpS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.accessToString(1024, true);
      Utility.setBit(1024, 1024);
      String string0 = "/";
      try { 
        Utility.typeOfSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
      
      int int0 = Utility.clearBit(512, (-3630));
      assertEquals(512, int0);
      
      short short0 = Utility.searchOpcode("void");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.getSignature("char");
      Utility.isJavaIdentifierPart('f');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(1317);
      constantArray0[0] = (Constant) constantString0;
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass((ConstantClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.isSet(67, 67);
      String string0 = "\\\\";
      Utility.convertString("\\");
      int int0 = 16;
      Utility.clearBit(16, 16);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-40);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.util.ClassLoaderRepository");
      String string0 = "Q9";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = Utility.clearBit(1157, 7);
      assertEquals(1029, int0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("`");
      assertEquals("`", string1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-9);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PJZUPx(gZ*F\"!-");
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("anewarray", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anewarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfMethodSignature("nSex.n^E/zC<W1+PD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nSex.n^E/zC<W1+PD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cf\"fQT;S}n#k5";
      stringArray0[1] = "cf\"fQT;S}n#k5";
      stringArray0[2] = "cf\"fQT;S}n#k5";
      stringArray0[3] = "cf\"fQT;S}n#k5";
      stringArray0[4] = "cf\"fQT;S}n#k5";
      stringArray0[5] = "cf\"fQT;S}n#k5";
      stringArray0[6] = "cf\"fQT;S}n#k5";
      Utility.methodTypeToSignature("cf\"fQT;S}n#k5", stringArray0);
      Utility.classOrInterface(2110);
      Utility.methodTypeToSignature("!>v}^FYd/r>~{epa=\"", stringArray0);
      Utility.methodTypeToSignature("cf\"fQT;S}n#k5", stringArray0);
      boolean boolean0 = false;
      Utility.accessToString(2110, false);
      Utility.searchOpcode("cf\"fQT;S}n#k5");
      Utility.compactClassName("java.lang.Ltableswitch;");
      try { 
        Utility.methodSignatureReturnType("e-JA=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `e-JA='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)84;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)84;
      Utility.equals(byteArray0, byteArray1);
      Utility.compactClassName("U&F", false);
      File file0 = MockFile.createTempFile("U&F", "U&F");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)84;
      objectArray0[1] = (Object) (byte) (-47);
      objectArray0[2] = (Object) (byte)69;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(14L, file0.length());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)84);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("hw ~wV_H\"I*");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble2;
      ConstantDouble constantDouble3 = new ConstantDouble((byte) (-87));
      constantArray0[3] = (Constant) constantDouble3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ret\t\t%7", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isSet(8192, 143);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte byte0 = Utility.typeOfSignature("CpV");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.format((-970), 143, false, '8');
      assertEquals("8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888-970", string0);
      
      String string1 = Utility.compactClassName("[dPB~ii7P};");
      assertEquals("[dPB~ii7P};", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("1a 05 07 2d 05 05", string2);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.isSet((-1614), 70);
      String string0 = "v>MK(+@#\"(&FG1<X";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Utility.replace("v>MK(+@#\"(&FG1<X", "iconst_0", "int");
      Utility.accessToString(115);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)112;
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)5;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte)30;
      byteArray0[8] = (byte)89;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)5;
      objectArray0[1] = (Object) (byte)89;
      Utility.printArray(objectArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.fillup("lf-M|eVQqnX0L", (-3571), false, '=');
      assertEquals("lf-M|eVQqnX0L", string0);
      
      int int0 = Utility.clearBit(115, (-1410));
      assertEquals(115, int0);
      
      boolean boolean0 = Utility.isSet(115, (-1098));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("_waO}>Cc_P", "_waO}>Cc_P", false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_waO}>Cc_P";
      stringArray0[1] = "_waO}>Cc_P";
      stringArray0[2] = "_waO}>Cc_P";
      stringArray0[3] = "_waO}>Cc_P";
      stringArray0[4] = "_waO}>Cc_P";
      Utility.methodTypeToSignature("_waO}>Cc_P", stringArray0);
      Utility.printArray((Object[]) stringArray0);
      try { 
        Utility.methodSignatureReturnType("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.accessToString((-2269));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "public private synchronized native interface abstract synthetic annotation enum";
      stringArray0[1] = "public private synchronized native interface abstract synthetic annotation enum";
      Utility.methodTypeToSignature("public private synchronized native interface abstract synthetic annotation enum", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)123;
      Constant[] constantArray0 = new Constant[6];
      MockFile mockFile0 = new MockFile(";~u$ C2");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "E,cUd/px}ibb`s&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"E,cUd/px}ibb`s&\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.setBit(144, (-6060));
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "6rq''7zuXelRi2}}T";
      try { 
        Utility.typeOfMethodSignature("6rq''7zuXelRi2}}T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6rq''7zuXelRi2}}T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.searchOpcode("areturn");
      Utility.classOrInterface(683);
      Utility.compactClassName("_waO}>Cc_PpaGsH<");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("_waO}>Cc_PpaGsH<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_waO}>Cc_PpaGsH<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-47);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-5);
      Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte)48);
      Utility.compactClassName("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    nop\n4:    <illegal opcode>\n5:    faload\n6:    <illegal opcode>\n", "0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    nop\n4:    <illegal opcode>\n5:    faload\n6:    <illegal opcode>\n", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lreturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = 2;
      Utility.isSet(2, 2);
      String string0 = "<";
      Utility.decode("<", false);
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.getSignature("?sCr95|J3d)CJ=mXGbk");
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.clearBit((-1663), (-1663));
      String string0 = Utility.format(2471, 2471, false, 'B');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.format(167, 167, true, '}');
      Utility.clearBit(167, 217);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 53
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      try { 
        Utility.typeOfSignature("array");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: array
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.searchOpcode("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-47);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-5);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte)48);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    lstore_2\n4:    <illegal opcode>\n5:    faload\n6:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("`q;+8uk:8wG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``q;+8uk:8wG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-33);
      byteArray0[0] = (byte) (-33);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "<Unknown>";
      Utility.convertString("<Unknown>");
      Utility.accessToString(769, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public native", "<Unknown>", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public native
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = (-2);
      Utility.isSet((-2), (-2));
      try { 
        Utility.methodSignatureArgumentTypes("\nAttribute(s):\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         // Attribute(s):
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = (-1103100070);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit((-1103100070), 2357);
      int int1 = (-1305);
      Utility.accessToString((-1305), true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("x[J[up1Ld@jMK", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `x[J[up1Ld@jMK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.accessToString((-1573), true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The array of prefixes must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of prefixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte) (-127);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "\t(wide)";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("\t(wide)", "\t(wide)", (String) null);
      Utility.setBit((-3245), (-3245));
      int int0 = 1627;
      Utility.isSet((-3245), 1627);
      String string1 = "\\]gN_LVF";
      String string2 = "`";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("null", "]gN_LVF", "`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = 171;
      Utility.setBit(171, 171);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".JD(WT:rq]y?Vs{");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ".JD(WT:rq]y?Vs{";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "C]%CW|F#<";
      objectArray0[3] = (Object) locale0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf(locale0, "C]%CW|F#<", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // c != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-5);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte)48);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    dload\t\t%65\n4:    <illegal opcode>\n5:    faload\n6:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "=7y\\mU";
      // Undeclared exception!
      try { 
        Utility.signatureToString("=7ymU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=7ymU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-97);
      Constant[] constantArray0 = new Constant[8];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(191, 235);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantInteger constantInteger0 = new ConstantInteger(191);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-97), 165);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-4097), 91);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble((ConstantDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "\\\"";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "jsr";
      stringArray0[1] = "\"";
      stringArray0[2] = "\"";
      stringArray0[3] = "jsr";
      stringArray0[4] = "\"";
      stringArray0[5] = "\"";
      stringArray0[6] = "jsr";
      stringArray0[7] = "jsr";
      stringArray0[8] = "\"";
      Utility.methodTypeToSignature("jsr", stringArray0);
      Utility.compactClassName("(Ljsr;L\";L\";Ljsr;L\";L\";Ljsr;Ljsr;L\";)Ljsr;", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"", "\"", "\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("nM*<hK3iKY}rKE.H$", false);
      Utility.convertString("nM*<hK3iKY}rKE.H$");
      int int0 = 2418;
      Utility.classOrInterface(2418);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "nM*<hK3iKY}rKE.H$";
      objectArray0[1] = (Object) "nM*<hK3iKY}rKE.H$";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "nM*<hK3iKY}rKE.H$";
      objectArray0[5] = (Object) "nM*<hK3iKY}rKE.H$";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "class";
      objectArray0[8] = (Object) "class";
      Utility.printArray(objectArray0, true, true);
      char char0 = 'K';
      Utility.isJavaIdentifierPart('K');
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 56, 42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "R28Vz\\e'V|?+7N1=";
      try { 
        Utility.typeOfSignature("R28Vze'V|?+7N1=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R28Vze'V|?+7N1=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("386", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 386
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-102);
      byte byte0 = (byte) (-10);
      byteArray0[7] = (byte) (-10);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.compactClassName("The offset cannot be negative");
      Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", (String) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The offset cannot be negative");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The offset cannot be negative
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3or[;|l.V@qb5i5M.E`");
      MockFile mockFile1 = new MockFile(mockFile0, "3or[;|l.V@qb5i5M.E`");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "3or[;|l.V@qb5i5M.E`");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile1;
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "3or[;|l.V@qb5i5M.E`";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockFileWriter0;
      objectArray0[8] = (Object) mockFile0;
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(9, objectArray0.length);
  }
}
