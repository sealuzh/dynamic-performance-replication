/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:26:51 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.net.URI;
import java.util.Locale;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      String string0 = SQLUtil.substituteMarkers(">AU0@s!-7^1hx?", ">AU0@s!-7^1hx?", mockHijrahDate0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.removeComments(")ea$~");
      String string0 = SQLUtil.renderValue(")ea$~");
      assertEquals("')ea$~'", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "Ajk*F`awH", "", stringArray0);
      assertEquals("Ajk*F`awH as  on null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.removeComments("alter materialized viewh *n8|:x/;<ocm:xc|");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("alter materialized viewh *n8|:x/;<ocm:xc|", "alter materialized viewh *n8|:x/;<ocm:xc|", stringArray0, "alter materialized viewh *n8|:x/;<ocm:xc|", "alter materialized viewh *n8|:x/;<ocm:xc|", stringArray0);
      assertEquals("alter materialized viewh *n8|:x/;<ocm:xc| join alter materialized viewh *n8|:x/;<ocm:xc| as alter materialized viewh *n8|:x/;<ocm:xc| on ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create materialized vieworg.apache.derby.impl.sql.compile.renamenode";
      String string0 = SQLUtil.leftJoin("create materialized vieworg.apache.derby.impl.sql.compile.renamenode", stringArray0, "org.apache", "create materialized vieworg.apache.derby.impl.sql.compile.renamenode", stringArray0);
      assertEquals("left join org.apache as create materialized vieworg.apache.derby.impl.sql.compile.renamenode on create materialized vieworg.apache.derby.impl.sql.compile.renamenode.create materialized vieworg.apache.derby.impl.sql.compile.renamenode = create materialized vieworg.apache.derby.impl.sql.compile.renamenode.create materialized vieworg.apache.derby.impl.sql.compile.renamenode", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, stringArray0[0], stringArray0[1], stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("_INDEX_", false, "sgPmb!GK{.h", "_INDEX_");
      dBCheckConstraint0.setDoc("_INDEX_");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK _INDEX_", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("allyemjzt7}o9iy");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "allyemjzt7}o9iy", true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT allyemjzt7}o9iy UNIQUE ()", string0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT allyemjzt7}o9iy ", string1);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("CONSTRAINT allyemjzt7}o9iy UNIQUE ()");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.leftJoin("table null", stringArray0, "table null", "table null", stringArray0);
      assertEquals("left join table null as table null on ", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9 E^>KD$%^WMR1");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9 E^>KD$%^WMR1";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (9 E^>KD$%^WMR1) REFERENCES 9 E^>KD$%^WMR1(9 E^>KD$%^WMR1)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("),", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-%dcfMS,|D.=f,", (DBTable) null, (-494), "-%dcfMS,|D.=f,");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("-%dcfMS,|D.=f, -%DCFMS,|D.=F, NULL", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sec<lect", (DBTable) null, (-494), "sec<lect");
      defaultDBColumn0.setDefaultValue("sec<lect");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("sec<lect SEC<LECT DEFAULT sec<lect NULL", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.normalize(" l@FTw-RvuD7l'uo/4p", false);
      assertEquals("l @ FTw - RvuD7l 'uo/4p'", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = SQLUtil.normalize("sec<lect", false);
      assertEquals("sec < lect", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("sec<lect");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "sec < lect";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("sec < lect = 'sec < lect'", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      stringArray0[1] = "U";
      stringArray0[2] = "LINKED";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("jM$S.v/@ = 'jM$S.v/@' AND U = 'U' AND LINKED = 'LINKED'", string0);
      
      String string1 = SQLUtil.normalize("//", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = SQLUtil.normalize(" syX&7hgLk(**<g%", true);
      assertEquals("syX & 7hgLk (* * < g %", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil sQLUtil0 = new SQLUtil();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(")45dhj:q<(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: )45dhj:q<(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2009, "create table ");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table ", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CREATE TABLE (0,3)", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.create table ", string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.removeComments("Pk;h*FT?-(/4[KC");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "KG_*/?Sw:y_;F7U";
      String string0 = SQLUtil.renderColumnListWithTableName("Pk;h*FT?-(/4[KC", stringArray0);
      assertEquals("Pk;h*FT?-(/4[KC.KG_*/?Sw:y_;F7U", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "=eO,cqHuA+k";
      stringArray0[1] = "=eO,cqHuA+k";
      SQLUtil.renderColumnListWithTableName("=eO,cqHuA+k", stringArray0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("BLG");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "sele";
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance(636, "sele");
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sele", defaultDBTable0, dBDataType0, integer1, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("SELE(0,0)", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("sele, sele, sele", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.removeComments("");
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = new Boolean("");
      SQLUtil.mutatesStructure("");
      SQLUtil.addRequiredCondition("deletei/:0", stringBuilder0);
      assertEquals("deletei/:0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SQLUtil.normalize("create materialized viewef=qx/uo", false);
      assertEquals("create materialized viewef = qx / uo", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      SQLUtil.isDDL("*o");
      boolean boolean1 = SQLUtil.isDDL("select");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = SQLUtil.normalize("`>eb)iz-R,ueL::m", false);
      assertEquals("` > eb) iz - R, ueL : : m", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("/'1X{Sx4U`2A)&3Sj&$", false);
      assertEquals("/ '1X{Sx4U`2A)&3Sj&$'", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("create materialized view5r", false, "rename", "rename");
      dBCheckConstraint0.toString();
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create materialized view5r\" CHECK rename", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("Illegal column type format: ");
      StringBuilder stringBuilder0 = new StringBuilder("updates%+elzct");
      SQLUtil.addRequiredCondition("drop indexs%+elzct", stringBuilder0);
      assertEquals("updates%+elzct and drop indexs%+elzct", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F<:QC8H;!JiziB");
      String[] stringArray0 = new String[8];
      stringArray0[1] = "F<:QC8H;!JiziB";
      stringArray0[2] = "F<:QC8H;!JiziB";
      stringArray0[4] = "F<:QC8H;!JiziB";
      stringArray0[5] = "F<:QC8H;!JiziB";
      stringArray0[6] = "F<:QC8H;!JiziB";
      stringArray0[7] = "F<:QC8H;!JiziB";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F<:QC8H;!JiziB", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder(39);
      SQLUtil.addOptionalCondition("cQdK)6sVyv[0'3F_R ", stringBuilder0);
      assertEquals("cQdK)6sVyv[0'3F_R ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("ac\"qNZ!6:", true);
      assertEquals("ac \"qNZ!6:\"", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("truncatekp;g/r0uyy?^[$~w+l");
      SQLUtil.mutatesDataOrStructure("getHoldability()");
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " and ";
      stringArray0[1] = " and ";
      stringArray0[2] = " and ";
      stringArray0[3] = "ruKMi`FXeEr@~&d";
      stringArray0[4] = " and ";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      SQLUtil.isDDL("ruKMi`FXeEr@~&d");
      boolean boolean1 = SQLUtil.isDDL("klPB6!8t<@/>VP6Up7b");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertNotNull(string0);
      assertEquals("schema ", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.removeComments("alter materialized viewh *n8|:x/;<ocm:xc|");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized viewh *n8|:x/;<ocm:xc|");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.isDML("callyemjzt7}oe9iy");
      MockFile.createTempFile("callyemjzt7}oe9iy", "org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation");
      SQLUtil.isDDL("org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation");
      Object object0 = new Object();
      SQLUtil.mutatesDataOrStructure("callyemjzt7}oe9iy");
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("h@dSJ@0HHhF_#`'");
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("callyemjzt7}oe9iy");
      File file0 = MockFile.createTempFile("callyemjzt7}oe9iy", "org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation");
      boolean boolean1 = SQLUtil.isDDL("org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation");
      assertFalse(boolean1);
      
      Object object0 = new Object();
      file0.setReadOnly();
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      streamTokenizer0.nval = 2.147483647E9;
      BufferedReader bufferedReader0 = new BufferedReader(mockFileReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("2147483647", string0);
      
      boolean boolean2 = SQLUtil.isProcedureCall("alter materialized vieworg.apache.derby.impl.store.raw.data.encryptcontainerundooperation");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sec<lect", (DBTable) null, (-494), "sec<lect");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      defaultDBColumn0.setDefaultValue("sec<lect");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("sec<lect SEC<LECT(0) DEFAULT sec<lect NULL", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = SQLUtil.normalize("-%dcfMS,|DA=f,", true);
      assertEquals("- % dcfMS, | DA = f,", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.parseColumnTypeAndSize("selct");
      SQLUtil.normalize("*/", true);
      SQLUtil.normalize("updaten/ `%i(~lvi)e'gnq`", true);
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("updaten/ `%i(~lvi)e'gnq`", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&o>g", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = "alter session";
      SQLUtil.mutatesDataOrStructure("alter session");
      String string1 = "23+VF*6haYf";
      SQLUtil.normalize("23+VF*6haYf", false);
      SQLUtil.parseColumnTypeAndSize("y`;");
      SQLUtil.normalize("(", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "23 + VF * 6haYf";
      defaultDBTable0.setOwner((CompositeDBObject<?>) null);
      stringArray0[1] = "n$";
      stringArray0[2] = "alter mater";
      stringArray0[3] = "23+VF*6haYf";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (23 + VF * 6haYf, n$, alter mater, 23+VF*6haYf)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-316182183), " =6EJT2u0x_W*gwm`(J");
      Integer integer0 = new Integer(90069);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" =6EJT2u0x_W*gwm`(J", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DataStore dataStore0 = new DataStore(" =6EJT2u0x_W*gwm`(J");
      VirtualFile virtualFile0 = new VirtualFile("s2 Lv$aw|'0>:daR3", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) nameSpec0;
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      objectArray0[1] = (Object) nameSpec0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " =6EJT2u0x_W*gwm`(J", objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Character character0 = Character.valueOf('t');
      SQLUtil.renderValue(character0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("allyemjzt7}o9iy");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("allyemjzt7}o9iy", false);
      assertEquals("allyemjzt7 } o9iy", string0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.addReferrer(defaultDBTable1);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("allyemjzt7 } o9iy", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = new Boolean("allyemjzt7}o9iy");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = FileUtil.canonicalFile(",@?%J2TF");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("_INDEX_", true, "h]x@M%KAzH'JM", "_INDEX_");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("_INDEX_");
      StringBuilder stringBuilder1 = stringBuilder0.append(';');
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("CONSTRAINT _INDEX_ CHECK _INDEX_", stringBuilder1);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder2);
      assertEquals("_INDEX_; or CONSTRAINT _INDEX_ CHECK _INDEX_CONSTRAINT _INDEX_ ", stringBuilder2.toString());
      assertEquals("_INDEX_; or CONSTRAINT _INDEX_ CHECK _INDEX_CONSTRAINT _INDEX_ ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileUtil.canonicalFile(",@?%J2TQJF");
      String string0 = SQLUtil.normalize(",@?%J2TQJF", false);
      assertEquals(", @ ? % J2TQJF", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EZWZQ8q#|Qw7";
      String string1 = SQLUtil.innerJoin("EZWZQ8q#|Qw7", stringArray0, "alter table- % dcfms, | d.= f,", "alter table- % dcfms, | d.= f,", stringArray0);
      assertEquals("alter table- % dcfms, | d.= f, as alter table- % dcfms, | d.= f, on EZWZQ8q#|Qw7.EZWZQ8q#|Qw7 = alter table- % dcfms, | d.= f,.EZWZQ8q#|Qw7", string1);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("setBytes(String,byte)");
      assertNull(boolean0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "EZWZQ8q#|Qw7", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (EZWZQ8q#|Qw7)", string2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("hv<0y1x44YEB");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((-171298924));
      MockFileWriter mockFileWriter0 = new MockFileWriter("hv<0y1x44YEB", true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "hv<0y1x44YEB";
      stringArray0[1] = "hyk?.Gxe+n1-";
      stringArray0[2] = "org.apache.derby.catalog.DependableFinder";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.catalog.DependableFinder", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("hyk?.Gxe+n1-", true, dBUniqueConstraint0);
      defaultDBTable0.addIndex(dBUniqueIndex0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      mockFileWriter0.append((CharSequence) "hv<0y1x44YEB", 9, 9);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("hv<0y1x44YEB", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLUtil.normalize("asin(double)", true);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("asin(double)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"double\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "sele";
      DBDataType dBDataType0 = DBDataType.getInstance(636, "sele");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sele", defaultDBTable0, dBDataType0, integer0, integer0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "a~wX`^/C|01C/vv", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      String string0 = "%W.U;2TepoGF6=";
      StringBuilder stringBuilder0 = new StringBuilder("%W.U;2TepoGF6=");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(413, 'H');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLUtil.normalize("drop tableorg.apache.derby.impl.store.raw.data.encryptcontainerundooperation", false);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setString(String,String)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "$d(sL2W", "sele");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("CHECK sele");
      StringBuilder stringBuilder1 = stringBuilder0.append('E');
      SQLUtil.addOptionalCondition("select intoco", stringBuilder1);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      assertEquals("CHECK seleE or select intoco", stringBuilder1.toString());
      assertEquals("CHECK seleE or select intoco", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("-%dcfMS,|D.=f,", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = " y:nX.>S__7";
      stringArray0[1] = "-%dcfMS,|D.=f,";
      stringArray0[2] = "-%dcfMS,|D.=f,";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" y:nX.>S__7", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      String string0 = SQLUtil.renderValue(mockThaiBuddhistDate0);
      assertNotNull(string0);
  }
}
