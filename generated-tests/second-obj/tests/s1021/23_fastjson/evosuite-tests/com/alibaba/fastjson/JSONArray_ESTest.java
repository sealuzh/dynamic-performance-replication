/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:29:48 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Integer integer0 = new Integer(68);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) integer0);
      boolean boolean0 = jSONArray2.addAll((Collection<?>) jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(2184);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2184, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(3089, (Object) mockThaiBuddhistDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) 3089);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertEquals(0, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(973);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 973, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap.KeySetView<Annotation, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(concurrentHashMap_KeySetView0);
      jSONArray1.clear();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1031);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) bufferedInputStream0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, bufferedInputStream0);
      jSONArray2.hashCode();
      assertEquals(3090, jSONArray1.size());
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.parallelStream();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(283);
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      Object object0 = new Object();
      jSONArray0.set(256, object0);
      LinkedHashSet<MockMinguoDate> linkedHashSet1 = new LinkedHashSet<MockMinguoDate>(283);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.remove(0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      List<BufferedInputStream> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.removeAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-183));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      ParserConfig.getGlobalInstance();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.lastIndexOf(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1743);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1743, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(283);
      Object object0 = new Object();
      jSONArray0.retainAll(jSONArray0);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      boolean boolean0 = jSONArray0.equals(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) sequenceInputStream0);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      JSONArray jSONArray4 = jSONArray3.fluentClear();
      ListIterator<Object> listIterator0 = jSONArray4.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(283);
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      Object object0 = new Object();
      jSONArray1.set(256, object0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove(256);
      // Undeclared exception!
      try { 
        jSONArray2.getBoolean(963);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 963, Size: 256
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = Calendar.TUESDAY;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.add((Object) mockHijrahDate0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1544), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.subList(951, (-1760));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(951) > toIndex(-1760)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[11];
      jSONArray0.set(987, (Object) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) mockMinguoDate0);
      jSONArray1.toArray();
      Integer integer0 = new Integer(987);
      Integer integer1 = new Integer((byte)0);
      jSONArray0.hashCode();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONObject jSONObject0 = new JSONObject();
      int int0 = Calendar.THURSDAY;
      jSONArray0.getBooleanValue(256);
      jSONArray0.getFloatValue(987);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONObject0.getTimestamp("@type");
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.getComponentType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Instant instant0 = MockInstant.now();
      MockInstant.adjustInto(instant0, instant0);
      jSONArray0.contains(instant0);
      Object object0 = jSONArray0.clone();
      assertTrue(object0.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(978);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1416, jSONObject0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      List<MockJapaneseDate> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) list0);
      jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.remove(580);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 580, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate((-443));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-1744));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.set(256, (Object) null);
      jSONArray0.getShortValue(209);
      jSONArray0.toArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.hashCode();
      jSONArray0.getLongValue(209);
      jSONArray0.getJSONObject(209);
      Integer integer1 = new Integer(256);
      int int0 = Calendar.THURSDAY;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 257
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(256, (Object) null);
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      jSONArray1.fluentAddAll((Collection<?>) linkedHashSet0);
      jSONArray0.getByteValue(256);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3089, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 257
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(261);
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      Object object0 = new Object();
      linkedHashSet0.clear();
      JSONArray jSONArray1 = jSONArray0.fluentSet(5, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getShort(256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-1));
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, mockHijrahDate0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      int int0 = 0;
      jSONArray0.getObject(0, (Type) parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        jSONArray1.toArray((PropertyNamingStrategy[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAddAll(1841, (Collection<?>) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1841, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowUnQuotedFieldNames;
      featureArray0[1] = feature1;
      Object object0 = new Object();
      jSONArray0.set(979, (Object) null);
      jSONArray0.getShortValue(209);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.getBoolean(1);
      Integer integer0 = new Integer(979);
      System.setCurrentTimeMillis(5751393439502795295L);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@type";
      stringArray0[1] = "com.alibaba.fastjson.JSONArray";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      jSONArray0.setComponentType(class1);
      assertEquals(980, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(283, byteArray0);
      SerializeConfig.getGlobalInstance();
      jSONArray1.set(256, byteArray0);
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(283);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [B@19d324a3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3875);
      int int0 = Opcodes.ICONST_0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.set(256, (Object) null);
      jSONArray0.getShortValue(209);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Integer integer0 = new Integer(3089);
      jSONArray0.getDoubleValue(206);
      jSONArray0.hashCode();
      jSONArray0.getLongValue(209);
      jSONArray0.getJSONObject(209);
      Integer integer1 = new Integer(256);
      int int0 = Calendar.THURSDAY;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 257
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray(283);
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      Object object0 = new Object();
      linkedHashSet0.add((MockThaiBuddhistDate) null);
      linkedHashSet0.add((MockThaiBuddhistDate) null);
      linkedHashSet0.stream();
      linkedHashSet0.add((MockThaiBuddhistDate) null);
      linkedHashSet0.clear();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      SerializeConfig.getGlobalInstance();
      jSONArray1.listIterator();
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 283;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray(283);
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      Object object0 = new Object();
      linkedHashSet0.add((MockThaiBuddhistDate) null);
      linkedHashSet0.clear();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      JSONArray jSONArray2 = jSONArray1.getJSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray2.getByteValue((-3282));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)51;
      byteArray0[4] = (byte)0;
      Feature[] featureArray0 = new Feature[2];
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      Object object0 = new Object();
      jSONArray0.set(971, (Object) null);
      jSONArray0.getBoolean(971);
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      jSONArray0.getBoolean(1);
      System.setCurrentTimeMillis(256);
      jSONArray1.contains(linkedHashSet0);
      jSONArray1.getRelatedArray();
      assertEquals(972, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap.KeySetView<Annotation, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(concurrentHashMap_KeySetView0);
      jSONArray0.setRelatedArray(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>(256);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byteArray0[0] = (byte)21;
      Object object0 = new Object();
      int int0 = 979;
      jSONArray0.set(979, (Object) null);
      int int1 = Opcodes.ICONST_0;
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(3069);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3069, Size: 980
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)92;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)92;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.fluentSet(3087, (Object) null);
      SerializeConfig.getGlobalInstance();
      jSONArray0.listIterator();
      boolean boolean0 = jSONArray0.getBooleanValue((byte)92);
      assertEquals(3088, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig.getGlobalInstance();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      jSONArray0.iterator();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(50);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(256, (Object) null);
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      JSON.DEFAULT_PARSER_FEATURE = 256;
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedHashSet0);
      JSON.DEFFAULT_DATE_FORMAT = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSONArray2.replaceAll(unaryOperator0);
      int int0 = jSONArray1.getIntValue(213);
      assertEquals(257, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>(2);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.set(977, mockHijrahDate0);
      jSONArray0.getBoolean((byte)21);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(977);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@2b9ce65e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>(256);
      Object object0 = new Object();
      jSONArray0.set(979, (Object) null);
      jSONArray0.getBoolean(979);
      jSONArray0.toArray();
      jSONArray0.getBoolean(198);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      linkedHashSet0.add(mockThaiBuddhistDate0);
      Integer integer0 = new Integer(198);
      jSONArray0.hashCode();
      Integer integer1 = new Integer((byte)21);
      jSONArray0.getJSONObject((byte)21);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      jSONArray0.removeAll(linkedHashSet0);
      int int0 = Calendar.MILLISECOND;
      Integer integer2 = new Integer(3089);
      jSONArray1.addAll(979, (Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(979);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@4f3879fb
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      byte[] byteArray0 = new byte[11];
      Object object0 = new Object();
      jSONArray0.set(987, (Object) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.getBoolean(987);
      jSONArray0.getShortValue(192);
      jSONArray0.toArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      mockThaiBuddhistDate0.getMockedClassName();
      linkedHashSet0.add(mockThaiBuddhistDate0);
      Integer integer0 = new Integer(987);
      Integer integer1 = new Integer((byte)0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.containsAll(linkedHashSet0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-2829));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3072);
      jSONArray0.remove((Object) null);
      LinkedHashSet<BufferedInputStream> linkedHashSet0 = new LinkedHashSet<BufferedInputStream>();
      jSONArray0.containsAll(linkedHashSet0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      assertEquals(256, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>(256);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.indexOf(mockThaiBuddhistDate0);
      byte[] byteArray0 = new byte[11];
      Object object0 = new Object();
      int int0 = 987;
      jSONArray0.set(987, mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(987);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@55ccd1c2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.set(256, (Object) null);
      jSONArray0.getShortValue(209);
      jSONArray0.toArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Integer integer0 = new Integer(3089);
      jSONArray0.getDoubleValue(206);
      jSONArray0.hashCode();
      jSONArray0.getLongValue(209);
      jSONArray0.getJSONObject(209);
      Integer integer1 = new Integer(256);
      int int0 = Calendar.THURSDAY;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 257
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Method> linkedHashSet0 = new LinkedHashSet<Method>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      LinkedHashSet<JSONPath.Operator> linkedHashSet1 = new LinkedHashSet<JSONPath.Operator>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.BETWEEN;
      linkedHashSet1.add(jSONPath_Operator0);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_LIKE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(linkedHashSet1);
      // Undeclared exception!
      try { 
        jSONArray3.getLongValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>(256);
      byte[] byteArray0 = new byte[11];
      Object object0 = new Object();
      jSONArray0.set(3089, linkedHashSet0);
      jSONArray0.getBoolean(997);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      linkedHashSet0.add(mockThaiBuddhistDate0);
      jSONArray0.toArray();
      Integer integer0 = new Integer(997);
      jSONArray0.getDoubleValue(206);
      jSONArray0.hashCode();
      Integer integer1 = new Integer(209);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.mark(256);
      jSONArray0.getJSONObject(1);
      Integer integer2 = new Integer(1);
      jSONArray0.getBooleanValue(997);
      jSONArray0.getFloatValue(32);
      jSONArray0.getJSONObject(961);
      jSONArray0.removeAll(linkedHashSet0);
      jSONArray0.parallelStream();
      jSONArray0.getTimestamp(1);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@71b4f5b0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      byte[] byteArray0 = new byte[11];
      Object object0 = new Object();
      int int0 = 987;
      jSONArray0.set(987, byteArray0);
      int int1 = 209;
      jSONArray0.getShortValue(209);
      jSONArray0.toArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      mockThaiBuddhistDate0.getMockedClassName();
      linkedHashSet0.add(mockThaiBuddhistDate0);
      Integer integer0 = new Integer(987);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(987);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : [B@5853c106
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
