/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 01:21:53 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4030));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4030), "hey.a.m.FTeldWriter", "hey.a.m.FTeldWriter", "hey.a.m.FTeldWriter", "hey.a.m.FTeldWriter");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "hey.a.m.FTeldWriter";
      stringArray0[3] = "";
      stringArray0[4] = "hey.a.m.FTeldWriter";
      classWriter0.visit((-4030), (-1782), "", "dI", "", stringArray0);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-52));
      classWriter0.index = (-52);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4030));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4030), "hey.a.m.FTeldWriter", "hey.a.m.FTeldWriter", "hey.a.m.FTeldWriter", "hey.a.m.FTeldWriter");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "hey.a.m.FTeldWriter";
      stringArray0[3] = "";
      stringArray0[4] = "hey.a.m.FTeldWriter";
      classWriter0.visit((-4030), (-1782), "", "dI", "", stringArray0);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-52));
      classWriter0.index = (-52);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1389);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "org.apache.commons.io.filefilter.DelegateFileFilter", "org.apache.commons.io.filefilter.DelegateFileFilter", "org.apache.commons.io.filefilter.DelegateFileFilter", "org.apache.commons.io.filefilter.DelegateFileFilter");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "I'x>?", "RuntimeInvisibleAnnotations", "I'x>?", "RuntimeInvisibleAnnotations");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4067));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-3966), "M", "Uvq>>B", "=Od~~]qn", pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.PipedInputStream@30eb4a43
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3845);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3845, "',!]+]", "',!]+]", "+GOKNTV'Q/cQD|[uA", "',!]+]");
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("HRyxMtOag");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4067));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "wheel.asm.FieldWriter", "A#D<E:Y{A%Z(~N.rFjJ", "wheel.asm.FieldWriter", "M");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.visitAnnotation("RfSM~y}58M]8>on", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4067));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4067), "wheel.asm.FieldWriter", "", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
      classWriter0.visit(49, 86, "8K K;*v0{Be95[oa2sQ", "", "8K K;*v0{Be95[oa2sQ", (String[]) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4067));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4067), "wheel.asm.FieldWriter", "", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4030));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "SGJIc\"${ap)T", "hey.a.m.FTeldWriter", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2008, "Ar9I6l69<F+ls", "", "Ar9I6l69<F+ls", "");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3308));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "9fw0|Z1'B6B6$wK:V", "-", "", (Object) null);
      fieldWriter0.visitAnnotation("", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4067));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4067), "wheel.asm.FieldWriter", "", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
      classWriter0.visit(49, 86, "8K K;*v0{Be95[oa2sQ", "", "8K K;*v0{Be95[oa2sQ", (String[]) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4067));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4067), "wheel.asm.FieldWriter", "", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2008, "Ar9I6l69<F+ls", "", "Ar9I6l69<F+ls", "");
      fieldWriter0.visitAnnotation("", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4067));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4067), "wheel.asm.FieldWriter", "M", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
      fieldWriter0.visitAnnotation("rw~D&N`!_rO!", false);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4030));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "SGJIc\"${ap)T", "hey.a.m.FTeldWriter", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4067));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4067), "wheel.asm.FieldWriter", "", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 36, "", "", "8K K;*v0{Be95[oa2sQ", "");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4067));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4067), "wheel.asm.FieldWriter", "M", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-52));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }
}
