/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:08:12 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.error.StandardException;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.impl.sql.compile.Predicate;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.commons.ErrorHandler;
import org.databene.commons.Level;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainerSupport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBArray;
import org.h2.command.dml.RunScriptCommand;
import org.h2.engine.Session;
import org.h2.engine.SessionRemote;
import org.h2.jdbc.JdbcPreparedStatement;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.h2.value.ValueDecimal;
import org.hsqldb.jdbcDriver;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("No environment definition '", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBUtil.available("", (String) null, (String) null, (String) null);
      DBUtil.checkReadOnly((String) null, false);
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, 'L', (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "UUzm#/gehz+;");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DBUtil.assertAllDbResourcesClosed(false);
      // Undeclared exception!
      try { 
        DBUtil.getStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, "j,`FSd}ce$9l:j", "", (String) null);
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryLong("j,`FSd}ce$9l:j", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DBUtil.getOpenResultSetCount();
      jdbcDriver.getConnection("BC<,* CO", (Properties) null);
      boolean boolean0 = true;
      Level level0 = Level.debug;
      ErrorHandler errorHandler0 = new ErrorHandler("+DuH2L", level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("*u<RpIb", "*u<RpIb", (Connection) null, true, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: *u<RpIb
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBUtil.resetMonitors();
      DBUtil.checkReadOnly("?[PkNT%Px[+[9Tc", false);
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript("?[PkNT%Px[+[9Tc", '\'', (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      DBUtil.escape("");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DBUtil.connect("-8WX}yT1yO:k49DQ8{E", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '-8WX}yT1yO:k49DQ8{E.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBUtil.existsEnvironment((String) null);
      DBUtil.getOpenPreparedStatementCount();
      int int0 = DBUtil.getOpenStatementCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      List<Object[]> list0 = new ArrayList<Object[]>();
      DBUtil.getOpenConnectionCount();
      String string0 = DBUtil.format(simpleResultSet0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "opening connection to ";
      DBUtil.existsEnvironment("opening connection to ");
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, (String) null, false, 3, 10, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("", "", "", "");
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      DBUtil.wrapWithPooledConnection((Connection) null, false);
      DBUtil.close((Connection) null);
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      assertEquals(Level.fatal, errorHandler0.getLevel());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "j,`FSd}ce$9l:j";
      Class<JdbcPreparedStatement> class0 = JdbcPreparedStatement.class;
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, "j,`FSd}ce$9l:j", "j,`FSd}ce$9l:j", (String) null);
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC driver class name specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("j,`FSd}ce$9l:j", "L012", "", "L012");
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting L012 failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, "j,`FSd}ce$9l:j", "", (String) null);
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.close((Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.proxy.PooledConnectionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "?[PkNT%Px[+[9Tc";
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly("?[PkNT%Px[+[9Tc", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: ?[PkNT%Px[+[9Tc
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "?=u";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      Predicate predicate0 = new Predicate();
      predicate0.getSearchClauseHT();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.parseResultRow(simpleResultSet0);
      DBUtil.closeResultSetAndStatement(simpleResultSet0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      RunScriptCommand runScriptCommand0 = null;
      try {
        runScriptCommand0 = new RunScriptCommand((Session) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.command.Prepared", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "";
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      boolean boolean0 = false;
      String string1 = "h";
      try { 
        DBUtil.getMetaData((Connection) null, " VARYING", "", true, false, false, false, "h", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.nextLine(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "E6B>HX";
      DBUtil.existsEnvironment("E6B>HX");
      DBUtil.existsEnvironment("");
      Connection connection0 = null;
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      DBUtil.executeUpdate("", (Connection) null);
      DBSchema dBSchema0 = new DBSchema("N'");
      // Undeclared exception!
      try { 
        DBUtil.queryString((PreparedStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBUtil.checkReadOnly("s", false);
      ErrorHandler.getDefault();
      Level level0 = Level.info;
      ErrorHandler errorHandler0 = new ErrorHandler("s", level0);
      errorHandler0.handleError("J#Y%", (Throwable) null);
      // Undeclared exception!
      try { 
        DBUtil.runScript("-PSB0ADq~;", '\'', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorHandler.getDefault();
      String string0 = "Tried to mutate a database with read-only settings: ";
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("?[", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.query("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, (String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) simpleResultSet0;
      objectArray0[1] = (Object) fBArray0;
      objectArray0[2] = (Object) fBArray0;
      objectArray0[3] = (Object) fBArray0;
      objectArray0[4] = (Object) fBArray0;
      objectArray0[5] = (Object) fBArray0;
      simpleResultSet0.addRow(objectArray0);
      List<Object[]> list0 = DBUtil.parseResultSet(simpleResultSet0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      DBUtil.dependencyOrderedTables(tableContainerSupport0);
      String string0 = "/)lD$K#@?A";
      String string1 = "Y&'Xj+,Vhxr";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Y&'Xj+,Vhxr");
      char char0 = 'T';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Session session0 = new Session();
      RunScriptCommand runScriptCommand0 = null;
      try {
        runScriptCommand0 = new RunScriptCommand(session0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.command.Prepared", e);
      }
  }
}
