/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:15:03 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.SyncFailedException;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Pipe pipe0 = new Pipe(1112L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(2981L);
      Buffer buffer0 = pipe0.buffer;
      boolean boolean0 = buffer0.request(1L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong(8L);
      int int0 = buffer_UnsafeCursor0.next();
      assertFalse(buffer0.exhausted());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.rangeEquals((-3L), byteString0);
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(576L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=575 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      
      hashingSource0.close();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.toString();
      int int0 = buffer_UnsafeCursor0.seek((-1L));
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), int0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Pipe pipe0 = new Pipe(71776119061217280L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.segmentSizes();
      try { 
        buffer0.require(2547L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Segment segment0 = buffer0.writableSegment(767);
      buffer0.head = segment0;
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-490L));
      buffer1.readShort();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(3351L);
      Buffer buffer0 = pipe0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipe0.sourceClosed = true;
      buffer0.sha256();
      buffer0.emit();
      Buffer buffer1 = pipe0.buffer;
      buffer1.writeUtf8CodePoint((-2503));
      long long0 = new Integer((-2503));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      buffer0.write(byteString0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffcf
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.readAll(buffer1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-922337203685477580L));
      buffer1.sha256();
      buffer0.readByteString();
      buffer0.sha512();
      buffer0.exhausted();
      // Undeclared exception!
      try { 
        buffer1.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.emitCompleteSegments();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Pipe pipe0 = new Pipe(3292L);
      Buffer buffer0 = pipe0.buffer;
      boolean boolean0 = pipe0.sourceClosed;
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      MockFile mockFile0 = new MockFile("k7_Z.uN'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Buffer buffer2 = buffer1.copyTo((OutputStream) mockPrintStream0);
      buffer2.readUtf8();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "q}");
      // Undeclared exception!
      try { 
        buffer2.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!J%BJ(\u0003tC");
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Pipe pipe0 = new Pipe(1011L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      try { 
        buffer0.readFully(buffer1, 1011L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)19;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOf(byteString0, 2240L);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(69L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writableSegment(721);
      buffer0.toString();
      pipe0.sinkClosed = true;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      long long0 = buffer_UnsafeCursor0.offset;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(10000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=10000 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)115, 8192L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeLongLe(2851L);
      buffer0.readUtf8Line();
      buffer0.completeSegmentByteCount();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      pipe0.sinkClosed = false;
      buffer0.size();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      buffer0.indexOfElement(byteString1);
      buffer0.indexOf((byte)0, 139L, 1385L);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      try { 
        buffer1.readUtf8Line(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Inflater inflater0 = new Inflater(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MN#*5Y7)");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(3837L);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)7;
      inflater0.setDictionary(byteArray0);
      inflaterSource0.timeout();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.buffer.indexOfElement(byteString0);
      realBufferedSource0.buffer.indexOf((byte)0);
      buffer0.writeHexadecimalUnsignedLong((byte)0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      buffer0.readUnsafe();
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-55);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.hmacSha1(byteString0);
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Segment segment0 = buffer0.writableSegment(767);
      buffer0.head = segment0;
      buffer0.sha1();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      buffer0.size();
      pipe0.sourceClosed = false;
      ByteString byteString0 = buffer0.sha256();
      Buffer buffer1 = buffer0.writeLong(0L);
      buffer0.hmacSha1(byteString0);
      buffer0.request(3307L);
      buffer0.readShort();
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, 3307L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer2.read(buffer_UnsafeCursor0.buffer, (-2493L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2493
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      buffer1.readUtf8();
      buffer0.size();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("0", (-2147220281), 104);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2147220281
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.exhausted();
      buffer1.equals(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.timeout();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, (int) (byte)0, (int) (byte)13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      buffer1.outputStream();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      pipe0.sourceClosed = true;
      buffer0.sha256();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Integer integer0 = new Integer((-1616));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.clear();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Pipe pipe0 = new Pipe(3351L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      HashingSource hashingSource0 = HashingSource.md5(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString1 = hashingSink0.hash();
      buffer1.write(byteString1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.indexOf(byteString1);
      buffer1.size();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) pipedInputStream0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer1.readShortLe();
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSink.sha512(buffer1);
      buffer_UnsafeCursor0.buffer.inputStream();
      ByteString byteString1 = buffer_UnsafeCursor0.buffer.sha256();
      Buffer buffer2 = (Buffer)buffer0.emit();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer();
      int int0 = (-148);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      // Undeclared exception!
      try { 
        buffer2.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer0.readShortLe();
      ByteString byteString0 = new ByteString((byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSink.sha512(buffer_UnsafeCursor0.buffer);
      ByteString byteString1 = buffer1.sha256();
      buffer1.emit();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource0.buffer();
      byteString1.asByteBuffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer_UnsafeCursor0.buffer.selectPrefix(options0);
      Deflater deflater0 = null;
      try {
        deflater0 = new Deflater((-91), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      inflater0.setDictionary(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.buffer.indexOfElement(byteString0);
      Buffer buffer1 = realBufferedSource0.buffer();
      realBufferedSource0.buffer.readUtf8();
      buffer0.size();
      buffer1.writeDecimalLong((-1L));
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      hashingSink0.hash();
      hashingSink0.toString();
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!J%BJ(\u0003tC");
      Pipe pipe0 = new Pipe(3351L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      pipe0.sourceClosed = false;
      Buffer buffer1 = (Buffer)buffer0.emit();
      Buffer buffer2 = buffer1.writeUtf8CodePoint((-2503));
      long long0 = new Integer((-2503));
      long long1 = 954L;
      // Undeclared exception!
      try { 
        buffer2.readAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.buffer();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Pipe pipe0 = new Pipe(1L);
      boolean boolean0 = pipe0.sinkClosed;
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(128);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      byteString0.write(dataOutputStream0);
      buffer0.hmacSha512(byteString0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        buffer0.readFrom((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4))JzK");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(16711680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: ff0000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(128);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      buffer0.writeUtf8CodePoint(128);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.size();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      ByteString byteString0 = new ByteString((byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer_UnsafeCursor0.buffer.writeAll(buffer0);
      buffer0.request(0L);
      buffer0.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.exhausted();
      // Undeclared exception!
      try { 
        buffer1.readByteString(8L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=8
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer_UnsafeCursor0.buffer.segmentSizes();
      HashingSource.md5(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.toString();
      buffer1.size();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) pipedInputStream0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Pipe pipe0 = new Pipe(1855L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.emit();
      Buffer buffer2 = buffer0.writeUtf8CodePoint((-1));
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer2.read((byte[]) null, (int) (byte)76, 65533);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      InputStream inputStream0 = buffer0.inputStream();
      ByteString byteString0 = buffer0.sha256();
      Buffer buffer1 = buffer0.writeLong((-99L));
      Buffer buffer2 = pipe0.buffer;
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      buffer2.write(byteString1);
      buffer2.size();
      buffer0.readFrom(inputStream0, 28L);
      buffer2.size();
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000L);
      buffer1.outputStream();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)0, 100000000000L, (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=12 fromIndex=100000000000 toIndex=0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      try { 
        buffer2.readUtf8LineStrict(100000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = 3351L;
      Pipe pipe0 = new Pipe(3351L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      buffer0.sha256();
      Buffer buffer1 = (Buffer)buffer0.emit();
      buffer1.writeUtf8CodePoint((-2503));
      Integer integer0 = new Integer((-2503));
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=39\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Pipe pipe0 = new Pipe(3325L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      buffer0.indexOf((byte)16);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      pipe0.sinkClosed = false;
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = buffer1.writeByte(8);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer2.indexOfElement(byteString0);
      buffer1.size();
      try { 
        buffer2.readUtf8Line(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("b}|g,&BCw56n;]XBQwd", "b}|g,&BCw56n;]XBQwd");
      MockFile mockFile1 = new MockFile(mockFile0, "b}|g,&BCw56n;]XBQwd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockPrintStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      ByteString byteString0 = buffer0.sha512();
      buffer_UnsafeCursor0.resizeBuffer(60L);
      buffer0.readUtf8CodePoint();
      ByteString byteString1 = buffer0.md5();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/b}|g,&BCw56n;]XBQwd");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "b}|g,&BCw56n;]XBQwd");
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeInt(1);
      buffer_UnsafeCursor0.buffer.size();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer3.readShortLe();
      buffer1.indexOf(byteString0, 782L);
      buffer0.indexOfElement(byteString1, 60L);
      buffer2.writeTo((OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)24;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      buffer0.segmentSizes();
      Buffer buffer1 = buffer0.writeIntLe((byte)0);
      buffer1.readShortLe();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink.sha512(hashingSink0);
      ByteString byteString1 = hashingSink0.hash();
      buffer0.indexOfElement(byteString1);
      Buffer buffer2 = buffer1.writeDecimalLong((short)0);
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte) (-117), (-1705L), 65536L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=3 fromIndex=-1705 toIndex=65536
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.sha512();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeLongLe(75L);
      buffer0.completeSegmentByteCount();
      buffer0.emitCompleteSegments();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)24;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      buffer1.toString();
      buffer1.indexOf((byte)0, 5L, 5L);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.writeString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      Inflater inflater1 = new Inflater(true);
      byte[] byteArray0 = new byte[0];
      inflater1.setDictionary(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.buffer.indexOfElement(byteString0);
      Buffer buffer1 = realBufferedSource0.buffer();
      realBufferedSource0.buffer.readUtf8();
      buffer1.size();
      buffer1.writeDecimalLong(974L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      buffer0.size();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.readUtf8();
      buffer0.size();
      buffer0.writeDecimalLong(65536L);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      buffer0.size();
      pipe0.sourceClosed = true;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("DeflaterSink(", 97, 1127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1127 > 13
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-2357);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("cHJ`6y", 3132, (-2357));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -2357 < 3132
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Pipe pipe0 = new Pipe(69L);
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      buffer0.indexOf((byte)9);
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000000L);
      buffer0.writeUtf8("inflater == null");
      buffer1.emitCompleteSegments();
      buffer1.timeout();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      inflater0.setDictionary(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.buffer.indexOfElement(byteString0);
      Buffer buffer1 = realBufferedSource0.buffer();
      realBufferedSource0.buffer.readUtf8();
      buffer0.size();
      buffer1.writeDecimalLong((-1L));
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wvUhcR[;]Z");
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 56, 56, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 56 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4)cf)Z2JzK");
      buffer0.exhausted();
      buffer1.equals(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("4)cf)Z2JzK", (-1371), (-1), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1371
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      pipe0.sourceClosed = true;
      buffer0.sha256();
      Buffer buffer1 = buffer0.writeLong(0L);
      Buffer buffer2 = buffer1.clone();
      buffer1.readByte();
      buffer2.outputStream();
      try { 
        buffer2.write((Source) buffer0, 592L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = true;
      boolean boolean0 = pipe0.sinkClosed;
      buffer0.writeDecimalLong((byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      buffer1.inputStream();
      buffer0.size();
      ByteString byteString0 = buffer1.sha256();
      Buffer buffer2 = buffer1.writeLong(0L);
      Buffer buffer3 = pipe0.buffer;
      ByteString byteString1 = buffer2.hmacSha1(byteString0);
      buffer1.write(byteString1);
      buffer3.size();
      try { 
        buffer0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=00000000000000004ef94bccf99384aeb76a603631f85cc5b2fb2fd6\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeUtf8CodePoint(4937);
      buffer0.readUtf8();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\u1349", "\u1349");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \u1349
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      buffer0.timeout();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      hashingSource0.timeout();
      byteArray0[4] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.buffer.rangeEquals((-1197L), byteString0, (-2429), (int) (byte)0);
      Buffer buffer1 = new Buffer();
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.hmacSha256(byteString1);
      Buffer buffer3 = buffer0.writeUtf8CodePoint(56320);
      buffer3.readUtf8((long) (byte)0);
      buffer1.hashCode();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(128);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      buffer0.writeUtf8CodePoint(65280);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0);
      hashingSource0.close();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.timeout();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(65536);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      try { 
        realBufferedSource0.readUtf8(100000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      buffer0.writeShort((-25));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.sha512();
      buffer1.readShortLe();
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer0.md5();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFully(buffer1, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0);
      ByteString byteString1 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "b}|g,&BCw56n;]XBQwd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockFile0.setWritable(false);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      ByteString byteString0 = new ByteString((byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b}|g,&BCw56n;]XBQwd");
      buffer_UnsafeCursor0.resizeBuffer(62L);
      buffer2.readUtf8CodePoint();
      buffer1.readInt();
      buffer0.md5();
      mockFile0.deleteOnExit();
      buffer1.writeShort(2854);
      buffer0.emitCompleteSegments();
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.size();
      pipe0.sourceClosed = true;
      ByteString byteString0 = buffer0.sha256();
      long long0 = 0L;
      buffer0.writeLong(0L);
      Buffer buffer1 = pipe0.buffer;
      buffer1.hmacSha1(byteString0);
      buffer0.write(byteString0);
      buffer0.size();
      Buffer buffer2 = buffer1.writeDecimalLong(40L);
      buffer1.writeIntLe(11);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      buffer2.readByteString((long) 11);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(enumeration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      InputStream inputStream0 = buffer0.inputStream();
      pipe0.sourceClosed = true;
      buffer0.size();
      pipe0.sourceClosed = true;
      ByteString byteString0 = buffer0.sha256();
      Buffer buffer1 = buffer0.writeLong(0L);
      Buffer buffer2 = pipe0.buffer;
      buffer2.hmacSha1(byteString0);
      buffer0.write(byteString0);
      buffer0.size();
      Buffer buffer3 = buffer2.writeDecimalLong(40L);
      buffer2.writeIntLe(11);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0, 11);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn(bufferedInputStream0).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      buffer1.indexOf((byte)0, 5L, 40L);
      buffer3.readInt();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)84;
      buffer0.require((byte) (-50));
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-61);
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer1.readShortLe();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      hashingSink0.hash();
      buffer0.emit();
      buffer1.hashCode();
      buffer0.readUtf8CodePoint();
      buffer0.completeSegmentByteCount();
      long long0 = new Integer((-1));
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict((long) (short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Charset.defaultCharset();
      buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-1932735282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeIntLe((-1610612735));
      HashingSink.sha512(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.readIntLe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      Buffer buffer1 = new Buffer();
      buffer0.completeSegmentByteCount();
      buffer1.readAndWriteUnsafe();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Pipe pipe0 = new Pipe(255L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      try { 
        buffer1.write((Source) buffer0, 15L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      buffer1.inputStream();
      buffer0.size();
      buffer1.sha256();
      Buffer buffer2 = buffer1.writeLong(0L);
      Buffer buffer3 = pipe0.buffer;
      buffer3.readByte();
      buffer3.outputStream();
      Buffer buffer4 = buffer1.writeShortLe((byte)0);
      buffer3.write((Source) buffer1, 0L);
      buffer2.writeUtf8CodePoint((byte)0);
      // Undeclared exception!
      try { 
        buffer4.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Pipe pipe0 = new Pipe(69L);
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Segment segment0 = buffer0.writableSegment(767);
      buffer0.head = segment0;
      buffer0.size();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000000L);
      buffer1.emitCompleteSegments();
      buffer1.timeout();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      pipe0.sinkClosed = false;
      buffer0.size();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      Buffer buffer1 = buffer0.writeLong(0L);
      buffer1.readLongLe();
      // Undeclared exception!
      try { 
        buffer1.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      pipe0.sourceClosed = true;
      buffer0.sha256();
      Buffer buffer1 = buffer0.writeLong(0L);
      Buffer buffer2 = buffer1.writeByte((-2527));
      buffer0.readLongLe();
      buffer1.clone();
      buffer2.readByte();
      // Undeclared exception!
      try { 
        buffer1.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      Buffer buffer1 = buffer0.writeIntLe((-112));
      buffer1.timeout();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)38;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      String string0 = "4)cf)JzK";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4)cf)JzK");
      buffer0.exhausted();
      buffer1.equals(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Pipe pipe0 = new Pipe(3292L);
      pipe0.sinkClosed = true;
      boolean boolean0 = pipe0.sourceClosed;
      Buffer buffer0 = pipe0.buffer;
      buffer0.indexOf((byte)34, (long) (byte)0, 28L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("newSize < 0: ");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      ByteString.of(byteBuffer1);
      byteString0.utf8();
      buffer0.rangeEquals(28L, byteString0, (int) (byte)34, (int) (byte)0);
      buffer0.writeInt((byte)34);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      buffer0.size();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-9);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.rangeEquals(10000000000000000L, byteString0, 49, (-1640));
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.hmacSha256(byteString0);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Pipe pipe0 = new Pipe(69L);
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Segment segment0 = buffer0.writableSegment(767);
      buffer0.head = segment0;
      buffer0.size();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000000L);
      buffer1.emitCompleteSegments();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer0.clone();
      buffer1.readByte();
      buffer3.writeShortLe((byte)51);
      buffer0.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer_UnsafeCursor0.close();
      buffer_UnsafeCursor0.offset = (-4429L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer1.size();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Pipe pipe0 = new Pipe(69L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Segment segment0 = buffer0.writableSegment(767);
      buffer0.head = segment0;
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-101), (-1705L), 16L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1705 toIndex=16
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      buffer0.read(byteArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[0] = (byte) (-102);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer1 = buffer0.writeLong(3405L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.readUtf8Line();
      buffer0.size();
      buffer1.write(byteArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(69L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writableSegment(721);
      buffer0.size();
      buffer0.toString();
      pipe0.sinkClosed = true;
      buffer0.writeDecimalLong(999999999999972L);
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      buffer0.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      buffer0.size();
      pipe0.sourceClosed = true;
      buffer0.sha256();
      Buffer buffer1 = buffer0.writeLong(0L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      buffer0.toString();
      Buffer buffer2 = buffer1.writeDecimalLong(2147483647L);
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(69L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writableSegment(721);
      buffer0.size();
      buffer0.toString();
      pipe0.sinkClosed = true;
      buffer0.writeLongLe(69L);
      buffer0.writeDecimalLong(999999999999972L);
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x45
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong((byte)7);
      MockFile mockFile0 = new MockFile("okio.SegmentedByteString");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      buffer1.copyTo((OutputStream) mockPrintStream0);
      buffer1.readUtf8();
      InputStream inputStream0 = buffer0.inputStream();
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      hashingSink0.hash();
      Buffer buffer2 = new Buffer();
      try { 
        buffer2.readFrom(inputStream0, (long) (byte)7);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.size();
      boolean boolean0 = pipe0.sourceClosed;
      buffer0.writeDecimalLong((byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      ByteString byteString0 = new ByteString((byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer_UnsafeCursor0.buffer.segmentSizes();
      // Undeclared exception!
      try { 
        byteString0.base64();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      buffer0.size();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.rangeEquals((long) (byte)0, byteString0, (int) (byte)0, (int) (byte) (-84));
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.indexOfElement((ByteString) null);
      buffer1.writeDecimalLong(100000000L);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)74, 210L, (-490L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=210 toIndex=-490
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Pipe pipe0 = new Pipe(574L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.readUtf8();
      buffer_UnsafeCursor0.readWrite = false;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer_UnsafeCursor0.buffer.rangeEquals(574L, byteString0, (-1), (-1717986917));
      HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.buffer.size();
      buffer0.writeDecimalLong((-7L));
      buffer1.completeSegmentByteCount();
      Buffer buffer2 = new Buffer();
      Object object0 = new Object();
      buffer_UnsafeCursor0.buffer.equals(object0);
      buffer_UnsafeCursor0.close();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.sha512();
      byte byte0 = (byte) (-84);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1087);
      buffer0.hashCode();
      buffer1.readUtf8CodePoint();
      buffer1.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.writeLongLe((-1));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Pipe pipe0 = new Pipe(3351L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.sha256();
      buffer0.writeByte((-2527));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.readUtf8();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-507L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -507
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("b}|g,&BCw56n;]XBQwd", "b}|g,&BCw56n;]XBQwd");
      MockFile mockFile1 = new MockFile(mockFile0, "b}|g,&BCw56n;]XBQwd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.resizeBuffer(62L);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.sha512();
      buffer_UnsafeCursor0.resizeBuffer(2);
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer_UnsafeCursor0.buffer.readShortLe();
      ByteString byteString0 = new ByteString(byteArray0);
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.toString();
      hashingSource0.hash();
      buffer0.indexOf(byteString0);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer0.readUtf8Line();
      MockFile mockFile0 = new MockFile("\uFFFD", "HashingSource(okio.Buffer@0000000001)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo((OutputStream) mockFileOutputStream0, (long) 65533, (long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=65533 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("");
      mockFile0.setWritable(false);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.resizeBuffer(62L);
      buffer2.readUtf8CodePoint();
      buffer1.readInt();
      buffer0.md5();
      mockFile0.deleteOnExit();
      buffer0.size();
      buffer2.toString();
      buffer0.writeDecimalLong((-1));
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      buffer0.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Segment segment0 = new Segment();
      buffer0.head = segment0;
      // Undeclared exception!
      try { 
        buffer0.sha1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer1.readShortLe();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSink.sha512(buffer1);
      buffer0.emit();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer0.size();
      buffer2.toString();
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.writeDecimalLong(123425L);
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      buffer2.readDecimalLong();
      buffer0.writeUtf8CodePoint(3);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Integer integer0 = new Integer((byte)20);
      Pipe pipe0 = new Pipe(3280L);
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (long) (byte)20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!J%BJ(\u0003tC");
      Pipe pipe0 = new Pipe(3351L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-2503));
      buffer1.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, 954L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TmuY~tQL");
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.hmacSha256(byteString0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((byte) (-108));
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      buffer1.clone();
      byte byte0 = ObjectStreamConstants.TC_BASE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = new Buffer();
      buffer1.readUtf8();
      Buffer buffer3 = buffer1.writeUtf8("\uFFFD");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer1.readUtf8(1095216660480L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=1095216660480
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer1.readShortLe();
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HashingSink.sha512(buffer1);
      buffer1.inputStream();
      buffer_UnsafeCursor0.buffer.sha256();
      Buffer buffer2 = (Buffer)buffer1.emit();
      // Undeclared exception!
      try { 
        buffer2.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      pipe0.sourceClosed = true;
      ByteString byteString0 = buffer0.sha256();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer0.md5();
      Buffer buffer1 = buffer0.writeInt(99);
      buffer0.readInt();
      buffer1.indexOf(byteString0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)31;
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer2 = buffer1.write(byteArray0);
      buffer1.size();
      Buffer buffer3 = pipe0.buffer;
      buffer2.writeDecimalLong(3307L);
      buffer3.readUtf8CodePoint();
      buffer1.indexOf((byte) (-26), 1L);
      // Undeclared exception!
      try { 
        buffer3.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("");
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.writeUtf8CodePoint((-1));
      // Undeclared exception!
      try { 
        buffer0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Pipe pipe0 = new Pipe(3351L);
      Buffer buffer0 = pipe0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("k", "k");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.copyTo((OutputStream) mockPrintStream0);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Buffer buffer4 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-2901L));
      Buffer buffer5 = buffer_UnsafeCursor0.buffer.writeIntLe(139);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer4.select(options0);
      buffer3.completeSegmentByteCount();
      Buffer buffer6 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer5);
      realBufferedSource0.buffer();
      buffer2.readLong();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.size();
      ByteString byteString0 = buffer0.sha256();
      buffer0.writeLong(0L);
      Buffer buffer1 = pipe0.buffer;
      buffer0.write(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.size();
      buffer1.writeDecimalLong(40L);
      Buffer buffer2 = buffer1.writeIntLe(11);
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer2.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Pipe pipe0 = new Pipe(328L);
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        buffer1.writableSegment(1114111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Pipe pipe0 = new Pipe(3325L);
      Buffer buffer0 = new Buffer();
      pipe0.sourceClosed = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      pipe0.sinkClosed = false;
      Buffer buffer1 = new Buffer();
      boolean boolean0 = pipe0.sourceClosed;
      buffer1.writeByte(8);
      buffer1.size();
      buffer1.exhausted();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, 40, 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=40 byteCount=40
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(69L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writableSegment(1597);
      buffer0.size();
      buffer0.toString();
      buffer0.writeLongLe((-11L));
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000L);
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xfffffff5
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = (Buffer)buffer0.emit();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = buffer0.writeDecimalLong(10000000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.writeAll(buffer1);
      buffer2.snapshot();
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "b}|g,&BCw56n;]XBQwd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockPrintStream0);
      buffer1.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.writeUtf8("source exhausted prematurely");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSink0.writeByte((-1));
      realBufferedSource0.buffer();
      realBufferedSink0.buffer.writeDecimalLong(1000000L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      pipe0.sourceClosed = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      pipe0.sinkClosed = true;
      byteArray0[0] = (byte)113;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeLong(3405L);
      pipe0.sourceClosed = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Buffer buffer2 = pipe0.buffer;
      boolean boolean0 = pipe0.sourceClosed;
      Buffer buffer3 = buffer2.writeByte((byte)40);
      buffer3.size();
      buffer1.indexOf((byte)113);
      buffer3.readUtf8Line((long) 8);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "b}|g,&BCw56n;]XBQwd");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(2889L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writableSegment(721);
      buffer0.size();
      buffer0.toString();
      Buffer buffer1 = buffer0.writeDecimalLong(99999999999L);
      Buffer buffer2 = buffer1.emitCompleteSegments();
      // Undeclared exception!
      try { 
        buffer2.getByte(999999999999972L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=11 offset=999999999999972 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.end = (-1664);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)27;
      buffer0.readUtf8();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.size();
      buffer0.writeDecimalLong((-922337203685477580L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-7L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -7
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TmuY~tQL");
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.hmacSha256(byteString1);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((byte)0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      buffer0.indexOf(byteString0);
      buffer1.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer1.readUtf8();
      buffer1.writeUtf8("\u0000");
      buffer1.readFrom((InputStream) sequenceInputStream0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Pipe pipe0 = new Pipe(3280L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = pipe0.buffer;
      byte byte0 = (byte)20;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      pipe0.sourceClosed = false;
      Buffer buffer1 = buffer0.writeInt((byte)20);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      boolean boolean0 = pipe0.sinkClosed;
      Integer integer0 = new Integer((byte)20);
      buffer1.close();
      Pipe pipe1 = new Pipe(3280L);
      byte byte1 = (byte)2;
      buffer1.size();
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, 4L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.size();
      pipe0.sourceClosed = true;
      ByteString byteString0 = buffer0.sha256();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = buffer0.write(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.size();
      buffer2.writeDecimalLong(32L);
      Buffer buffer4 = buffer2.writeIntLe(11);
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer4.select(options0);
      buffer2.completeSegmentByteCount();
      buffer3.completeSegmentByteCount();
      Buffer buffer5 = new Buffer();
      buffer5.writeLong(9L);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer1.readShortLe();
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSink.sha512(buffer1);
      ByteString byteString1 = buffer_UnsafeCursor0.buffer.sha256();
      buffer0.emit();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSource0.buffer();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteString1.asByteBuffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byteStringArray0[3] = byteString0;
      buffer_UnsafeCursor0.buffer.hmacSha256(byteString1);
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString1;
      Options.of(byteStringArray0);
      buffer2.equals(buffer0);
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-3209L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -3209
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = 999999L;
      Pipe pipe0 = new Pipe(999999L);
      Buffer buffer0 = pipe0.buffer;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T eI\"6L*TJ", false);
      Buffer buffer1 = buffer0.writeTo((OutputStream) mockFileOutputStream0);
      buffer1.segmentSizes();
      pipe0.sourceClosed = true;
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 999999L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8CodePoint((-764));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/0O7A");
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      hashingSink0.hash();
      buffer_UnsafeCursor0.buffer.toString();
      hashingSink0.hash();
      Buffer buffer2 = realBufferedSink0.buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2446);
      Buffer buffer3 = buffer2.writeTo((OutputStream) byteArrayOutputStream0);
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      hashingSource0.close();
      hashingSource0.toString();
      // Undeclared exception!
      try { 
        buffer3.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Pipe pipe0 = new Pipe(574L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer.writeShort((-260));
      realBufferedSource0.buffer.readShortLe();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      pipe_PipeSink0.flush();
      Buffer buffer1 = pipe0.buffer;
      buffer1.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.writeUtf8("source exhausted prematurely");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte((-260));
      OutputStream outputStream0 = ((RealBufferedSink) bufferedSink0).buffer.outputStream();
      buffer0.size();
      Buffer buffer3 = ((RealBufferedSink) bufferedSink0).buffer.writeDecimalLong((-1L));
      buffer3.copyTo(outputStream0);
      buffer2.completeSegmentByteCount();
      Buffer buffer4 = pipe0.buffer;
      Object object0 = new Object();
      realBufferedSource0.buffer.equals(object0);
      realBufferedSink0.buffer.indexOf((byte) (-57));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Pipe pipe0 = new Pipe(3280L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = pipe0.buffer;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = buffer0.md5();
      pipe0.sourceClosed = false;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      buffer0.indexOf(byteString0);
      boolean boolean0 = pipe0.sinkClosed;
      Pipe pipe1 = new Pipe(3280L);
      byteString0.md5();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("pnq[X]FQb6&I[M", charset0);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        buffer0.readByteString(8192L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=14 offset=0 byteCount=8192
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      InputStream inputStream0 = buffer0.inputStream();
      buffer0.size();
      ByteString byteString0 = buffer0.sha256();
      buffer0.writeLong(3405L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer1.write(byteString0);
      buffer1.size();
      buffer2.writeDecimalLong((-1179L));
      buffer0.writeIntLe((byte)0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0, 2537);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, sequenceInputStream0);
      try { 
        buffer0.readFrom((InputStream) sequenceInputStream1, 167L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Pipe pipe0 = new Pipe(3325L);
      Buffer buffer0 = pipe0.buffer;
      boolean boolean0 = pipe0.sourceClosed;
      buffer0.writeDecimalLong(999999999L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSink hashingSink0 = HashingSink.sha512(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1788L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1788
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0);
      hashingSource0.close();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-5538L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-5538 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(71776119061217280L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Pipe pipe0 = new Pipe(86404L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeTo((OutputStream) null, (-833L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Pipe pipe0 = new Pipe(69L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      buffer0.size();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000000L);
      buffer1.emitCompleteSegments();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Buffer buffer2 = pipe0.buffer;
      buffer2.indexOf((byte)87, 10L, 1000000000000L);
      pipe0.sinkClosed = true;
      Integer integer0 = new Integer(6);
      Buffer buffer3 = pipe0.buffer;
      buffer1.readUtf8Line();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      MockFile mockFile0 = new MockFile("1000000000000000", "1000000000000000");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "1000000000000000");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 1000000000000000
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-62);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      GzipSource gzipSource0 = new GzipSource(hashingSource1);
      gzipSource0.timeout();
      hashingSource1.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte byte0 = (byte)117;
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, (-1989L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      buffer0.size();
      ByteString byteString0 = buffer0.sha512();
      int int0 = ObjectStreamConstants.baseWireHandle;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-84);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.rangeEquals(10000000000000000L, byteString1, 49, (-1640));
      buffer0.hmacSha256(byteString1);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1087);
      buffer0.hashCode();
      ByteString byteString2 = buffer1.hmacSha1(byteString0);
      Buffer buffer2 = buffer0.writeUtf8("SHA-1");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      OutputStream outputStream0 = buffer1.outputStream();
      buffer1.size();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.writeDecimalLong(10000000000000000L);
      Integer integer0 = new Integer(8257536);
      Buffer buffer4 = new Buffer();
      Object object0 = new Object();
      buffer3.equals(byteString2);
      realBufferedSource0.buffer();
      buffer2.indexOf((byte) (-57));
      Buffer buffer5 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer5.copyTo(outputStream0, (long) (byte) (-84), (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-84 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Pipe pipe0 = new Pipe(3280L);
      Buffer buffer0 = pipe0.buffer;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = buffer0.md5();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$BR*BiCDzq");
      Buffer buffer1 = buffer0.writeInt((byte)20);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer0.indexOf(byteString0);
      boolean boolean0 = pipe0.sinkClosed;
      Integer integer0 = new Integer((byte)20);
      buffer1.close();
      Pipe pipe1 = new Pipe(3280L);
      buffer1.rangeEquals((long) 2, byteString0, 2, 2);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = buffer0.md5();
      Buffer buffer1 = buffer0.writeInt((byte)0);
      buffer0.readInt();
      buffer0.indexOf(byteString0);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer2 = new Buffer();
      Integer integer0 = new Integer((byte)0);
      buffer2.close();
      Pipe pipe1 = new Pipe(3307L);
      buffer2.writeLong(15L);
      byteString1.hex();
      buffer1.rangeEquals((long) (byte)0, byteString0, 248, 0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.indexOf(byteString0, (long) 2);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer4 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer4.snapshot(240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=240
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Pipe pipe0 = new Pipe(695L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      buffer0.sha256();
      buffer0.writeLong((-7L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b}|g,&BCw56n;]XBQwd");
      Buffer buffer1 = buffer0.clone();
      byte byte0 = ObjectStreamConstants.TC_NULL;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer1.hashCode();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      buffer0.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.inputStream();
      buffer0.inputStream();
      buffer_UnsafeCursor0.buffer.sha256();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLong((-1L));
      Object[] objectArray0 = new Object[0];
      buffer_UnsafeCursor0.buffer.readLongLe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeByte(1);
      Buffer buffer3 = buffer0.clone();
      byte byte0 = ObjectStreamConstants.TC_NULL;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.hashCode();
      Integer integer0 = new Integer((-929));
      buffer_UnsafeCursor0.buffer.size();
      buffer3.completeSegmentByteCount();
      HashingSource.md5(buffer2);
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readUtf8(405L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=405
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer1.readShortLe();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink.sha512(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.toString();
      realBufferedSink0.buffer.writeUtf8("M");
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer_UnsafeCursor0.buffer.readShortLe();
      realBufferedSink0.writeLong((short) (-1));
      buffer2.indexOf((byte) (-117), 243L, 10000L);
      realBufferedSink0.writeDecimalLong(331L);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer2.indexOf(byteString0, (long) (byte)7);
      int int0 = buffer_UnsafeCursor0.end;
      realBufferedSink0.buffer.completeSegmentByteCount();
      Buffer buffer3 = new Buffer();
      buffer3.writeByte(1);
      buffer0.selectPrefix(options0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer2.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Pipe pipe0 = new Pipe(3292L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.size();
      boolean boolean0 = pipe0.sourceClosed;
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer buffer2 = buffer1.writeInt((byte)0);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeLong(2609L);
      buffer2.writeByte(1);
      Buffer buffer4 = pipe0.buffer;
      buffer1.size();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      buffer_UnsafeCursor0.buffer.readUtf8LineStrict(2353L);
      buffer3.flush();
      buffer3.readShortLe();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeDecimalLong((-1L));
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer0.readDecimalLong();
      try { 
        buffer2.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = 3295L;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(3295L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = pipe0.buffer;
      buffer2.writeUtf8CodePoint((-148));
      Buffer buffer3 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x6c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink.sha512(gzipSink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(8192L);
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      buffer_UnsafeCursor0.buffer.writeInt(8192);
      buffer0.size();
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.segmentSizes();
      buffer0.indexOfElement(byteString0);
      long long0 = (-1L);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer2.copyTo(buffer0, (long) 8192, (-4090L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8196 offset=8192 byteCount=-4090
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-2512);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-2512));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      HashingSink hashingSink0 = HashingSink.md5(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      buffer_UnsafeCursor0.buffer.hmacSha512(byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Pipe pipe0 = new Pipe(69L);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink.sha512(gzipSink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(8192L);
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeInt(8192);
      buffer0.size();
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.writableSegment(8192);
      buffer2.size();
      buffer0.toString();
      buffer2.writeDecimalLong(8192L);
      Buffer buffer3 = buffer0.emitCompleteSegments();
      buffer1.getByte(8192);
      buffer1.readUtf8(32L);
      buffer3.readByteArray(3646L);
      Pipe pipe1 = new Pipe(8192L);
      Buffer buffer4 = pipe1.buffer;
      // Undeclared exception!
      try { 
        buffer4.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TmuY~tQL");
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.hmacSha256(byteString0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((byte) (-108));
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      buffer1.clone();
      byte byte0 = ObjectStreamConstants.TC_BASE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.writeDecimalLong(1675L);
      Buffer buffer2 = buffer1.writeIntLe((byte) (-108));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer1.readUtf8();
      Buffer buffer3 = buffer1.writeUtf8("\uFFFD1675\uFFFD\uFFFD\uFFFD\uFFFD");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readUnsafe();
      buffer_UnsafeCursor0.next();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer2.readByte();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "b}|g,&BCw56n;]XBQwd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockFile0.setWritable(false);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockPrintStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer0.inputStream();
      buffer2.emit();
      buffer1.writeUtf8CodePoint(70);
      buffer2.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer_UnsafeCursor0.buffer, 1826L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long long0 = 69L;
      Pipe pipe0 = new Pipe(69L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      int int0 = (-2503);
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-2503));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Segment segment0 = new Segment();
      buffer0.head = segment0;
      HashingSink hashingSink0 = HashingSink.md5(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.hmacSha512(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.writeDecimalLong((byte)0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("okio.Okio");
      PrintStream printStream0 = mockPrintStream0.append('\'');
      buffer1.copyTo((OutputStream) printStream0);
      MockFile mockFile0 = new MockFile("okio.SegmentedByteString");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      Buffer buffer3 = buffer2.copyTo((OutputStream) mockPrintStream1);
      HashingSource hashingSource0 = HashingSource.md5(buffer3);
      hashingSource0.close();
      hashingSource0.hash();
      Charset.defaultCharset();
      buffer2.toString();
      realBufferedSource0.buffer.writeDecimalLong((-2210L));
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      buffer2.readDecimalLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(4L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer buffer2 = buffer0.writeLongLe(25L);
      realBufferedSource0.buffer.writeDecimalLong(999999999999972L);
      buffer1.writeShort(68);
      realBufferedSource0.readByte();
      byte byte0 = ObjectStreamConstants.TC_NULL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSource0.buffer.readDecimalLong();
      buffer2.size();
      Buffer buffer3 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer3.readUtf8Line(1131L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=1130 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Pipe pipe0 = new Pipe(2812L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink.md5(buffer0);
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 2812L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Pipe pipe0 = new Pipe(3280L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = pipe0.buffer;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer0.md5();
      pipe0.sourceClosed = false;
      Buffer buffer1 = buffer0.writeInt((byte)20);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      int int1 = buffer_UnsafeCursor0.end;
      buffer0.readUtf8CodePoint();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeDecimalLong(9999999999997L);
      Buffer buffer4 = buffer1.writeShort((-1));
      buffer3.readShortLe();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("source == null");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      HashingSink.sha512(buffer2);
      Buffer buffer5 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer5);
      Buffer buffer6 = realBufferedSink0.buffer;
      buffer3.read(buffer4, (long) 2);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("]", "et<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"et<\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString byteString0 = new ByteString((byte[]) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer_UnsafeCursor0.resizeBuffer(999966L);
      ByteString byteString1 = realBufferedSource0.buffer.md5();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      hashingSink0.hash();
      hashingSink0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      buffer1.writeDecimalLong(3160L);
      realBufferedSink0.writeAll(buffer0);
      buffer0.snapshot();
      buffer1.readUtf8Line(0L);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      GzipSource gzipSource0 = new GzipSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(gzipSource0);
      realBufferedSource2.inputStream();
      realBufferedSource0.buffer.equals(byteString1);
      realBufferedSink0.buffer.sha256();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.size();
      boolean boolean0 = pipe0.sourceClosed;
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      buffer0.readAndWriteUnsafe();
      Integer integer0 = new Integer((-1));
      ByteString byteString0 = new ByteString((byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      buffer0.writeUtf8("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      buffer1.sha256();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Charset charset0 = Charset.defaultCharset();
      int int0 = 2147221119;
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 2147221119, 12, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Pipe pipe0 = new Pipe(3292L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeDecimalLong((byte)0);
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.end = 1;
      buffer0.readUtf8CodePoint();
      buffer0.writeDecimalLong(8L);
      buffer_UnsafeCursor0.buffer.writeShort(1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" y;~2", false);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer_UnsafeCursor0.close();
      ByteString byteString0 = new ByteString((byte[]) null);
      realBufferedSource0.buffer();
      buffer1.readHexadecimalUnsignedLong();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      realBufferedSource0.buffer.exhausted();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Pipe pipe0 = new Pipe(3292L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      Buffer buffer2 = buffer0.clone();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      int int0 = new Integer((-1));
      buffer_UnsafeCursor0.end = (-1);
      buffer0.readUtf8CodePoint();
      buffer0.writeDecimalLong(8L);
      buffer_UnsafeCursor0.buffer.writeShort((-1));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" y;~2", false);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer_UnsafeCursor0.close();
      ByteString byteString0 = new ByteString((byte[]) null);
      realBufferedSource0.buffer();
      buffer2.readHexadecimalUnsignedLong();
      int int1 = buffer_UnsafeCursor0.start;
      realBufferedSource0.buffer.exhausted();
      buffer1.rangeEquals(4L, byteString0, 1, (-434));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(328L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = pipe0.buffer;
      buffer2.toString();
      Buffer buffer3 = buffer0.writeLongLe(0L);
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer2.writeAll(buffer1);
      buffer4.writeDecimalLong(999999999999972L);
      realBufferedSource0.readByte();
      realBufferedSource0.buffer.readDecimalLong();
      buffer3.readShort();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer4.writeString("[size=0]", 5, (-3825), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -3825 < 5
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = new Buffer();
      buffer2.writeDecimalLong(9223372036854775807L);
      Buffer buffer3 = buffer2.clone();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer3.readUtf8CodePoint();
      Buffer buffer4 = new Buffer();
      buffer4.writeDecimalLong(8L);
      buffer4.writeShort(51);
      String string0 = "vw;32";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vw;32", true);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer4);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/ y;~2");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      buffer_UnsafeCursor0.close();
      ByteString byteString0 = new ByteString((byte[]) null);
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 92233720368547758
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(401L);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.writeDecimalLong((byte)0);
      Buffer buffer2 = buffer1.clone();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer1.readUtf8CodePoint();
      buffer0.writeDecimalLong(9999999999999L);
      Buffer buffer3 = buffer2.writeShort(6);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" y;~2", true);
      buffer_UnsafeCursor0.resizeBuffer(401L);
      ByteString byteString0 = new ByteString((byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.writeAll(buffer0);
      buffer3.request(6L);
      buffer3.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer1.readShortLe();
      buffer1.md5();
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      buffer_UnsafeCursor0.buffer.sha512();
      long long0 = 999966L;
      buffer_UnsafeCursor0.resizeBuffer(999966L);
      ByteString byteString0 = new ByteString((byte[]) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HashingSink hashingSink0 = HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      HashingSink.sha1(buffer1);
      hashingSink0.hash();
      hashingSink0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.buffer.writeDecimalLong(1L);
      realBufferedSink0.writeAll(buffer0);
      buffer_UnsafeCursor0.buffer.readUtf8LineStrict(long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.size();
      boolean boolean0 = pipe0.sourceClosed;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      buffer0.writeDecimalLong((byte) (-4));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 100000000000L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=100000000000 > size=2
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Pipe pipe0 = new Pipe(3292L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)0;
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      // Undeclared exception!
      try { 
        buffer0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(3292L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      buffer0.clone();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer0.readUtf8CodePoint();
      Segment segment0 = new Segment();
      SegmentPool.next = segment0;
      buffer_UnsafeCursor0.buffer.writeShort(1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":F\"*XB", true);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Pipe pipe0 = new Pipe(3280L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = pipe0.buffer;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer0.md5();
      pipe0.sourceClosed = false;
      Buffer buffer1 = buffer0.writeInt((byte)20);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      int int1 = buffer_UnsafeCursor0.end;
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeDecimalLong(10000000000000L);
      buffer1.writeShort(98);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("source == null");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      HashingSink hashingSink0 = HashingSink.sha512(buffer2);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.hmacSha256(buffer1, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      buffer2.write(byteString1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer3.indexOf(byteString0);
      buffer1.size();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, 14L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer0.equals(buffer2);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer1.readShortLe();
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSink.sha512(buffer1);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(4937);
      buffer1.readUtf8CodePoint();
      Buffer buffer3 = new Buffer();
      buffer0.readUtf8();
      Buffer buffer4 = buffer3.writeUtf8("\uFFFD\u1349");
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe();
      buffer_UnsafeCursor1.next();
      buffer2.writeShortLe(4937);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer4);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\uFFFD\u1349", "A-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // A-
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer1.readShortLe();
      buffer1.md5();
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      buffer_UnsafeCursor0.buffer.sha512();
      buffer_UnsafeCursor0.resizeBuffer(999966L);
      ByteString byteString0 = new ByteString((byte[]) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      buffer_UnsafeCursor0.buffer.hashCode();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = (Buffer)buffer0.emit();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteString0.asByteBuffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer1.writeShortLe(1610612736);
      buffer1.hmacSha256(byteString0);
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.selectPrefix(options0);
      Buffer buffer2 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer1.readShortLe();
      buffer1.md5();
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      buffer_UnsafeCursor0.buffer.sha512();
      buffer_UnsafeCursor0.resizeBuffer(999966L);
      ByteString byteString0 = new ByteString((byte[]) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HashingSink hashingSink0 = HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      buffer_UnsafeCursor0.end = (int) (short) (-1);
      HashingSink.sha1(buffer1);
      hashingSink0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      realBufferedSink0.writeUtf8("");
      buffer_UnsafeCursor0.buffer.writeTo(outputStream0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(outputStream0);
      buffer_UnsafeCursor1.buffer.writeTo((OutputStream) objectOutputStream0, 1L);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(3307L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      pipe0.sourceClosed = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)40;
      pipe0.sinkClosed = true;
      byteArray0[0] = (byte)113;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.writeLong(3405L);
      pipe0.sourceClosed = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Buffer buffer1 = buffer0.writeLongLe(3405L);
      buffer0.readUtf8Line();
      buffer0.size();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer1.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }
}
