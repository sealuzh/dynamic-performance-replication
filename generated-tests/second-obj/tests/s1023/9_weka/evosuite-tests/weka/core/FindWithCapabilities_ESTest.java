/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:34:29 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      boolean boolean0 = ClassCache.VERBOSE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      singleIndex0.m_Upper = 0;
      singleIndex0.m_IndexString = "ecv#f{O(+n!D}{ib;4;";
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      vector0.add("ecv#f{O(+n!D}{ib;4;");
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("-not-nominal-class");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.find();
      capabilities0.enableDependency(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities1.getClassCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities0.setClassIndex("2");
      Capabilities capabilities2 = capabilities0.getAttributeCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      Capabilities capabilities3 = findWithCapabilities0.getNotCapabilities();
      assertNotSame(capabilities3, capabilities2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "{Mf'FzqLT'|R6C");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.setClassIndex("last");
      findWithCapabilities0.getRevision();
      vector0.add("?__BTXzC");
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities1.disable(capabilities_Capability1);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setClassIndex("?__BTXzC");
      findWithCapabilities1.getNotCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      boolean boolean1 = findWithCapabilities0.isEnabled(capabilities_Capability2);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "range";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "not-binary-atts";
      stringArray0[1] = "";
      stringArray0[2] = "Canonical user options...";
      stringArray0[3] = "-binary-class";
      stringArray0[4] = "+cm,\"O)#";
      stringArray0[5] = "jL8)H:tIxm9(8`?h";
      stringArray0[6] = "-numeric-class";
      stringArray0[7] = "";
      stringArray0[8] = "he+KB";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(l5dBD*j&VS";
      stringArray0[1] = "Vhpnnjv^x_5U`7Z";
      stringArray0[2] = "-not-no-class";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.m_Superclass = ">";
      findWithCapabilities0.getOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "?__BTXzC");
      boolean boolean0 = ClassCache.VERBOSE;
      boolean boolean1 = findWithCapabilities0.handles(capabilities_Capability0);
      assertFalse(boolean1);
      
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertEquals("", findWithCapabilities0.getFilename());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.find();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.m_MissingValuesTest = false;
      capabilities0.disableAllAttributes();
      findWithCapabilities0.setCapabilities(capabilities0);
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.m_Filename = "-not-nominal-class";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka/core/Capabilities.props";
      capabilities1.toString();
      stringArray0[1] = "-not-nominal-class";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "-not-nominal-class";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "~];0wB)%U";
      stringArray0[6] = "-not-nominal-class";
      stringArray0[7] = "weka/core/Capabilities.props";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[8] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[24];
      stringArray0[0] = "c5,_WO\"J'XC";
      stringArray0[1] = "\tMust handle date classes.";
      stringArray0[2] = "I06;/>jp+cz)mYR";
      stringArray0[3] = "+~:j7buysb8;7";
      stringArray0[4] = "bF~EMFq7p6J\"fl7m";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities1.enable(capabilities_Capability1);
      findWithCapabilities1.getMisses();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "c5,_WO\"J'XC";
      stringArray0[1] = "\tMust handle date classes.";
      stringArray0[2] = "I06;/>jp+cz)mYR";
      stringArray0[3] = "+~:j7buysb8;7";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      findWithCapabilities1.setClassIndex("-1");
      findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      boolean boolean0 = findWithCapabilities2.handles(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      boolean boolean1 = findWithCapabilities1.handles(capabilities_Capability1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      vector0.add("HzB0%KoU'");
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.disable(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities2.enable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities2.enable(capabilities_Capability3);
      findWithCapabilities1.getMisses();
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities3.enableNot(capabilities_Capability4);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setFilename("8034");
      assertEquals("8034", findWithCapabilities4.getFilename());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+~:j7buysb8;7";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities2);
      findWithCapabilities1.setHandler(findWithCapabilities2);
      findWithCapabilities2.setClassIndex("-t");
      vector0.add("+~:j7buysb8;7");
      Capabilities capabilities0 = findWithCapabilities2.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities3.disable(capabilities_Capability2);
      Properties properties0 = new Properties();
      findWithCapabilities2.getMatches();
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities4.isEnabledNot(capabilities_Capability3);
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities2.enable(capabilities_Capability4);
      findWithCapabilities3.enable(capabilities_Capability1);
      findWithCapabilities0.getMisses();
      String[] stringArray1 = findWithCapabilities3.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+~:j7buysb8;7";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setHandler(findWithCapabilities1);
      findWithCapabilities2.setHandler(findWithCapabilities3);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities3.disable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability2);
      findWithCapabilities3.getHandler();
      findWithCapabilities2.setClassIndex("I06;/>jp+cz)mYR");
      findWithCapabilities2.getNotCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities5.setFilename("I06;/>jp+cz)mYR");
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "+~:j7buysb8;7");
      findWithCapabilities6.enable(capabilities_Capability3);
      findWithCapabilities6.getMisses();
      findWithCapabilities5.getOptions();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability4);
      findWithCapabilities6.setFilename("min # Instance: ");
      assertEquals("min # Instance: ", findWithCapabilities6.getFilename());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[24];
      stringArray0[0] = "c5,_WO\"J'XC";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities1.getRevision();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.setClassIndex("8034");
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      vector0.add("-not-retional-class");
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      findWithCapabilities0.setCapabilities(capabilities0);
      boolean boolean0 = capabilities0.m_AttributeTest;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getMisses();
      findWithCapabilities0.getOptions();
      Vector<String> vector2 = findWithCapabilities0.find();
      assertTrue(vector2.equals((Object)vector1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "c5,_WO\"J'XC";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      findWithCapabilities2.setHandler(findWithCapabilities0);
      findWithCapabilities1.setClassIndex("c5,_WO\"J'XC");
      findWithCapabilities0.getRevision();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8034");
      vector0.add("8034");
      findWithCapabilities2.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities2.enable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getMisses();
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities4.setFilename("weka/core/Capabilities.props");
      assertEquals("weka/core/Capabilities.props", findWithCapabilities4.getFilename());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[24];
      stringArray0[1] = "\tMust handle date classes.";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.disable(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.m_Filename = "P')n|Szz.@";
      findWithCapabilities1.enable(capabilities_Capability1);
      findWithCapabilities1.getMisses();
      // Undeclared exception!
      findWithCapabilities1.getOptions();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "~jwGKz(D~";
      stringArray0[2] = "h";
      stringArray0[3] = "+A2Pg.pWw*L";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = ")`F-0CTd~R+au[O";
      stringArray0[6] = "Y";
      stringArray0[7] = "O}*";
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(2476L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Filename = "O}*";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setClassIndex(")`F-0CTd~R+au[O");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities1.getNotCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.handles(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.enable(capabilities_Capability1);
      findWithCapabilities2.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "~jwGKz(D~";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.find();
      capabilities0.disableAll();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      capabilities0.enable(capabilities_Capability0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities1.enableDependency(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[24];
      stringArray0[0] = "c5,_WO\"J'XC";
      stringArray0[1] = "\tMust handle date classes.";
      stringArray0[2] = "I06;/>jp+cz)mYR";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      Capabilities.PROPERTIES = null;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getMisses();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.enableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("c5,_WO\"J'XC");
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      Capabilities.PROPERTIES = null;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getMisses();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.enableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("c,_WO\"J'C");
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.m_Superclass = "range";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "not-binary-atts";
      stringArray0[1] = "";
      stringArray0[2] = "Canonical user options...";
      stringArray0[3] = "-binary-class";
      stringArray0[4] = "+cm,\"O)#";
      stringArray0[5] = "*";
      stringArray0[6] = "-numeric-class";
      stringArray0[7] = "|07B.-1tR-,qCS>18A#";
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities2.enableNot(capabilities_Capability1);
      findWithCapabilities1.setFilename("packages");
      assertEquals("packages", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.m_Superclass = "range";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "not-binary-atts";
      stringArray0[1] = "";
      stringArray0[2] = "Canonical user options...";
      stringArray0[3] = "-binary-class";
      stringArray0[4] = "+cm,\"O)#";
      stringArray0[5] = "'";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.enable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities2.enable(capabilities_Capability2);
      Vector<String> vector0 = findWithCapabilities1.m_Misses;
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities3.setFilename("+cm,\"O)#");
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "+~:j7buysb8;7";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setHandler(findWithCapabilities1);
      findWithCapabilities2.setHandler(findWithCapabilities3);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities3.disable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability2);
      findWithCapabilities3.getHandler();
      findWithCapabilities2.setClassIndex("I06;/>jp+cz)mYR");
      findWithCapabilities2.getNotCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities3.handles(capabilities_Capability3);
      findWithCapabilities1.enable(capabilities_Capability2);
      findWithCapabilities0.getMisses();
      findWithCapabilities3.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities4.enableNot(capabilities_Capability4);
      findWithCapabilities0.setFilename("+~:j7buysb8;7");
      assertEquals("+~:j7buysb8;7", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[24];
      stringArray0[0] = "c5,_WO\"J'XC";
      stringArray0[1] = "\tMust handle date classes.";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.setClassIndex("?__BTXzC");
      findWithCapabilities0.getRevision();
      vector0.add("\tMust handle date classes.");
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      capabilities0.enableAll();
      findWithCapabilities0.disable(capabilities_Capability1);
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities1.getMatches();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.handles(capabilities_Capability1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      findWithCapabilities1.getOptions();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[24];
      stringArray0[23] = "c5,_WO\"J'XC";
      stringArray0[1] = "\tMust handle date classes.";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      vector0.add(",Y?46Hdx6Z");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.setClassIndex("?__BTXzC");
      findWithCapabilities0.getRevision();
      vector0.add("\tMust handle date classes.");
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.disable(capabilities_Capability1);
      findWithCapabilities1.getMatches();
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "weka/core/Capabilities.props");
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.enable(capabilities_Capability2);
      findWithCapabilities2.getMisses();
      // Undeclared exception!
      findWithCapabilities1.getOptions();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[24];
      stringArray0[1] = "\tMust handle date classes.";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.getRevision();
      vector0.add("\tMust handle date classes.");
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.disable(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.m_Filename = "P')n|Szz.@";
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities1.enable(capabilities_Capability2);
      findWithCapabilities1.getMisses();
      // Undeclared exception!
      findWithCapabilities1.getOptions();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      boolean boolean0 = ClassCache.VERBOSE;
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }
}
