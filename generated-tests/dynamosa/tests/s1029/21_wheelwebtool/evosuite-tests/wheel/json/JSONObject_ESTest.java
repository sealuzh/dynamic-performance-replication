/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 22:10:20 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-629));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(2292);
      linkedList0.add(jSONObject0);
      JSONObject.doubleToString((-20652918));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Short short0 = new Short((short)2);
      JSONObject.valueToString(short0, 2065, (-1271));
      JSONObject.quote("");
      JSONObject.valueToString(boolean0, (-1596), 0);
      jSONObject0.remove("W-");
      jSONObject0.optString(" rlF> v]8 STM5");
      jSONObject0.has("java.lang.Boolean@0000000003");
      Double double0 = new Double((-1596));
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, double0);
      assertSame(jSONObject1, jSONObject0);
      
      jSONObject0.keys();
      int int0 = jSONObject1.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.parallelStream();
      String string0 = JSONObject.valueToString(linkedList0, 2, (-701));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject1 = jSONObject0.put("Null key.", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("GP-,m'>v");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of GP-,m'>v
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Double double0 = new Double(1245.2900018820721);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(54);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 13, (-1459));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('2');
      Writer writer0 = jSONArray0.write(stringWriter2);
      jSONObject2.write(writer0);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.toString(504, 0);
      Byte byte0 = new Byte((byte)62);
      Byte.compare((byte)0, (byte)62);
      Byte.compare((byte)62, (byte) (-42));
      Byte.compare((byte) (-42), (byte)62);
      Byte.toUnsignedInt((byte)0);
      JSONObject.valueToString(byte0);
      JSONObject.valueToString("java.lang.Byte@0000000005");
      jSONObject1.optInt("+S<QVF}F:", 104);
      String string1 = "Unterminated string";
      try { 
        jSONObject0.getJSONObject("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float float0 = new Float((double) 76L);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8`ufHX2";
      stringArray0[1] = "j1o?0`\"7x*YMsTh";
      stringArray0[2] = "j1o?0`\"7x*YMsTh";
      stringArray0[3] = "8`ufHX2";
      stringArray0[4] = "8`ufHX2";
      stringArray0[5] = "8`ufHX2";
      Byte byte0 = new Byte((byte) (-75));
      JSONObject jSONObject1 = new JSONObject(byte0);
      hashMap0.put(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      
      stringArray0[6] = "j1o?0`\"7x*YMsTh";
      stringArray0[7] = "j1o?0`\"7x*YMsTh";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      int int0 = jSONObject2.optInt("j1o?0`\"7x*YMsTh", 795);
      assertEquals(795, int0);
      
      JSONObject jSONObject3 = jSONObject0.put("Osa%FAHj{BO<Pjn", (long) 795);
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      JSONObject jSONObject4 = jSONObject3.put("", (Map) hashMap0);
      jSONObject4.put("java.lang.Short@0000000002.", 2170);
      jSONObject4.toString(0, 12);
      String[] stringArray1 = JSONObject.getNames(jSONObject4);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("isvalueOf");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float(381.5);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Object) "d5AhK>P2!D{d");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      jSONObject1.toString();
      Byte byte0 = new Byte((byte)48);
      double double0 = jSONObject1.optDouble("wheel.json.JSONObject$Null", (double) 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Iterator iterator0 = jSONObject0.keys();
      Float.isFinite(0.0F);
      jSONObject0.optString("gG6.5W.1(<", "] is not a number.");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      jSONObject0.put("o*({1kZ(OdxXr", (Map) hashMap0);
      jSONObject0.has("] is not a number.");
      jSONObject0.putOpt((String) null, iterator0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("eSev_EAmfKSh<m", (Collection) linkedList0);
      jSONObject1.toString((-914), (-1867));
      jSONObject1.optJSONArray("eSev_EAmfKSh<m");
      jSONObject0.optJSONArray("eSev_EAmfKSh<m");
      JSONObject jSONObject2 = jSONObject1.optJSONObject("eSev_EAmfKSh<m");
      assertNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "dCs&[q";
      jSONObject0.append("dCs&[q", (Object) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("dCs&[q", object0);
      try { 
        jSONObject1.getDouble("dCs&[q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dCs&[q\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (-48));
      jSONObject0.optDouble("");
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject1.optInt("", 48);
      JSONObject jSONObject2 = jSONObject0.put("?PGiQb7", (long) 48);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      jSONObject2.put("", (Map) hashMap1);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject1.toString(22, 22);
      JSONObject.getNames(jSONObject3);
      JSONObject jSONObject4 = jSONObject2.put("7kKg]&[y", 48);
      assertSame(jSONObject2, jSONObject4);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      
      Float float0 = new Float((-3223.42979948));
      jSONObject0.has("[");
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.put("2P~FqT<7+Y:/@6", 1458.5250373953138);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("\n", object0);
      double double0 = jSONObject1.getDouble("2P~FqT<7+Y:/@6");
      assertEquals(1458.5250373953138, double0, 0.01);
      
      boolean boolean0 = jSONObject2.isNull("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      JSONObject jSONObject1 = jSONObject0.put("", false);
      String string0 = "\\r";
      jSONObject1.remove("\r");
      Boolean boolean0 = new Boolean("");
      Boolean.getBoolean("get");
      try { 
        jSONObject1.append("", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "8`ufHX2";
      stringArray0[2] = "getoptJSONArray";
      stringArray0[3] = "j1o?0`\"7x*YMsTh";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Boolean boolean0 = new Boolean(false);
      jSONObject0.isNull((String) null);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optBoolean("", true);
      try { 
        jSONObject1.getJSONObject("java.lang.Float@00000000020");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@00000000020\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isspliterator", false);
      try { 
        jSONObject1.getLong("isspliterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isspliterator\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("d5AhK>P2!D{d", 0.0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.getString("d5AhK>P2!D{d");
      jSONObject0.write(stringWriter0);
      Byte byte0 = new Byte((byte) (-58));
      double double0 = jSONObject1.optDouble("!WeH^4.OnmY72 0a", (double) (byte)48);
      assertEquals(48.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("", (-1447.11026710926));
      JSONObject jSONObject1 = jSONObject0.accumulate("^i8wc,-", (Object) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ER3 6F.TH`";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      jSONObject0.opt("");
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2544.4262397745865));
      assertEquals("-2544.4262397745865", string0);
      
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-2544.4262397745865";
      stringArray0[1] = "islistIterator";
      stringArray0[2] = "$Ig";
      stringArray0[3] = "$Ig";
      stringArray0[4] = "-2544.4262397745865";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      int int0 = jSONObject1.optInt((String) null, 34);
      assertEquals(34, int0);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      double double0 = jSONObject1.optDouble("&ddu~Jx&JU2", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 34, (-62353088));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = (-1447.11026710926);
      try { 
        jSONObject0.put((String) null, (-1447.11026710926));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Long long0 = new Long(58L);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("gethashCode", "^i8wc,-");
      jSONObject1.toString((-1326), (-1326));
      jSONObject1.optDouble("gethashCode", (double) 58L);
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.String@0000000003\"}");
      jSONObject2.toString();
      int int0 = jSONObject2.optInt("^i8wc,-", (-6400));
      assertEquals((-6400), int0);
      
      String string0 = JSONObject.doubleToString(58.0);
      assertEquals("58", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("Null key.", (Collection) linkedList0);
      jSONObject0.opt(": ");
      jSONObject0.optJSONArray(": ");
      Float.min((-1.0F), (-1.0F));
      Byte byte0 = new Byte((byte) (-33));
      Float.min((-1.0F), (-1.0F));
      JSONObject jSONObject1 = jSONObject0.append("}w\u0004Wv", byte0);
      Byte.compare((byte) (-33), (byte)9);
      JSONObject.valueToString(byte0);
      jSONObject1.optDouble(": ", (-1398.28901));
      jSONObject1.optInt("java.lang.Byte@0000000012", (int) (byte)9);
      jSONObject1.toJSONArray((JSONArray) null);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-42));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (-2277.6456023123915));
      jSONObject1.optLong("] is not a JSONObject.", (-893L));
      String string0 = "ER3 6F.TH`";
      try { 
        jSONObject1.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "W0`UuTMj-,L>-V0Yg|";
      JSONObject jSONObject1 = jSONObject0.put("W0`UuTMj-,L>-V0Yg|", (Object) "W0`UuTMj-,L>-V0Yg|");
      try { 
        jSONObject1.append("W0`UuTMj-,L>-V0Yg|", "W0`UuTMj-,L>-V0Yg|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[W0`UuTMj-,L>-V0Yg|] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optLong((-505));
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.optJSONObject("issum");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject.quote("N\n");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray("[,]b H#_!([:>6o#YHt");
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      Double double0 = new Double((-264.5));
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      jSONObject0.get("");
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = (-1101);
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-1101), (-1101));
      String string0 = "";
      jSONObject0.isNull("");
      String string1 = "wheel.json.JSONObject$Null";
      jSONObject0.optInt("wheel.json.JSONObject$Null", 0);
      jSONObject0.names();
      try { 
        jSONObject0.get("\"java.lang.Object@0000000002\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.Object@0000000002\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      Short.toUnsignedLong((short)0);
      JSONObject jSONObject0 = new JSONObject(short1);
      jSONObject0.remove("] not found.");
      jSONObject0.optBoolean("] not found.", true);
      try { 
        jSONObject0.getString("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "s\u0002");
      assertEquals(3, jSONObject0.length());
      
      jSONObject0.put("Zl\b0!U$O\"1", false);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Short short0 = new Short((short)44);
      Short.toUnsignedInt((short)44);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.compare((short)44, (short)44);
      jSONObject0.remove("istoHexString");
      jSONObject0.optDouble("74Lf");
      Short.toUnsignedLong((short)44);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("flo", 181);
      Short.compare((short)44, (short)10);
      jSONObject1.toString(0, 0);
      jSONObject0.toString();
      JSONObject jSONObject2 = jSONObject0.put("=wcDL7U(", 1665);
      jSONObject2.put(">z", (long) 34);
      JSONObject.numberToString(short0);
      try { 
        jSONObject1.get("{\"java.lang.String@0000000004\":java.lang.Integer@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000004\\\":java.lang.Integer@0000000005,\\\"java.lang.String@0000000002\\\":\\\"java.lang.Class@0000000003\\\"}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \b
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.keys();
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", object0);
      jSONObject1.isNull("wheel.json.JSONException");
      Object object1 = jSONObject1.get("wheel.json.JSONException");
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject jSONObject2 = jSONObject1.put("n37J9$tzQm4dl|(L@Fr", (double) 0);
      jSONObject0.accumulate("^i8wc,-", "u],!Hwb2AOXd");
      JSONObject.valueToString((Object) null);
      jSONObject0.optDouble("^i8wc,-", (-1.0));
      jSONObject2.optInt("n37J9$tzQm4dl|(L@Fr", 16);
      assertEquals(3, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(69);
      JSONObject jSONObject0 = new JSONObject(integer0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("sb]*", (Collection) linkedList0);
      jSONObject0.getJSONArray("sb]*");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = (-1.0F);
      Float float1 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float1);
      String string0 = ": ";
      jSONObject0.opt(": ");
      jSONObject0.optBoolean(": ", false);
      jSONObject0.optJSONArray(": ");
      Float.min((-1.0F), (-1.0F));
      byte byte0 = (byte) (-33);
      Byte byte1 = new Byte((byte) (-33));
      Float.min((-1.0F), (-1.0F));
      JSONObject jSONObject1 = jSONObject0.append("}_w\u0004Wv", byte1);
      Byte.compare((byte) (-33), (byte)9);
      try { 
        jSONObject1.getJSONArray("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"has\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("getquote");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getquote\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer.compareUnsigned(1540, 1540);
      Integer integer0 = new Integer(0);
      linkedList0.push(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.doubleToString(1865.2036687663092);
      jSONObject0.accumulate("1865.2036687663092", jSONArray0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-124622348));
      Integer integer1 = Integer.getInteger("!kB>WLG@)7tn/", integer0);
      linkedList0.add(integer1);
      linkedList0.parallelStream();
      String string0 = JSONObject.valueToString(linkedList0, 2, (-701));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.quote(",\n");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(69);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "\",\n\"", 69, 69);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"C\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("", (-1447.11026710926));
      JSONObject jSONObject1 = jSONObject0.accumulate("^i8wc,-", (Object) null);
      JSONObject.valueToString("^i8wc,-");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"java.lang.String@0000000004\"";
      stringArray0[1] = "";
      stringArray0[2] = "ER3 6F.TH`";
      stringArray0[3] = "ER3 6F.TH`";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.opt("%!a%2OWb?w%");
      jSONObject1.isNull("");
      int int0 = jSONObject0.optInt("put");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("{}", (-1027));
      JSONObject jSONObject2 = jSONObject1.put("{}", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{}");
      stringWriter0.append('Y');
      jSONArray0.write(stringWriter0);
      jSONObject1.write(stringWriter1);
      Float float0 = new Float(1.0F);
      JSONObject.getNames((Object) float0);
      jSONObject1.toString(2276, 504);
      Byte byte0 = new Byte((byte) (-10));
      Byte.compare((byte)62, (byte)0);
      Byte.compare((byte)34, (byte)62);
      Byte.compare((byte) (-42), (byte) (-42));
      jSONObject2.put("K(9}KgK?P*1)b3eH ", 0);
      Short short0 = new Short((byte)62);
      JSONObject.getNames((Object) short0);
      long long0 = jSONObject2.optLong("bq");
      assertEquals(1, jSONObject2.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject.doubleToString(793.3711);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("793.3711", 2119L);
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.append("[]", jSONObject1);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Substring bounds error", "Substring bounds error");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("1..");
      JSONObject jSONObject1 = jSONObject0.put("1..", 0L);
      int int0 = jSONObject1.optInt((String) null);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
      
      String string0 = JSONObject.quote("{&`#8");
      assertEquals("\"{&`#8\"", string0);
      
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      jSONObject0.toString();
      jSONObject0.optJSONObject("\"{&`#8\"");
      jSONObject0.toString(0);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.testValidity(jSONObject2);
      String string1 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.append("[", "[");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("[");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt("XGRx!ZybA-99p#bU03i", (-1674));
      assertEquals((-1674), int0);
      
      JSONObject jSONObject1 = jSONObject0.put("Expected '", (-1L));
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      HashMap<Object, JSONObject> hashMap1 = new HashMap<Object, JSONObject>();
      jSONObject0.put("XGRx!ZybA-99p#bU03i", (Map) null);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.put("getvalueOf", (-1429));
      jSONObject1.optDouble("is", (double) (-1674));
      jSONObject0.toString((-1674), 34);
      JSONObject jSONObject3 = new JSONObject("{\n\"java.lang.String@0000000003\": java.lang.Long@0000000004,\n\"java.lang.String@0000000006\": {}\n                                  }");
      String[] stringArray0 = JSONObject.getNames(jSONObject3);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("true", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("a9P*?3P");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("", (-1447.11026710926));
      JSONObject jSONObject1 = jSONObject0.accumulate("", (Object) null);
      jSONObject1.getJSONArray("");
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.numberToString(float0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject1.length());
      
      String string1 = jSONObject0.optString("java.lang.Float@0000000009");
      assertEquals(3, jSONObject0.length());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("3Y");
      Integer.compareUnsigned((-1295), (-1295));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject((Object) "3Y");
      jSONObject1.remove((String) null);
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "3Y");
      jSONObject0.write(stringWriter1);
      assertEquals("3Y{}", stringWriter1.toString());
      assertEquals("3Y{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4v^+yQ^'fhW";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optInt("", 48);
      JSONObject jSONObject2 = jSONObject1.put("kF>D>aV`hE~N", 0L);
      jSONObject0.put("L\"M-lo{{XJ-qj", (Map) null);
      jSONObject2.put("A JSONObject text must end with '}'", 1690);
      jSONObject0.toString(2053, 8448);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("isjoin", Double.NaN);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.append("isjoin", boolean0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject1.put("isjoin", (Collection) linkedList0);
      double double0 = jSONObject0.optDouble("wheel.json.JSONObject");
      assertEquals(Double.NaN, double0, 0.01);
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-988), 97);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("XGRx!ZybA-99p#bU03i", (-1674));
      jSONObject0.put("JSONArray initial value should be a string or collection or array.", (long) (-1674));
      JSONObject jSONObject1 = jSONObject0.put("XGRx!ZybA-99p#bU03i", (Map) null);
      JSONObject jSONObject2 = new JSONObject((Object) "XGRx!ZybA-99p#bU03i");
      JSONObject jSONObject3 = jSONObject1.getJSONObject("XGRx!ZybA-99p#bU03i");
      assertFalse(jSONObject3.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("1..");
      JSONObject jSONObject1 = jSONObject0.put("1..", 0L);
      int int0 = jSONObject1.optInt((String) null);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
      
      JSONObject.quote("{&`#8");
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      
      jSONObject0.names();
      jSONObject0.toString();
      jSONObject0.optJSONObject("\"{&`#8\"");
      jSONObject0.toString(0);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.testValidity(jSONObject2);
      String string0 = JSONObject.quote("0");
      assertEquals("\"0\"", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) " P");
      jSONObject0.put(" P", 913);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("&9");
      assertEquals("\"&9\"", string0);
      
      String string1 = jSONObject0.optString("getrotateLeft", (String) null);
      assertNull(string1);
      
      String[] stringArray0 = JSONObject.getNames((Object) "getrotateLeft");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONArray jSONArray0 = jSONObject0.names();
      Double double0 = new Double((-264.5));
      JSONObject jSONObject1 = jSONObject0.putOpt("", jSONArray0);
      jSONObject1.get("");
      try { 
        jSONObject0.getJSONArray("tUw)z|{;P7!iq:q~3d3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tUw)z|{;P7!iq:q~3d3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(8);
      Integer.compareUnsigned(8, 144);
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(4, jSONObject0.length());
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      JSONObject jSONObject1 = jSONObject0.put("", false);
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      JSONObject jSONObject2 = jSONObject1.optJSONObject("");
      assertNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "~N>u\\u5v";
      jSONObject0.put(string0, 0L);
      double double0 = jSONObject0.optDouble(string0, (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Iterator iterator0 = jSONObject0.keys();
      Float.isFinite(0.0F);
      jSONObject0.optString("gG6.5W.1(<", "] is not a number.");
      String string0 = "o*({1kZ(OdxXr";
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      Byte byte0 = new Byte((byte) (-32));
      hashMap0.put(float0, byte0);
      jSONObject0.put("o*({1kZ(OdxXr", (Map) hashMap0);
      jSONObject0.has("] is not a number.");
      jSONObject0.putOpt((String) null, iterator0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      jSONObject1.isNull("");
      JSONObject jSONObject2 = jSONObject1.accumulate("", jSONObject0);
      JSONObject jSONObject3 = jSONObject2.append("", jSONObject0);
      assertEquals(1, jSONObject3.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.append("iskeys", jSONArray0);
      StringWriter stringWriter0 = new StringWriter(65);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "iskeys");
      Writer writer0 = jSONObject0.write(stringWriter1);
      Writer writer1 = jSONObject1.write(writer0);
      assertSame(writer1, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Long long0 = new Long(62L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("");
      Double double0 = new Double(62L);
      JSONObject.valueToString(double0);
      jSONObject0.optDouble("java.lang.Double@0000000002", 0.0);
      int int0 = jSONObject0.optInt("{}", 2438);
      assertEquals(2438, int0);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      double double1 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("isoptJSONArray", (-1674));
      JSONObject jSONObject1 = jSONObject0.put("f*p;", (-601L));
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      HashMap<Object, JSONObject> hashMap1 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("getwrite", (Map) hashMap1);
      jSONObject2.put("Ip$n[", 12);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Long long0 = new Long(62L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("");
      jSONObject0.optString((String) null);
      jSONObject0.has((String) null);
      Double double0 = new Double(0.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, boolean0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "j1o?0`\"7x*YMsTh";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optInt("yd_[i-,", 230);
      JSONObject jSONObject2 = jSONObject0.put("a", (long) 48);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      jSONObject0.put("j1o?0`\"7x*YMsTh", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject2.put("a", 110);
      jSONObject3.toString(48, 230);
      JSONObject.getNames(jSONObject0);
      int int0 = jSONObject3.length();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(2510);
      Double double0 = new Double((-1.0));
      hashMap0.put(integer0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("N#0jIH7)jKcZ0gDPC", 0.0);
      jSONObject0.optLong("N#0jIH7)jKcZ0gDPC");
      jSONObject0.getInt("N#0jIH7)jKcZ0gDPC");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("Null key.", (-865L));
      int int0 = jSONObject1.optInt("Null key.");
      assertEquals((-865), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("");
      jSONObject0.toString();
      Boolean.getBoolean("");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("'", object0);
      try { 
        jSONObject1.getJSONObject("Jc'B`(ScX0T?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Jc'B`(ScX0T?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject1.append("iskeys", jSONArray0);
      JSONObject jSONObject3 = jSONObject2.accumulate("iskeys", (Object) null);
      assertSame(jSONObject1, jSONObject3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) " P");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Long long0 = new Long(62L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("");
      Double double0 = new Double(62L);
      JSONObject.valueToString(double0);
      double double1 = jSONObject0.optDouble("java.lang.Double@0000000002", 0.0);
      assertEquals(0.0, double1, 0.01);
      
      int int0 = jSONObject0.optInt("{}", 2438);
      assertEquals(2438, int0);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject0.put("9y3Wqj5P|>1,9FU.6rI", (Object) "{}");
      boolean boolean0 = jSONObject0.optBoolean("java.lang.Double@0000000002", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("%8", "%8");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.toString((-1901), 59);
      JSONObject jSONObject2 = new JSONObject("{}");
      try { 
        jSONObject0.getJSONObject("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      String string0 = JSONObject.valueToString(hashMap0, 4, 4);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("f'I~oohG;XB+sSS'", (double) 0);
      jSONObject1.accumulate("^i8wc,-", object0);
      JSONObject.valueToString(object0);
      jSONObject1.optDouble("ER3 6F.TH`", 1568.222971);
      jSONObject0.optJSONObject("\"java.lang.Object@0000000007\"");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (-3));
      jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      double double0 = (-1227.0);
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "00J'VdkH/");
      jSONObject0.toString((-1901), (-1901));
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000028,\njava.lang.Byte@0000000029,\njava.lang.Byte@0000000030,\njava.lang.Byte@0000000031,\njava.lang.Byte@0000000032,\njava.lang.Byte@0000000033,\njava.lang.Byte@0000000034,\njava.lang.Byte@0000000035,\njava.lang.Byte@0000000036\n],\n\"java.lang.String@0000000025\": \"java.lang.Class@0000000026\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject.doubleToString((-1.0));
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-1", 0, (-1095));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer.compareUnsigned(1540, (-20652918));
      Integer integer0 = new Integer(1540);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-629));
      linkedList0.push(integer1);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      StringWriter stringWriter0 = new StringWriter(2292);
      linkedList1.add(jSONObject0);
      JSONObject.doubleToString((-20652918));
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-2.0652918E7", 1540, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("", (-1447.11026710926));
      JSONObject.valueToString("^i8wc,-");
      jSONObject0.optDouble("ER3 6F.TH`", (-1447.11026710926));
      JSONObject jSONObject1 = jSONObject0.putOpt("\"java.lang.String@0000000004\"", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      Float.isFinite(0.0F);
      String string0 = "gG6.5W.1(<";
      jSONObject0.optJSONArray("gG6.5W.1(<");
      Float.min(0.0F, (-1.0F));
      byte byte0 = (byte) (-33);
      Byte byte1 = new Byte((byte)57);
      Float.min(0.0F, 0.0F);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2544.5));
      assertEquals("-2544.5", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{YF!.EX:) /I\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {YF!.EX:) /I\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "IJzF*";
      stringArray0[1] = "IJzF*";
      stringArray0[1] = "IJzF*";
      stringArray0[3] = "IJzF*";
      stringArray0[4] = "IJzF*";
      JSONObject jSONObject0 = new JSONObject("IJzF*", stringArray0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      jSONObject0.put("IJzF*", 2296);
      JSONObject jSONObject1 = jSONObject0.put("des", (Collection) null);
      long long0 = jSONObject1.getLong("IJzF*");
      assertEquals(2296L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "{YF!.EX:) /I\"";
      JSONTokener jSONTokener0 = new JSONTokener("{YF!.EX:) /I\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {YF!.EX:) /I\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)27);
      String string0 = JSONObject.valueToString(short0, (short)27, (short)27);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("XGRx!ZybA-99p#bU03i", (-1674));
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", (-1L));
      jSONObject1.optBoolean("XGRx!ZybA-99p#bU03i");
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      hashMap0.remove((Object) "XGRx!ZybA-99p#bU03i", (Object) "XGRx!ZybA-99p#bU03i");
      hashMap0.clone();
      hashMap0.put((Object) null, jSONObject0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 47, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("] not found.", jSONArray0);
      try { 
        jSONObject0.getJSONObject("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Y");
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "(_]9(W`";
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject1.accumulate("(_]9(W`", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{n+]0U");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {n+]0U
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = ".";
      JSONObject jSONObject0 = new JSONObject((Object) ".");
      jSONObject0.optLong("Expected '");
      jSONObject0.optBoolean(".", true);
      try { 
        jSONObject0.get(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{", (Object) "{");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.accumulate("{", "{");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.toString();
      try { 
        jSONObject0.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4v^+yQ^'fhW";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      int int0 = jSONObject0.optInt("", 48);
      assertEquals(48, int0);
      
      Object object0 = JSONObject.NULL;
      jSONObject1.put("4v^+yQ^'fhW", object0);
      JSONObject jSONObject2 = jSONObject1.put("kF>D>aV`hE~N", 0L);
      jSONObject0.put("L\"M-lo{{XJ-qj", (Map) null);
      jSONObject2.put("A JSONObject text must end with '}'", 1690);
      jSONObject0.toString(2053, 8448);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      Float.sum((-1074.4828F), (-1074.4828F));
      JSONObject.valueToString(float0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.names();
      boolean boolean0 = jSONObject0.has("java.lang.Float@0000000002");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = null;
      String string0 = "Expected '";
      try { 
        jSONObject0.getJSONArray("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Byte byte0 = new Byte((byte)8);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString((int) (byte)8, (int) (byte)8);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (-1447.11026710926));
      jSONObject0.accumulate("^i8wc,-", (Object) null);
      JSONObject.getNames((Object) "^i8wc,-");
      JSONObject.valueToString("^i8wc,-");
      jSONObject1.optInt("", 9);
      long long0 = jSONObject1.optLong("ER3 6F.TH`", (long) 9);
      assertEquals(1, jSONObject0.length());
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",", true);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      boolean boolean0 = jSONObject0.optBoolean(",");
      assertTrue(boolean0);
      
      int int0 = jSONObject1.optInt(",");
      assertEquals(0, int0);
      
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", (Object) "false");
      boolean boolean0 = jSONObject1.getBoolean("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      JSONObject jSONObject2 = jSONObject0.accumulate("2P~FqT<7+Y:/@6", jSONObject1);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("2P~FqT<7+Y:/@6");
      assertFalse(jSONObject3.equals((Object)jSONObject2));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (-1447.11026710926));
      jSONObject1.optLong("", (-893L));
      String string0 = "ER3 6F.TH`";
      jSONObject0.accumulate("", (Object) null);
      jSONObject0.optDouble("ER3 6F.TH`", (-1447.11026710926));
      try { 
        jSONObject0.getDouble("hQ(T} pRf6Wd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"hQ(T} pRf6Wd\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (-1447.11026710926));
      jSONObject0.optLong("&[6nl?$`MPH$^", (-2005L));
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Expected a ':' after a key", double0);
      jSONObject2.optDouble("PtOufoN", (double) (-2005L));
      jSONObject1.getDouble("Expected a ':' after a key");
      boolean boolean0 = jSONObject0.has("(0wTMG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(108, (double) 108);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(109, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("", object0);
      Object object1 = jSONObject1.opt("");
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("`1J~Q", true);
      String string0 = jSONObject0.optString("`1J~Q");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt("XGRx!ZybA-99p#bU03i", (-1674));
      assertEquals((-1674), int0);
      
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", 11L);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject2 = jSONObject0.put("XGRx!ZybA-99p#bU03i", (Map) null);
      jSONObject1.optDouble("JSONArray initial value should be a string or collection or array.");
      jSONObject0.toString((-412), (-1674));
      JSONObject jSONObject3 = new JSONObject((Object) "XGRx!ZybA-99p#bU03i");
      assertEquals(3, jSONObject3.length());
      
      double double0 = jSONObject1.optDouble("JSONArray initial value should be a string or collection or array.", (double) (-1674));
      assertEquals(11.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "ER3 6F.TH`";
      Long long0 = new Long(629);
      JSONObject.quote("ER3 6F.TH`");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("ER3 6F.TH`");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ER3 6F.TH`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("SjBB");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getput", (Object) "getput");
      try { 
        jSONObject0.getBoolean("getput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getput\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] not found.", true);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("isdoubleToLongBits");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "F[&iBc;PW,+/";
      stringArray0[1] = "F[&iBc;PW,+/";
      stringArray0[2] = "F[&iBc;PW,+/";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optInt("", 48);
      JSONObject jSONObject2 = jSONObject0.put("D?(G&", 1L);
      jSONObject2.put("F[&iBc;PW,+/", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject0.put("D?(G&", 1943);
      jSONObject3.toString(0, 1159);
      String[] stringArray1 = JSONObject.getNames(jSONObject2);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("j&>*zl1&5tx", false);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}}bT`(&Fkt0a2z@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }}bT`(&Fkt0a2z@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long long0 = 58L;
      Long long1 = new Long(58L);
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("aiVsnu_7+", (-1206.273));
      JSONObject jSONObject1 = jSONObject0.put("", false);
      Object object0 = new Object();
      jSONObject1.accumulate("", object0);
      jSONObject1.append("", "");
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      JSONObject jSONObject1 = jSONObject0.put("", false);
      Integer integer0 = new Integer(4);
      jSONObject1.names();
      jSONObject1.optLong("\r", 0L);
      jSONObject0.put("] not found.", (long) 87);
      try { 
        jSONObject0.getJSONArray("bki9{+WmK|E.v[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bki9{+WmK|E.v[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isspliterator", false);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject1.accumulate("isspliterator", boolean0);
      jSONObject1.remove("isspliterator");
      boolean boolean1 = jSONObject1.isNull("isspliterator");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("fhHOA;bYas.gN", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{4XrqY2?e,&8 X-*!");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {4XrqY2?e,&8 X-*!
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(":-U|IC+", (-3519L));
      int int0 = jSONObject0.getInt(":-U|IC+");
      assertEquals((-3519), int0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Integer integer0 = new Integer((-28746850));
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = "acc";
      jSONObject0.put("Z(yU>", 47);
      Byte byte0 = new Byte((byte) (-120));
      jSONObject0.accumulate("acc", byte0);
      jSONObject0.getInt("acc");
      String string1 = "A JSONArray text must start with '['";
      jSONObject0.optInt("A JSONArray text must start with '['");
      String string2 = "(6o0a'";
      try { 
        jSONObject0.getString("(6o0a'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(6o0a'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-847.64755598));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("JSONArray initial value should be a string or collection or array.", true);
      jSONObject0.names();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("", (Collection) linkedList0);
      String string1 = "isintern";
      jSONObject0.optDouble("isintern");
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 8;
      JSONObject.valueToString(jSONObject0, 8, 8);
      String string0 = "cLdAM Ztt[YSbQWY4Z";
      jSONObject0.optLong("cLdAM Ztt[YSbQWY4Z");
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      Float float0 = new Float((double) 8);
      hashMap0.put(float0, jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("is", (Map) hashMap0);
      jSONObject1.put("}NURt`&nd1frs", false);
      Float.isFinite(0L);
      jSONObject1.put("C,sdA}:$Lr<.%t-w7*", (Object) "is");
      jSONObject1.length();
      JSONObject jSONObject2 = jSONObject1.put("' and instead saw '", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('v');
      stringWriter1.write("' and instead saw '");
      // Undeclared exception!
      jSONObject2.write(stringWriter1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (-1447.11026710926));
      jSONObject0.accumulate("^i8wc,-", (Object) null);
      JSONObject.valueToString("^i8wc,-");
      jSONObject0.optDouble("ER3 6F.TH`", (-1447.11026710926));
      int int0 = jSONObject1.optInt("", 9);
      assertEquals(1, jSONObject0.length());
      assertEquals((-1447), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Double double0 = new Double(1542.6381942459668);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Bad value from toJSONString: ";
      stringArray0[1] = "__),";
      stringArray0[2] = "6&_Y^";
      stringArray0[3] = "rVrxsEaM\";owe";
      Double.sum((-1231.94373847), (-2861.21195672));
      stringArray0[4] = "yZ";
      stringArray0[5] = "2**uzct/";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.getString(".RC7e7d9Yy@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".RC7e7d9Yy@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      String string0 = "bRa";
      JSONObject.doubleToString(0);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("0", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble("bRa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bRa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Double double0 = new Double((-264.5));
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      jSONObject1.getLong("");
      Double.min((-264.5), (-1071.2));
      Double double1 = new Double((-264.5));
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("?;=?6`DKO3NHo|%|9f", jSONObject1);
      jSONObject0.names();
      try { 
        jSONObject0.getInt("?;=?6`DKO3NHo|%|9f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?;=?6`DKO3NHo|%|9f\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.opt(": ");
      jSONObject0.optJSONArray(": ");
      Float.min((-1.0F), (-1.0F));
      Byte byte0 = new Byte((byte) (-33));
      Float.min((-1.0F), (-1.0F));
      JSONObject jSONObject1 = jSONObject0.append("}w\u0004Wv", byte0);
      Byte.compare((byte) (-33), (byte)9);
      JSONObject.valueToString(byte0);
      jSONObject1.optDouble(": ", (-1398.28901));
      jSONObject1.optInt("java.lang.Byte@0000000010", (int) (byte)9);
      jSONObject1.toJSONArray((JSONArray) null);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("<8-22<PD){..KwG{%", (Collection) linkedList0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.names();
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("Z'%1pa&Zo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z'%1pa&Zo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 1);
      jSONObject0.optDouble("ER3 6F.TH`", 1.0);
      jSONObject1.optInt("", 34);
      jSONObject1.optInt("issum", (-1551));
      String string0 = jSONObject1.optString("2", "2");
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      Float float0 = new Float((double) 0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optJSONObject((String) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put(".", 1.0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("ER3 6F.TH`", object0);
      jSONObject2.getInt(".");
      Short short0 = new Short((short)3151);
      JSONObject.valueToString(short0);
      jSONObject2.optDouble("java.lang.Short@0000000005", 1.0);
      jSONObject1.optInt("|76^]>&n336d]M", 494);
      jSONObject1.optString("ER3 6F.TH`");
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "hvNRPjXD20d8o(IB{h";
      stringArray0[1] = "hvNRPjXD20d8o(IB{h";
      stringArray0[2] = "Unclosed comment";
      stringArray0[3] = "hvNRPjXD20d8o(IB{h";
      JSONObject jSONObject0 = new JSONObject("hvNRPjXD20d8o(IB{h", stringArray0);
      int int0 = 0;
      HashMap<JSONArray, Float> hashMap0 = null;
      try {
        hashMap0 = new HashMap<JSONArray, Float>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      byte byte0 = (byte)75;
      hashMap0.put("", "");
      Byte byte1 = new Byte((byte)75);
      jSONObject0.append("", byte1);
      jSONObject0.optBoolean("");
      String string1 = "(X";
      double double0 = 1.0;
      String string2 = "[]";
      jSONObject0.toString((int) (byte)75);
      String string3 = "/;3',TyJsCsJY{`lWJ7";
      hashMap0.replace((Object) jSONObject0, "/;3',TyJsCsJY{`lWJ7", "`f`HUJ}");
      boolean boolean0 = false;
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("", (-1447.11026710926));
      jSONObject0.accumulate("^i8wc,-", (Object) null);
      JSONObject.valueToString("^i8wc,-");
      jSONObject0.optDouble("ER3 6F.TH`", (-1447.11026710926));
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(1529.048526232848);
      assertEquals("1529.048526232848", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{I";
      stringArray0[1] = "nu";
      stringArray0[2] = "r9Vv";
      stringArray0[3] = "m`kw:CGP3";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {I
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = JSONObject.quote("Wq\"L7l]");
      assertEquals("\"Wq\\\"L7l]\"", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      Float float0 = new Float((-1.0));
      Double double0 = new Double(3220.80124);
      Float float1 = new Float((-2697.9382F));
      hashMap0.put(float1, (JSONObject) null);
      Double.max(3220.80124, 0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optBoolean("~4Bx'", true);
      hashMap0.put(float0, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Float float2 = new Float(2534.6082F);
      float float3 = (-1754.45F);
      Float.isFinite((-1754.45F));
      hashMap0.putIfAbsent(float2, jSONObject1);
      String string0 = "null";
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1L));
      Long long1 = Long.getLong("null", long0);
      linkedList0.add(long1);
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "null";
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Long long0 = new Long(58L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "gethashCode";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Integer integer0 = new Integer(2511);
      String[] stringArray0 = new String[1];
      Integer.compare(1, 2511);
      stringArray0[0] = "Substring bounds error";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) " P");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1);
      String string0 = "";
      jSONObject0.isNull("");
      jSONObject0.optInt("", 87);
      jSONObject0.names();
      jSONObject0.optLong("", (long) 1);
      jSONObject0.put("", 1L);
      try { 
        jSONObject0.getJSONArray("M}.ZO/g>oL}*nO%(t;\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M}.ZO/g>oL}*nO%(t;\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("j&>*zl1&5tx", true);
      boolean boolean0 = jSONObject1.getBoolean("j&>*zl1&5tx");
      boolean boolean1 = jSONObject0.isNull("j&>*zl1&5tx");
      assertFalse(boolean1 == boolean0);
      
      double double0 = jSONObject0.optDouble("v<");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "";
      jSONObject0.put("", (-1447.11026710926));
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString((Object) null, 0, 1420);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      String string1 = "lxOKGeBCS~}y7i\\U0";
      jSONObject1.optDouble("lxOKGeBCS~}y7iU0");
      try { 
        jSONObject0.getJSONObject("fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fl\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(60);
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      JSONObject.doubleToString((-2544.4262397745865));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("getsubList");
      try { 
        jSONObject0.getDouble("bRa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bRa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      hashMap0.put((Short) null, jSONObject0);
      jSONObject0.put("Z{+?:", (Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("(h;EpYi6_2!S8Sr[3]", (Collection) linkedList0);
      // Undeclared exception!
      try { 
        jSONObject1.toString((-1867), (-1867));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.getLong("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "4v^+yQ^'fhW";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "j1o?0`\"7x*YMsTh";
      stringArray0[3] = "8`ufHX2";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "4v^+yQ^'fhW";
      stringArray0[6] = "4v^+yQ^'fhW";
      stringArray0[7] = "4v^+yQ^'fhW";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optInt("4v^+yQ^'fhW", 48);
      JSONObject jSONObject2 = jSONObject0.put("j1o?0`\"7x*YMsTh", 0L);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      jSONObject2.put("4v^+yQ^'fhW", (Map) hashMap0);
      Boolean boolean0 = new Boolean("azv4Zg7Btt,YX8{*.]");
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      JSONObject jSONObject3 = jSONObject2.accumulate("[]", integer0);
      jSONObject3.optDouble("ty9xf*4)VKHvg", 2122.614);
      jSONObject2.has("");
      jSONObject3.toString();
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.put("", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("", (-1447.11026710926));
      jSONObject0.accumulate("", (Object) null);
      jSONObject0.optJSONArray("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Long long0 = new Long(58L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("");
      Double double0 = new Double(58L);
      jSONObject0.putOpt("", double0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      Float float0 = new Float(3638.2160814911513);
      String string0 = JSONObject.numberToString(float0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Float@0000000001";
      stringArray0[1] = "java.lang.Float@0000000001";
      stringArray0[2] = "java.lang.Float@0000000001";
      stringArray0[3] = "java.lang.Float@0000000001";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string1 = jSONObject0.optString("java.lang.Float@0000000001");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Double double0 = new Double(851.1);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString(1467, 1769);
      JSONObject jSONObject1 = new JSONObject(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      JSONObject.doubleToString(0);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.has("bRa");
      try { 
        jSONObject0.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 77, 77);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      Float.isFinite(0.0F);
      jSONObject0.optString("gG6.5W.1(<", "] is not a number.");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      Float.max((-1.0F), (-1.0F));
      JSONObject jSONObject1 = jSONObject0.put("o*({1kZ(OdxXr", (Map) hashMap0);
      jSONObject0.has("] is not a number.");
      JSONObject jSONObject2 = jSONObject1.put("X", (-3956.566));
      jSONObject2.getDouble("X");
      jSONObject2.optDouble("z*oUT", (double) 0.0F);
      int int0 = jSONObject0.optInt("bTIOA]>2U7", 639);
      assertEquals(5, jSONObject0.length());
      assertEquals(639, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(5);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      int int0 = 16;
      try { 
        jSONArray0.getInt(16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[16] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = JSONObject.doubleToString(793.890046777808);
      assertEquals("793.890046777808", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "793.890046777808");
      jSONObject0.toString((-858), 1006);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("Missing value");
      jSONObject0.put("Missing value", (Map) null);
      Writer writer0 = jSONObject0.write(stringWriter1);
      assertFalse(writer0.equals((Object)stringWriter0));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4v^Y+yQ2'fhW";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optInt("", 48);
      String string0 = "JSONArray[";
      jSONObject0.put("JSONArray[", 0L);
      jSONObject1.put("iscompare", (Map) null);
      JSONObject jSONObject2 = jSONObject1.put("{\"5^iB5e{}[u6!%hL", (-38));
      jSONObject1.toString(0, 1129);
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject2.getJSONArray("com");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"com\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("", (-1561.0947));
      try { 
        jSONObject2.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getput", (Object) "getput");
      boolean boolean0 = jSONObject0.isNull("getput");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString((-1901), (-1901));
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", (-1376));
      Integer.remainderUnsigned(2172, 46);
      Integer.max(46, (-1907));
      Integer.getInteger("", (-1376));
      JSONObject.numberToString(integer0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("java.lang.Integer@0000000001");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = JSONObject.valueToString(". DKHr");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.put("getpuE", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("getpuE");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("!h45<H;l~\"iTj", 1.0);
      jSONArray0.put((Object) linkedList0);
      jSONObject1.optInt("!h45<H;l~\"iTj");
      String string0 = "\"\"";
      JSONObject jSONObject2 = jSONObject0.put("\"\"", (Collection) linkedList0);
      jSONObject2.toString(2054);
      Object object0 = new Object();
      try { 
        jSONObject2.append("!h45<H;l~\"iTj", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[!h45<H;l~\"iTj] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("\"qD");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('2');
      jSONArray0.write(stringWriter2);
      Float.max(0.0F, 0.0F);
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      jSONObject0.put("", (Map) hashMap0);
      jSONObject2.has("");
      JSONObject jSONObject3 = jSONObject0.put("", (-3956.566));
      jSONObject3.getDouble("");
      long long0 = jSONObject3.optLong("");
      assertEquals((-3956L), long0);
      
      boolean boolean0 = jSONObject2.optBoolean("etrvg^o),$+q6_u2$", false);
      assertFalse(boolean0);
      
      JSONArray jSONArray1 = jSONObject0.names();
      assertNotNull(jSONArray1);
      
      Object object0 = jSONObject0.remove("");
      assertEquals((-3956.566), object0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (-1447.11026710926));
      double double0 = jSONObject1.optDouble("ER3 6F.TH`", 1.0);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = jSONObject0.optInt("Q;0Nu~LFKC", 629);
      assertEquals(629, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(8448, 101);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("/{8'x)PAUar#C[##s", (-3349.44307267));
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("DT.}:$zP^9BIEa:5V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"DT.}:$zP^9BIEa:5V\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.put("' and instead saw '", (-1581.774598613579));
      JSONObject jSONObject2 = jSONObject0.accumulate("/mhCk9W14JPIHh<DDh", "^i8wc,-");
      JSONObject.valueToString((Object) null);
      jSONObject0.optDouble("' and instead saw '", (-3166.19637182571));
      jSONObject2.optJSONObject("null");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 7, 7);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("3Y");
      JSONObject jSONObject1 = jSONObject0.put("3Y", false);
      try { 
        jSONObject1.getLong("3Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3Y\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Integer integer0 = new Integer((-517));
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Short short0 = new Short((short)2);
      JSONObject.valueToString(short0, 2065, (-1271));
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject.valueToString(boolean0, (-1596), 0);
      jSONObject0.remove("W-");
      String string1 = jSONObject0.optString(" rlF> v]8 STM5");
      assertEquals("", string1);
      
      Float float0 = new Float(357.73F);
      JSONObject.numberToString(float0);
      jSONObject0.put("", (-2233.912312));
      jSONObject0.getDouble("");
      long long0 = jSONObject0.optLong("");
      assertEquals((-2233L), long0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("-1.00", "-1.00");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      JSONObject jSONObject2 = jSONObject1.put("2P~FqT<7+Y:/@6", (-1447.11026710926));
      JSONObject jSONObject3 = jSONObject0.accumulate("2P~FqT<7+Y:/@6", jSONObject1);
      Double double0 = new Double((-1447.11026710926));
      jSONObject2.isNull("2P~FqT<7+Y:/@6");
      jSONObject3.optJSONObject("2P~FqT<7+Y:/@6");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1);
      JSONObject.valueToString(integer0, 1, (-1101));
      String string0 = "";
      jSONObject0.isNull("");
      jSONObject0.optInt("", 87);
      jSONObject0.names();
      long long0 = 0L;
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 87, 9);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('2');
      jSONArray0.write(stringWriter2);
      jSONObject0.optString("", "");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject2 = jSONObject1.put("java.lang.String@0000000002", (Map) hashMap0);
      jSONObject2.has("H$%(dZ4Y=4fzp");
      try { 
        jSONObject2.getJSONObject("_^Yd207G`Ou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_^Yd207G`Ou\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      JSONObject jSONObject2 = jSONObject1.put("", (-1447.11026710926));
      int int0 = jSONObject2.optInt("", 2438);
      assertEquals((-1447), int0);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject2.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      double double0 = jSONObject2.optDouble((String) null, 1638.1632);
      assertEquals(1638.1632, double0, 0.01);
      
      long long0 = jSONObject2.optLong((String) null, 3204L);
      assertEquals(3204L, long0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Long long0 = new Long(58L);
      String string0 = "^i8wc,-";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("gethashCode", "^i8wc,-");
      jSONObject1.toString((-1326), (-1326));
      JSONObject.valueToString(jSONObject0);
      jSONObject1.optDouble("gethashCode", (double) 58L);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONObject@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      String string0 = "";
      jSONObject0.isNull("");
      JSONObject jSONObject1 = jSONObject0.put("", true);
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("cop", (Object) jSONObject0);
      try { 
        jSONObject1.getBoolean("cop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cop\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      hashMap0.clone();
      hashMap0.put((Object) null, jSONObject0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 47, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.optJSONArray(stringArray0[0]);
      try { 
        jSONObject1.getJSONArray("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optDouble("3Y");
      JSONObject jSONObject1 = jSONObject0.put("3Y", false);
      Boolean boolean0 = new Boolean((String) null);
      try { 
        jSONObject1.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      jSONObject0.isNull("");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optDouble("", 0.0);
      int int1 = (-2575);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("sum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of sum
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = "";
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) null);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "IJzF*";
      stringArray0[1] = "IJzF*";
      stringArray0[1] = "IJzF*";
      stringArray0[3] = "IJzF*";
      stringArray0[4] = "IJzF*";
      JSONObject jSONObject0 = new JSONObject("IJzF*", stringArray0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("des", (Collection) null);
      try { 
        jSONObject1.getLong("IJzF*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"IJzF*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.put("2P~FqT<7+Y:/@6", 1458.5250373953138);
      double double0 = jSONObject1.getDouble("2P~FqT<7+Y:/@6");
      assertEquals(1458.5250373953138, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-1L));
      Object object0 = new Object();
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(object0, (-54582745), 75);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"java.lang.Object@0000000002\"", object0);
      String string0 = "Ld8yEkOSUi4I68";
      jSONObject1.optDouble(" of ");
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.opt(": ");
      jSONObject0.optJSONArray(": ");
      Float.min((-1.0F), (-1.0F));
      Byte byte0 = new Byte((byte) (-33));
      Float.min((-1.0F), (-1.0F));
      jSONObject0.append("}w\u0004Wv", byte0);
      Byte.compare((byte) (-33), (byte)13);
      String string0 = null;
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("_^v[y");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.quote("getsubList");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 3860, 3860);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("etput", (Object) "etput");
      jSONObject1.names();
      try { 
        jSONObject1.getJSONArray("etput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"etput\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      HashMap<String, Byte> hashMap1 = new HashMap<String, Byte>(hashMap0);
      Byte byte0 = new Byte((byte)90);
      Byte.compare((byte)90, (byte)90);
      Byte byte1 = new Byte((byte)44);
      Byte.toUnsignedInt((byte)44);
      hashMap1.put((String) null, byte1);
      Byte.toUnsignedInt((byte) (-106));
      hashMap1.putIfAbsent("get", byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.toString();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      linkedList0.add(double0);
      Double double1 = new Double(0.0);
      linkedList0.add(double1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.doubleToString(150);
      jSONObject0.put("150", (Map) hashMap1);
      JSONObject.valueToString("get");
      try { 
        jSONObject0.get("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("getremoveLast");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      Float.sum((-1074.4828F), (-1074.4828F));
      JSONObject.valueToString(float0);
      jSONObject0.put("java.lang.Float@0000000002", (-1744L));
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      JSONObject jSONObject1 = jSONObject0.put("true", (Map) hashMap1);
      JSONObject jSONObject2 = new JSONObject((Object) hashMap1);
      JSONObject jSONObject3 = jSONObject2.put("true", (-1014));
      jSONObject3.toString((-356), 12);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('2');
      Writer writer0 = jSONArray0.write(stringWriter2);
      jSONObject2.write(writer0);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.toString(504, 0);
      Byte byte0 = new Byte((byte)62);
      Byte.compare((byte)0, (byte)62);
      Byte.compare((byte)62, (byte) (-42));
      Byte.compare((byte) (-42), (byte)62);
      jSONObject2.put("K(9}KgK?P*1)b3eH ", 4782);
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      long long0 = jSONObject2.optLong("K(9}KgK?P*1)b3eH ");
      assertEquals(4782L, long0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getcompare", 508);
      boolean boolean0 = jSONObject0.optBoolean("gettoString");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("3Y", 2144);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.putOpt("", "");
      String string0 = JSONObject.numberToString(float0);
      Short short0 = new Short((short)1243);
      String string1 = JSONObject.valueToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-343));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      String string0 = JSONObject.quote("2P~FqT</+Y:/@6");
      assertEquals("\"2P~FqT<\\/+Y:/@6\"", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (-1447.11026710926));
      jSONObject0.optInt("$Ig", 2438);
      JSONArray jSONArray0 = new JSONArray();
      Boolean.getBoolean("");
      Integer integer0 = new Integer(13);
      jSONObject0.append(")|vXbm^'*s", integer0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Short short0 = new Short((short)2);
      JSONObject.valueToString(short0, 2065, (-1271));
      jSONObject0.optInt("", 9);
      jSONObject0.toString((int) (short)2);
      jSONObject0.optInt("{}");
      Boolean.compare(false, true);
      jSONObject0.toString();
      String string0 = null;
      jSONObject0.optLong((String) null);
      jSONObject0.optString("", "ps0-t+Ton C");
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((float) 0L);
      JSONObject.getNames((Object) float0);
      jSONObject0.optLong("tt)>'h/\"L");
      try { 
        jSONObject0.getString("Fx6QL0sAPnE=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Fx6QL0sAPnE=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.valueToString((Object) null);
      try { 
        jSONObject0.getLong("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Double double0 = new Double(792.9415656446014);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.optString((String) null, "=u1s^lP1oZLS:{PY");
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject1.optInt((String) null);
      try { 
        jSONObject1.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = "";
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.isNull("");
      jSONObject0.optInt("", 87);
      jSONObject0.names();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
      int int0 = 16;
      try { 
        jSONArray0.getJSONObject(16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[16] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = null;
      JSONObject.quote((String) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Byte byte0 = new Byte((byte)108);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-942), (-942));
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((-1227.0));
      Boolean boolean0 = new Boolean(false);
      jSONObject2.putOpt("#*-d#F[J9?", boolean0);
      jSONObject0.get("#*-d#F[J9?");
      try { 
        jSONObject1.getJSONArray("#*-d#F[J9?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#*-d#F[J9?\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wntTa+bipS`o";
      stringArray0[1] = "wntTa+bipS`o";
      stringArray0[2] = "4v^+yQ^'fhW";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      int int0 = 48;
      jSONObject0.optInt("int", (-3157));
      try { 
        jSONObject1.put((String) null, (long) (-3157));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Long long0 = new Long(629);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "3Y";
      jSONObject0.optDouble("3Y");
      String string1 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("oO", false);
      JSONObject jSONObject2 = jSONObject1.put("getnumberToString", 0L);
      boolean boolean0 = jSONObject1.isNull("oO");
      assertFalse(boolean0);
      
      double double0 = jSONObject2.optDouble("getnumberToString");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
      
      Integer integer1 = new Integer(1);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("", (Object) null);
      double double0 = jSONObject1.optDouble(",:]}/\"[{;=#", (double) 1);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = jSONObject1.optInt(",:]}/\"[{;=#", 87);
      assertEquals(0, jSONObject1.length());
      assertEquals(87, int0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray(" P");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4v^+yQ^'fhW";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optInt("", 48);
      JSONObject jSONObject2 = jSONObject1.put("] is not a number.", 0L);
      jSONObject2.put("4v^+yQ^'fhW", (Map) null);
      jSONObject2.put("4v^+yQ^'fhW", 0);
      jSONObject2.toString(0, 48);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("/65", (-589.574868436698));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.accumulate("_~dw~hTr$ec3yKvx'i", jSONObject2);
      JSONObject.valueToString(hashMap0);
      jSONObject0.optDouble((String) null, (-2166.9371565));
      int int0 = jSONObject1.optInt("", (-3792));
      assertEquals(2, jSONObject1.length());
      assertEquals((-3792), int0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (-3));
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject1.optBoolean("", true);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((-1227.0));
      Boolean boolean0 = new Boolean(false);
      Boolean.compare(true, false);
      jSONObject2.putOpt("#*-d#F[J9?", boolean0);
      jSONObject0.get("#*-d#F[J9?");
      try { 
        jSONObject1.getDouble("#*-d#F[J9?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#*-d#F[J9?\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Object) "getputOpt");
      // Undeclared exception!
      jSONObject0.toString(649);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      String[] stringArray0 = new String[8];
      jSONObject0.isNull("4v^+yQ^'fhW");
      jSONObject0.optInt("4v^+yQ^'fhW", 87);
      jSONObject0.names();
      try { 
        jSONObject0.get("4v^+yQ^'fhW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4v^+yQ^'fhW\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "u],!Hwb2AOXd\\";
      jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('0');
      int int0 = 34;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "u],!Hwb2AOXd", 34, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Long long0 = new Long(629);
      JSONObject.quote("ER3 6F.TH`");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.quote("\"ER3 6F.TH`\"");
      float float0 = Float.max(0.0F, 629);
      assertEquals(629.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "00J'VdkH/");
      jSONObject0.toString(2, 2);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Double double0 = new Double((-264.5));
      jSONObject0.putOpt("", double0);
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      String string0 = jSONObject1.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getString("");
      jSONObject0.isNull("");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 55, 55);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = JSONObject.quote("oA>fY.7/Cd");
      assertEquals("\"oA>fY.7/Cd\"", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer.compareUnsigned(2641, (-2109));
      Integer integer0 = new Integer(3);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.push(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject0.optString("", "");
      JSONObject.valueToString(jSONObject0, 12, 12);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isspliterator", true);
      int int0 = jSONObject1.optInt("isspliterator");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("JSONArray[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Long long0 = new Long(58L);
      String[] stringArray0 = new String[1];
      Long.divideUnsigned(0L, 1L);
      stringArray0[0] = "gethashCode";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String[] stringArray1 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      jSONObject0.optString("gethashCode");
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.putOpt("wdmTz'RvvmA>7Z", linkedList0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = JSONObject.quote("G P");
      assertEquals("\"G P\"", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      Float.isFinite(0.0F);
      jSONObject0.optString("gG6.5W.1(<", "] is not a number.");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      Float.max(0.0F, (-1.0F));
      JSONObject jSONObject1 = jSONObject0.put("o*({1kZ(OdxXr", (Map) hashMap0);
      jSONObject0.has("] is not a number.");
      JSONObject jSONObject2 = jSONObject1.put("X", (-3956.566));
      jSONObject2.getDouble("X");
      jSONObject0.optLong("");
      jSONObject1.optBoolean("X", true);
      jSONObject2.names();
      jSONObject2.remove("] is not a number.");
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("hu<Y`)jZgWB jc]x!", 0.0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Byte byte0 = new Byte((byte) (-110));
      jSONObject0.optDouble("", (-662.9908510768923));
      String string0 = jSONObject1.toString((int) (byte) (-110));
      assertNotNull(string0);
  }
}
