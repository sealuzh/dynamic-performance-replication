/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:30:11 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.List;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("\u2026", "\u2026");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("\u2026");
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment(":");
      HttpUrl httpUrl0 = HttpUrl.parse(":");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment(":");
      HttpUrl httpUrl0 = HttpUrl.parse(":");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.redact();
      URI uRI0 = httpUrl0.uri();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        HttpUrl.getChecked("pathSegment == null");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for pathSegment == null
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("=%6O}Mj$zuN%[O;E");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/=%6O%7DMj$zuN%[O;E", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(httpUrl0);
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertEquals(22, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("https", httpUrl1.scheme());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl1.toString());
      assertTrue(httpUrl1.isHttps());
      assertEquals("mnt", httpUrl1.host());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter(")m$x 9Aq>K", ")m$x 9Aq>K");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter(":\"+3g<pG:A.VP", ":\"+3g<pG:A.VP");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("\u2026");
      assertNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:mnt/gaiagpfs/uses/homedirs{apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(httpUrl0);
      assertEquals("https://mnt/gaiagpfs/uses/homedirs%7Bapanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(10, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("Ca:not buffer enire body for content length: ");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("Ca:not buffer enire body for content length: ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for Ca:not buffer enire body for content length: 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("/", "/");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addQueryParameter("/", "/");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(2458, "interrupted");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2458, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("\r");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for \r
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(": yV<lA[RQB&b05I2");
      assertNotNull(httpUrl_Builder0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "Tpquu";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(90);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("Tpquu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: Tpquu
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      try { 
        HttpUrl.getChecked("l0wo[GkT(gCU8VH");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for l0wo[GkT(gCU8VH
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "Tpp{u";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("Tpp{u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: Tpp{u
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(45, "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/m4j)7z:c/m4j)7z:c");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded(".%2e", 93, 93);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("\r", "\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.port((-3162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -3162
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("N");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("N");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for N
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:mnt/gaiagpfs/uses/homedirs/apanichela/evosuite#prformance/datase/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7lt,~tsd");
      assertNotNull(httpUrl0);
      assertEquals(5, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichela/evosuite#prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.toString());
      assertEquals("prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("ea~7t!%7F~6sUG%3Cq");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("ea~7t!%7F~6sUG%3Cq");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ea~7t!%7F~6sUG%3Cq
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("KH}uBu+a+zc*OZww]");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(httpUrl0);
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("mnt", httpUrl0.host());
      
      HttpUrl httpUrl1 = HttpUrl.getChecked("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertEquals(0, httpUrl1.querySize());
      assertEquals("mnt", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(11, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      assertTrue(httpUrl1.isHttps());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("{5$y*Ih}^{S");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        HttpUrl.getChecked("elruR-EIlwlGy");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for elruR-EIlwlGy
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "478 P#:]b@b9i\"b5uL,";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("478 P#:]b@b9i\"b5uL,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 478 P#:]b@b9i\"b5uL,
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(" \"#<>^`{|}");
      assertNotNull(httpUrl_Builder0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments(" \"#<>^`{|}");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "Ca:not buffer enire body for content length: ");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("Ca:not buffer enire body for content length: ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for Ca:not buffer enire body for content length: 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("[]");
      assertNull(httpUrl0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: []
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("^`{|}");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("^`{|}");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ^`{|}
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("\r", "\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllQueryParameters("\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("");
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.removeAllEncodedQueryParameters("");
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("\r", "\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("\r", "");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("\u2026", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("|*V$CAHI_+!1k<CLT");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/%7C*V$CAHI_+!1k%3CCLT", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("https:mnt/gaiagpfs/usQrs/homedirs/apanichella/evosuite_performance/datasetXgordon_sczipt_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(httpUrl_Builder0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      
      String string0 = HttpUrl.percentDecode("b4xZ+j_dY", true);
      assertEquals("b4xZ j_dY", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      try { 
        HttpUrl.getChecked("\u2026");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for \u2026
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, "c{V8XbRj 7R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("..");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl httpUrl0 = HttpUrl.parse("http:");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(httpUrl0);
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("mnt", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("%2e.");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("mnt", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl1.isHttps());
      assertEquals(443, httpUrl1.port());
      assertEquals(10, httpUrl1.pathSize());
      assertEquals("https", httpUrl1.scheme());
      assertEquals("mnt", httpUrl1.host());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.username());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("%2e.", "%2e.", true, true, true, true);
      assertEquals("%25%32%65%2E", string0);
      assertNotNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(httpUrl0);
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      
      String string0 = httpUrl0.scheme();
      assertEquals("https", string0);
      assertNotNull(string0);
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("+ |oVTX[?6#-", "+ |oVTX[?6#-");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      
      HttpUrl httpUrl2 = httpUrl0.resolve(".");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotNull(httpUrl2);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/", httpUrl2.toString());
      assertEquals(80, httpUrl2.port());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("", httpUrl2.encodedPassword());
      assertFalse(httpUrl2.isHttps());
      assertEquals(1, httpUrl2.pathSize());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.password());
      
      URI uRI0 = httpUrl2.uri();
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotNull(uRI0);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/", httpUrl2.toString());
      assertEquals(80, httpUrl2.port());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("", httpUrl2.encodedPassword());
      assertFalse(httpUrl2.isHttps());
      assertEquals(1, httpUrl2.pathSize());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.password());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertEquals("/", uRI0.getRawPath());
      assertEquals("http://www.somefakebutwellformedurl.org/", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Hc.4");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Hc.4
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        HttpUrl.getChecked("htps:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dtaset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for htps:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dtaset/gordon_script_mosa/projects/7_okhttp/
         // /uk0xg-il&%7clt,~tsd
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("9a+hYRC\"{\"");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/9a+hYRC%22%7B%22", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Tpp{u");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Tpp{u
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      URL uRL1 = httpUrl0.url();
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.port(16711680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 16711680
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("%2e.", "%2e.", true, true, true, true);
      assertEquals("%25%32%65%2E", string0);
      assertNotNull(string0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("E~_1u-bF\"px~");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegments("%2e.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(52, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("Tpp{u");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(721);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("https:/www.somefakebutwellformedurl.org/fooexample");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "3md_{b@&O~", 3240, "3md_{b@&O~", (URLStreamHandler) null);
      assertNotNull(uRL0);
      assertEquals("3md_{b@&O~", uRL0.getHost());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("3md_{b@&O~:3240", uRL0.getAuthority());
      assertEquals("3md_{b@&O~", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals(3240, uRL0.getPort());
      assertEquals("https://3md_{b@&O~:32403md_{b@&O~", uRL0.toString());
      assertEquals("https://3md_{b@&O~:32403md_{b@&O~", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("3md_{b@&O~", uRL0.getFile());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("3md_{b@&O~", uRL0.getHost());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("3md_{b@&O~:3240", uRL0.getAuthority());
      assertEquals("3md_{b@&O~", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals(3240, uRL0.getPort());
      assertEquals("https://3md_{b@&O~:32403md_{b@&O~", uRL0.toString());
      assertEquals("https://3md_{b@&O~:32403md_{b@&O~", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("3md_{b@&O~", uRL0.getFile());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("32403md_{b", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://3md_%7Bb%40&O~:32403md_%7Bb@&o~/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("3md_{b@&O~", httpUrl0.username());
      assertEquals("32403md_%7Bb", httpUrl0.encodedPassword());
      assertEquals(443, httpUrl0.port());
      assertEquals("&o~", httpUrl0.host());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("jN9=((W`?`*)S{mYRn|");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http://www.somefakebutwellformedurl.org/jN9=((W%60?`*)S{mYRn|", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.querySize());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("+D");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl httpUrl0 = HttpUrl.parse("+D");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("&$&SI0m~O}", "&$&SI0m~O}");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("&$&SI0m~O}");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      
      httpUrl_Builder1.parse(httpUrl0, "Uk0xg-il&|lt,~TSD");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.encodedPassword("29*h0uWoudSE");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      String string0 = httpUrl0.encodedFragment();
      assertNull(string0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.encodedQuery("&$&SI0m~O}");
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("29*h0uWoudSE", httpUrl1.password());
      assertEquals("http://:29*h0uWoudSE@www.somefakebutwellformedurl.org/Uk0xg-il&%7Clt,~TSD?&$&SI0m~O}#&$&SI0m~O}", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.username());
      assertEquals("29*h0uWoudSE", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("&$&SI0m~O}", httpUrl1.encodedFragment());
      assertEquals("&$&SI0m~O}", httpUrl1.fragment());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(3, httpUrl1.querySize());
      
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder4);
      assertNotNull(httpUrl2);
      assertTrue(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertEquals("&$&SI0m~O}", httpUrl2.fragment());
      assertEquals(3, httpUrl2.querySize());
      assertEquals(1, httpUrl2.pathSize());
      assertFalse(httpUrl2.isHttps());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(80, httpUrl2.port());
      assertEquals("", httpUrl2.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("29*h0uWoudSE", httpUrl2.encodedPassword());
      assertEquals("29*h0uWoudSE", httpUrl2.password());
      assertEquals("&$&SI0m~O}", httpUrl2.encodedFragment());
      assertEquals("http://:29*h0uWoudSE@www.somefakebutwellformedurl.org/Uk0xg-il&%7Clt,~TSD?&$&SI0m~O}#&$&SI0m~O}", httpUrl2.toString());
      
      String string1 = httpUrl2.redact();
      assertEquals("http://www.somefakebutwellformedurl.org/...", string1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotNull(string1);
      assertTrue(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertEquals("&$&SI0m~O}", httpUrl2.fragment());
      assertEquals(3, httpUrl2.querySize());
      assertEquals(1, httpUrl2.pathSize());
      assertFalse(httpUrl2.isHttps());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(80, httpUrl2.port());
      assertEquals("", httpUrl2.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("29*h0uWoudSE", httpUrl2.encodedPassword());
      assertEquals("29*h0uWoudSE", httpUrl2.password());
      assertEquals("&$&SI0m~O}", httpUrl2.encodedFragment());
      assertEquals("http://:29*h0uWoudSE@www.somefakebutwellformedurl.org/Uk0xg-il&%7Clt,~TSD?&$&SI0m~O}#&$&SI0m~O}", httpUrl2.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      
      int int0 = httpUrl0.querySize();
      assertEquals(0, int0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(httpUrl0);
      assertEquals("https", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertTrue(httpUrl0.isHttps());
      assertEquals("mnt", httpUrl0.host());
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertNotNull(set0);
      assertEquals("https", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertTrue(httpUrl0.isHttps());
      assertEquals("mnt", httpUrl0.host());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      
      String string0 = httpUrl0.host();
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertNotNull(string0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("X", "X");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setEncodedQueryParameter("X", "X");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedQueryParameter("X", "okio.ByteString");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.removeAllQueryParameters("okio.ByteString");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      
      List<String> list0 = httpUrl0.queryParameterValues(":::not buffer enire body for content length: ");
      assertNotNull(list0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      httpUrl_Builder4.parse(httpUrl0, "X");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http://www.somefakebutwellformedurl.org/X?X=X&X=okio.ByteString", httpUrl1.toString());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(2, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      
      List<String> list1 = httpUrl0.queryParameterValues("okio.ByteString");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(list1, list0);
      assertNotNull(list1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      String string0 = httpUrl_Builder4.toString();
      assertEquals("http://www.somefakebutwellformedurl.org/X?X=X&X=okio.ByteString", string0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("INVALD_HOST");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedPassword("INVALD_HOST");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("ID1ID2", "INVALD_HOST");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.setQueryParameter("ID1ID2", "INVALD_HOST");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder4);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.fragment("!An");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotNull(httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder2.encodedPassword("ID1ID2");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder6);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      
      httpUrl_Builder0.parse(httpUrl0, "!An");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder2.username("ID1ID2");
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder7);
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder2.username("M=3i!pb%azua/}CaHLG");
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertNotNull(httpUrl_Builder8);
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder5.addPathSegments("ID1ID2");
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder9);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder9);
      
      HttpUrl.Builder httpUrl_Builder10 = httpUrl_Builder3.password("UNSUPPORTED_SCHEME");
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder10);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder10);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder10, httpUrl_Builder3);
      assertSame(httpUrl_Builder10, httpUrl_Builder2);
      assertSame(httpUrl_Builder10, httpUrl_Builder4);
      assertSame(httpUrl_Builder10, httpUrl_Builder7);
      assertSame(httpUrl_Builder10, httpUrl_Builder5);
      assertSame(httpUrl_Builder10, httpUrl_Builder9);
      assertSame(httpUrl_Builder10, httpUrl_Builder1);
      assertSame(httpUrl_Builder10, httpUrl_Builder0);
      assertSame(httpUrl_Builder10, httpUrl_Builder6);
      assertSame(httpUrl_Builder10, httpUrl_Builder8);
      assertNotNull(httpUrl_Builder10);
      
      HttpUrl httpUrl1 = httpUrl_Builder5.build();
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder10);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder9);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder10);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("M=3i!pb%azua/}CaHLG", httpUrl1.username());
      assertFalse(httpUrl1.isHttps());
      assertEquals("UNSUPPORTED_SCHEME", httpUrl1.password());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals("!%7FAn", httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals("!An", httpUrl1.fragment());
      assertEquals(2, httpUrl1.querySize());
      assertEquals("UNSUPPORTED_SCHEME", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("http://M%3D3i!pb%25azua%2F%7DCaHLG:UNSUPPORTED_SCHEME@www.somefakebutwellformedurl.org/!%7FAn/ID1ID2?INVALD_HOST&ID1ID2=INVALD_HOST#!%7FAn", httpUrl1.toString());
      
      HttpUrl.Builder httpUrl_Builder11 = httpUrl_Builder4.removeAllQueryParameters(" \"#<>^`{|}");
      assertSame(httpUrl_Builder11, httpUrl_Builder7);
      assertSame(httpUrl_Builder11, httpUrl_Builder5);
      assertSame(httpUrl_Builder11, httpUrl_Builder6);
      assertSame(httpUrl_Builder11, httpUrl_Builder10);
      assertSame(httpUrl_Builder11, httpUrl_Builder9);
      assertSame(httpUrl_Builder11, httpUrl_Builder0);
      assertSame(httpUrl_Builder11, httpUrl_Builder8);
      assertSame(httpUrl_Builder11, httpUrl_Builder3);
      assertSame(httpUrl_Builder11, httpUrl_Builder1);
      assertSame(httpUrl_Builder11, httpUrl_Builder2);
      assertSame(httpUrl_Builder11, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder11);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder10);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder11);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder11);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder10);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertNotNull(httpUrl_Builder11);
      
      HttpUrl.Builder httpUrl_Builder12 = httpUrl_Builder5.addEncodedPathSegments("M=3i!pb%azua/}CaHLG");
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder12);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder11);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder12, httpUrl_Builder4);
      assertSame(httpUrl_Builder12, httpUrl_Builder5);
      assertSame(httpUrl_Builder12, httpUrl_Builder2);
      assertSame(httpUrl_Builder12, httpUrl_Builder9);
      assertSame(httpUrl_Builder12, httpUrl_Builder7);
      assertSame(httpUrl_Builder12, httpUrl_Builder3);
      assertSame(httpUrl_Builder12, httpUrl_Builder1);
      assertSame(httpUrl_Builder12, httpUrl_Builder0);
      assertSame(httpUrl_Builder12, httpUrl_Builder8);
      assertSame(httpUrl_Builder12, httpUrl_Builder10);
      assertSame(httpUrl_Builder12, httpUrl_Builder11);
      assertSame(httpUrl_Builder12, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder12);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder11);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder10);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder11);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder9);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder12);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder10);
      assertNotNull(httpUrl_Builder12);
      
      String string0 = httpUrl1.queryParameter("okhttp3.httpurl$builder$parseresult");
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder12);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder11);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder2, httpUrl_Builder12);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder11);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder10);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder11);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder9);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder12);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder10);
      assertNotSame(httpUrl1, httpUrl0);
      assertNull(string0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("M=3i!pb%azua/}CaHLG", httpUrl1.username());
      assertFalse(httpUrl1.isHttps());
      assertEquals("UNSUPPORTED_SCHEME", httpUrl1.password());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals("!%7FAn", httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals("!An", httpUrl1.fragment());
      assertEquals(2, httpUrl1.querySize());
      assertEquals("UNSUPPORTED_SCHEME", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("http://M%3D3i!pb%25azua%2F%7DCaHLG:UNSUPPORTED_SCHEME@www.somefakebutwellformedurl.org/!%7FAn/ID1ID2?INVALD_HOST&ID1ID2=INVALD_HOST#!%7FAn", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:mnt/aiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(httpUrl0);
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("https://mnt/aiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("\r");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("https://mnt/aiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals("mnt", httpUrl1.host());
      assertEquals("https://mnt/aiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl1.toString());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(11, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("https", httpUrl1.scheme());
      assertTrue(httpUrl1.isHttps());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("unexpected encodedPath: ", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("\r", "\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      List<String> list0 = httpUrl0.pathSegments();
      assertNotNull(list0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      
      boolean boolean0 = httpUrl0.equals(uRL0);
      assertFalse(boolean0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "Ca:not buffer enire body for content length: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("Ca:not buffer enire body for content length: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: Ca:not buffer enire body for content length: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(httpUrl0);
      assertEquals("https", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      
      int int0 = httpUrl0.port();
      assertEquals(443, int0);
      assertEquals("https", httpUrl0.scheme());
      assertEquals(11, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        HttpUrl.getChecked("xUA3+8");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for xUA3+8
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:mnt/gaiagpfs/uses/homedirs/apanichela/evosuite#prformance/datase/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7lt,~tsd");
      assertNotNull(httpUrl0);
      assertEquals("prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichela/evosuite#prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(5, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      
      URI uRI0 = httpUrl0.uri();
      assertNotNull(uRI0);
      assertEquals("prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichela/evosuite#prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(5, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichela/evosuite#prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%257lt,~tsd", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%257lt,~tsd", uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/gaiagpfs/uses/homedirs/apanichela/evosuite", uRI0.getRawPath());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("mnt", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      String string0 = httpUrl0.encodedQuery();
      assertNull(string0);
      assertEquals("prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichela/evosuite#prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(5, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      
      String string1 = httpUrl0.fragment();
      assertEquals("prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", string1);
      assertNotNull(string1);
      assertEquals("prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichela/evosuite#prformance/datase/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7lt,~tsd", httpUrl0.toString());
      assertEquals("mnt", httpUrl0.host());
      assertEquals(5, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("Expected leading [0-9] or '-' character but was %#x");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("\r", "\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      
      String string0 = httpUrl0.encodedPath();
      assertEquals("/fooExample", string0);
      assertNotNull(string0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "8\"IJrtw:MmoD";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("8\"IJrtw:MmoD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 8\"IJrtw:MmoD
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("c");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("c", "c");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("c=|", "");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedFragment("l|X4");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder5);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder4.fragment("!%7fan");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder6);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      httpUrl_Builder4.parse(httpUrl0, "");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder4.encodedPassword("c=|");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder7);
      
      String string0 = httpUrl0.encodedFragment();
      assertNull(string0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertNotNull(httpUrl_Builder8);
      
      String string1 = httpUrl0.redact();
      assertEquals("http://www.somefakebutwellformedurl.org/...", string1);
      assertNotNull(string1);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder8.setQueryParameter("!%7fan", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder9);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertNotNull(httpUrl_Builder9);
      
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("!%7fan", httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://:c%3D%7C@www.somefakebutwellformedurl.org/fooExample?!%257fan#!%257fan", httpUrl1.toString());
      assertEquals("", httpUrl1.username());
      assertEquals("!%257fan", httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("c=|", httpUrl1.password());
      assertEquals("c%3D%7C", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      
      String string2 = httpUrl_Builder4.toString();
      assertEquals("http://:c%3D%7C@www.somefakebutwellformedurl.org/fooExample?!%257fan#!%257fan", string2);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = httpUrl1.querySize();
      assertEquals(1, int0);
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("!%7fan", httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://:c%3D%7C@www.somefakebutwellformedurl.org/fooExample?!%257fan#!%257fan", httpUrl1.toString());
      assertEquals("", httpUrl1.username());
      assertEquals("!%257fan", httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("c=|", httpUrl1.password());
      assertEquals("c%3D%7C", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(" \"#<>^`{|}");
      assertNotNull(httpUrl_Builder0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("s|)z9g8d{%26oAiv");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("W`I/,");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HttpUrl.canonicalize(buffer0, "", 50, 50, "|),3g$Cf4i<9_wFHb", true, false, true, false);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("\r", "\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addQueryParameter((String) null, "okio.ByteString");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "http";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.scheme("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.username("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.scheme("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(httpUrl0);
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("mnt", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      
      URI uRI0 = httpUrl0.uri();
      assertNotNull(uRI0);
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("mnt", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("mnt", uRI0.getRawAuthority());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("mnt", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      
      List<String> list0 = httpUrl0.queryParameterValues("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(list0);
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("mnt", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("Ca::ot buffer enire body for content length: ");
      assertNull(httpUrl_Builder0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "8::eIJrtw:MmoD";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("8::eIJrtw:MmoD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 8::eIJrtw:MmoD
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(httpUrl0);
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      
      String string0 = httpUrl0.queryParameter("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNull(string0);
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("https://mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("mnt", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "b`X]%";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("b`X]%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: b`X]%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      
      URI uRI0 = httpUrl0.uri();
      assertNotNull(uRI0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-2638));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      assertNotNull(httpUrl0);
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertTrue(httpUrl0.isHttps());
      
      String string0 = httpUrl0.username();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", httpUrl0.password());
      assertEquals("mnt", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(11, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp//uk0xg-il&%7clt,~tsd", httpUrl0.toString());
      assertTrue(httpUrl0.isHttps());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("", "unepete0 host: ");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllEncodedQueryParameters("%7cz");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("unepete0 host: ");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.addEncodedPathSegment("%7cz");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder1.encodedFragment("%7cz");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder6);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      
      httpUrl_Builder3.parse(httpUrl0, "unepete0 host: ");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.username("/{|");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertNotNull(httpUrl_Builder7);
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder2.username("%7cz");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder8);
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder8.addPathSegments("$b");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder9);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertNotNull(httpUrl_Builder9);
      
      HttpUrl.Builder httpUrl_Builder10 = httpUrl_Builder8.password("[oNkN+");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder10);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder9);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder10);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder10, httpUrl_Builder2);
      assertSame(httpUrl_Builder10, httpUrl_Builder6);
      assertSame(httpUrl_Builder10, httpUrl_Builder5);
      assertSame(httpUrl_Builder10, httpUrl_Builder1);
      assertSame(httpUrl_Builder10, httpUrl_Builder3);
      assertSame(httpUrl_Builder10, httpUrl_Builder4);
      assertSame(httpUrl_Builder10, httpUrl_Builder9);
      assertSame(httpUrl_Builder10, httpUrl_Builder7);
      assertSame(httpUrl_Builder10, httpUrl_Builder0);
      assertSame(httpUrl_Builder10, httpUrl_Builder8);
      assertNotNull(httpUrl_Builder10);
      
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder10);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder10);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder10);
      assertSame(httpUrl_Builder4, httpUrl_Builder9);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http", httpUrl1.scheme());
      assertEquals("|z", httpUrl1.fragment());
      assertEquals("%7cz", httpUrl1.username());
      assertEquals("%5BoNkN+", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://%257cz:%5BoNkN+@www.somefakebutwellformedurl.org/unepete0%20host:/$b?=unepete0%20host:%20#%7cz", httpUrl1.toString());
      assertEquals("%7cz", httpUrl1.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals(2, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("[oNkN+", httpUrl1.password());
      
      HttpUrl.Builder httpUrl_Builder11 = httpUrl_Builder6.addEncodedPathSegments("gl*~f~h@Zju9@6(2:");
      assertSame(httpUrl_Builder11, httpUrl_Builder6);
      assertSame(httpUrl_Builder11, httpUrl_Builder1);
      assertSame(httpUrl_Builder11, httpUrl_Builder4);
      assertSame(httpUrl_Builder11, httpUrl_Builder5);
      assertSame(httpUrl_Builder11, httpUrl_Builder0);
      assertSame(httpUrl_Builder11, httpUrl_Builder7);
      assertSame(httpUrl_Builder11, httpUrl_Builder10);
      assertSame(httpUrl_Builder11, httpUrl_Builder3);
      assertSame(httpUrl_Builder11, httpUrl_Builder9);
      assertSame(httpUrl_Builder11, httpUrl_Builder8);
      assertSame(httpUrl_Builder11, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder11);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder10);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder11);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder9);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder8);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder11);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder10);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder11);
      
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder1);
      assertNotNull(httpUrl2);
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.isHttps());
      assertEquals("%7cz", httpUrl2.encodedFragment());
      assertEquals(1, httpUrl2.querySize());
      assertEquals("[oNkN+", httpUrl2.password());
      assertEquals("|z", httpUrl2.fragment());
      assertEquals(3, httpUrl2.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("%7cz", httpUrl2.username());
      assertEquals("%5BoNkN+", httpUrl2.encodedPassword());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(80, httpUrl2.port());
      
      String string0 = httpUrl2.queryParameter("");
      assertEquals("unepete0 host: ", string0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder11);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder10);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder10);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder11);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotNull(string0);
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.isHttps());
      assertEquals("%7cz", httpUrl2.encodedFragment());
      assertEquals(1, httpUrl2.querySize());
      assertEquals("[oNkN+", httpUrl2.password());
      assertEquals("|z", httpUrl2.fragment());
      assertEquals(3, httpUrl2.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("%7cz", httpUrl2.username());
      assertEquals("%5BoNkN+", httpUrl2.encodedPassword());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(80, httpUrl2.port());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("", "unexpected host: ");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setEncodedQueryParameter(":@", "unexpected host: ");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedPassword("encodedPassword == null");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      
      httpUrl_Builder1.parse(httpUrl0, "I8");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.encodedPassword("8A~w6F[");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder1.setEncodedQueryParameter("content == null", "unexpected host: ");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder3.encodedQuery("unexpected host: ");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder6);
      
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("8A~w6F[", httpUrl1.password());
      assertEquals(80, httpUrl1.port());
      assertEquals("8A~w6F%5B", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://:8A~w6F%5B@www.somefakebutwellformedurl.org/I8?unexpected%20host:%20", httpUrl1.toString());
      
      String string0 = httpUrl0.redact();
      assertEquals("http://www.somefakebutwellformedurl.org/...", string0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotNull(string0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder4.setQueryParameter("encodedPassword == null", "$OMh)ITy$g'|~9{<");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertNotNull(httpUrl_Builder7);
      
      Set<String> set0 = httpUrl1.queryParameterNames();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(set0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("8A~w6F[", httpUrl1.password());
      assertEquals(80, httpUrl1.port());
      assertEquals("8A~w6F%5B", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://:8A~w6F%5B@www.somefakebutwellformedurl.org/I8?unexpected%20host:%20", httpUrl1.toString());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment("\u2026");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("X", "unexpected host: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setEncodedQueryParameter("unexpected host: ", "0r)G");
      httpUrl_Builder0.addEncodedQueryParameter("unexpected host: ", "unexpected host: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.encodedFragment("unexpected host: ");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.fragment(" hex=");
      httpUrl_Builder1.encodedUsername = "0r)G";
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterValues("0r)G");
      httpUrl_Builder3.parse(httpUrl0, "0r)G");
      HttpUrl.Builder.ParseResult.values();
      HttpUrl httpUrl1 = httpUrl_Builder2.build();
      httpUrl1.newBuilder();
      httpUrl_Builder0.setQueryParameter(" hex=", " hex=");
      httpUrl_Builder4.encodedPassword("xg-c3Vf]I:JArCu_4J");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("%2f%5c");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("c=|", "::xBfferSize < 1: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.setQueryParameter("c=|", "v#? eZ-L|Pjr)");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedPassword(")}ajl/}/Vn)/6CL\"=c");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder4.parse(httpUrl0, "%2f%5c");
      httpUrl_Builder2.username("c=|");
      HttpUrl.Builder.ParseResult.values();
      httpUrl0.encodedPathSegments();
      httpUrl_Builder3.addEncodedPathSegments("c=|");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      httpUrl1.uri();
      httpUrl_Builder0.query("d )P'CbMQMvn{g#");
      httpUrl1.resolve("d )P'CbMQMvn{g#");
      httpUrl0.queryParameterNames();
      httpUrl0.newBuilder("r90(k$hd`\"");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-52071170), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder("https:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:t bufer enire body for content length: ");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:t bufer enire body for content length: 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.pathSize();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("X", "unexpected host: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setEncodedQueryParameter(":@", "0r)G");
      httpUrl_Builder0.addEncodedQueryParameter("unexpected host: ", "unexpected host: ");
      URL uRL0 = MockURL.getHttpExample();
      httpUrl_Builder1.fragment(" hex=");
      httpUrl_Builder1.encodedUsername = "0r)G";
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterValues("0r)G");
      httpUrl_Builder2.parse(httpUrl0, "0r)G");
      HttpUrl.Builder.ParseResult.values();
      HttpUrl httpUrl1 = httpUrl_Builder2.build();
      httpUrl1.queryParameterValues("[]");
      httpUrl_Builder0.toString();
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 255, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      httpUrl0.password();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("http");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.scheme("http");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("http");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("\r", "\r");
      try { 
        HttpUrl.getChecked("\r");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for \r
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.isHttps();
      httpUrl0.scheme();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.equals(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("X", "unexpected host: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setEncodedQueryParameter(":@", "0r)G");
      httpUrl_Builder0.addEncodedQueryParameter("unexpected host: ", "unexpected host: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.encodedFragment("unexpected host: ");
      URL uRL0 = MockURL.getHttpExample();
      httpUrl_Builder1.fragment(" hex=");
      httpUrl_Builder1.encodedUsername = "0r)G";
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.queryStringToNamesAndValues("byteCount > Integer.MAX_VALUE: ");
      httpUrl_Builder3.parse(httpUrl0, "0r)G");
      httpUrl0.encodedFragment();
      HttpUrl.Builder.ParseResult.values();
      HttpUrl httpUrl1 = httpUrl_Builder2.build();
      httpUrl0.newBuilder("[]");
      httpUrl1.queryParameterValues("[]");
      httpUrl_Builder1.setQueryParameter("8\"", "Tpp{u");
      httpUrl1.query();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.query();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments(".%2e");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.uri();
      httpUrl0.fragment();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter(".%2e", ".%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters(".%2e");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password(".%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment(0, ".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.uri();
      httpUrl0.hashCode();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("uCSL#J");
      httpUrl1.uri();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/tpp{u");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("/tpp{u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: /tpp{u
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder("'");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%2e%2e";
      httpUrl_Builder0.addEncodedPathSegments("%2e%2e");
      try { 
        HttpUrl.getChecked("%2e%2e");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for %2e%2e
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("[", "%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter(":@", "%2e");
      httpUrl_Builder2.encodedFragment("%2e");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.fragment(":@");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      URI uRI0 = httpUrl0.uri();
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      httpUrl1.queryParameterValues(":@");
      httpUrl_Builder2.parse(httpUrl0, ":@");
      HttpUrl.Builder.ParseResult.values();
      HttpUrl httpUrl2 = httpUrl_Builder3.build();
      httpUrl2.queryParameterValues("[");
      httpUrl_Builder3.toString();
      httpUrl2.port();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockURL.getHttpExample();
      String string0 = "_MW={e,M:!l";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "..";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(28, "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "[::bd.(U:]";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[::bd.(U:]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [::bd.(U:]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 94, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.uri();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("qrN:uYrl");
      httpUrl0.redact();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-3912));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl.parse("tTp]u");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("{o&;WPs=->L3#.D<U?");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Ca:not buffer enire body for content length: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[::");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [::
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("https");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("https");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("https");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.scheme("https");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", "https");
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("https");
      httpUrl_Builder1.effectivePort();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:mnt/gaiagpfs/uses/homedirs/apanichella/evosuite_performance/dataset/gordon_script_mosa/projects/7_okhttp/\n/uk0xg-il&%7clt,~tsd");
      HttpUrl httpUrl1 = httpUrl0.resolve("size < 8: ");
      httpUrl0.equals(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Ca:not buffer enire body for content length: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, "%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: %2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "3md_{b@&O~", 3240, "https", (URLStreamHandler) null);
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 94, "https");
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.URL("https", "4*#yiD", "https");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("https");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("dE:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: dE:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl.parse("anD,{1op7<  xGLsFf");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username(".");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("anD,{1op7<  xGLsFf");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment(2029, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "478.P#:]b@b9i\"b5uL,";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("478.P#:]b@b9i\"b5uL,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 478.P#:]b@b9i\"b5uL,
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "[5Cbd.(U:]";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[5Cbd.(U:]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [5Cbd.(U:]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("8.$eIJrtw:Mm+D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 8.$eIJrtw:Mm+D
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("#<>^`{|}");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "5Cbd.(U:", 3220, "https", (URLStreamHandler) null);
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "[::bd::U:]";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[::bd::U:]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [::bd::U:]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }
}
