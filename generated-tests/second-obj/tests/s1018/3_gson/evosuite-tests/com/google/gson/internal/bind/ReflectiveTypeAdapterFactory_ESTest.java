/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:21:10 GMT 2018
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.ExclusionStrategy;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.internal.ConstructorConstructor;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectiveTypeAdapterFactory_ESTest extends ReflectiveTypeAdapterFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[24];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) byteArrayInputStream0);
      assertTrue(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DASHES;
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      Class<InputStream> class0 = InputStream.class;
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) class0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Field field0 = null;
      Gson gson0 = new Gson();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonObject jsonObject0 = new JsonObject();
      gson0.excluder();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Short> class0 = Short.TYPE;
      Class<Type> class1 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class1);
      typeToken0.getRawType();
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Register an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonArray jsonArray0 = new JsonArray();
      gson0.toJson((JsonElement) jsonArray0);
      JsonObject jsonObject0 = new JsonObject();
      Excluder excluder0 = Excluder.DEFAULT;
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Short> class0 = Short.TYPE;
      Class<Type> class1 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class1);
      Class<? super Type> class2 = typeToken0.getRawType();
      gson0.fromJson((JsonElement) jsonNull0, (Type) class2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Boolean> class3 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        ReflectiveTypeAdapterFactory.excludeField((Field) null, true, excluder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory", e);
      }
  }
}
