/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:14:22 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.mutatesStructure(" AqS+jl\"5 J#cr");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getComponents();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1816, 2025);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1816
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL(" join ");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-4639), " join ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" join ", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" join   JOIN (1,1) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.normalize("[p_+!4wQP0<.A_", true);
      assertEquals("[ p_ + ! 4wQP0 <.A_", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = SQLUtil.normalize("K_/\"KZqJ", false);
      assertEquals("K_ / \"KZqJ\"", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("select intodrop tableselecttable null", (String[]) null, "select intodrop tableselecttable null", "create materialized view", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("bykC~MFNvb", stringArray0, "bykC~MFNvb", "/0y:", stringArray0);
      assertEquals("bykC~MFNvb as /0y: on ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "OyF~~kGXy9`\u0002";
      String string0 = SQLUtil.join("", "", stringArray0, "", "", stringArray0);
      assertEquals(" as  on .OyF~~kGXy9`\u0002 = .OyF~~kGXy9`\u0002 and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("refcursor");
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("Y3g08~eg}", "Y3g08~eg}", "Y3g08~eg}");
      assertEquals("'Y3g08~eg}'", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop indexs";
      stringArray0[1] = "table null";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("drop indexs = 'drop indexs' AND table null = 'table null'", string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "#E*]#A #auLL";
      String string0 = SQLUtil.renderColumnListWithTableName("#E*]#A #auLL", stringArray0);
      assertEquals("#E*]#A #auLL.null, #E*]#A #auLL.null, #E*]#A #auLL.#E*]#A #auLL, #E*]#A #auLL.null, #E*]#A #auLL.null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updateNString(int, String)");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter session", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = SQLUtil.normalize("'F~Z^k`SO*J", true);
      assertEquals("'F~Z^k`SO*J'", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "{$A*+_lx|_Yd0;te@=D", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT {$A*+_lx|_Yd0;te@=D UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[5] = "!'DaA?]4MzR9iqSUOAZ";
      stringArray0[6] = "drop tabledrop table";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "!'DaA?]4MzR9iqSUOAZ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(stringArray0[2], false, dBUniqueConstraint0);
      dBUniqueIndex0.setDoc("!'DaA?]4MzR9iqSUOAZ");
      dBUniqueIndex0.getTable();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "CHECK ", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p=D(cgzE.Hb:/0";
      stringArray0[1] = "p=D(cgzE.Hb:/0";
      stringArray0[2] = "p=D(cgzE.Hb:/0";
      stringArray0[3] = "p=D(cgzE.Hb:/0";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("p=D(cgzE.Hb:/0", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("org.hsqldb.Index");
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      String string0 = SQLUtil.removeComments(")iW");
      assertEquals(")iW", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.normalize("j>iN*`({+HAp71wF|", false);
      String string0 = ">vuO;V0/LAv/1\\+Nw";
      StringBuilder stringBuilder0 = new StringBuilder(1398);
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("j>iN*`({+HAp71wF|", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-893), ">vuO;V0/LAv/1+Nw");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -893
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter indexjoin");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(47, "FONEIGN KEY");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("B ", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("B  FONEIGN KEY NULL", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "into";
      SQLUtil.renderColumnListWithTableName("into", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "OyF~~kGXy9`\u0002";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (OyF~~kGXy9`\u0002, , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2978);
      SQLUtil.addRequiredCondition("K44-PFwiGkOy$M!i~", stringBuilder0);
      assertEquals("K44-PFwiGkOy$M!i~", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      rowOutputBinary0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(20, rowOutputBinary0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "CHECK ", true, (String[]) null);
      SQLUtil.typeAndName(dBUniqueConstraint0);
      String string0 = "`Na!&4:7tsin{s;";
      StringBuilder stringBuilder0 = new StringBuilder("CHECK ");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("`Na!&4:7tsin{s;", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("`Na!&4:7tsin{s;", stringBuilder1);
      stringBuilder1.append((CharSequence) "unique constraint CHECK ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder3 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder2, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder3.insert((-9), (-9));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -9
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize(";wCA)\"2~0h7PYZ'|>1", true);
      assertEquals("; wCA) \"2~0h7PYZ'|>1\"", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("executeconstraint");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("]|.)GAjbCYf>EQ0NY-", true);
      assertEquals("] |.) GAjbCYf > EQ0NY -", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("T>iN*`({+HAp71wF|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: T>iN*`({+HAp71wF|
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("+Kg&WUK QgRBa-TY#lX", true);
      assertEquals("+ Kg & WUK QgRBa - TY # lX", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("K_/\"KZqJ");
      assertFalse(boolean0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      streamTokenizer0.pushBack();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog("K_/\"KZqJ");
      dBCatalog0.getComponents();
      dBCatalog0.getSchemas();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execute", true, (String) null, "T");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT execute CHECK T", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "v";
      stringArray0[4] = "v";
      stringArray0[5] = "v";
      stringArray0[6] = "v";
      stringArray0[7] = "v";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("v", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      assertEquals("v.v", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-566883602), "org.apache.derby.iapi.sql.dictionary.SchemaDespriptor");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.toUnsignedString(177);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop materialized v", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Integer integer1 = RawTransaction.COMMIT;
      Integer.divideUnsigned(4881, 3);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.iapi.sql.dictionary.SchemaDespriptor", defaultDBTable0, dBDataType0, integer1, integer1);
      defaultDBColumn0.setDefaultValue("177");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.mutatesStructure("org.apache.derby.iapi.sql.dictionary.SchemaDespriptor");
      DBCatalog dBCatalog0 = new DBCatalog();
      List<DBSchema> list0 = dBCatalog0.getComponents();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.mutatesStructure("K_/\"KZqJ");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBCatalog dBCatalog0 = new DBCatalog("K_/\"KZqJ");
      VersionNumber.valueOf("P23y'9x0");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      TableContainer tableContainer0 = new TableContainer((String) null, dBCatalog0);
      tableContainer0.getTable("P23y'9x0");
      DBDataType dBDataType0 = DBDataType.getInstance(10, "2D");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("P23y'9x0", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("create tableclob");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompositeDBObject<DBUniqueIndex> compositeDBObject0 = (CompositeDBObject<DBUniqueIndex>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("selec`*)ttable null");
      tableContainer0.getTables();
      SQLUtil.normalize("selec`*)ttable null", true);
      SQLUtil.mutatesDataOrStructure("selec ` *) ttable null");
      NameSpec nameSpec0 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("inne", stringArray0);
      SQLUtil.removeComments("");
      Boolean boolean0 = new Boolean("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop tabledrop table", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("inne", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("java.awt.Desktop", (DBTable) null, (-1654636261), "java.awt.Desktop");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop tabledrop table", defaultDBTable0, (-1654636261), "Unknown constraint type: ");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBDataType.getInstance((-566883602), "org.apache.derby.iapi.sql.dictionary.SchemaDespriptor");
      Integer integer0 = RawTransaction.COMMIT;
      String string0 = Integer.toUnsignedString((-566883602));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer1 = RawTransaction.COMMIT;
      defaultDBTable0.getIndexes();
      SQLUtil.normalize("org.apache.derby.iapi.sql.dictionary.SchemaDespriptor", true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.iapi.sql.dictionary.SchemaDespriptor", defaultDBTable0, 2147483645, "org.apache.derby.iapi.sql.dictionary.SchemaDespriptor");
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("inner", stringArray0);
      SQLUtil.removeComments("");
      Boolean boolean0 = new Boolean("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("BkZ(9--F0er$q", false);
      assertEquals("BkZ ( 9 -- F0er $ q", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(217, "~bs[MSd+.");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4VQ0Y5F|/z", defaultDBTable0, dBDataType0, integer2, (Integer) null);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("4VQ0Y5F|/z ~BS[MSD+.(1) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "aler table";
      stringArray0[1] = "aler table";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      dBUniqueIndex0.setDoc("aler table");
      dBUniqueIndex0.getTable();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      assertNull(dBUniqueConstraint0.getName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Character character0 = Character.valueOf('x');
      String string0 = SQLUtil.substituteMarkers("create tablejoin", "create tablejoin", character0);
      assertEquals("'x'", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("alter tablejoin");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tablejoin");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "NUMBER";
      stringArray0[3] = "alter tablejoin";
      stringArray0[4] = "alter tablejoin";
      stringArray0[5] = "alter tablejoin";
      stringArray0[6] = "alter tablejoin";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize(stringArray0[0], true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = SQLUtil.normalize("updateNString(int, String)", false);
      assertEquals("updateNString (int, String)", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tablejoin");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter tablejoin";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "T>iN*`({+HAp71wF|", false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (alter tablejoin)", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selecttable null");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("selecttable null");
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("alter session");
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tablejoin");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter tablejoin";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "T>iN*`({+HAp71wF|", false, stringArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("alter tablejoin");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "//", (Object[]) stringArray0);
      locale0.getCountry();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("alter tablejoin", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("updateNString(int, String)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SQL_STATE");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "CHECK ", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create unique index");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "SQL_STATE");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("updateNString(int; String)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int; String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
