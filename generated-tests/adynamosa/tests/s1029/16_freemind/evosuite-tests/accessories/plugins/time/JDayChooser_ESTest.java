/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 22:32:56 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.filter.condition.AttributeCompareCondition;
import freemind.main.FreeMindApplet;
import freemind.modes.mindmapmode.actions.FontFamilyAction;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.MultipleGradientPaint;
import java.awt.Panel;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.ComponentColorModel;
import java.awt.image.ImageProducer;
import java.io.File;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.Period;
import java.time.temporal.TemporalAmount;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.Locale;
import java.util.PropertyResourceBundle;
import java.util.TimeZone;
import java.util.Vector;
import javax.help.BadIDException;
import javax.help.HelpSet;
import javax.help.Map;
import javax.swing.ActionMap;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JRadioButton;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.GlyphView;
import javax.swing.text.LabelView;
import javax.swing.text.PlainDocument;
import javax.swing.text.Segment;
import javax.swing.text.StringContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.SVGSVGElementBridge;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.pdf.PDFInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.rowio.RowInputBinary;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.OsmFileCacheTileLoader;
import org.openstreetmap.gui.jmapviewer.Tile;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Color color0 = DebugGraphics.flashColor();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      AWTEventMulticaster.remove((ItemListener) jMonthChooser0, (ItemListener) jMonthChooser0);
      JMonthChooser jMonthChooser1 = new JMonthChooser(false);
      ItemListener itemListener0 = AWTEventMulticaster.add((ItemListener) jMonthChooser1, (ItemListener) jMonthChooser1);
      JMonthChooser jMonthChooser2 = new JMonthChooser();
      jDayChooser_DecoratorButton0.removeItemListener(itemListener0);
      DebugGraphics debugGraphics1 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics1);
      KeyEvent keyEvent0 = new KeyEvent(jMonthChooser0, 244, (-589L), 799, 799, 'r');
      KeyEvent keyEvent1 = new KeyEvent(jMonthChooser1, 244, (-2104), (-1137), 324, 'r', 3);
      jDayChooser0.keyReleased(keyEvent1);
      jDayChooser0.setForeground(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setEnabled(false);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(4);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getIcon();
      JButton jButton0 = new JButton((Icon) null);
      jDayChooser0.selectedDay = jButton0;
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.monthChooser = jMonthChooser0;
      jMonthChooser0.getTransferHandler();
      jDayChooser0.setFocusable(true);
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 'o', 256, 4, 38, 'o');
      keyEvent0.setKeyChar('o');
      keyEvent0.consume();
      jDayChooser0.getInputMap();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setForeground(color0);
      jDayChooser0.setEnabled(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "month";
      stringArray0[1] = "month";
      stringArray0[2] = "month";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      jDayChooser0.setDay(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 228, 228, 28, 2138, '}');
      keyEvent0.setKeyChar('}');
      jDayChooser0.isWeekOfYearVisible();
      keyEvent0.consume();
      jDayChooser0.setMonth(28);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 12, (-102L), 9999, 12, '#');
      keyEvent1.setKeyCode((-2214));
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.drawDays();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getLocale();
      jDayChooser0.setMonth((-2745));
      assertEquals(30, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Color color0 = DebugGraphics.flashColor();
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getHideActionText();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getInputMap();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      jDayChooser0.setEnabled(false);
      jDayChooser0.setFocus();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setMaxDayCharacters(30);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getWeekdayForeground();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-530);
      doubleArray0[1] = (double) 30;
      doubleArray0[2] = (double) 30;
      doubleArray0[3] = (double) 30;
      doubleArray0[4] = (double) (-530);
      doubleArray0[5] = (double) (-530);
      doubleArray0[6] = (double) (-530);
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color1.getRGB());
      
      GraphicContext graphicContext0 = new GraphicContext();
      Color color2 = graphicContext0.getBackground();
      jDayChooser0.setWeekdayForeground(color2);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(4);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(0);
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 0, (-4009L), ';', (-4449), 'o');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.getMaxSelectableDate();
      keyEvent0.setKeyChar(';');
      jDayChooser0.getSize();
      jDayChooser0.setAlignmentX(2674.438F);
      jDayChooser0.setMaxDayCharacters(0);
      Locale locale0 = new Locale("day", "6");
      Locale.getISOLanguages();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      jDayChooser0.setLocale(locale0);
      jDayChooser1.getDayPanel();
      assertEquals(1, jDayChooser1.getDay());
      
      jDayChooser1.setDay(0);
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.drawDays();
      jDayChooser0.getSelectedDay();
      jDayChooser1.getLocale();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      jDayChooser0.setDay((-1450));
      int int0 = 209;
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getSize();
      jDayChooser0.setAlignmentX(15);
      jDayChooser0.setMaxDayCharacters((-1450));
      jDayChooser0.getDay();
      Locale locale0 = new Locale("", "Dialog Plain 11");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      jDayChooser0.setLocale(locale0);
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      ActionEvent actionEvent0 = new ActionEvent(date0, 0, "Dialog Plain 11");
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      jYearChooser0.removeHierarchyListener((HierarchyListener) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, (-406), (-406), 2, (-406), (-406), 2, (-406), 2, false, (-406), 6, (-406), 0.0);
      jDayChooser0.setDay((-406));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "year");
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime((-553L));
      mockDate0.getTime();
      mockDate0.clone();
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color0 = new Color(2, 2, 6, 2);
      jDayChooser0.setMaxDayCharacters(2);
      JScrollPane jScrollPane0 = new JScrollPane();
      JViewport jViewport0 = jScrollPane0.getViewport();
      jViewport0.getInsets();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setFocus();
      jDayChooser0.setSundayForeground(color0);
      Font.getFont("day");
      jDayChooser0.setFont((Font) null);
      JDayChooser jDayChooser2 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser2.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.enableInputMethods(false);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)93;
      jDayChooser0.getInputMap();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1135), (byte)93, (byte)124, (byte)36, 'k');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setForeground(color0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setFocus();
      jDayChooser0.setSundayForeground(color0);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jYearChooser0.removeHierarchyListener((HierarchyListener) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, (-406), 14, 2, (-406), 4, 2, (-406), 2, false, 14, 6, (-406), 0.0);
      jDayChooser0.setDay((-406));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "year");
      MockDate mockDate0 = new MockDate();
      mockDate0.getTime();
      mockDate0.clone();
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.setSundayForeground(color0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) 14;
      floatArray0[3] = (float) 4;
      floatArray0[4] = (float) 6;
      color0.getColorComponents(floatArray0);
      jDayChooser1.setForeground(color0);
      jDayChooser0.getDaysInMonth();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-406), true, jYearChooser0);
      jDayChooser1.focusGained(focusEvent0);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser jDayChooser2 = new JDayChooser();
      Color color0 = jDayChooser2.sundayForeground;
      jDayChooser1.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser2.setDay(39);
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 33, 0L, 4, 39, 'E');
      JDayChooser jDayChooser4 = new JDayChooser();
      jDayChooser4.keyPressed(keyEvent0);
      jDayChooser3.getSelectedDay();
      jDayChooser3.isWeekOfYearVisible();
      JDayChooser jDayChooser5 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.setText("6XdI'<&Tgh{`x");
      jDayChooser4.setDay(33);
      JTextField jTextField0 = null;
      try {
        jTextField0 = new JTextField((-880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // columns less than zero.
         //
         verifyException("javax.swing.JTextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, (-406), 14, 2, (-406), 4, 4740, (-406), 4740, true, 3461, 6, (-406), 0.0);
      KeyStroke.getKeyStroke("Tp7QKd);L#DwNd@");
      jDayChooser0.registerKeyboardAction((ActionListener) jYearChooser0, (KeyStroke) null, 2);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.removeFocusListener(jDayChooser0);
      defaultTreeCellRenderer0.setText("day");
      jDayChooser0.setDay((-406));
      jDayChooser0.isWeekOfYearVisible();
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setSelectableDateRange(mockDate0, mockDate0);
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 4, 14, 14, 4, 'y', 4);
      jDayChooser1.keyTyped(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-111);
      byteArray0[3] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setFocusable(false);
      Class<FontFamilyAction> class0 = FontFamilyAction.class;
      jMonthChooser0.getListeners(class0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5008, 5008, 37, 37, 'o');
      keyEvent0.setKeyChar('o');
      jDayChooser0.getInputMap();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMonth((byte)35);
      // Undeclared exception!
      try { 
        jDayChooser0.add((Component) jMonthChooser0, (Object) jMonthChooser0, (-2267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal component position
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(4);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setFocusable(true);
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 'o', 4, 4, 38, 'o');
      jDayChooser0.getInputMap();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMonth(4);
      // Undeclared exception!
      try { 
        jDayChooser0.add((Component) defaultTreeCellRenderer0, (Object) keyEvent0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal component position
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      
      int int0 = jDayChooser0.maxDayCharacters;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=");
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDay(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 221, (-2147483665L), 0, 2138, 'o');
      keyEvent0.setKeyChar('o');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMonth(0);
      jDayChooser0.setSundayForeground(color0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (-2643), (-102L), 989, 2138, '6');
      jDayChooser0.keyPressed(keyEvent1);
      System.setCurrentTimeMillis(5352L);
      jDayChooser0.isWeekOfYearVisible();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((byte)35);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.getSize();
      jDayChooser0.setMaxDayCharacters(5);
      Locale locale0 = new Locale("day", "Windows");
      Locale.forLanguageTag("day");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (byte)35, 0, 0, (-3660), '<');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setMaxDayCharacters((byte)35);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=");
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDay(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 228, (-2147483648L), 28, 2138, 'o');
      keyEvent0.setKeyChar('o');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMonth(28);
      jDayChooser0.setSundayForeground(color0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (-2643), (-102L), 989, 2138, '6');
      System.setCurrentTimeMillis(5352L);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.repaint();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDayPanel();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-111);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDay((byte) (-111));
      defaultTreeCellRenderer0.getY();
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 40, (byte)0, (byte)0, (byte) (-111), ';');
      jDayChooser1.keyPressed(keyEvent0);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser0.getMaxSelectableDate();
      keyEvent0.paramString();
      MockDate mockDate0 = new MockDate(90, (-600), (byte)0);
      jDayChooser0.requestFocus(false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      keyEvent0.setKeyChar(';');
      Locale locale0 = new Locale("day", "28");
      jDayChooser2.setLocale(locale0);
      jDayChooser1.getDayPanel();
      MultipleGradientPaint.ColorSpaceType multipleGradientPaint_ColorSpaceType0 = MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;
      JButton jButton0 = new JButton();
      ActionEvent actionEvent0 = new ActionEvent(jButton0, (byte) (-111), "28");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1");
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(4);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.monthChooser = jMonthChooser0;
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 30, 228, 4, 38, 'o');
      keyEvent0.setKeyChar('o');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMonth(228);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setSundayForeground(color0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setForeground(color0);
      jDayChooser1.setEnabled(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentOrientation();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, (-2081), 14, 2, (-390), 4, 4740, 33, 8855, false, 3461, 6, 765, 4);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JDayChooser jDayChooser1 = new JDayChooser();
      defaultTreeCellRenderer0.setText("day");
      jDayChooser1.setDay((-390));
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 14, (-2081), 6, 28, 'W');
      KeyEvent.getKeyText(4740);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.isWeekOfYearVisible();
      MockDate mockDate0 = new MockDate();
      jDayChooser1.setMinSelectableDate(mockDate0);
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.GERMAN;
      locale0.getDisplayCountry(locale1);
      jDayChooser0.setLocale(locale0);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.getDayPanel();
      jDayChooser1.getLocale();
      assertEquals(1, jDayChooser1.getDay());
      
      jDayChooser0.setMonth(28);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1");
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      Color color1 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser1.setDecorationBackgroundColor(color1);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.setDay(210);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser2, 39, 4, 210, 40, ';');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
      
      jDayChooser2.isWeekOfYearVisible();
      JDayChooser jDayChooser3 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JDayChooser jDayChooser4 = new JDayChooser();
      jDayChooser4.setYearChooser((JYearChooser) null);
      jDayChooser2.getSundayForeground();
      jDayChooser2.setMaxDayCharacters(1675);
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser2.getDay();
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      int int0 = 4;
      int int1 = 4740;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDay(39);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 766, 0L, 33, 33, 'W');
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1");
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(2645);
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 30, 228, 4, 38, 'o');
      keyEvent0.setKeyChar('o');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMonth(228);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setSundayForeground(color0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setForeground(color0);
      jDayChooser1.setEnabled(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 8855, 0L, 4740, 2000000000, 36, (-2081), 216, 36, true, 36, 3461, 6, (-2551.5233739));
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(3461);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4740, (-943L), 3461, 42, 'W');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.isWeekOfYearVisible();
      JDayChooser jDayChooser2 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.setText("day");
      jDayChooser2.setDay(36);
      jDayChooser2.isWeekOfYearVisible();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser1.getSundayForeground();
      jDayChooser2.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser2.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDay((byte) (-111));
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 40, (byte)23, (byte)23, (byte)35, ';');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      JDayChooser jDayChooser2 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser2.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, (-2081), 14, 2, (-390), 4, 4740, 33, 8855, true, 3461, 6, 765, 0.0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      defaultTreeCellRenderer0.setText("day");
      jDayChooser1.setDay((-390));
      jDayChooser1.isWeekOfYearVisible();
      MockDate mockDate0 = new MockDate();
      jDayChooser1.setMinSelectableDate(mockDate0);
      jDayChooser0.getSundayForeground();
      jDayChooser1.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser1.getMaxDayCharacters());
      
      jDayChooser0.keyReleased((KeyEvent) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentOrientation();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      JYearChooser jYearChooser1 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "year";
      stringArray0[2] = "day";
      stringArray0[3] = "year";
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setMinSelectableDate((Date) null);
      Color color0 = null;
      try {
        color0 = new Color((-952.1921F), (-1.7014117E38F), 0.0F, (-952.1921F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Alpha Red Green
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentOrientation();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, (-2081), 14, 2, (-390), 4, 4740, 33, 8855, false, 3461, 6, 765, 0.0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      defaultTreeCellRenderer0.setText("day");
      jDayChooser1.setDay((-390));
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 14, (-2081), 6, 28, 'W');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.isWeekOfYearVisible();
      MockDate mockDate0 = new MockDate();
      jDayChooser1.setMinSelectableDate(mockDate0);
      jDayChooser0.getSundayForeground();
      jDayChooser1.setMaxDayCharacters(2);
      assertEquals(1, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentOrientation();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, (-2081), 14, 2, (-390), 4, 4740, 33, 8855, false, 3461, 6, 765, 0.0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 3523, 5270400000L, 838, 765, 'L');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(keyEvent0);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.isWeekOfYearVisible();
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.setMonth(4740);
      Color color0 = Color.yellow;
      jDayChooser2.setSundayForeground(color0);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser1, (-1450), "org.apache.batik.css.engine.value.svg.StrokeLinecapManager", (-1572L), 765);
      // Undeclared exception!
      try { 
        jDayChooser3.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, (-1041), (-2414L), 116, 2000000000, 46, 1, 3461, 3461, false, 3461, (-1041), 238, 0L);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setDay(1);
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, (-3597), (-3597), (-1794), 2000000000, 'q');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMonth(31);
      jDayChooser0.setSundayForeground((Color) null);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1");
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 228, (-2147483648L), 72, 2140, 'o');
      keyEvent0.setKeyChar('o');
      jDayChooser0.getMaximumSize();
      jDayChooser0.setMaxDayCharacters(4);
      Locale locale0 = new Locale("day", "Windows");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getDayPanel();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTreeCellRenderer0, 28, 28, (-390), 2205, (-390), 28, 14, 2205, true, 72, 4, 765, 14);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, 461, 45, 'W');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      Color color1 = jDayChooser0.getSundayForeground();
      jDayChooser0.getDayPanel();
      jDayChooser0.setSundayForeground(color1);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.KOREA;
      locale0.clone();
      jDayChooser0.setLocale(locale0);
      Panel panel0 = new Panel();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(panel0, 40, 33, 4740, 30, 9, 18, 4740, 30, false, 33, (-1583), (-1325), 4740);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer1.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDay(801);
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 30, 18, 34, 14, '\'');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.isWeekOfYearVisible();
      MockDate mockDate0 = new MockDate();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "] ZgrIaixqt");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-91);
      byteArray0[0] = (byte) (-91);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Font font0 = new Font("day", (-4867), (-4867));
      int int0 = 3914;
      font0.canDisplay(3914);
      jDayChooser0.setFont(font0);
      jDayChooser0.isDecorationBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.KOREA;
      jDayChooser0.setLocale(locale0);
      Panel panel0 = new Panel();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(panel0, 40, 33, 4740, 30, 9, 18, 4740, 30, false, 33, (-1583), (-1325), 4740);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer1.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDay(801);
      KeyEvent keyEvent0 = new KeyEvent(panel0, 40, 30, (-674), 34, '\'');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDebugGraphicsOptions(966);
      SystemColor systemColor0 = SystemColor.activeCaption;
      byte[] byteArray0 = new byte[1];
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "day");
      JRadioButton jRadioButton0 = new JRadioButton(imageIcon0);
      KeyEvent keyEvent0 = new KeyEvent(jRadioButton0, (byte)0, (-72L), (-684), (byte)0, 'K');
      jDayChooser0.keyPressed(keyEvent0);
      SystemColor systemColor1 = SystemColor.controlDkShadow;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Color color0 = DebugGraphics.flashColor();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      AWTEventMulticaster.remove((ItemListener) jMonthChooser0, (ItemListener) jMonthChooser0);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      JMonthChooser jMonthChooser1 = new JMonthChooser();
      jDayChooser_DecoratorButton0.removeItemListener(jMonthChooser0);
      DebugGraphics debugGraphics1 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      KeyEvent keyEvent0 = new KeyEvent(jMonthChooser0, 228, 0L, (-2104), (-94), 'r');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, (-2104), 800L, 8756, 19, '*');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Parser parser0 = new Parser();
      parser0.getLocale();
      parser0.setLocale((Locale) null);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, (-687), "^MWN-GB]A\"9{[lTlu", (-687));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.xalan.templates.XMLNSDecl");
      jDayChooser0.getAlignmentX();
      jDayChooser0.getMaxDayCharacters();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-736L), 0, 210, 'b');
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      StyleContext styleContext0 = new StyleContext();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jDayChooser0;
      objectArray0[1] = (Object) jDayChooser0;
      JComponent.getDefaultLocale();
      JDayChooser jDayChooser1 = new JDayChooser();
      Image image0 = jDayChooser0.createImage((ImageProducer) null);
      jDayChooser1.getInsets();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.imageUpdate(image0, (-366), (-591), 31, (-366), 0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      Color.getColor("Sm*,Dl&{Cx\"ai", (Color) null);
      jDayChooser1.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getSundayForeground();
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 0, 2262L, (-366), 0, '`', 0);
      jDayChooser1.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWeekdayForeground();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser1.yearChooser;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)SVGSVGElementBridge.TEXT_COMPOUND_DELIMITER;
      int int0 = 87;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, 87, "day", 1L, 100);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.addListeners(28);
      jDayChooser0.setMonth(28);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(13);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDecorationBordersVisible(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      HelpSet helpSet0 = new HelpSet(classLoader1);
      Locale locale0 = helpSet0.getLocale();
      locale0.getDisplayScript();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMaxDayCharacters(10048);
      jDayChooser0.drawDays();
      assertEquals(13, jDayChooser0.getDay());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10136, (-517L), 10136, 27, 'v');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      Locale locale0 = Locale.JAPANESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWeekdayForeground();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setFont((Font) null);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      jDayChooser0.setCalendar(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setLocation(13, 37);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Style style0 = defaultStyledDocument0.getLogicalStyle(37);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      styleContext1.getFont((AttributeSet) style0);
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      LabelView labelView0 = new LabelView(element0);
      Font font0 = labelView0.getFont();
      jDayChooser0.setFont(font0);
      Time time0 = new Time(4382L);
      jDayChooser0.setMaxSelectableDate(time0);
      jDayChooser0.setMinSelectableDate(time0);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.removeItemListener(jMonthChooser0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      ActionEvent actionEvent0 = new ActionEvent(jMonthChooser0, 1285, "", 164);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JMonthChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(4);
      jDayChooser0.setDay(256);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setFocusable(true);
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, (-2364), (-969L), 256, 40, '>');
      keyEvent0.setKeyChar('6');
      keyEvent0.consume();
      jDayChooser0.getInputMap();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.setEnabled(false);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      jDayChooser0.setEnabled(false);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.updateUI();
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getMaxSelectableDate();
      Color color1 = jDayChooser0.getSundayForeground();
      jDayChooser0.setSundayForeground(color1);
      jDayChooser0.setForeground(color0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = " changed on disk as it was last modified at ";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "x";
      stringArray0[1] = "DJHB$:/5m{HY<t<n";
      stringArray0[2] = "0";
      stringArray0[3] = "x";
      stringArray0[4] = "x";
      stringArray0[5] = "m;;fff#{iO";
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.setWeekdayForeground((Color) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseListeners();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser_DecoratorButton0.removeItemListener((ItemListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.updateUI();
      boolean boolean0 = jDayChooser1.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      Color color0 = Color.orange;
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseListeners();
      Color color0 = new Color(0.0F, 0.0F, 0.0F, 0.0F);
      jDayChooser0.setForeground(color0);
      // Undeclared exception!
      try { 
        Date.from((Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.removeItemListener((ItemListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getMinSelectableDate();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(210, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      java.sql.Date date0 = new java.sql.Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      Color color0 = new Color(0.0F, 0.0F, 0L);
      jDayChooser0.setDecorationBackgroundColor(color0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 10107, 10107, 164, 17, 's', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.addListeners(28);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_FORM;
      ActionEvent actionEvent0 = new ActionEvent("day", (-1005), "13");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDayBordersVisible(true);
      java.sql.Date date1 = new java.sql.Date(0L);
      jDayChooser0.setSelectableDateRange(date1, date1);
      jDayChooser0.setMinSelectableDate(date0);
      Color color0 = new Color(0.0F, 0.0F, 0L);
      jDayChooser0.setDecorationBackgroundColor(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.addListeners(28);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDayBordersVisible(false);
      java.sql.Date date1 = new java.sql.Date(28);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setSelectableDateRange(date0, date0);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setMinSelectableDate(date0);
      Color color0 = jDayChooser2.sundayForeground;
      jDayChooser0.setDecorationBackgroundColor(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser1.new DecoratorButton();
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      jDayChooser0.firePropertyChange("'Ed*5pjz=(", (-1), 7);
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(rowInputBinary0);
      propertyResourceBundle0.getLocale();
      ActionEvent actionEvent0 = new ActionEvent(rowInputBinary0, 247, "day");
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 247, 247, (-1173), 247, 'N');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.addListeners(28);
      String[] stringArray0 = new String[3];
      ActionMap actionMap0 = new ActionMap();
      actionMap0.remove(jDayChooser0);
      jDayChooser0.setActionMap(actionMap0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      SystemColor systemColor0 = SystemColor.textInactiveText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      System.setCurrentTimeMillis((-1L));
      jDayChooser0.setDayBordersVisible(true);
      java.sql.Date date0 = new java.sql.Date((-210L));
      Timestamp timestamp0 = new Timestamp((-1213L));
      jDayChooser0.setSelectableDateRange(date0, timestamp0);
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.UK;
      JViewport jViewport0 = new JViewport();
      KeyEvent keyEvent0 = new KeyEvent(jViewport0, (-302), (-9223372036854775808L), 14, 2, 'm', 2);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getSundayForeground();
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("4", "1", "1");
      DebugGraphics debugGraphics0 = new DebugGraphics();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4044, true);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(164, color0.getRed());
      
      jDayChooser0.setName("accessories.plugins.time.JDayChooser$1");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 401, 0L, (-2315), 4, '_', 4);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 401, 0L, 1880, (-1492), '\"');
      keyEvent1.paramString();
      jDayChooser0.keyPressed(keyEvent1);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals((-6029312), color0.getRGB());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1503), 8880, (-1503), 14, 'A');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.repaint(0L);
      jDayChooser0.setWeekOfYearVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-241));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1684);
      KeyStroke.getKeyStroke("day");
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 1628);
      focusEvent1.setSource(locale0);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, 3, 2404, 1379, 'U');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters((-3058));
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(rowInputBinary0);
      propertyResourceBundle0.getLocale();
      ActionEvent actionEvent0 = new ActionEvent(rowInputBinary0, 247, ">0$i6H0W109/~_\"5yCK");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.hsqldb.rowio.RowInputBinary cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.sundayForeground;
      jDayChooser0.setDecorationBackgroundColor(color0);
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(rowInputBinary0, rowInputBinary0);
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(sequenceInputStream0);
      propertyResourceBundle0.getLocale();
      JComponent.setDefaultLocale((Locale) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-8));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.getMouseListeners();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 723, 723, 0, 0, '\\');
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.removeContainerListener((ContainerListener) null);
      keyEvent0.setSource(jDayChooser0);
      int int0 = 3;
      jDayChooser0.initDecorations();
      InputEvent.getModifiersExText(3);
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.getDay();
      jDayChooser0.setMaxDayCharacters(228);
      jDayChooser0.setEnabled(false);
      jDayChooser0.getDay();
      jDayChooser0.getDayPanel();
      jDayChooser0.getSelectedDay();
      HsqlProperties hsqlProperties0 = HsqlProperties.delimitedArgPairsToProps("red", "red", "3pw3R_08E]saMr](7R", "28");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.maxDayCharacters;
      jDayChooser0.addListeners(0);
      jDayChooser0.setMonth(0);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      boolean boolean0 = false;
      int int1 = 38;
      AttributeCompareCondition attributeCompareCondition0 = new AttributeCompareCondition("day", "day", false, 38, false);
      // Undeclared exception!
      try { 
        attributeCompareCondition0.getListCellRendererComponent();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.filter.condition.CompareConditionAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PlainDocument plainDocument0 = new PlainDocument();
      Element element0 = plainDocument0.getDefaultRootElement();
      GlyphView glyphView0 = new GlyphView(element0);
      plainDocument0.createPosition(0);
      glyphView0.getContainer();
      glyphView0.getForeground();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setEnabled(false);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTreeCellRenderer0, 28, 28, (-377), 2205, (-377), 28, 14, 2205, true, 72, 4, 765, 14);
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(28);
      FocusEvent focusEvent0 = new FocusEvent(defaultTreeCellRenderer0, 5);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3036), true, jDayChooser0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.focusLost(focusEvent0);
      focusEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 14, (-1L), 19, 139, 72, (-612), 557, (-423), false, 2205, (-612), (-609), 14);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jDayChooser0, (-1006), (-1L), 31, 19, (-2187), 11, 131, 557, false, menuElementArray0, menuSelectionManager0);
      menuDragMouseEvent0.paramString();
      defaultTreeCellRenderer0.getPopupLocation(menuDragMouseEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(29);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 428L, 0, 8, 'W');
      jDayChooser0.keyPressed(keyEvent0);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1925), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 299, (-1925), (-519), (-519), '5');
      jDayChooser0.keyPressed(keyEvent0);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      AWTEventMulticaster.remove((ItemListener) jMonthChooser0, (ItemListener) jMonthChooser0);
      jDayChooser_DecoratorButton0.removeItemListener((ItemListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.setYearChooser(jYearChooser0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentOrientation();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, (-2081), 14, 2, (-390), 4, 4740, 33, 8855, false, 3461, 6, 765, 0.0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.setDay((-390));
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 14, (-2081), 6, 28, 'W');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.isWeekOfYearVisible();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      
      MockDate mockDate0 = new MockDate();
      jDayChooser1.setMinSelectableDate(mockDate0);
      assertEquals(1, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = JComponent.getDefaultLocale();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.focusLost((FocusEvent) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      JMonthChooser jMonthChooser0 = jDayChooser1.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(188);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.setWeekOfYearVisible(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.getTransferHandler();
      Locale locale0 = JComponent.getDefaultLocale();
      locale0.clone();
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.getMaxSelectableDate();
      FocusEvent focusEvent0 = null;
      try {
        focusEvent0 = new FocusEvent((Component) null, (-2046));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1925), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      focusEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTreeCellRenderer0, 28, 28, (-390), 2205, (-390), 28, 14, 2205, true, 72, 4, 765, 14);
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, (-1002L), 14, 28, 'W');
      jDayChooser0.keyTyped((KeyEvent) null);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.addListeners(28);
      jDayChooser0.setMonth(28);
      StringContent stringContent0 = new StringContent();
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      plainDocument0.createPosition(7);
      Element element0 = plainDocument0.getParagraphElement((-1649));
      GlyphView glyphView0 = new GlyphView(element0);
      glyphView0.getContainer();
      glyphView0.getForeground();
      jDayChooser0.setForeground((Color) null);
      assertEquals(14, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getMinSelectableDate();
      jDayChooser1.setEnabled(false);
      JDayChooser jDayChooser2 = new JDayChooser();
      JMonthChooser jMonthChooser0 = jDayChooser2.monthChooser;
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.setMonthChooser((JMonthChooser) null);
      Color color0 = jDayChooser2.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      int int0 = jDayChooser2.getMaxDayCharacters();
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertEquals(0, int0);
      assertTrue(jDayChooser2.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.addListeners(28);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.getContainerListeners();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawWeeks();
      JYearChooser jYearChooser0 = new JYearChooser();
      Color color0 = jYearChooser0.darkGreen;
      int int0 = (-1018);
      // Undeclared exception!
      try { 
        ColorSpace.getInstance((-1018));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.setName("H7@du[-o7&");
      jDayChooser0.setYear((-499));
      jDayChooser0.transferFocusDownCycle();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      Color.getColor("h[Mbu");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getMaxSelectableDate();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      System.setCurrentTimeMillis((-3483L));
      jDayChooser0.setWeekdayForeground(color0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setDay(14);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getName();
      jDayChooser0.setYear((-2437));
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getSelectedDay();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentOrientation();
      jDayChooser0.isPaintingTile();
      GapContent gapContent0 = new GapContent();
      PlainDocument plainDocument0 = new PlainDocument();
      plainDocument0.createPosition(1405);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setEnabled(true);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.getWeekdayForeground();
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.focusGained((FocusEvent) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.init();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.initDecorations();
      JYearChooser jYearChooser1 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, (-5404), 9L, (-5404), 210, 'o');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.addListeners(28);
      jDayChooser0.setMonth(28);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      SystemColor systemColor0 = SystemColor.infoText;
      jDayChooser0.setWeekdayForeground(systemColor0);
      jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.focusGained((FocusEvent) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
      Color.getColor("day", color0);
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDayBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getComponentPopupMenu();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.drawWeeks();
      jDayChooser0.setMonth(65406);
      int int0 = 624;
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 624, 0L, 624, 624, 'y', 624);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTreeCellRenderer0, 28, 28, (-390), 2205, (-390), 28, 14, 2205, true, 72, 4, 765, 14);
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, 461, 45, 'W');
      InputEvent.getModifiersExText((-907));
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      StyleContext styleContext0 = new StyleContext();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jDayChooser0;
      objectArray0[1] = (Object) jDayChooser0;
      JComponent.getDefaultLocale();
      JDayChooser jDayChooser1 = new JDayChooser();
      Image image0 = jDayChooser0.createImage((ImageProducer) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.imageUpdate(image0, (-366), (-591), 31, (-366), 0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      Color.getColor("Sm*,Dl&{Cx\"ai", (Color) null);
      jDayChooser1.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTreeCellRenderer0, 28, 28, (-390), 2205, (-390), 28, 14, 2205, true, 72, 4, 765, 14);
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(28);
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      HelpSet helpSet0 = new HelpSet(classLoader1);
      Locale locale0 = helpSet0.getLocale();
      locale0.getDisplayScript();
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3853), (-3853), 154, 154, '{');
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser1.addListeners((-2892));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3899), (-3037L), (-3899), 2683, 'A');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.init();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.initDecorations();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getLocale();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTreeCellRenderer0, 28, 28, (-390), 2205, (-390), 28, 14, 2205, true, 72, 4, 765, 14);
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, 461, 45, 'W');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTreeCellRenderer0, 28, 28, (-390), 2205, (-390), 28, 14, 2205, true, 72, 4, 765, 14);
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(28);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.addListeners(28);
      jDayChooser0.setMonth(28);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "";
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1379, 28, (-1500), 1379, 'U');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDecorationBackgroundVisible(false);
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 765, 1773L, 41, 28, 3155, 4, (-316), 4, false, 41, 765, 28, 72);
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser1.setDecorationBackgroundColor(color0);
      jDayChooser1.setDay(827);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 14, (-316), 5, 41, 'W');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PlainDocument plainDocument0 = new PlainDocument();
      Element element0 = plainDocument0.getDefaultRootElement();
      GlyphView glyphView0 = new GlyphView(element0);
      plainDocument0.createPosition(3);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setEnabled(false);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(90, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      StringContent stringContent0 = new StringContent(1814);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      Element element0 = defaultStyledDocument0.getParagraphElement(29);
      LabelView labelView0 = new LabelView(element0);
      labelView0.getForeground();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
      jDayChooser0.setForeground(color0);
      jDayChooser0.getMinSelectableDate();
      int int0 = 7;
      Segment segment0 = new Segment();
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      try { 
        plainDocument0.getText(0, 470, segment0);
        fail("Expecting exception: BadLocationException");
      
      } catch(BadLocationException e) {
         //
         // Invalid location
         //
         verifyException("javax.swing.text.StringContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, (-554), 28, '6');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      Period period0 = Period.ofDays(45);
      // Undeclared exception!
      try { 
        MockInstant.plus((Instant) null, (TemporalAmount) period0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setEnabled(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser1.setYearChooser((JYearChooser) null);
      assertTrue(jDayChooser1.isDayBordersVisible());
      
      JDayChooser jDayChooser2 = new JDayChooser(true);
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.addListeners(28);
      jDayChooser0.setMonth(28);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser_DecoratorButton0.removeItemListener(jMonthChooser0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTreeCellRenderer0, 28, 28, (-390), 2205, (-390), 28, 14, 2205, true, 72, 4, 765, 14);
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setDay(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, 461, 45, 'W');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getSundayForeground();
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTreeCellRenderer0, 28, 28, (-390), 2205, (-390), 28, 14, 2205, true, 72, 4, 765, 14);
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 228, (-2147483648L), 72, 2140, 'o');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMonth((-390));
      jDayChooser0.setSundayForeground(color0);
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.focusGained((FocusEvent) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D((SVGGeneratorContext) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // generatorContext should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGraphics2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3853), (-3853), 154, 154, '{');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      Period period0 = Period.ofDays(1762);
      // Undeclared exception!
      try { 
        MockInstant.plus((Instant) null, (TemporalAmount) period0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      defaultListCellRenderer0.getIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", (Icon) null, true);
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 918, 918, (-3065), 0, ',', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setFocus();
      jDayChooser0.setDecorationBordersVisible(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      JComponent.getDefaultLocale();
      JDayChooser jDayChooser1 = new JDayChooser();
      Image image0 = jDayChooser1.createImage((ImageProducer) null);
      defaultTreeCellRenderer0.imageUpdate(image0, 0, 0, 61447, 0, (-1077));
      Color.getColor("day", color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.isDecorationBackgroundVisible();
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PlainDocument plainDocument0 = new PlainDocument();
      Element element0 = plainDocument0.getDefaultRootElement();
      GlyphView glyphView0 = new GlyphView(element0);
      plainDocument0.createPosition(0);
      glyphView0.getForeground();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.getMinSelectableDate();
      Segment segment0 = new Segment();
      try { 
        plainDocument0.getText(470, 7, segment0);
        fail("Expecting exception: BadLocationException");
      
      } catch(BadLocationException e) {
         //
         // Invalid location
         //
         verifyException("javax.swing.text.GapContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear(785);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(defaultTreeCellRenderer0, 28, 28, (-390), 2205, (-390), 28, 14, 2205, true, 72, 4, 765, 14);
      defaultTreeCellRenderer0.getPopupLocation(mouseWheelEvent0);
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 28, 28, 461, 45, 'W');
      jDayChooser0.keyPressed(keyEvent0);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.monthChooser = jMonthChooser0;
      jDayChooser0.getFocusListeners();
      jMonthChooser0.firePropertyChange("month", (byte)84, (byte)84);
      jDayChooser0.setDay(918);
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0.monthChooser, 1883, 1883, (byte)84, (-1038), 'z');
      jDayChooser0.keyReleased(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = false;
      jDayChooser0.decorationBackgroundVisible = false;
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.init();
      TimeZone timeZone0 = TimeZone.getTimeZone("Wc-&nw!`0LWj_6`_f:9");
      timeZone0.toZoneId();
      HelpSet helpSet0 = new HelpSet();
      try { 
        Map.ID.create("Wc-&nw!`0LWj_6`_f:9", helpSet0);
        fail("Expecting exception: BadIDException");
      
      } catch(BadIDException e) {
         //
         // Not valid ID: Wc-&nw!`0LWj_6`_f:9
         //
         verifyException("javax.help.Map$ID", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      int int0 = 0;
      long long0 = 0L;
      jDayChooser0.setYear(0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      File file0 = OsmFileCacheTileLoader.getDefaultCacheDir();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "day");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // day
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setEnabled(true);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      StyleContext styleContext0 = new StyleContext();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jDayChooser0;
      objectArray0[1] = (Object) jDayChooser0;
      objectArray0[2] = (Object) styleContext0;
      objectArray0[3] = (Object) styleContext0;
      objectArray0[4] = (Object) styleContext0;
      objectArray0[5] = (Object) styleContext0;
      objectArray0[6] = (Object) styleContext0;
      objectArray0[7] = (Object) jDayChooser0;
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = styleContext0.new SmallAttributeSet(objectArray0);
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet1 = styleContext0.new SmallAttributeSet(styleContext_SmallAttributeSet0);
      Vector<MockCalendar> vector0 = new Vector<MockCalendar>();
      Enumeration<MockCalendar> enumeration0 = vector0.elements();
      AttributeSet attributeSet0 = styleContext0.removeAttributes((AttributeSet) styleContext_SmallAttributeSet1, (Enumeration<?>) enumeration0);
      Color color0 = styleContext0.getBackground(attributeSet0);
      jDayChooser0.setForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.addListeners(28);
      jDayChooser0.setMonth(28);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "";
      stringArray0[2] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      jDayChooser0.isOptimizedDrawingEnabled();
      metalToolBarUI0.getFloatingColor();
      ColorSpace colorSpace0 = null;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-224.1954F);
      int int0 = 696;
      ComponentColorModel componentColorModel0 = null;
      try {
        componentColorModel0 = new ComponentColorModel((ColorSpace) null, true, true, 696, (-3409));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown data type -3409
         //
         verifyException("java.awt.image.DataBuffer", e);
      }
  }
}
