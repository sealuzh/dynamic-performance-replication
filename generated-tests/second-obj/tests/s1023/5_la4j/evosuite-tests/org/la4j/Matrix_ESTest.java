/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:29:48 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.inversion.MatrixInverter;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NumberFormat.getCurrencyInstance();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2923L;
      doubleArray0[1] = (double) 0;
      NumberFormat.getPercentInstance();
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3805, 3805, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(3447, 3447, 3447);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        denseMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 68);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      matrix0.swapColumns(10, 10);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(68, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(matrix0.equals((Object)columnMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      Locale locale0 = Locale.KOREA;
      rowMajorSparseMatrix0.columns();
      NumberFormat.getCurrencyInstance();
      Matrix matrix0 = rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.removeColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      MatrixInverter matrixInverter0 = matrix0.withInverter(linearAlgebra_InverterFactory0);
      mockRandom0.ints((long) 0);
      Object object0 = new Object();
      mockRandom0.doubles();
      matrix0.equals((Object) matrixInverter0);
      matrix0.rank();
      int int1 = (-592);
      // Undeclared exception!
      try { 
        DenseMatrix.unit(0, (-592));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      mockRandom0.ints(2924L);
      Matrix matrix1 = matrix0.copy();
      Object object0 = new Object();
      matrix1.equals(object0);
      matrix1.toDenseMatrix();
      matrix1.rank();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumns(vectorAccumulator0);
      int int1 = 4006;
      // Undeclared exception!
      try { 
        SparseVector.fromMap((Map<Integer, ? extends Number>) null, 4006);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0);
      denseMatrix0.iterator();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.infinityNorm();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).getRow((-960));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -959
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NumberFormat.getCurrencyInstance();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.nonZeroRowMajorIterator();
      NumberFormat.getPercentInstance();
      cRSMatrix0.sum();
      Random.setNextRandom(3972);
      Matrix matrix0 = cRSMatrix0.removeLastRow();
      matrix0.blankOfRows(3);
      cRSMatrix0.nonZeroColumnMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, 1074, 3972, (-353), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -353x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(1, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.maxInRow(1659);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(0, 0, mockRandom0);
      mockRandom0.ints(2924L);
      Object object0 = new Object();
      mockRandom0.doubles();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 10);
      cRSMatrix0.nonZeroIterator();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      // Undeclared exception!
      try { 
        cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      int int0 = 1981;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5, 32);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(6, (-3157.0));
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) cRSMatrix0, 10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 10 rows and 10 cols at 0, 0 in a 6x6 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      matrix0.rank();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      columnMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      MockRandom mockRandom0 = new MockRandom(0);
      columnMajorSparseMatrix0.euclideanNorm();
      NumberFormat.getPercentInstance();
      NumberFormat.getPercentInstance();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      LinearSystemSolver linearSystemSolver0 = columnMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(0, linearSystemSolver0.unknowns());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.non(matrixPredicate0);
      MatrixOperation<RowMajorSparseMatrix> matrixOperation0 = (MatrixOperation<RowMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      rowMajorSparseMatrix0.apply(matrixOperation0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(503.12572005542734).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      assertArrayEquals(new double[] {503.12572005542734}, doubleArray0, 0.01);
      
      boolean boolean1 = rowMajorSparseMatrix0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      sparseVector0.fold(vectorAccumulator0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      Locale.getISOCountries();
      numberFormat0.setMaximumIntegerDigits(37);
      locale0.getDisplayCountry();
      DecimalFormat decimalFormat0 = new DecimalFormat("H^}+Y^[$8?.N");
      sparseVector0.mkString((NumberFormat) decimalFormat0);
      numberFormat0.format(1800.0);
      NumberFormat.getIntegerInstance();
      locale0.getUnicodeLocaleAttributes();
      numberFormat0.format(932L);
      matrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(1007, 1007);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      matrix0.euclideanNorm();
      matrix0.iterator();
      NumberFormat.getCurrencyInstance();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.transformColumn(0, vectorFunction0);
      matrix1.sliceTopLeft(0, 0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(3974, 4006, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      MockRandom mockRandom0 = new MockRandom(1000L);
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(0, 424, mockRandom0);
      assertNotNull(matrix0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertNotNull(decimalFormat0);
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertNotNull(decimalFormat1);
      assertTrue(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat1.getPositiveSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("%", decimalFormat1.getNegativeSuffix());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(100, decimalFormat1.getMultiplier());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("#,##0%", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat1.toPattern());
      assertNotSame(decimalFormat1, decimalFormat0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.setRow((-3614), 1.0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      double double0 = cCSMatrix0.maxInRow((-3614));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.fromCSV(" ");
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      
      int int0 = 10;
      double double0 = basic2DMatrix0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      int int1 = (-251);
      // Undeclared exception!
      try { 
        basic2DMatrix0.ensureDimensionsAreCorrect((-251), (-251));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -251x-251
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1981, (double) 0, (java.util.Random) mockRandom0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1981, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1981, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      SparseVector sparseVector0 = SparseVector.zero(1981);
      assertNotNull(sparseVector0);
      assertEquals(1981, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      
      MockRandom mockRandom1 = new MockRandom(947L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      rowMajorSparseMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(3447, 3447, 3447);
      assertNotNull(denseMatrix0);
      assertEquals(3447, denseMatrix0.columns());
      assertEquals(3447, denseMatrix0.rows());
      
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        denseMatrix0.hadamardProduct(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2893.4111314797);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-966.0);
      doubleArray2[1] = (-2893.4111314797);
      doubleArray2[2] = (-2893.4111314797);
      doubleArray2[3] = (-2893.4111314797);
      doubleArray2[4] = (-2893.4111314797);
      doubleArray2[5] = (-2893.4111314797);
      doubleArray2[6] = (-2893.4111314797);
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2893.4111314797);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-966.0);
      doubleArray3[3] = (-2893.4111314797);
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertEquals(2, basic2DMatrix0.columns());
      assertEquals(3, basic2DMatrix0.rows());
      
      SparseMatrix sparseMatrix0 = basic2DMatrix0.toSparseMatrix();
      assertNotNull(sparseMatrix0);
      assertEquals(2, basic2DMatrix0.columns());
      assertEquals(3, basic2DMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(3, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals((-2893.4111314797), sparseMatrix0.min(), 0.01);
      assertEquals(4, sparseMatrix0.cardinality());
      assertEquals(2, sparseMatrix0.columns());
      assertEquals(0.6666666666666666, sparseMatrix0.density(), 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray4 = sparseMatrix0.foldRows(vectorAccumulator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertEquals(2, basic2DMatrix0.columns());
      assertEquals(3, basic2DMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(3, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals((-2893.4111314797), sparseMatrix0.min(), 0.01);
      assertEquals(4, sparseMatrix0.cardinality());
      assertEquals(2, sparseMatrix0.columns());
      assertEquals(0.6666666666666666, sparseMatrix0.density(), 0.01);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 6;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(6, 6, 6);
      assertNotNull(basic2DMatrix0);
      assertEquals(6, basic2DMatrix0.rows());
      assertEquals(6, basic2DMatrix0.columns());
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic2DMatrix0.toRowMajorSparseMatrix();
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(6, basic2DMatrix0.rows());
      assertEquals(6, basic2DMatrix0.columns());
      assertEquals(6.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(36, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      double double0 = 3374.07;
      // Undeclared exception!
      try { 
        basic2DMatrix0.setRow(37, (-1.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      String string0 = "0.000";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      
      int int0 = 2235;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.minInColumn((-1654));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1654' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      
      Locale locale1 = Locale.KOREA;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertEquals("\uC774\uD0C8\uB9AC\uC544\uC5B4", string0);
      assertNotNull(string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      String string1 = rowMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0, (String) null, (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertNotSame(locale0, locale1);
      
      int int0 = rowMajorSparseMatrix0.columns();
      assertEquals(0, int0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(3277L);
      assertNotNull(intStream0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      
      Matrix matrix0 = rowMajorSparseMatrix0.add(0.0);
      assertNotNull(matrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      Matrix matrix1 = Matrix.zero(6, 2235);
      matrix1.equals((Object) mockRandom0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 0);
      cRSMatrix0.minInColumn(0);
      rowMajorSparseMatrix0.blank();
      rowMajorSparseMatrix0.columnMajorIterator();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.euclideanNorm();
      int int0 = 4;
      VectorFunction vectorFunction0 = null;
      rowMajorSparseMatrix0.updateRow(int0, vectorFunction0);
      int[] intArray0 = null;
      basic2DMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      assertNotNull(matrix0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      double double0 = matrix0.maxInRow(3);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      IntStream intStream0 = mockRandom0.ints(2926L);
      assertNotNull(intStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int0 = matrix0.rank();
      assertEquals(0, int0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      assertNotNull(denseMatrix0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertSame(matrix0, denseMatrix0);
      assertSame(denseMatrix0, matrix0);
      
      Matrix matrix1 = matrix0.multiply((double) 0);
      assertNotNull(matrix1);
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)denseMatrix0));
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertNotNull(decimalFormat0);
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.insert(matrix0);
      assertNotNull(basic2DMatrix0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(basic2DMatrix0.equals((Object)denseMatrix0));
      assertTrue(basic2DMatrix0.equals((Object)matrix1));
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(basic2DMatrix0, matrix1);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.cardinality());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.cardinality());
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertNotNull(decimalFormat1);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat1.toPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals("%", decimalFormat1.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(100, decimalFormat1.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat1.toLocalizedPattern());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals("%", decimalFormat1.getNegativeSuffix());
      assertNotSame(decimalFormat1, decimalFormat0);
      
      Random.setNextRandom(3972);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeLastRow();
      assertNotNull(cRSMatrix1);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.3333333333333333, cRSMatrix1.density(), 0.01);
      assertEquals(2, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(3, cRSMatrix1.columns());
      assertEquals(2, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix1.updateColumn(1, vectorFunction0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.16666666666666666, cRSMatrix1.density(), 0.01);
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(3, cRSMatrix1.columns());
      assertEquals(2, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix1.blankOfRows(3);
      assertNotNull(cRSMatrix2);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(3, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(3, cRSMatrix2.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.16666666666666666, cRSMatrix1.density(), 0.01);
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(3, cRSMatrix1.columns());
      assertEquals(2, cRSMatrix1.rows());
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1, 1074, 3972, (-353), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -353x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 755;
      doubleArray0[1] = (double) (-2275);
      doubleArray0[2] = (double) 755;
      doubleArray0[3] = (double) (-2275);
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-2275), 755, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2275x755
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1128);
      doubleArray0[5] = (double) (-1128);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) (-1128);
      // Undeclared exception!
      try { 
        Matrix.from1DArray(0, (-1128), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1128
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = 1051;
      int int2 = 317;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(317);
      assertNotNull(cCSMatrix0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(317, cCSMatrix0.rows());
      assertEquals(317, cCSMatrix0.cardinality());
      assertEquals(317, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0031545741324921135, cCSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      cCSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      SparseVector sparseVector0 = SparseVector.zero(1981);
      assertNotNull(sparseVector0);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1981, sparseVector0.length());
      
      Vector vector0 = sparseVector0.add((-3157.0));
      assertNotNull(vector0);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1981, sparseVector0.length());
      assertEquals(1981, vector0.length());
      
      Random.setNextRandom(719);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertNotNull(decimalFormat0);
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(856, 856);
      assertNotNull(basic2DMatrix0);
      assertEquals(856, basic2DMatrix0.rows());
      assertEquals(856, basic2DMatrix0.columns());
      
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(719, 32);
      assertNotNull(basic2DMatrix1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(32, basic2DMatrix1.columns());
      assertEquals(719, basic2DMatrix1.rows());
      
      int int0 = 4;
      Basic2DMatrix basic2DMatrix2 = (Basic2DMatrix)basic2DMatrix1.sliceBottomRight(4, 32);
      assertNotNull(basic2DMatrix2);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertEquals(32, basic2DMatrix1.columns());
      assertEquals(719, basic2DMatrix1.rows());
      assertEquals(715, basic2DMatrix2.rows());
      assertEquals(0, basic2DMatrix2.columns());
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      
      int int1 = basic2DMatrix2.rank();
      assertEquals(0, int1);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix2));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertFalse(int1 == int0);
      assertEquals(32, basic2DMatrix1.columns());
      assertEquals(719, basic2DMatrix1.rows());
      assertEquals(715, basic2DMatrix2.rows());
      assertEquals(0, basic2DMatrix2.columns());
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      
      Basic2DMatrix basic2DMatrix3 = (Basic2DMatrix)DenseMatrix.unit(4259, 4654);
      assertNotNull(basic2DMatrix3);
      assertFalse(basic2DMatrix3.equals((Object)basic2DMatrix2));
      assertFalse(basic2DMatrix3.equals((Object)basic2DMatrix1));
      assertFalse(basic2DMatrix3.equals((Object)basic2DMatrix0));
      assertEquals(4654, basic2DMatrix3.columns());
      assertEquals(4259, basic2DMatrix3.rows());
      assertNotSame(basic2DMatrix3, basic2DMatrix2);
      assertNotSame(basic2DMatrix3, basic2DMatrix1);
      assertNotSame(basic2DMatrix3, basic2DMatrix0);
      
      int int2 = 1;
      int int3 = (-2794);
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-2794
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(10, 10);
      assertNotNull(cRSMatrix0);
      assertEquals(10.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(10, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(10, cRSMatrix0.columns());
      assertEquals(10, cRSMatrix0.rows());
      assertEquals(0.1, cRSMatrix0.density(), 0.01);
      
      int int1 = (-761);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 918
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(862, 32);
      assertNotNull(matrix0);
      assertEquals(862, matrix0.rows());
      assertEquals(32, matrix0.columns());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateAt(0, 32, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      assertArrayEquals(new double[] {6.0, 0.0, 6.0, 6.0}, doubleArray0, 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      
      int int1 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(6, 0);
      assertNotNull(denseMatrix0);
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(denseMatrix0);
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(6, matrix0.columns());
      assertEquals(6, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      double double0 = denseMatrix0.sum();
      assertEquals(0.0, double0, 0.01);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotSame(denseMatrix0, matrix0);
      
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      assertNotNull(sparseMatrix0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(6, matrix0.columns());
      assertEquals(6, matrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(6, sparseMatrix0.columns());
      assertEquals(6, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-855.96673450866), (-1.0), 6.0, (-2582.292186076993), (double)6).when(vectorAccumulator0).accumulate();
      double[] doubleArray1 = sparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      assertArrayEquals(new double[] {(-855.96673450866), (-1.0), 6.0, (-2582.292186076993), 6.0, 6.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(6, matrix0.columns());
      assertEquals(6, matrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(6, sparseMatrix0.columns());
      assertEquals(6, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = matrix0.minInColumn(0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(6, matrix0.columns());
      assertEquals(6, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      Vector vector0 = matrix0.getRow(0);
      assertNotNull(vector0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(6, vector0.length());
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(6, matrix0.columns());
      assertEquals(6, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      Matrix matrix1 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      assertNotNull(matrix1);
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertEquals(6, matrix1.columns());
      assertEquals(6, matrix1.rows());
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, matrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = denseMatrix0.non(matrixPredicate0);
      assertFalse(boolean0);
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, matrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseMatrix0.hadamardProduct(matrix0);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertTrue(matrix0.equals((Object)matrix1));
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(6, matrix0.columns());
      assertEquals(6, matrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(6, sparseMatrix0.columns());
      assertEquals(6, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      SparseVector sparseVector0 = SparseVector.zero(0);
      assertNotNull(sparseVector0);
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      
      Vector vector0 = sparseVector0.add((double) 0);
      assertNotNull(vector0);
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(0, vector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 0, 0);
      assertNotNull(cCSMatrix0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn(0, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1981, (double) 0, (java.util.Random) mockRandom0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1981, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1981, rowMajorSparseMatrix0.columns());
      
      SparseVector sparseVector0 = SparseVector.zero(1981);
      assertNotNull(sparseVector0);
      assertEquals(1981, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      
      Vector vector0 = sparseVector0.add((-3157.0));
      assertNotNull(vector0);
      assertEquals(1981, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1981, vector0.length());
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn((-76), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-76' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(4);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(4, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(4, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(4, rowMajorSparseMatrix0.rows());
      assertEquals(0.25, rowMajorSparseMatrix0.density(), 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.forEach(consumer0);
      assertEquals(4, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(4, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(4, rowMajorSparseMatrix0.rows());
      assertEquals(0.25, rowMajorSparseMatrix0.density(), 0.01);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(4, 4);
      assertNotNull(basic2DMatrix0);
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(4, basic2DMatrix0.columns());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.insert((Matrix) basic2DMatrix0);
      assertNotNull(cRSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(4, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(4, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(4, rowMajorSparseMatrix0.rows());
      assertEquals(0.25, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(4, basic2DMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      assertNotNull(matrix0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      IntStream intStream0 = mockRandom0.ints(2924L);
      assertNotNull(intStream0);
      
      Matrix matrix1 = matrix0.copy();
      assertNotNull(matrix1);
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = matrix1.equals(object0);
      assertFalse(boolean0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      DenseMatrix denseMatrix0 = matrix1.toDenseMatrix();
      assertNotNull(denseMatrix0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      assertSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, matrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      assertNotNull(rowMajorSparseMatrix0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = rowMajorSparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      
      Matrix matrix2 = matrix0.insert((Matrix) rowMajorSparseMatrix0);
      assertNotNull(matrix2);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertTrue(matrix2.equals((Object)matrix0));
      assertTrue(matrix2.equals((Object)denseMatrix0));
      assertTrue(matrix2.equals((Object)matrix1));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, matrix2.columns());
      assertEquals(0, matrix2.rows());
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix2, denseMatrix0);
      assertNotSame(matrix2, matrix1);
      assertNotSame(matrix2, matrix0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean1 = matrix1.non(advancedMatrixPredicate0);
      assertTrue(boolean1);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix2));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix2);
      assertSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      
      double[] doubleArray1 = matrix0.foldColumns((VectorAccumulator) null);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(matrix0.equals((Object)matrix2));
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotSame(matrix0, matrix2);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 2);
      assertNotNull(intStream0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(2, mockRandom0);
      assertNotNull(basic2DMatrix0);
      assertEquals(2, basic2DMatrix0.rows());
      assertEquals(2, basic2DMatrix0.columns());
      
      int int0 = (-426);
      String string0 = basic2DMatrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix array real general\n2 2\n0.000\n0.100\n0.100\n0.200\n", string0);
      assertNotNull(string0);
      assertEquals(2, basic2DMatrix0.rows());
      assertEquals(2, basic2DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.copyOfColumns((-426));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2x-426
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 17);
      assertNotNull(sparseVector0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(17, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)sparseVector0.toColumnMatrix();
      assertNotNull(cCSMatrix0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(17, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(17, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.removeFirstColumn();
      assertNotNull(cCSMatrix1);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(17, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(17, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(17, cCSMatrix1.rows());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.swapRows(17, 1840);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(2013, (double) 0, (java.util.Random) mockRandom0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(2013, rowMajorSparseMatrix0.rows());
      assertEquals(2013, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      
      ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      SparseVector.zero(0);
      rowMajorSparseMatrix0.columns();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      RowMajorSparseMatrix.identity(0);
      int int0 = 2752;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(295, 2752);
      basic2DMatrix0.multiply((Matrix) rowMajorSparseMatrix0);
      int int1 = (-15);
      int int2 = 463;
      rowMajorSparseMatrix0.insert((Matrix) basic2DMatrix0, int1, int2);
      String string0 = "s(oHI$7j@U*WC\\RC|M+";
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV(string0);
      int int3 = 1498;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (DenseMatrix) basic2DMatrix0);
      matrix0.swapRows(int0, int3);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0);
      assertNotNull(denseMatrix0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = denseMatrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertNotNull(decimalFormat0);
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      
      String string0 = columnMajorSparseMatrix0.toCSV((NumberFormat) decimalFormat0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.updateColumn(0, vectorFunction0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      assertNotNull(matrix0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      LongStream longStream0 = mockRandom0.longs((long) 0);
      assertNotNull(longStream0);
      
      IntStream intStream0 = mockRandom0.ints(2926L);
      assertNotNull(intStream0);
      
      Matrix matrix1 = matrix0.power(0);
      assertNotNull(matrix1);
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix1.columns());
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int0 = matrix0.rank();
      assertEquals(0, int0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotSame(matrix0, matrix1);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorAccumulator0).accumulate();
      double double0 = matrix0.foldRow((-1731), vectorAccumulator0);
      assertEquals((-1.0), double0, 0.01);
      assertTrue(matrix0.equals((Object)matrix1));
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotSame(matrix0, matrix1);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertNotNull(decimalFormat0);
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      
      Random.setNextRandom((-1731));
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 2926L);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insert(matrix0);
      assertNotNull(cCSMatrix1);
      assertTrue(matrix0.equals((Object)matrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertNotSame(matrix0, matrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication1 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication1);
      assertFalse(ooPlaceMatrixByItsTransposeMultiplication1.equals((Object)ooPlaceMatrixByItsTransposeMultiplication0));
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, (-1958.36351176942));
      assertNotNull(cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      assertNotNull(matrix0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      LongStream longStream0 = mockRandom0.longs((long) 0);
      assertNotNull(longStream0);
      
      IntStream intStream0 = mockRandom0.ints(2926L);
      assertNotNull(intStream0);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.power(0);
      assertNotNull(basic2DMatrix0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int0 = matrix0.rank();
      assertEquals(0, int0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotSame(matrix0, basic2DMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorAccumulator0).accumulate();
      double double0 = matrix0.foldRow((-1731), vectorAccumulator0);
      assertEquals((-1.0), double0, 0.01);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotSame(matrix0, basic2DMatrix0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertNotNull(decimalFormat0);
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      
      Random.setNextRandom((-1731));
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 2926L);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insert(matrix0);
      assertNotNull(cCSMatrix1);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.rows());
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(9, 9);
      assertNotNull(cRSMatrix0);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blank();
      assertNotNull(cRSMatrix1);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(9, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(9, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cRSMatrix0.nonZeroColumnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)cCSMatrix0.add((double) (-5478));
      assertNotNull(basic2DMatrix1);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)matrix0));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.power(1);
      assertNotNull(cRSMatrix2);
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(9, cRSMatrix2.columns());
      assertEquals(9, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("^a0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      int int0 = 0;
      DenseMatrix.zero(6, 0);
      matrix0.toBinary();
      Matrix matrix1 = matrix0.power(6);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix1.is(matrixPredicate0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      // Undeclared exception!
      try { 
        matrix0.setRow(8, 4.9E-324);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      mockRandom0.longs(3095L);
      mockRandom0.ints(2926L);
      mockRandom0.doubles();
      matrix0.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorAccumulator0).accumulate();
      basic2DMatrix0.foldRow((-1731), vectorAccumulator0);
      matrix0.multiply((double) 0);
      Matrix matrix1 = matrix0.add((double) (-1731));
      matrix0.insert(matrix1);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      cRSMatrix0.nonZeroRowMajorIterator();
      NumberFormat.getPercentInstance();
      Matrix matrix2 = cRSMatrix0.removeLastRow();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix2.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      MockRandom mockRandom0 = new MockRandom();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      int int0 = NumberFormat.INTEGER_FIELD;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cRSMatrix0.subtract((Matrix) cCSMatrix0);
      cRSMatrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      CRSMatrix cRSMatrix0 = new CRSMatrix(1981, 0);
      SparseVector.zero(1981);
      Object object1 = new Object();
      mockRandom0.doubles();
      Object object2 = new Object();
      cRSMatrix0.equals((Object) "|@DAHTQv8");
      int int0 = 2448;
      int int1 = 828;
      cRSMatrix0.rank();
      // Undeclared exception!
      try { 
        DenseMatrix.unit((-2058005161), (-2058005161));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      String string0 = "0.000";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-1L));
      mockRandom1.doubles();
      Object object0 = new Object();
      rowMajorSparseMatrix0.equals(object0);
      rowMajorSparseMatrix0.toDenseMatrix();
      rowMajorSparseMatrix0.rank();
      DenseMatrix.unit(0, 787);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-1), 805, 4006);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x805
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.toColumnMajorSparseMatrix();
      long long0 = 2924L;
      mockRandom0.ints(2924L);
      Matrix matrix1 = matrix0.copy();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        matrix1.blankOfShape((-3401), 324);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 1981;
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((double) 1981);
      int int1 = 32;
      Random.setNextRandom(32);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(32, 32);
      int int2 = (-1215);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(32, 32);
      basic2DMatrix0.transpose();
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.identity(32);
      basic2DMatrix1.removeFirstRow();
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 12);
      Random.setNextRandom((-1));
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(4, (-1215));
      Basic2DMatrix basic2DMatrix3 = new Basic2DMatrix(int0, int1);
      NumberFormat.getCurrencyInstance();
      basic2DMatrix3.insert((Matrix) cRSMatrix0);
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(int2);
      cRSMatrix0.norm();
      cRSMatrix1.nonZeroRowMajorIterator();
      NumberFormat.getPercentInstance();
      cRSMatrix2.removeLastRow();
      int int3 = 213;
      int int4 = 76;
      int int5 = (-146);
      CRSMatrix.zero(int3, int4, int5);
      int int6 = 1761;
      int int7 = (-1933);
      basic2DMatrix0.sliceBottomRight(int6, int7);
      basic2DMatrix2.power(int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((double) 1981);
      int int0 = 32;
      int int1 = 719;
      Random.setNextRandom(719);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(32, 32);
      int int2 = (-1215);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(719, 32);
      int int3 = 30;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix1.transformColumn(32, vectorFunction0);
      Basic2DMatrix.identity(int3);
      int int4 = 4;
      int int5 = 12;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int4, int5);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int4, int2);
      Basic2DMatrix basic2DMatrix2 = new Basic2DMatrix(int1, int0);
      CCSMatrix.identity(int2);
      String string0 = "L,>\"7.gR%";
      Matrix.fromCSV(string0);
      cRSMatrix1.subtract((Matrix) basic2DMatrix2);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.non(advancedMatrixPredicate0);
      basic2DMatrix1.removeColumn(int5);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      int int0 = 1981;
      RowMajorSparseMatrix.randomSymmetric(1981, (double) 0, (java.util.Random) mockRandom0);
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((-3157.0));
      int int1 = 5;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(9, 9);
      int int2 = 2;
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(1981, 2);
      // Undeclared exception!
      try { 
        basic2DMatrix1.fold((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrices$33", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 1.0;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1.0;
      doubleArray0[3] = doubleArray4;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      Matrix matrix0 = basic2DMatrix0.rotate();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.eachInColumn((-1534), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      Matrix matrix1 = matrix0.copy();
      Object object0 = new Object();
      matrix1.equals(object0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      matrix0.add(0.0);
      int int1 = (-162);
      // Undeclared exception!
      try { 
        Matrix.zero((-162), (-162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -162x-162
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(403, 1603, 1.0);
      matrix0.removeLastColumn();
      matrix0.toMatrixMarket();
      int int0 = 319;
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = null;
      String string0 = "q";
      SparseVector sparseVector0 = SparseVector.fromMatrixMarket(string0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int1 = (-1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector.fromCollection(linkedList0);
      Vector.fromMap(hashMap0, int1);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      matrix0.setColumn(int0, vector0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1981, (double) 0, (java.util.Random) mockRandom0);
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((-3157.0));
      Random.setNextRandom(719);
      Integer integer0 = new Integer(32);
      Random.setNextRandom(719);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1, 719);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) cCSMatrix0, 32, 7, 1139, (-2195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 1139x-2195
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      rowMajorSparseMatrix0.mkString(numberFormat0, "0.000", "Z");
      rowMajorSparseMatrix0.columns();
      Matrix matrix1 = rowMajorSparseMatrix0.removeLastColumn();
      matrix0.multiplyByItsTranspose();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix1.is(matrixPredicate0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      Matrix matrix2 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, denseMatrix0);
      int int0 = 291;
      // Undeclared exception!
      try { 
        matrix1.insert(matrix2, 291, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 291x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      int int0 = (-1814);
      numberFormat0.setMinimumFractionDigits((-1814));
      String string0 = "0 .00";
      int int1 = NumberFormat.INTEGER_FIELD;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      cRSMatrix0.norm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn(1958, vectorFunction0);
      CCSMatrix.identity(0);
      // Undeclared exception!
      try { 
        Matrix.fromCSV("L,>\"7.gR%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ooPlaceMatricesAddition0.partiallyApply(denseMatrix0);
      denseMatrix0.maxInColumn(0);
      rowMajorSparseMatrix0.swapRows(0, 0);
      Random.setNextRandom(0);
      // Undeclared exception!
      try { 
        denseMatrix0.copyOfRows(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(6, 0);
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(denseMatrix0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      denseMatrix0.sum();
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(6.0, 6.0, 6.0, (double)6, (-1479.9948972057605)).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      sparseMatrix0.insert((Matrix) denseMatrix0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      denseMatrix0.non(advancedMatrixPredicate0);
      columnMajorSparseMatrix0.foldColumns((VectorAccumulator) null);
      matrix0.iteratorOfRow(8);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate0);
      MockRandom mockRandom0 = new MockRandom(5L);
      MockRandom mockRandom1 = new MockRandom(8);
      Matrix.random(8, 8, mockRandom1);
      matrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      matrix0.maxInRow(0);
      mockRandom0.ints();
      int int1 = Double.MIN_EXPONENT;
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      mockRandom0.nextGaussian();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) Integer.MAX_VALUE;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) (-1022);
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      Matrix.from2DArray(doubleArray0);
      cCSMatrix0.equals(matrix0, (double) Integer.MAX_VALUE);
      matrix0.determinant();
      cCSMatrix0.toString();
      // Undeclared exception!
      try { 
        denseMatrix0.copyOfColumns(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 280, mockRandom0);
      Matrix matrix1 = columnMajorSparseMatrix0.transpose();
      matrix1.euclideanNorm();
      NumberFormat.getCurrencyInstance();
      int int1 = 3068;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix2 = matrix0.transformColumn(3068, vectorFunction0);
      // Undeclared exception!
      try { 
        matrix2.sliceTopLeft(3765, (-1257));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..3765][0..-1257].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseVector sparseVector0 = SparseVector.zero(0);
      Vector vector0 = sparseVector0.add((-752.192917302241));
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn((-4), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 6;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      int int1 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(6, 0);
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(denseMatrix0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      denseMatrix0.sum();
      CRSMatrix cRSMatrix0 = (CRSMatrix)basic2DMatrix0.toSparseMatrix();
      cRSMatrix0.rank();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.is(matrixPredicate0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) cRSMatrix0, (DenseMatrix) basic2DMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) denseMatrix0, (-4557), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -4557x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix.zero(0, 0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      // Undeclared exception!
      try { 
        denseMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInRow(5, vectorProcedure0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply((ColumnMajorSparseMatrix) cCSMatrix0, rowMajorSparseMatrix0);
      RowMajorSparseMatrix.block(matrix0, rowMajorSparseMatrix0, matrix0, cCSMatrix0);
      cCSMatrix0.trace();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      MockRandom mockRandom0 = new MockRandom(0);
      Matrix.random(424, 0, mockRandom0);
      denseMatrix0.toCSV();
      // Undeclared exception!
      try { 
        denseMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      mockRandom0.doubles();
      Basic2DMatrix.unit(0, 0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      rowMajorSparseMatrix0.max();
      // Undeclared exception!
      try { 
        Matrix.zero((-573), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      mockRandom0.ints(2926L);
      mockRandom0.doubles();
      matrix0.rank();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorAccumulator0).accumulate();
      matrix0.foldRow(0, vectorAccumulator0);
      Random.setNextRandom(0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 2926L);
      cCSMatrix0.insert(matrix0);
      int int0 = 9;
      CRSMatrix.identity(47);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        matrix0.slice(4849, 9, 3125, 3125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [4849..3125][9..3125].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NumberFormat.getCurrencyInstance();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2923L;
      doubleArray0[1] = (double) 0;
      NumberFormat.getPercentInstance();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3805, 3805);
      // Undeclared exception!
      cRSMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1981, 9.992007221626409E-14, (java.util.Random) mockRandom0);
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((-3157.0));
      int int0 = 5;
      int int1 = 32;
      Random.setNextRandom(3241);
      Integer integer0 = new Integer((-1402));
      int int2 = 22;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(32, 0);
      Matrix matrix0 = basic2DMatrix0.divide(Double.POSITIVE_INFINITY);
      VectorFunction vectorFunction0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.block(rowMajorSparseMatrix0, matrix0, basic2DMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(6, 0);
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(denseMatrix0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      denseMatrix0.sum();
      matrix0.toSparseMatrix();
      MockRandom mockRandom0 = new MockRandom(1000L);
      Matrix.random(0, 424, mockRandom0);
      int int1 = (-3614);
      matrix0.toCSV();
      NumberFormat.getPercentInstance();
      Matrix matrix1 = denseMatrix0.divide(580.0);
      NumberFormat.getPercentInstance();
      Integer integer0 = new Integer((-3614));
      // Undeclared exception!
      try { 
        matrix1.trace();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix.fromCSV("0.000");
      MockRandom mockRandom0 = new MockRandom();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = 300;
      int int1 = 0;
      Matrix matrix0 = Matrix.random(300, 0, mockRandom0);
      int int2 = (-3614);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(300);
      basic2DMatrix0.toCSV();
      basic2DMatrix0.removeFirstRow();
      NumberFormat.getPercentInstance();
      NumberFormat.getPercentInstance();
      double double0 = (-52.0);
      Matrix matrix1 = basic2DMatrix0.multiply(double0);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      basic2DMatrix1.subtract((Matrix) basic2DMatrix0);
      Integer integer0 = new Integer(int1);
      matrix1.trace();
      basic2DMatrix1.setRow(int2, (double) int1);
      Random.setNextRandom(int2);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int3 = 3;
      cCSMatrix0.maxInRow(int3);
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.unit(int0, int2);
      int int4 = 4015;
      basic2DMatrix2.copyOfColumns(int4);
      basic2DMatrix0.sum();
      basic2DMatrix1.rowMajorIterator();
      int int5 = 3911;
      matrix0.minInRow(int5);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      double double0 = new Integer(3);
      mockRandom0.ints(2926L);
      mockRandom0.doubles();
      matrix0.rank();
      matrix0.toDenseMatrix();
      matrix0.multiply((double) 0);
      NumberFormat.getCurrencyInstance();
      matrix0.insert(matrix0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.nonZeroRowMajorIterator();
      NumberFormat.getPercentInstance();
      Random.setNextRandom(3972);
      Matrix matrix1 = cRSMatrix0.removeLastRow();
      cRSMatrix0.mkString("B%qm8oM.._v'8)t7B", "%~P_PgVjPG@l");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix1.updateColumn(1, vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix1, 1074, 3972, (-353), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -353x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      mockRandom0.ints(2924L);
      Matrix matrix1 = matrix0.copy();
      Object object0 = new Object();
      matrix1.equals(object0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate0);
      matrix1.blankOfRows(3901);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(1981, vectorFunction0);
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("org.la4j.LinearAlgebra$DecompositorFactory");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix.randomSymmetric(0, mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ooPlaceMatricesAddition0.partiallyApply(denseMatrix0);
      denseMatrix0.maxInColumn(0);
      rowMajorSparseMatrix0.swapRows(0, 0);
      DenseMatrix denseMatrix1 = DenseMatrix.constant(32, 32, 0.0);
      denseMatrix1.setRow(7, 0.0);
      Random.setNextRandom(7);
      // Undeclared exception!
      try { 
        CCSMatrix.identity((-2288));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Matrix matrix0 = cCSMatrix0.removeLastRow();
      int int0 = 37;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cCSMatrix0, 5, 24, 5, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 5, 24
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      MockRandom mockRandom0 = new MockRandom();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      Matrix matrix0 = rowMajorSparseMatrix0.add((-1621.206858));
      Matrix.zero(17, 17);
      int int0 = 761;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(761, 2235);
      matrix0.add(1.0);
      Matrix.zero(37, 625);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromMatrixMarket("0.000");
      basic2DMatrix0.removeFirstColumn();
      int int1 = 2147480867;
      Random.setNextRandom(int0);
      int int2 = (-2509);
      cRSMatrix0.minInColumn(int2);
      matrix0.insert((Matrix) basic2DMatrix0, int1, int1);
      cRSMatrix0.removeFirstRow();
      int int3 = 2;
      Matrix.from1DArray(int2, int3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      int int0 = 1981;
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((-3157.0));
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Integer integer0 = new Integer(32);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(5, 22);
      cCSMatrix0.columns();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(5);
      cRSMatrix0.toColumnVector();
      cRSMatrix0.nonZeroRowMajorIterator();
      NumberFormat.getPercentInstance();
      Random.setNextRandom((-5107));
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("H^}+Y^[$8?.N");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      mockRandom0.ints(2923L);
      matrix0.rank();
      Matrix matrix1 = Matrix.random(2, 3805, mockRandom0);
      // Undeclared exception!
      matrix1.transpose();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      MockRandom mockRandom0 = new MockRandom();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      Matrix matrix0 = rowMajorSparseMatrix0.add((-1621.206858));
      Matrix matrix1 = Matrix.zero(17, 17);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(761, 2235);
      cRSMatrix0.minInColumn(105);
      matrix1.removeFirstColumn();
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator1).accumulate();
      matrix0.foldRows(vectorAccumulator1);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix1 = new InPlaceCopyMatrixToMatrix();
      MatrixOperation<Matrix> matrixOperation0 = inPlaceCopyMatrixToMatrix1.partiallyApply((RowMajorSparseMatrix) cRSMatrix0);
      matrix0.apply(matrixOperation0);
      CRSMatrix cRSMatrix1 = null;
      try {
        cRSMatrix1 = new CRSMatrix((-3009), 761, (-3009));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3009x761
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply((ColumnMajorSparseMatrix) cCSMatrix0, rowMajorSparseMatrix0);
      int int1 = 0;
      Matrix matrix1 = ooPlaceMatricesSubtraction0.apply((ColumnMajorSparseMatrix) cCSMatrix0, rowMajorSparseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.block(matrix1, rowMajorSparseMatrix0, matrix1, cCSMatrix0);
      matrix0.trace();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      int int2 = 1051;
      Matrix matrix2 = matrix0.blankOfRows(1051);
      SparseVector.zero(0);
      rowMajorSparseMatrix0.toBinary();
      Matrix matrix3 = rowMajorSparseMatrix1.power(0);
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate1).test(anyInt() , anyInt());
      matrix2.is(matrixPredicate1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      matrix3.shuffle();
      int int3 = 15;
      matrix0.setRow(15, 1.0);
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        matrix3.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      mockRandom0.doubles();
      matrix0.rank();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(8, 0);
      NumberFormat.getCurrencyInstance();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 8 rows and 0 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1981, (double) 0, (java.util.Random) mockRandom0);
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((-3157.0));
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(2257, 10);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1981 rows and 1981 cols at 0, 0 in a 2257x10 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(6, 0);
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(denseMatrix0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      denseMatrix0.sum();
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      sparseMatrix0.rank();
      MockRandom mockRandom0 = new MockRandom(1000L);
      int int1 = 325;
      Matrix.random(325, 0, mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = denseMatrix0.transformRow((-3614), vectorFunction0);
      matrix1.transpose();
      matrix1.euclideanNorm();
      Matrix matrix2 = matrix0.removeFirstRow();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      denseMatrix0.divide(0.0);
      NumberFormat.getPercentInstance();
      matrix0.multiply((double) 6);
      matrix2.product();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      RowMajorSparseMatrix.randomSymmetric(1981, (double) 0, (java.util.Random) mockRandom0);
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((-3157.0));
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1981);
      cCSMatrix0.setRow(32, 0.0);
      Random.setNextRandom(719);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      Integer integer0 = new Integer(309);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(5, 22);
      basic2DMatrix0.removeFirstRow();
      NumberFormat.getPercentInstance();
      CRSMatrix cRSMatrix0 = new CRSMatrix(22, 32);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.block(cCSMatrix0, rowMajorSparseMatrix0, cCSMatrix0, columnMajorSparseMatrix0);
      ((CCSMatrix) columnMajorSparseMatrix0).setAll(0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.diagonal(0, 0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(0);
      cCSMatrix1.multiplyByItsTranspose();
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate1).test(anyInt() , anyInt());
      cCSMatrix1.is(matrixPredicate1);
      rowMajorSparseMatrix0.transpose();
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) cRSMatrix0, (DenseMatrix) basic2DMatrix0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)rowMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0, 0, 0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ooPlaceMatrixHadamardProduct0.applySymmetric((RowMajorSparseMatrix) cRSMatrix1, (ColumnMajorSparseMatrix) cCSMatrix0);
      Random.setNextRandom(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)22).when(vectorAccumulator0).accumulate();
      basic2DMatrix1.foldColumn(22, vectorAccumulator0);
      Basic2DMatrix basic2DMatrix2 = new Basic2DMatrix(22, 339);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix2.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((-3157.0));
      int int0 = 5;
      Random.setNextRandom(719);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(5, 22);
      int[] intArray0 = new int[3];
      intArray0[0] = 1963;
      basic2DMatrix0.equals((Object) sparseVector0);
      intArray0[0] = 719;
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      matrix0.maxInRow(0);
      mockRandom0.ints();
      int int1 = Double.MIN_EXPONENT;
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      mockRandom0.nextGaussian();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      matrix0.maxInColumn((-1022));
      cCSMatrix0.equals(matrix0, (double) Integer.MAX_VALUE);
      matrix0.determinant();
      cCSMatrix0.toString();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        denseMatrix0.copyOfColumns(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      MockRandom mockRandom0 = new MockRandom();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      Matrix matrix0 = rowMajorSparseMatrix0.add((-1621.206858));
      Matrix.zero(17, 17);
      int int0 = 761;
      CRSMatrix.zero(761, 2237);
      rowMajorSparseMatrix0.blank();
      rowMajorSparseMatrix0.columnMajorIterator();
      int[] intArray0 = new int[7];
      intArray0[0] = 105;
      matrix0.euclideanNorm();
      intArray0[1] = 761;
      intArray0[2] = 761;
      intArray0[3] = 17;
      intArray0[4] = 761;
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-765), 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -765x17
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      double double0 = new Integer(0);
      mockRandom0.ints();
      int int0 = Double.MIN_EXPONENT;
      matrix0.toDenseMatrix();
      mockRandom0.nextGaussian();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      matrix0.maxInColumn((-1022));
      cCSMatrix0.equals(matrix0, (double) Integer.MAX_VALUE);
      matrix0.determinant();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1022);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0.0);
      cRSMatrix0.blank();
      // Undeclared exception!
      try { 
        cRSMatrix0.power((-5478));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -5478.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      mockRandom0.doubles();
      matrix0.rank();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      NumberFormat.getCurrencyInstance();
      matrix0.insert((Matrix) denseMatrix0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2235, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) denseMatrix0, 2235, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 2235 rows and 0 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, (java.util.Random) null);
      matrix0.maxInRow(0);
      mockRandom0.ints();
      int int0 = Double.MAX_EXPONENT;
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      denseMatrix0.subtract(0.0);
      cCSMatrix0.equals(matrix0, (double) Integer.MAX_VALUE);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      matrix0.determinant();
      cCSMatrix0.toString();
      basic2DMatrix0.kroneckerProduct(cCSMatrix0);
      // Undeclared exception!
      try { 
        denseMatrix0.copyOfColumns(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 293;
      Matrix matrix0 = Matrix.zero(2639, 293);
      matrix0.iteratorOfColumn(293);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      int int1 = 3036;
      double double0 = 67.275;
      Matrix.diagonal(int1, double0);
      Matrix matrix1 = matrix0.rotate();
      Matrix matrix2 = matrix1.removeFirstColumn();
      Matrix matrix3 = matrix2.removeLastColumn();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      matrix2.toMatrixMarket(numberFormat0);
      int int2 = 1849;
      double double1 = (-1934.9296155);
      Matrix matrix4 = Matrix.diagonal(int2, double1);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix1.withInverter(linearAlgebra_InverterFactory0);
      int int3 = (-1313);
      Matrix matrix5 = matrix1.blankOfShape(int3, int0);
      matrix5.rowMajorIterator();
      int int4 = 921;
      int int5 = 1108;
      double double2 = 0.0;
      matrix3.set(int4, int5, double2);
      matrix0.toString();
      matrix2.toString();
      String string0 = "vu]Ss$M9hLY^'";
      matrix2.fail(string0);
      int int6 = 10;
      int int7 = 306;
      matrix4.sliceTopLeft(int6, int7);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      int int0 = 1981;
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((double) 1981);
      int int1 = 719;
      Random.setNextRandom(719);
      NumberFormat.getCurrencyInstance();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1981, 1981);
      int int2 = (-1215);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(int1, int0);
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.identity(int0);
      basic2DMatrix0.removeFirstColumn();
      int int3 = 4;
      int int4 = 12;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int3, int4);
      CRSMatrix.zero(int3, int2);
      Basic2DMatrix basic2DMatrix3 = new Basic2DMatrix(int1, int0);
      int int5 = (-199);
      int int6 = 2134;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int5, int6);
      Object object1 = new Object();
      basic2DMatrix0.equals(object1);
      int[] intArray0 = new int[3];
      intArray0[0] = int4;
      intArray0[1] = int4;
      int int7 = 109;
      intArray0[2] = int7;
      Matrix matrix0 = basic2DMatrix2.select(intArray0, intArray0);
      double double0 = (-2013.63);
      Matrix.diagonal(int5, double0);
      int int8 = 1981;
      double double1 = 9.992007221626409E-14;
      CCSMatrix cCSMatrix0 = CCSMatrix.random(int2, int8, double1, (java.util.Random) mockRandom0);
      int int9 = 2;
      cCSMatrix0.removeColumn(int9);
      int int10 = (-2147318646);
      matrix0.getRow(int10);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 17;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 17);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      matrix0.removeFirstColumn();
      int int1 = 1840;
      // Undeclared exception!
      try { 
        matrix0.minInRow(1936);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1936' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      NumberFormat.getIntegerInstance();
      int int0 = NumberFormat.INTEGER_FIELD;
      NumberFormat.getCurrencyInstance();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      Matrix.identity(0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.getRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1981, (double) 0, (java.util.Random) mockRandom0);
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((-3157.0));
      mockRandom0.nextGaussian();
      int int0 = 719;
      Random.setNextRandom(719);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateRow(8, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = new Object();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 745;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      NumberFormat.getNumberInstance();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInRow((-2805));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2805' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseVector sparseVector0 = SparseVector.zero(0);
      Vector vector0 = sparseVector0.add((double) 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn(0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 8.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int1 = 2013;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(2013, (double) 0, (java.util.Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      SparseVector.zero(0);
      Matrix matrix1 = rowMajorSparseMatrix0.add((double) 2924L);
      int int2 = 463;
      int int3 = 460;
      Matrix matrix2 = Matrix.zero(int2, int3);
      int int4 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int3, int4);
      double double0 = cRSMatrix0.diagonalProduct();
      cRSMatrix0.minInColumn(int0);
      matrix0.blank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(int1, int2, int1);
      int[] intArray0 = new int[1];
      int int5 = 8;
      intArray0[0] = int5;
      matrix1.select(intArray0, intArray0);
      basic2DMatrix0.getColumn(int3);
      int int6 = (-1686);
      matrix2.maxInRow(int6);
      cRSMatrix0.multiply(double0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(9, 0);
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(denseMatrix0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      denseMatrix0.sum();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      cRSMatrix0.rank();
      matrix0.multiplyByItsTranspose();
      int int1 = 500;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(500, 9);
      cRSMatrix0.insert((Matrix) cRSMatrix1, 9, 9);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(9, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      rowMajorSparseMatrix0.mkString(numberFormat0, "0 .00", "Z");
      rowMajorSparseMatrix0.columns();
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.removeLastColumn();
      NumberFormat.getCurrencyInstance();
      CRSMatrix cRSMatrix1 = new CRSMatrix(1, 1, 1);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1, 1);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.zero(1, 1);
      NumberFormat.getPercentInstance();
      basic2DMatrix1.multiply((-767.2175875851101));
      NumberFormat.getCurrencyInstance();
      cRSMatrix0.nonZeroRowMajorIterator();
      NumberFormat.getPercentInstance();
      Random.setNextRandom((-599));
      rowMajorSparseMatrix0.removeLastRow();
      Matrix.zero(1235, 2704);
      cRSMatrix0.insert(matrix0, (-599), 37, 3972, 0);
      matrix0.toString();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1981, (double) 0, (java.util.Random) mockRandom0);
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((-3157.0));
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) rowMajorSparseMatrix0).eachNonZeroInRow(70, vectorProcedure0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(8);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(32);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply((DenseMatrix) basic2DMatrix0, (DenseMatrix) basic2DMatrix0);
      DenseVector denseVector0 = DenseVector.zero(32);
      Matrix matrix1 = matrix0.insertColumn(0, denseVector0);
      // Undeclared exception!
      try { 
        Matrix.block(basic2DMatrix0, cCSMatrix1, cCSMatrix0, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 1978;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1978, 1978);
      int int1 = 4;
      Matrix matrix0 = Matrix.zero(int1, int1);
      Matrix matrix1 = basic2DMatrix0.blankOfColumns(int0);
      Matrix matrix2 = basic2DMatrix0.add(matrix1);
      String string0 = "0p,IQSsy";
      matrix2.product();
      SparseVector sparseVector0 = SparseVector.fromCSV(string0);
      matrix2.multiply((Vector) sparseVector0);
      int int2 = 32;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix1.transformColumn(int2, vectorFunction0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic2DMatrix0.toColumnMajorSparseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      int[] intArray0 = new int[8];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int2;
      basic2DMatrix0.mkString(string0, string0);
      intArray0[3] = int2;
      intArray0[4] = int1;
      intArray0[5] = int2;
      intArray0[6] = int0;
      intArray0[7] = int0;
      columnMajorSparseMatrix0.select(intArray0, intArray0);
      matrix2.diagonalProduct();
      columnMajorSparseMatrix0.max();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix3 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      basic2DMatrix0.add(matrix3);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.transpose();
      matrix0.rowMajorIterator();
      basic2DMatrix0.euclideanNorm();
      matrix0.getColumn(2);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      matrix0.diagonalProduct();
      ParsePosition parsePosition0 = new ParsePosition(4);
      parsePosition0.setIndex((-2121));
      decimalFormat0.parseObject("TAKEN_FROM_THESE", parsePosition0);
      basic2DMatrix0.mkString((NumberFormat) decimalFormat0, "", "");
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      MockRandom mockRandom0 = new MockRandom();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-32.063409029103326)).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      rowMajorSparseMatrix0.insert((Matrix) basic2DMatrix0);
      Random.setNextRandom(302);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Integer integer0 = new Integer(280);
      int int0 = 22;
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(17, 280);
      basic2DMatrix1.copyOfColumns(17);
      int[] intArray0 = new int[4];
      intArray0[0] = 302;
      intArray0[1] = 302;
      intArray0[2] = 17;
      intArray0[3] = 280;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 5;
      Random.setNextRandom(699);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Integer integer0 = new Integer(32);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(5, 32);
      // Undeclared exception!
      try { 
        basic2DMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      SparseVector sparseVector0 = SparseVector.zero(21, 21);
      Vector vector0 = sparseVector0.add((double) 21);
      int int0 = 8;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(21);
      cCSMatrix0.insertColumn(8, vector0);
      Matrix matrix0 = cCSMatrix0.shuffle();
      cCSMatrix0.rowMajorIterator();
      int int1 = 956;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(956, 956, matrixFunction0);
      int int2 = 1981;
      int int3 = matrix0.columns();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int2);
      cRSMatrix0.nonZeroRowMajorIterator();
      NumberFormat.getPercentInstance();
      Random.setNextRandom(int3);
      Matrix matrix1 = cRSMatrix0.removeLastRow();
      int int4 = 37;
      rowMajorSparseMatrix0.insert((Matrix) cRSMatrix0, int0, int1, int2, int4);
      matrix1.max();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      MockRandom mockRandom0 = new MockRandom();
      rowMajorSparseMatrix0.rotate();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      String string0 = "0 .00";
      rowMajorSparseMatrix0.mkString(numberFormat0, "0 .00", "Z");
      int int0 = NumberFormat.INTEGER_FIELD;
      rowMajorSparseMatrix0.removeLastColumn();
      NumberFormat.getCurrencyInstance();
      rowMajorSparseMatrix0.mkString("00 .00", "0 .00");
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("0 .00");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      CRSMatrix cRSMatrix0 = new CRSMatrix(1981, 0);
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((-3157.0));
      Random.setNextRandom(719);
      Integer integer0 = new Integer(1981);
      Random.setNextRandom(719);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1, 719);
      CRSMatrix cRSMatrix1 = new CRSMatrix(0, 595);
      basic2DMatrix0.equals((Object) cRSMatrix1);
      int[] intArray0 = new int[2];
      intArray0[1] = 1981;
      cRSMatrix1.mkString((NumberFormat) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((double) 1981);
      Random.setNextRandom(719);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(719, 1981);
      basic2DMatrix0.toDenseMatrix();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      mockRandom0.doubles((-476.040618686), 9.992007221626409E-14);
      cCSMatrix0.equals((Matrix) basic2DMatrix0, (double) 719);
      Integer integer0 = new Integer(302);
      int int0 = 719;
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix((-278), 719);
      basic2DMatrix1.determinant();
      cCSMatrix0.toString();
      basic2DMatrix1.copyOfColumns(int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      MockRandom mockRandom0 = new MockRandom();
      rowMajorSparseMatrix0.rotate();
      NumberFormat.getIntegerInstance();
      String string0 = "0 .00";
      String string1 = "Z";
      DenseVector denseVector0 = DenseVector.constant(1978, (-973));
      Vector vector0 = denseVector0.multiply((double) 1978);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setRow((-973), vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1978. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      SparseVector sparseVector0 = SparseVector.zero(1981);
      sparseVector0.add((-3157.0));
      int int0 = 719;
      Random.setNextRandom(719);
      NumberFormat.getCurrencyInstance();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(32, 32);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(719, 32);
      basic2DMatrix1.setColumn(30, 455.3614);
      Basic2DMatrix basic2DMatrix2 = Basic2DMatrix.identity(32);
      basic2DMatrix1.removeFirstRow();
      int int1 = 4;
      int int2 = 12;
      CRSMatrix cRSMatrix0 = new CRSMatrix(int1, int2);
      cRSMatrix0.blank();
      int int3 = 312;
      int int4 = 37;
      int int5 = (-186);
      CRSMatrix.zero(int4, int5, int3);
      int int6 = (-2064888122);
      CRSMatrix cRSMatrix1 = new CRSMatrix(int4, int0, int6);
      basic2DMatrix2.norm();
      int int7 = (-4193);
      int int8 = Integer.MAX_VALUE;
      int int9 = 1167;
      cRSMatrix1.insert((Matrix) basic2DMatrix2, int7, int3, int8, int9);
      cRSMatrix0.toColumnMajorSparseMatrix();
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      SparseVector sparseVector0 = SparseVector.zero(0);
      sparseVector0.add((-3157.0));
      Random.setNextRandom(719);
      Integer integer0 = new Integer(0);
      Random.setNextRandom(719);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1, 719);
      CRSMatrix cRSMatrix1 = new CRSMatrix(0, 595);
      basic2DMatrix0.equals((Object) cRSMatrix1);
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateRow(Integer.MAX_VALUE, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 10;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(10, 10);
      Matrix matrix0 = basic2DMatrix0.copyOfRows(10);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = (-2571);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) basic2DMatrix0, (-2571), 2336, 2336, (-2390), 10, 25);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 2336, -2390
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      mockRandom0.longs(2468L);
      mockRandom0.ints(2926L);
      mockRandom0.doubles();
      matrix0.rank();
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorAccumulator0).accumulate();
      denseMatrix0.foldRow((-1731), vectorAccumulator0);
      Matrix matrix1 = matrix0.multiply((double) 0);
      Matrix matrix2 = matrix0.add((double) (-1731));
      matrix0.insert(matrix2);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix1, denseMatrix0, matrix0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator1);
      cRSMatrix0.equals((Object) matrix2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      Integer integer0 = new Integer(0);
      mockRandom0.ints();
      int int0 = Double.MIN_EXPONENT;
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      Integer integer1 = new Integer(0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      matrix0.maxInColumn((-1022));
      cCSMatrix0.equals(matrix0, (double) Integer.MAX_VALUE);
      matrix0.determinant();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1022);
      doubleArray0[1] = 0.0;
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      denseMatrix0.insert((Matrix) cCSMatrix0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(47);
      cRSMatrix0.nonZeroRowMajorIterator();
      NumberFormat.getPercentInstance();
      CRSMatrix cRSMatrix1 = new CRSMatrix(28, 4);
      cRSMatrix1.removeLastRow();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(48);
      // Undeclared exception!
      try { 
        cCSMatrix1.swapColumns(Integer.MAX_VALUE, 1693);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      int int0 = 2235;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 17;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.add((-1621.206858));
      Matrix.zero(17, 17);
      int int2 = 761;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("0.000");
      rowMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix0);
      CRSMatrix.zero(17, 2235);
      int int3 = 105;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.minInColumn(17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
