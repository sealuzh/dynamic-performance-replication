/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 18:59:55 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("tableFilters=[\n");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.substituteMarkers("3Co^6", "3Co^6", stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DELETE FROM ", defaultDBTable0, 38, "Tmixed");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("TMIXED", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", (String) null);
      String string0 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[16];
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "4", true, stringArray0);
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , , , , , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "1Wi``K]@\"", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "", "");
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("%3bh~im$1h7", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .null, .null, .null, .null, .null, .null", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("paramet");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("paramet", dBSchema0);
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(655, "update");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("update UPDATE(0) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4T~hsG`6");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("selO[ectdelete from", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("isClosed");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'USING'", true, stringArray0);
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 'USING' PRIMARY KEY (, , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5lq)b-CuK6/F\"|g&jf%");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "inner as cgtatg]8&` on 5lq)b-CuK6/F\"|g&jf%.'inner' = cgtatg]8&`.'inner' and 5lq)b-CuK6/F\"|g&jf%.5lq)b-CuK6/F\"|g&jf% = cgtatg]8&`.5lq)b-CuK6/F\"|g&jf% and 5lq)b-CuK6/F\"|g&jf%.null = cgtatg]8&`.null", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"inner as cgtatg]8&` on 5lq)b-CuK6/F\"|g&jf%.'inner' = cgtatg]8&`.'inner' and 5lq)b-CuK6/F\"|g&jf%.5lq)b-CuK6/F\"|g&jf% = cgtatg]8&`.5lq)b-CuK6/F\"|g&jf% and 5lq)b-CuK6/F\"|g&jf%.null = cgtatg]8&`.null\" PRIMARY KEY (, , )", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.leftJoin("", stringArray0, "l", "G8WLq", stringArray0);
      assertEquals("left join l as G8WLq on .null = G8WLq.null and .null = G8WLq.null and .null = G8WLq.null and .null = G8WLq.null", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("left join null as null on ", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.leftJoin("", stringArray0, "", "", stringArray0);
      assertEquals("left join  as  on .null = .null and .null = .null and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join("cgtatg]8&`u}0rsa)", "x.N0DccpvLM~", stringArray0, "select into", (String) null, stringArray0);
      assertEquals("cgtatg]8&`u}0rsa) join select into as null on x.N0DccpvLM~.null = null.null and x.N0DccpvLM~.null = null.null and x.N0DccpvLM~.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.join("", "RqO$J%/", stringArray0, "", "", stringArray0);
      assertEquals(" as  on RqO$J%/.null = .null and RqO$J%/.null = .null and RqO$J%/.null = .null and RqO$J%/.null = .null and RqO$J%/.null = .null and RqO$J%/.null = .null and RqO$J%/.null = .null and RqO$J%/.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("", "", stringArray0, "*!_4V[tbslv", "", stringArray0);
      assertEquals("*!_4V[tbslv as  on ", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.innerJoin("@L%Cu9p`s", stringArray0, (String) null, "drop index", stringArray0);
      assertEquals("null as drop index on @L%Cu9p`s.null = drop index.null and @L%Cu9p`s.null = drop index.null and @L%Cu9p`s.null = drop index.null and @L%Cu9p`s.null = drop index.null and @L%Cu9p`s.null = drop index.null and @L%Cu9p`s.null = drop index.null and @L%Cu9p`s.null = drop index.null and @L%Cu9p`s.null = drop index.null", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.innerJoin("zaMJq =BJ V@'", stringArray0, "", "j%&x\"w", stringArray0);
      assertEquals(" as j%&x\"w on zaMJq =BJ V@'.null = j%&x\"w.null and zaMJq =BJ V@'.null = j%&x\"w.null", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("OaXQoYyZFA", stringArray0, "?<O?8t\"8;U~w6;k", "org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl", stringArray0);
      assertEquals("?<O?8t\"8;U~w6;k as org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl on ", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "H^n)!T{2u}UM2", stringArray0[0], stringArray0);
      assertEquals("H^n)!T{2u}UM2 as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.innerJoin("", stringArray0, "vS9rlJRxiNz!}\".!L4T", "", stringArray0);
      assertEquals("vS9rlJRxiNz!}\".!L4T as  on .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SHOW TRANSACTION ISOLATION LEVEL");
      String[] stringArray0 = new String[7];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("rq9]P7UJq[9hj", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , ) REFERENCES SHOW TRANSACTION ISOLATION LEVEL(, , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("setClob(int,Reader, long", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, (NameSpec) null);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("+12Iv-),t/ ~E{", false, "setCharacterStream(int, Reader, long)", "S1000");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(536);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("%~9f^S'kic!/");
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("%~9f^S'kic!/ or null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.apache.derby.impl.sql.compile.NormalizeResultSetNode", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("indexType", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[14];
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object object0 = new Object();
      genericDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("&I7:Q( I", (String[]) null, "&I7:Q( I", "&I7:Q( I", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String[] stringArray1 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "deletealter sesionccrp=^e,bqir5{)m^", "deletealter sesionccrp=^e,bqir5{)m^", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDDL("1'uKD_Q'/*");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("1ixed", (String[]) null, "1ixed", "1ixed", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String[] stringArray1 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null", stringArray0, "dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null", "dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null, dj?Yd.`r::^h.null", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("G`fj]*)/>", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("BUNA!,adzoMBU0", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("truncate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-1121.16664371);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      assertEquals("truncate", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("}>wBus^%", (DBSchema) null);
      SQLUtil.normalize("j%&x\"w", false);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("QK:WijL9b:fsxbV)M");
      SQLUtil.normalize("procedure /zB[j:h9RzK~05tV", false);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("", false, (DBTable) null, " ADD ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCheckConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = SQLUtil.removeComments("DE)KTbYvv<w");
      assertEquals("DE)KTbYvv<w", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("DE)KTbYvv<w", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      int int0 = 1424;
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DE)KTbYvv<w", (DBSchema) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter materialized viewcgtatg]8&`}u}0rsa)", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      String string0 = "t\"9@U&{Z3{eK4hMyVm";
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter session-", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("j%&x\"w", (DBSchema) null);
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("j%&x\"w", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.addOptionalCondition("j%&x\"w", stringBuilder1);
      assertEquals("CONSTRAINT j%&x\"w  or j%&x\"w", stringBuilder1.toString());
      assertEquals("CONSTRAINT j%&x\"w  or j%&x\"w", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("~wL.d=PC()t]coy~Xy", "~wL.d=PC()t]coy~Xy", "-i3Rb!k1EI11yC k4");
      SQLUtil.ownerDotComponent(dBSequence0);
      String string0 = "'STORAGE'";
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("YYxpkP1t");
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("YYxpkP1t and null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("mixed", "mixed", (String[]) null, "mixed", "mixed", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SQLUtil.mutatesDataOrStructure("- ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("- ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("#>fBq");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("*!@_4V[bslv", false);
      String[] stringArray0 = new String[8];
      stringArray0[7] = "#>fBq";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "* ! @ _4V [ bslv", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[4];
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("truncateupdateleft join %h'd=w~?y- w as 42z9d.s.1 on cgtatg]8&`}u}0rsa).d+0h'0 = 42z9d.s.1.d+0h'0 and cgtatg]8&`}u}0rsa).c<>ps}?,w8 = 42z9d.s.1.c<>ps}?,w8 and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.isDML("truncate");
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "gcWTl )hA3y";
      SQLUtil.isDML("gcWTl )hA3y");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      assertEquals(0, dataDictionaryImpl0.getEngineType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create materialized view");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLUtil.mutatesStructure("2|E*'#[HEc0px\"-y^uZ");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLUtil.mutatesStructure("execcgtatg]8&`}u}0rsa)");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("drop materialized viewtruncate");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updateleft join %h'd=w~?y- w as 42z9d.s.1 on cgtatg]8&`}u}0rsa).d+0h'0 = 42z9d.s.1.d+0h'0 and cgtatg]8&`}u}0rsa).c<>ps}?,w8 = 42z9d.s.1.c<>ps}?,w8 and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null and cgtatg]8&`}u}0rsa).null = 42z9d.s.1.null");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selecting ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      System.setCurrentTimeMillis((-2266L));
      Character character0 = Character.valueOf('G');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'G'", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = SQLUtil.renderValue("alter tableclob");
      assertEquals("'alter tableclob'", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1771, "table null");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'USING'", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("%~9f^S'kic!/");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("%~9f^S'kic!/TABLE NULL(2)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(48);
      DBDataType dBDataType0 = DBDataType.getInstance((-1027), "O!n$ZBb}]6DO#7Hk");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O!n$ZBb}]6DO#7Hk", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("#>fBq");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("recover", defaultDBTable0, 939, "#>fBq");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("#>FBQ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "W*)<~i Nnq2X!]", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%sJ");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = SQLUtil.normalize("2v*0'jj`*o-'WjZ6.!", false);
      assertEquals("2v * 0 'jj`*o-' WjZ6.!", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = SQLUtil.normalize("setClob(int, Reader, long)", true);
      assertEquals("setClob (int, Reader, long)", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = SQLUtil.normalize("5-^_O[hjTI@BIR", false);
      assertEquals("5 - ^ _O [ hjTI @ BIR", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setCob(intReader, long", true, "setCob(intReader, long", "getResultSetHoldability");
      String string0 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint setCob(intReader, long", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("g", true, "g", "g");
      SQLUtil.mutatesDataOrStructure("+O>4f=aqG/L/");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CONSTRAINT g CHECK g");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT g CHECK gCONSTRAINT g ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("g", true, "g", "g");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT g CHECK g", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " default ", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "drop index");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      String string0 = "alter materialized viewdrop indexr^qxg:@}*j%n join null = null and null = null and null = null as drop indexr^qxg:@}*j%n on rox^%yg-\"\\.null = drop indexr^qxg:@}*j%n.null and rox^%yg-\"\\.null = drop indexr^qxg:@}*j%n.null and rox^%yg-\"\\.null = drop indexr^qxg:@}*j%n.null";
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[3] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("drop tablecftetg]8");
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(354, 2699.499);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 354
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("selecting ");
      DBSchema dBSchema0 = new DBSchema("selecting ", dBCatalog0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("selecting .selecting ", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, "9r", stringArray0);
      assertEquals("null as 9r on null.null = 9r.null and null.null = 9r.null and null.null = 9r.null and null.null = 9r.null and null.null = 9r.null and null.null = 9r.null and null.null = 9r.null and null.null = 9r.null and null.null = 9r.null and null.null = 9r.null and null.null = 9r.null and null.null = 9r.null", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tableclob");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionkw8vi1nco");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[12];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2381), "`uWA\"sKdJu L");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ISO_8859_5");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`uWA\"sKdJu L", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("`uWA\"sKdJu L `UWA\"SKDJU L(2) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer(1238);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Qj]s", defaultDBTable0, (DBDataType) null, integer0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, (DBDataType) null);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2381), "`uWA\"sKdJu L");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`uWA\"sKdJu L");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`uWA\"sKdJu L", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2381), "`uWA\"sKdJu L");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ISO_8859_5");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`uWA\"sKdJu L", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("`uWA\"sKdJu L", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "NTA??Kio{1g'Vh");
      DBDataType dBDataType0 = DBDataType.getInstance(2827, "CREATE FUNCTIJkON");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CREATE FUNCTIJkON", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("NTA??Kio{1g'Vh", defaultDBTable0, 2827, "NTA??Kio{1g'Vh");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NTA??Kio{1g'Vh");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setClob(int, Reader, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 10, "");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getBlob(String)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/xp", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(335544325, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/xp", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLUtil.isProcedureCall("(!,G.DyY");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      assertTrue(columnDescriptorList0.isEmpty());
  }
}
