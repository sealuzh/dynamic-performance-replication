/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 09:55:27 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = (-536);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "nl~S\"~[zy$tD%<}", "nl~S\"~[zy$tD%<}", "nl~S\"~[zy$tD%<}", (Object) null);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = (-536);
      ByteVector byteVector0 = new ByteVector(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 33554432, "-Pl", "-Pl", (String) null, "_4mV]`! >'XA");
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3452);
      classWriter0.index = (-528);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-2082), "5rFH!l*O2WZYI", "5rFH!l*O2WZYI", "5rFH!l*O2WZYI", "5rFH!l*O2WZYI");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-2082), "5rFH!l*pO2WZYI", "5rFH!l*pO2WZYI", "5rFH!l*pO2WZYI", "5rFH!l*pO2WZYI");
      AnnotationVisitor annotationVisitor0 = fieldVisitor0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "r'z:P$axMOBK?-+6I]r", "org.apache.commons.io.filefilter.NameFileFilter", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "r'z:P$axMOBK?-+6I]r", "org.apache.commons.io.filefilter.NameFileFilter", "", "");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2, "Signature", "i||/W4azpCB9,%%D", "Signature", "");
      // Undeclared exception!
      try { 
        fieldWriter0.next.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "r'z:P$axMOBK?-+6I]r", "org.apache.commons.io.filefilter.NameFileFilter", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3862);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 4096, "T||]%|~ZG.LC(6mb~A", "T||]%|~ZG.LC(6mb~A", "c]>", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65522);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65522, "", "M&F}NEXcS<2B\"}Hg]", "M&F}NEXcS<2B\"}Hg]", (Object) null);
      Attribute attribute0 = new Attribute((String) null);
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector(65522);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-2082), "5rFH!l*pO2WZYI", "5rFH!l*pO2WZYI", "5rFH!l*pO2WZYI", "5rFH!l*pO2WZYI");
      fieldWriter0.visitAnnotation("nl~S\"~[zy$tD%<}", false);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "", "oxINol%dBzeFbuBNq", "oxINol%dBzeFbuBNq", "");
      ByteVector byteVector0 = new ByteVector(4254);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "RuntimeVisibleAnnotations";
      stringArray0[3] = "";
      stringArray0[4] = "oxINol%dBzeFbuBNq";
      stringArray0[5] = "oxINol%dBzeFbuBNq";
      stringArray0[6] = "";
      stringArray0[7] = "=o;(RDB";
      classWriter0.visit((-4051), (-4051), "oxINol%dBzeFbuBNq", "", "oxINol%dBzeFbuBNq", stringArray0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "", "M&F}NEXcS<2B\"}Hg]", "M&F}NEXcS<2B\"}Hg]", (Object) null);
      Attribute attribute0 = new Attribute((String) null);
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "", "M&F}NEXcS<2B\"}Hg]", "M&F}NEXcS<2B\"}Hg]", (Object) null);
      fieldWriter0.visitAnnotation("StackMap", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.version = 1248;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-43), "RuntimeVisibleAnnotations", "C3WohIhE", "C3WohIhE", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-2082), "5rFH!l*pO2WZYI", "5rFH!l*pO2WZYI", "5rFH!l*pO2WZYI", "5rFH!l*pO2WZYI");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "", "oxINol%dBzeFbuBNq", "oxINol%dBzeFbuBNq", "");
      fieldWriter0.visitAnnotation("=o;(RDB", true);
      ByteVector byteVector0 = new ByteVector(4254);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-2082), "5rFH!l*pO2WZYI", "5rFH!l*pO2WZYI", "5rFH!l*pO2WZYI", "5rFH!l*pO2WZYI");
      fieldWriter0.visitAnnotation("nl~S\"~[zy$tD%<}", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "r'z:P$axMOBK?-+6I]r", "org.apache.commons.io.filefilter.NameFileFilter", "", "");
      fieldWriter0.visitEnd();
  }
}
