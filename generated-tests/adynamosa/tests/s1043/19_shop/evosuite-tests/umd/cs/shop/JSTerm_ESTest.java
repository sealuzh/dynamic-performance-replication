/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 22:10:26 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<~TV#)&7");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(/mL");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-3609), 110);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".lw@4C*");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine(".lw@4C*");
      SystemInUtil.addInputLine("bK");
      streamTokenizer0.resetSyntax();
      SystemInUtil.addInputLine("bK");
      SystemInUtil.addInputLine((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.removeElement(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(>b<~T)&7");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("(>b<~T)&7");
      streamTokenizer0.ordinaryChars((-315), (-1993));
      SystemInUtil.addInputLine("");
      streamTokenizer0.resetSyntax();
      Integer integer0 = new Integer((-941));
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.clear();
      SystemInUtil.addInputLine("q.M:qH%Ja");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeAllElements();
      SystemInUtil.addInputLine("");
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(>b<~T)&7");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      UnaryOperator.identity();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSTerm) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSTerm2);
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.clear();
      JSTerm jSTerm3 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(>b<~T)&7");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("(>b<~T)&7");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.isConstant();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.toStr();
      jSTerm0.isEmpty();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      JSJshopVars.percent = 58;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-782));
      jSSubstitution0.clear();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSJshopVars.flagLevel = (-782);
      Object object0 = jSTerm1.remove(1);
      jSSubstitution0.add(object0);
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      char[] charArray0 = new char[16];
      charArray0[2] = '[';
      SystemInUtil.addInputLine((String) null);
      jSSubstitution0.addElement(stringReader0);
      stringReader0.read(charArray0);
      jSTerm0.makeFunction();
      JSJshopVars.percent = (-782);
      SystemInUtil.addInputLine("y");
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2 >= 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StringReader stringReader1 = new StringReader("U{)icXN");
      stringReader0.reset();
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      streamTokenizer0.whitespaceChars((-1084043575), 259);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1);
      streamTokenizer1.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      jSTerm0.add((Object) "U{)icXN");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StringReader stringReader1 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2);
      jSTerm2.isConstant();
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm1.lastElement();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "U{)icXN");
      predicate0.negate();
      predicate0.negate();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm2, jSSubstitution1);
      SystemInUtil.addInputLine("^d9Y|Fb$CG6<@M");
      jSSubstitution2.clear();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm3.applySubstitutionT(jSSubstitution3);
      jSTerm5.clonePF();
      jSTerm5.standardizerTerm();
      System.setCurrentTimeMillis(41);
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      jSTerm0.add((Object) "U{)icXN");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StringReader stringReader1 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2);
      jSTerm2.isConstant();
      jSTerm1.equals(jSTerm2);
      jSTerm2.standardizerTerm();
      jSTerm1.lastElement();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "U{)icXN");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate2.and(predicate1);
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm1.removeIf(predicate1);
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      System.setCurrentTimeMillis(556L);
      StringReader stringReader0 = new StringReader("(G?*fep Tku6O~6gU");
      stringReader0.markSupported();
      SystemInUtil.addInputLine("t");
      SystemInUtil.addInputLine(") ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      stringReader0.reset();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(a G$?");
      JSJshopVars.minus = (-3);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.toStr();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.colon = (-3);
      jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm0.equals(jSTerm2);
      jSSubstitution1.add((Object) "(a G$?");
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      StringReader stringReader0 = new StringReader("(a G$?");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm2.call();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Ws");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(0);
      JSJshopVars.plus = (-4);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(Ws");
      jSTerm0.toStr();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      jSTerm0.makeVariable();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.ensureCapacity((-4));
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm0);
      stringReader0.ready();
      jSTerm0.isGround();
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.containsAll(jSTerm2);
      StringReader stringReader0 = new StringReader("xpecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.makeVariable();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm3.replaceAll(unaryOperator0);
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm4);
      jSTerm3.standardizerTerm();
      System.setCurrentTimeMillis((-1));
      jSTerm3.matches(jSTerm0, jSSubstitution0);
      jSTerm3.toStr();
      jSSubstitution0.setSize(95);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.isConstant();
      jSTerm0.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StringReader stringReader1 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSTerm) null);
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(asop");
      JSJshopVars.minus = (-3);
      jSTerm0.isConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      int int0 = 33;
      JSJshopVars.semicolon = 33;
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution2);
      jSTerm0.equals(jSTerm3);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution4);
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(asop");
      jSTerm0.isGround();
      jSTerm1.matches(jSTerm3, jSSubstitution5);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StringReader stringReader1 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm2.matches(jSTerm2);
      jSTerm2.isGround();
      jSTerm2.equals(jSTerm2);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      predicate3.and(predicate2);
      jSTerm1.removeIf(predicate2);
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.matches(jSTerm2);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm0.print();
      jSTerm1.cloneT();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm3));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StringReader stringReader1 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm1.matches(jSTerm1);
      System.setCurrentTimeMillis(41);
      jSTerm1.isGround();
      jSTerm1.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.isGround();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer2);
      jSTerm2.matches(jSTerm0);
      JSTerm jSTerm5 = new JSTerm();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.isConstant();
      jSTerm0.add((Object) "U{)icXN");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StringReader stringReader1 = new StringReader(">c\"GID;*K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.toStr();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.matches(jSTerm0);
      streamTokenizer0.wordChars((-4), (-4));
      System.setCurrentTimeMillis((-1));
      jSTerm3.equals(jSTerm1);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.isGround();
      jSTerm2.equals(jSTerm1);
      jSSubstitution0.iterator();
      jSTerm1.matches(jSTerm4, jSSubstitution0);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      jSTerm0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.clone();
      jSTerm1.makeConstant();
      StringReader stringReader0 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("h,eCaIQ<k9j[ac@ZO<");
      stringReader1.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer1.pushBack();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      jSTerm0.toStr();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm4.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader2 = new StringReader("t");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?\"@3JB+dQ1v67W14t");
      System.setCurrentTimeMillis((-1L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      JSJshopVars.slash = 46;
      jSTerm0.makeVariable();
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isEval();
      CharBuffer.wrap((CharSequence) "");
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      String string0 = "umd.cs.shop.JSJshopVars";
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm1.standardizerTerm();
      jSTerm0.isGround();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      StringReader stringReader0 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-174));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-5234), (-174));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSTerm0.makeConstant();
      char[] charArray0 = new char[4];
      streamTokenizer2.sval = "eO}#<r6BzWm8";
      charArray0[0] = 'N';
      charArray0[1] = '4';
      charArray0[2] = '+';
      charArray0[3] = 'N';
      streamTokenizer1.whitespaceChars((-4), (-5234));
      stringReader0.read(charArray0);
      jSTerm0.makeFunction();
      Integer integer0 = new Integer(45);
      jSTerm0.add((Object) integer0);
      streamTokenizer1.resetSyntax();
      jSTerm0.isConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
      jSTerm2.isGround();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.print();
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm3.isFunction());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("c$5EzKlfu|)](G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      streamTokenizer0.slashSlashComments(false);
      JSJshopVars.backquote = (-2048);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      jSSubstitution0.containsAll(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.matches(jSTerm1);
      JSJshopVars.lessT = 41;
      JSJshopVars.backquote = 1196;
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      streamTokenizer0.ordinaryChar(659);
      jSTerm1.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      StringReader stringReader0 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-174));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-5234), (-174));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSTerm0.makeConstant();
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = '4';
      charArray0[2] = '+';
      charArray0[3] = 'N';
      stringReader0.read(charArray0);
      jSTerm0.makeFunction();
      Integer integer0 = new Integer(45);
      jSTerm0.add((Object) integer0);
      streamTokenizer1.resetSyntax();
      jSTerm0.isConstant();
      stringReader0.skip((-79L));
      streamTokenizer0.resetSyntax();
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StringReader stringReader1 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      jSSubstitution0.stream();
      jSSubstitution0.clear();
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      stringReader1.read(charArray0);
      jSTerm0.makeFunction();
      Integer integer0 = new Integer(2);
      jSTerm2.add((Object) integer0);
      streamTokenizer0.resetSyntax();
      jSTerm2.isConstant();
      streamTokenizer0.resetSyntax();
      jSTerm0.isEval();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = jSTerm1.call();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StringReader stringReader1 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer1);
      jSTerm2.matches(jSTerm1);
      System.setCurrentTimeMillis(41);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isGround();
      jSTerm1.equals(jSTerm2);
      jSTerm1.toStr();
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("%p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StringReader stringReader1 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer1);
      jSTerm2.matches(jSTerm1);
      System.setCurrentTimeMillis(41);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(a5op");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(^a5Yop");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isVariable();
      jSTerm0.add((Object) "-{)icXN");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      JSJshopVars.flagLevel = (-3);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.equals(jSTerm0);
      CharBuffer.wrap((CharSequence) "");
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      jSSubstitution4.add((Object) "umd.cs.shop.JSJshopVars");
      JSJshopVars.greaterT = 1647;
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution0.stream();
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.print();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm4.isGround();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm3.equals(jSTerm5);
      jSTerm0.isEmpty();
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution0.stream();
      JSTerm jSTerm3 = jSTerm1.parseList(streamTokenizer0);
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      jSTerm2.print();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      jSTerm1.equals(jSTerm0);
      jSTerm1.isEmpty();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm5.isEmpty();
      jSSubstitution1.add((Object) null);
      jSTerm3.cloneT();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.isFunction();
      jSTerm0.add((Object) "-{)icXN");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isFunction();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.isEval();
      StringReader stringReader0 = new StringReader("}!{lomMPP:1c:cK]");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.read();
      JSSubstitution jSSubstitution3 = (JSSubstitution)jSSubstitution0.clone();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.iterator();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.spliterator();
      assertEquals("[-{)icXN, [-{)icXN]]", jSTerm0.toString());
      
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.clone();
      jSTerm2.addAll((Collection) jSSubstitution2);
      JSTerm jSTerm4 = jSTerm1.call();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm2.matches(jSTerm4);
      StringReader stringReader1 = new StringReader("\"@rDb");
      jSSubstitution5.removeAll(jSSubstitution1);
      jSTerm0.print();
      jSTerm4.applySubstitutionT(jSSubstitution3);
      assertEquals(10, jSTerm4.capacity());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isFunction();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isEval();
      stringReader0.read();
      stringReader0.read();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isEmpty();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.containsAll(jSTerm2);
      JSJshopVars.coma = 1;
      JSJshopVars.percent = 34;
      jSTerm1.makeVariable();
      JSJshopVars.equalT = 95;
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution0.stream();
      JSTerm jSTerm3 = jSTerm1.parseList(streamTokenizer0);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm0.spliterator();
      jSTerm3.clone();
      jSTerm2.addAll((Collection) jSSubstitution0);
      jSTerm2.standardizerTerm();
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(true);
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm0.isGround();
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      jSTerm0.removeAllElements();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.print();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.equals(jSTerm0);
      jSTerm0.add((Object) "-{)icXN");
      StringReader stringReader0 = new StringReader("(=P]pyENR3&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-2923));
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.parseList(streamTokenizer0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.ttype = 2;
      jSTerm2.print();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeElement(jSSubstitution0);
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm0.add((Object) "-{)icXN");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.colon = 127;
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      StringReader stringReader0 = new StringReader("-{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(33);
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      StringReader stringReader1 = new StringReader("-{)icXN");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.remove((Object) jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      jSTerm0.removeAllElements();
      JSJshopVars.colon = (-2074);
      jSTerm0.isConstant();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.parseList(streamTokenizer0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.print();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.isVariable();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm1.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(true);
      System.setCurrentTimeMillis((-17L));
      jSTerm1.cloneT();
      jSTerm1.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*G)l=0{DsQ|");
      stringReader0.ready();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(3648, 3648);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) null);
      System.setCurrentTimeMillis(41);
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("U{)icXN");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.isGround();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.add((Object) null);
      jSTerm2.toStr();
      System.setCurrentTimeMillis(41);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.equals(jSTerm0);
      jSTerm0.add((Object) "-{)icXN");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(3285);
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      jSTerm2.toStr();
      System.setCurrentTimeMillis((-1));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.ensureCapacity(96);
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.setSize(683);
      jSTerm1.stream();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("-{)icXN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      StringReader stringReader0 = new StringReader("rULY%MWy8*2`/<O^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-2245), (-2245));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-562));
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      jSTerm4.makeConstant();
      jSTerm2.makeFunction();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm4.add((Object) jSTerm5);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isGround();
      streamTokenizer1.resetSyntax();
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader1 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-2245), (-2245));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.commentChar((-4));
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      jSTerm1.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isGround();
      streamTokenizer1.resetSyntax();
      jSTerm1.isEval();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*G)l=0{DsQ|");
      stringReader0.ready();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*G)l=0{DsQ|");
      stringReader0.ready();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(3648, 3648);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) "-{)icXN");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm1.remove((Object) jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "-{)icXN");
      jSTerm4.removeIf(predicate0);
      boolean boolean0 = jSTerm4.equals(jSTerm3);
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*G)l=0{DsQ|");
      stringReader0.ready();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(3648, 3648);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) "-{)icXN");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.trimToSize();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSSubstitution jSSubstitution3 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeElement(jSSubstitution0);
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) "-{)icXN");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.removeAll(jSSubstitution2);
      jSSubstitution1.add((Object) jSSubstitution3);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution2);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution4 = jSTerm3.matches(jSTerm1);
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSSubstitution4.fail());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeElement(jSSubstitution0);
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) "-{)icXN");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*G)l=0{DsQ|");
      stringReader0.ready();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(3648, 3648);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.whitespaceChars(3648, 42);
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      streamTokenizer0.nextToken();
      streamTokenizer0.ttype = (-1117);
      jSTerm0.isFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.remove((-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeElement(jSSubstitution0);
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) "-{)icXN");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution4 = jSTerm3.matches(jSTerm0);
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution3));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeElement(jSSubstitution0);
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm0.add((Object) "-{)icXN");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*G)l=0{DsQ|");
      stringReader0.ready();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(3648, 3648);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      streamTokenizer0.whitespaceChars(3648, 42);
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) "*G)l=0{DsQ|");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*G)l=0{DsQ|");
      stringReader0.ready();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(3648, 3648);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.whitespaceChars(3648, 42);
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      streamTokenizer0.nextToken();
      streamTokenizer0.ttype = (-1117);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm0.makeEval(true);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm1);
      jSTerm1.isGround();
      jSTerm1.isEval();
      jSTerm1.print();
      jSTerm2.makeFunction();
      jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm2.isGround();
      assertTrue(jSTerm2.isFunction());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.dot = 43;
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uur");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.semicolon = (-1819);
      StringReader stringReader1 = new StringReader("uur");
      StringReader stringReader2 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t)O^)Y");
      System.setCurrentTimeMillis((-1L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0, (JSSubstitution) null);
      assertNotNull(jSSubstitution0);
      assertFalse(jSSubstitution0.fail());
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(2, stringBuffer0.length());
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t)O^)Y");
      System.setCurrentTimeMillis((-1L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.toStr();
      jSTerm1.isVariable();
      System.setCurrentTimeMillis((-1048L));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t)O^)Y");
      stringReader0.close();
      System.setCurrentTimeMillis((-1L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t)O^)Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader("H-OJ.Z");
      Object object0 = jSTerm0.clone();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.or(predicate0);
      Predicate<String> predicate3 = predicate2.and(predicate0);
      Predicate.isEqual((Object) "t)O^)Y");
      jSTerm0.removeIf(predicate3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(41);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5a,AUf5d~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSTerm1.isFunction());
      
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm2.isEval());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standardizerTerm();
      StringReader stringReader1 = new StringReader("expecting");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t)O^)Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      System.setCurrentTimeMillis((-512L));
      String string0 = "%";
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Dc3!o06IP*[ZG");
      stringReader0.read();
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2688, 1301);
      streamTokenizer0.sval = null;
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeEval(false);
      jSTerm0.isFunction();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("%%% ", stringBuffer0.toString());
      
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm0.makeEval(true);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm1);
      jSTerm1.isGround();
      jSTerm1.isEval();
      jSTerm1.print();
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) null);
      jSSubstitution0.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("m<2Eps+7N%,((>mEfv");
      StringReader stringReader1 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.listIterator();
      streamTokenizer0.ordinaryChar(62);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEval());
      assertNotSame(jSTerm4, jSTerm1);
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSTerm4.isConstant());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeAllElements();
      jSSubstitution0.remove((Object) null);
      jSTerm0.add((Object) null);
      JSJshopVars.flagLevel = 2;
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t)O^)Y");
      stringReader0.mark(42);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeEval(false);
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertTrue(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t)O^)Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("H-OJ.Z");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertFalse(jSTerm1.isFunction());
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.addElement("(=P]pyENR3&");
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*G)l=0{DsQ|");
      stringReader0.ready();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(3648, 3648);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*G)l=0{DsQ|");
      stringReader0.ready();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(3648, 3648);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.whitespaceChars(3648, 42);
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      streamTokenizer0.nextToken();
      streamTokenizer0.ttype = (-1117);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.trimToSize();
      jSTerm0.matches(jSTerm1);
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm2.isGround();
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
      
      jSTerm2.toStr();
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm2.equals((Object)jSTerm0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm0.isConstant();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.removeAllElements();
      jSTerm2.setSize(0);
      jSTerm0.stream();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.clear();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aZt!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isVariable();
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*G)l=0{DsQ|");
      stringReader0.ready();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(3648, 3648);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.whitespaceChars(3648, 42);
      jSTerm0.isConstant();
      jSTerm0.makeFunction();
      streamTokenizer0.nextToken();
      streamTokenizer0.ttype = (-1117);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.removeElement(jSTerm0);
      jSTerm0.matches(jSTerm1);
      jSTerm0.print();
      jSTerm1.toStr();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.removeAllElements();
      JSJshopVars.percent = (-2668);
      JSJshopVars.astherisk = (-3139);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.makeEval(true);
      jSTerm0.call();
      assertTrue(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm1.isConstant();
      jSTerm0.removeAllElements();
      jSTerm0.isConstant();
      jSTerm1.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("xpecting");
      stringReader0.skip((-1146L));
      jSTerm1.trimToSize();
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      int int0 = (-2375);
      // Undeclared exception!
      try { 
        jSTerm1.listIterator(149);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 149
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      jSTerm0.add((Object) "A");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.instance(jSTerm0);
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.standarizerSubs();
      jSTerm0.add((Object) jSSubstitution1);
      jSTerm0.lastElement();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.isEmpty();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) "-{)icXN");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("floor");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm1.trimToSize();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.matches(jSTerm2);
      assertTrue(jSTerm0.isFunction());
      
      jSTerm2.call();
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals("%%% ", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = true;
      jSTerm0.makeEval(true);
      JSJshopVars.rightPar = (-1306);
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-3);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.exclamation = (-3);
      JSJshopVars.VarCounter = 1;
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.backquote = 0;
      JSJshopVars.coma = (-3);
      jSTerm0.makeConstant();
      JSJshopVars.minus = (-3);
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeAllElements();
      JSJshopVars.colon = 0;
      jSTerm1.setSize(0);
      jSTerm1.stream();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.removeAllElements();
      JSJshopVars.lessT = 59;
      JSJshopVars.VarCounter = 641;
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeAllElements();
      jSSubstitution0.remove((Object) null);
      JSJshopVars.flagLevel = 2;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`_b,M(QgUAI82A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gz?7%+_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      char[] charArray0 = new char[7];
      streamTokenizer0.sval = "Reading Predicate";
      charArray0[0] = 'x';
      charArray0[1] = '[';
      streamTokenizer0.quoteChar(0);
      charArray0[2] = '(';
      charArray0[3] = ' ';
      charArray0[4] = '}';
      charArray0[5] = 'Z';
      charArray0[6] = '|';
      stringReader0.read(charArray0, 0, 0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.isFunction();
      // Undeclared exception!
      try { 
        jSTerm3.remove(229);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 229
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E}(*QGx?##H@UW\"w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 1804.48192772847;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip((-1825L));
      jSTerm0.makeEval(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(0, 0);
      streamTokenizer1.nval = (double) (-1825L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t)O^)Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeEval(false);
      assertEquals("[t]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.equalT = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.setElementAt(jSSubstitution0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
