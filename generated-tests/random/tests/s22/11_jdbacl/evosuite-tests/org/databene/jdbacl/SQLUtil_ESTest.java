/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 07:00:14 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DBDataType dBDataType0 = DBDataType.getInstance(3027, "'drop materi'");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'drop materi'", (DBTable) null, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("'drop materi', 'drop materi', 'drop materi', 'drop materi'", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("truncate");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      String string0 = SQLUtil.substituteMarkers("drop index", "CONSTRAINT ", pipedReader0);
      assertEquals("drop index", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, )", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .null, .null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.leftJoin(" ADD ", stringArray0, "#?fa=^r>\u0004", "#?fa=^r>\u0004", stringArray0);
      assertEquals("left join #?fa=^r>\u0004 as #?fa=^r>\u0004 on  ADD .null = #?fa=^r>\u0004.null", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join("selectm|;g#1{)nu#{z", "H % - m ` 8 } 7 : YS  'B\"I!]'", stringArray0, "", "H%-m`8}7:YS'B\"I!]", stringArray0);
      assertEquals("selectm|;g#1{)nu#{z join  as H%-m`8}7:YS'B\"I!] on H % - m ` 8 } 7 : YS  'B\"I!]'.null = H%-m`8}7:YS'B\"I!].null and H % - m ` 8 } 7 : YS  'B\"I!]'.null = H%-m`8}7:YS'B\"I!].null and H % - m ` 8 } 7 : YS  'B\"I!]'.null = H%-m`8}7:YS'B\"I!].null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.innerJoin("F>A7((s?5t@4|!1@gxK", stringArray0, "F>A7((s?5t@4|!1@gxK", "F>A7((s?5t@4|!1@gxK", stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.innerJoin("call", stringArray0, "M?s", "", stringArray0);
      assertEquals("M?s as  on call.null = .null and call.null = .null and call.null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ER@j}\"*<4$", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "ER@j}\"*<4$");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("ER@j}\"*<4$", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("SELECT * FROM ", stringBuilder0);
      assertEquals("SELECT * FROM ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("org.h2.expression.Parameter");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--");
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "inserto(|zjntma,!");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("null", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("delete7:?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.renderValue((Object) null);
      int int0 = (-2054114791);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      System.setCurrentTimeMillis((-1549L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[2] = "}C=B(W+1J'.#F>'";
      stringArray0[3] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "}C=B(W+1J'.#F>'", false, stringArray0);
      dBPrimaryKeyConstraint0.setName((String) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      defaultDBTable0.getIndexes();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertNull(dBPrimaryKeyConstraint0.getDoc());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("drop index");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      int int0 = (-354);
      int int1 = 44;
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 1391;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1391);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nval = (double) 1391;
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = "alter materialized view1g.vtv6#:";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop index");
      assertTrue(boolean0);
      
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 363.46509557;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("363.46509557", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "*|VFT !V3nN";
      boolean boolean0 = true;
      SQLUtil.normalize("*|VFT !V3nN", true);
      boolean boolean1 = false;
      String string1 = "(x/taq7-]";
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("H%-m`8}7:YS'B\"I!]");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("H%-m`8}7:YS'B\"I!]", true);
      assertEquals("H % - m ` 8 } 7 : YS 'B\"I!]'", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("&sXMm?&pIg.G]H");
      Boolean boolean2 = SQLUtil.mutatesStructure("truncatejmjn}>+94ni,rx@xg");
      assertTrue(boolean2.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = ")#0#7/e&;= _^";
      SQLUtil.removeComments(")#0#7/e&;= _^");
      SQLUtil.normalize(")#0#7/e&;= _^", false);
      boolean boolean0 = false;
      String string1 = "Table.addColumn";
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "org.apache.derby.impl.sql.execute.GenericConstantActionFactory";
      SQLUtil.normalize("org.apache.derby.impl.sql.execute.GenericConstantActionFactory", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      String string1 = null;
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.normalize("create materialized viewe7z#fwcb{yca)m2\"f3_", true);
      byte[] byteArray0 = new byte[0];
      char[] charArray0 = null;
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "execinserto(|zjntma,!";
      DBDataType.getInstance((-2061584299), "execinserto(|zjntma,!");
      SQLUtil.normalize("execinserto(|zjntma,!", true);
      String string1 = "truncate";
      String string2 = "+1$]!uvP";
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "c~P";
      DBCatalog dBCatalog0 = new DBCatalog("c~P");
      SQLUtil.typeAndName(dBCatalog0);
      String string1 = "group";
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "qPbwD0y9]\"oqA$8bW";
      SQLUtil.isQuery("qPbwD0y9]\"oqA$8bW");
      SQLUtil.typeAndName((DBObject) null);
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      FromVTI fromVTI0 = new FromVTI();
      String string0 = "create table ";
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "'", false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete");
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "'", false, stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      defaultDBTable0.getReferrers();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((-5057));
      stringBuilder0.append('t');
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("-5057tCONSTRAINT ' ", stringBuilder0.toString());
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = "drop tableunique";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop tableunique", (DBSchema) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.h2.schema.Schema", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("create materialized viewexecupdatedrop materi", "select", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("create materialized viewexecupdatedrop materi", defaultDatabase0);
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("create materialized viewexecupdatedrop materi.create materialized viewexecupdatedrop materi", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.toString();
      SQLUtil.ownerDotComponent(dBCatalog0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      OutputStream outputStream0 = null;
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("");
      String[] stringArray0 = new String[0];
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "()");
      stringBuilder0.reverse();
      SQLUtil.addOptionalCondition("CZ=:AR<3y", stringBuilder0);
      assertEquals(")( or CZ=:AR<3y", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.addOptionalCondition("", stringBuilder0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder1);
      assertEquals("null and null", stringBuilder1.toString());
      assertEquals("null and null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SQLUtil.join((String) null, "u^xt}q|S", stringArray0, "drop tableorg.apache.derby.impl.sql.execute.genericconstantactionfactory", "h2.minWriteDelay", stringArray0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLUtil.normalize("drop materialized view", false);
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "select into";
      SQLUtil.isQuery("select into");
      // Undeclared exception!
      try { 
        DBDataType.getInstance(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("inserto(|zjntma,!");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "execupdatedrop materi";
      SQLUtil.mutatesDataOrStructure("execupdatedrop materi");
      Random.setNextRandom((-527001566));
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.mutatesDataOrStructure("alter sessionorg.");
      String string0 = "Q<:2*:nFFUI?";
      // Undeclared exception!
      try { 
        DBDataType.getInstance(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("create unique indexdefault");
      String[] stringArray0 = new String[9];
      stringArray0[7] = "create unique indexdefault";
      stringArray0[8] = "create unique indexdefault";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("org.firebirdsql.jdbc.FBCallableStatement", stringArray0);
      Character character0 = new Character('[');
      assertEquals('[', (char)character0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "#qAle{3 wt4?D&%";
      DBDataType dBDataType0 = DBDataType.getInstance(3, "updatejmjn}>+94ni,rx@xg");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#qAle{3 wt4?D&%", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.mutatesStructure("alter table");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "BLOB";
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setDoc((String) null);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isProcedureCall(string1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("zQ|::x%yWv:[s]S9F");
      assertFalse(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("getResultSetFactory", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~Mb?uQj[NT=X", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1089), "getResultSetFactory");
      Integer integer0 = Integer.valueOf((-1089));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique indexalter table", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create unique indexalter table GETRESULTSETFACTORY(-1089) NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "fg.");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("fg.", (DBTable) null, (-1864), "rename");
      String string0 = ", ";
      defaultDBColumn0.isUnique();
      defaultDBColumn0.setDefaultValue("\u0001\u0173");
      defaultDBColumn0.setDoc("rename");
      defaultDBColumn0.isIdentical((DBObject) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string1 = "selectbu";
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%]Q");
      DBDataType dBDataType0 = DBDataType.getInstance((-328517608), "%]Q");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("%]Q", defaultDBTable0, dBDataType0);
      vector0.add((DBColumn) defaultDBColumn0);
      DBColumn dBColumn0 = defaultDBTable0.getColumn("%]Q");
      vector0.add(dBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      SQLUtil.isQuery("lx.)I8q?wOd.GCWip");
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = "wnjTa0vzSq%,z9";
      MockFile mockFile0 = new MockFile("wnjTa0vzSq%,z9", "eu");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('/');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      String string1 = ".qM_[";
      String string2 = "J!@9";
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ":E-P", false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.setDoc("Qyso1UMH@u|b< = 'Qyso1UMH@u|b<' AND #e*&VJZ = '#e*&VJZ'");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop materialized viewq$fpk57arr2");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`uGV^P!HQb+");
      int int0 = (-2726);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`uGV^P!HQb+", defaultDBTable0, (-2726), "`uGV^P!HQb+");
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("`UGV^P!HQB+", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      defaultDBTable0.getIndexes();
      mockPrintWriter0.println((double) (-2726));
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(int0);
      boolean boolean0 = SQLUtil.isQuery(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "setNCharacterStream(int, Reader, long)";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setNCharacterStream(int, Reader, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      System.setCurrentTimeMillis((-1781L));
      String string0 = "alter materialized view(";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter materialized view(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: alter materialized view(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("mUT+");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "KB]~Q", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" as ", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBUniqueConstraint0.setTable(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create materialized viewt", dBTable0, 65, "mUT+");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "Qou`Z=V/#8j[";
      SQLUtil.mutatesStructure("Qou`Z=V/#8j[");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("getLong(String)", (DBTable) null, 652, "getLong(String)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("ZBY5XaPfhx$m<_y+ W");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ZBY5XaPfhx$m<_y+ W", false, defaultDBTable0, "ZBY5XaPfhx$m<_y+ W");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"ZBY5XaPfhx$m<_y+ W\" CHECK ZBY5XaPfhx$m<_y+ W", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SQLUtil.normalize("*/", false);
      String[] stringArray0 = new String[5];
      stringArray0[3] = "*/";
      stringArray0[4] = ")VO,*H";
      SQLUtil.innerJoin(")VO,*H", stringArray0, "getScrollInsensitiveResultSet", (String) null, stringArray0);
      SQLUtil.isDML("'getScrollInsensitiveResultSet'");
      String string0 = "LW";
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = " ADD ";
      DBConstraint dBConstraint0 = null;
      String string1 = SQLUtil.leftJoin(string0, stringArray0, stringArray0[0], stringArray0[0], stringArray0);
      assertEquals("left join null as null on  ADD .null = null.null", string1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "#e*&VJZ";
      defaultDBTable0.setDoc("Qyso1UMH@u|b<");
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      NameSpec nameSpec1 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      String[] stringArray0 = new String[2];
  }
}
