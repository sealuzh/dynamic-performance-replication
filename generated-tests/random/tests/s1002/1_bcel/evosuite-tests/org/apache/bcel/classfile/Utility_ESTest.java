/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 09:55:07 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)81;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "R<";
      Utility.compactClassName("R<");
      Utility.compactClassName("R<", false);
      Utility.accessToString((int) (byte)91);
      Utility.classOrInterface(223);
      try { 
        Utility.typeOfSignature("% ]NG@bE)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: % ]NG@bE)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.convertString("WUE\"1RD*9hDcd!");
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)3;
      byteArray0[0] = (byte)3;
      byte byte1 = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)1;
      byte byte2 = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1084, 1084);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.accessToString(76, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#");
      Object[] objectArray0 = new Object[4];
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      mockPrintStream0.print(charArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[0] = (Object) "#";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "#";
      Locale locale0 = Locale.JAPANESE;
      mockPrintStream0.printf(locale0, "protected static volatile", objectArray0);
      mockPrintStream0.println(0.0F);
      objectArray0[3] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      try { 
        Utility.typeOfSignature("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_MethodHandle");
      Utility.signatureToString("CONSTANT_MethodHandle");
      String string0 = "-a}14L%WC|*!DDOI";
      try { 
        Utility.typeOfSignature("-a}14L%WC|*!DDOI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -a}14L%WC|*!DDOI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-117);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)115, 5123, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = Utility.searchOpcode("java.lang.Longjava.lang.Long");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?CCqU!c|D`VPs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?CCqU!c|D`VPs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("R7z4iH$7LXam`\"^/Qsj", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-52);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 197, (int) (byte)84, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.format(79, 34, false, 'r');
      String string0 = "0T&x>yU5LA9ZQ,/k";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("0T&x>yU5LA9ZQ,/k", false);
      Utility.isJavaIdentifierPart('D');
      int int0 = 2958;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2958, 79, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.fillup("", 10, true, '7');
      Utility.isJavaIdentifierPart('7');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte) (-52);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-37), (int) (byte) (-79));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.compactClassName("getfield");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 42, 844, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)9;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 38, (-30));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 26726. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)40, (byte)3);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("1iOK@)T}");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2175), (byte)3);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantMethodref constantMethodref2 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 10440. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte) (-105);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-516), (-145));
      assertEquals("0:    fconst_1\n1:    lstore_2\n2:    astore_3\n3:    castore\n4:    <illegal opcode>\n5:    d2f\n6:    dcmpg\n7:    <illegal opcode>\n8:    dcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(125);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, (int) (byte) (-36));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-48);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 210, (int) (byte)6, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_acmpne");
      String string0 = "U=Er,4";
      try { 
        Utility.typeOfSignature("U=Er,4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U=Er,4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-820), false);
      Utility.compactClassName("protected static volatile transient abstract strictfp synthetic annotation enum", "protected static volatile transient abstract strictfp synthetic annotation enum", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)73;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 123, 1336);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "goto";
      Utility.compactClassName("goto");
      Utility.compactClassName("goto");
      Utility.isJavaIdentifierPart('t');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)64;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), 440, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)68;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)68, 1557);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)107, 55, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")`L\"ODv!=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )`L\"ODv!=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~l[{ fhXe#[=:V;";
      stringArray0[1] = "~l[{ fhXe#[=:V;";
      stringArray0[2] = "~l[{ fhXe#[=:V;";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("~l[{ fhXe#[=:V;", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[{ fhXe#[=:V;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.classOrInterface(56);
      Utility.searchOpcode("+XQoe4A-#Sh");
      Utility.methodSignatureReturnType("Illegally nested brackets:", true);
      String string0 = "Illegal type: ";
      Utility.convertString("Illegal type: ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-770), 126, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    dsub
         // 2:    frem
         // 3:    iflt\t\t#22665
         // 6:    l2i
         // 7:    dstore_3
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-94);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte)117;
      byteArray1[2] = (byte) (-90);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[5] = (byte) (-81);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.replace("boolean", "athrow", "java.lang.f2d");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-81), (int) (byte) (-81));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lneg
         // 1:    if_acmpne\t\t#11657
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.isJavaIdentifierPart('~');
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Object@acd9026, java.lang.Object@56caebd0, java.lang.Object@16ff190a";
      stringArray0[1] = "java.lang.Object@acd9026, java.lang.Object@56caebd0, java.lang.Object@16ff190a";
      Utility.methodTypeToSignature("\"", stringArray0);
      Utility.compactClassName("java.lang.5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, false);
      Utility.convertString("java.lang.Object@acd9026, java.lang.Object@56caebd0, java.lang.Object@16ff190a");
      Utility.compactClassName("1DraE4|D.44|", "", true);
      try { 
        Utility.typeOfSignature(" arg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  arg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-3941);
      Utility.isSet((-3941), (-3941));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/O#%/i{K<";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[1] = "/O#%/i{K<";
      Utility.methodTypeToSignature("/O#%/i{K<", stringArray0);
      String string0 = "java.lang.{org.evosuite.runtime.testdata.FileSystemHandling@7d789354,";
      Utility.replace("(L/O#%/i{K<;L/O#%/i{K<;)L/O#%/i{K<;", "java.lang.{org.evosuite.runtime.testdata.FileSystemHandling@7d789354,", "java.lang.{org.evosuite.runtime.testdata.FileSystemHandling@7d789354,");
      try { 
        Utility.methodSignatureReturnType("(L/O#%/i{K<;L/O#%/i{K<;)L/O#%/i{K<;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L/O#%/i{K<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";lq-lrXle6JC(Eoo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;lq-lrXle6JC(Eoo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)18;
      byteArray0[0] = (byte)18;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte)18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)109;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(110);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)116, 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.typeOfSignature("T\":!");
      Utility.convertString("bastore");
      Utility.compactClassName("\r");
      Utility.convertString("T\":!");
      try { 
        Utility.typeOfMethodSignature("bastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.signatureToString("FF3wJ'X&", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('$');
      Utility.classOrInterface((-2181));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-19);
      Constant[] constantArray0 = new Constant[4];
      DataInput dataInput0 = null;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)126;
      byteArray0[8] = (byte)13;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 83, (int) (byte) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-117);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 60, 4979, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.isSet(213, 136);
      Utility.clearBit(213, 136);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)45;
      byteArray0[0] = (byte)45;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)118;
      byte byte1 = (byte)84;
      byteArray0[2] = (byte)84;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2601), 213, false);
      Utility.setBit((byte)118, 3014);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)118, 62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.fillup(" n+cj,Ua1o%g^7", 2449, false, ']');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-29);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-84), (int) (byte) (-29), true);
      Utility.equals(byteArray0, byteArray0);
      Utility.getSignature("0PSjJ`;pM`+5T(#Ng");
      Utility.fillup("0PSjJ`;pM`+5T(#Ng", (byte)104, true, '2');
      try { 
        Utility.decode("0:    aload_1\n1:    ireturn\n2:    wide\t(wide)\n3:    imul\n4:    <illegal opcode>\n5:    lcmp\n6:    <illegal opcode>\n", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantString constantString0 = new ConstantString((-3));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-3), 39);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass((byte)10);
      constantArray0[3] = (Constant) constantClass1;
      ConstantString constantString2 = new ConstantString(byteSequence0);
      constantArray0[4] = (Constant) constantString2;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[5] = (Constant) constantInterfaceMethodref1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(65, (-3));
      constantArray0[6] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger0 = new ConstantInteger(4);
      constantArray0[7] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.clearBit(197, (-314));
      Utility.compactClassName("goto");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 173, (-2374), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("&7%z$", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aconst_null", "aconst_null", "Byte code error: ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aconst_null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      Utility.isJavaIdentifierPart('{');
      Utility.isSet(178, 139);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Utility.compactClassName("i2f", "i2f", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-3);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-3234), 974);
      assertEquals("0:    dup2\n1:    lastore\n2:    dload\t\t%54\n4:    ifnonnull\t\t#-27903\n", string1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)71;
      byteArray0[6] = (byte) (-13);
      byte byte0 = (byte) (-88);
      byteArray0[7] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[3] = (Object) null;
      objectArray0[3] = (Object) null;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature("0, null, null, null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0, null, null, null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "void";
      stringArray0[1] = "impdep1";
      stringArray0[2] = "impdep1";
      stringArray0[3] = "impdep1";
      stringArray0[4] = "impdep1";
      stringArray0[5] = "impdep1";
      stringArray0[6] = "v\"r9@=+8%";
      stringArray0[7] = "impdep1";
      stringArray0[8] = "impdep1";
      try { 
        Utility.methodTypeToSignature("impdep1", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-8);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, 89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Zf&JI");
      Utility.fillup("Zf&JI", 3770, true, 'h');
      Utility.isSet(3770, 3770);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)54;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2469, (byte)34);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)100, (int) (byte) (-72), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)3;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-69), (int) (byte)32);
      assertEquals("0:    lload_2\n1:    ifnull\t\t#-17660\n", string0);
      
      int int0 = Utility.setBit((byte) (-58), 254);
      assertEquals((-58), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-2415);
      Utility.clearBit((-2415), 122);
      Utility.typeOfSignature("F$3t(Pbu");
      File file0 = MockFile.createTempFile("F$3t(Pbu", "checkcast");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)6;
      try { 
        mockFileOutputStream0.write(byteArray0, (int) (byte)64, (-3926));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("NZm`J>2B$f?O", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NZm`J>2B$f?O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Illegal type: ");
      Utility.searchOpcode("ik8Bm");
      Utility.setBit((short) (-1), (short) (-1));
      Utility.clearBit((-1), (-1));
      String string0 = "RI";
      try { 
        Utility.typeOfSignature("RI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.getSignature("getfield");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-122);
      byteArray1[1] = (byte) (-122);
      byteArray1[2] = (byte) (-33);
      byteArray1[0] = (byte)117;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte) (-119);
      byteArray1[6] = (byte) (-70);
      byteArray1[7] = (byte) (-84);
      byteArray1[8] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "getfield", "R7f c8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.format(42, 42, true, 'q');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.fillup("42qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", (byte) (-113), true, 'q');
      assertTrue(string2.equals((Object)string0));
      
      String string3 = Utility.accessToString(2423);
      assertEquals("public private protected final synchronized volatile native strictfp", string3);
      
      short short0 = Utility.searchOpcode("public private protected final synchronized volatile native strictfp");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string4 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("d2l", string4);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.clearBit(1492, 1492);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)116;
      Utility.toHexString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("8f ff d0 90 74");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8f ff d0 90 74
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      String string0 = Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9}";
      stringArray0[1] = "{org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9}";
      stringArray0[2] = "{org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9}";
      stringArray0[3] = "{org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9}";
      stringArray0[4] = "{org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9}";
      stringArray0[5] = "{org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9}";
      Utility.methodTypeToSignature("{org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9}", stringArray0);
      Utility.printArray((Object[]) stringArray0, false);
      short short0 = Utility.searchOpcode("Invalid type: void[]");
      assertEquals((short) (-1), short0);
      
      Utility.compactClassName("{org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9, org.evosuite.runtime.testdata.FileSystemHandling@32fad0a9}");
      Utility.methodSignatureToString("(L{org/evosuite/runtime/testdata/FileSystemHandling@32fad0a9,;L{org/evosuite/runtime/testdata/FileSystemHandling@32fad0a9,;L{org/evosuite/runtime/testdata/FileSystemHandling@32fad0a9,;L{org/evosuite/runtime/testdata/FileSystemHandling@32fad0a9,;L{org/evosuite/runtime/testdata/FileSystemHandling@32fad0a9,;L{org/evosuite/runtime/testdata/FileSystemHandling@32fad0a9,;)L{org/evosuite/runtime/testdata/FileSystemHandling@32fad0a9,;", "GPJ~0\"gFuUi@f", ")");
      String string1 = Utility.printArray((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("]w3", stringArray0);
      assertEquals("()L]w3;", string0);
      
      String string1 = Utility.replace("]w3", "()L]w3;", "()L]w3;");
      assertEquals("]w3", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{}", string2);
      
      String string3 = Utility.accessToString(1316, false);
      assertEquals("protected synchronized native abstract", string3);
      
      String string4 = Utility.printArray((Object[]) stringArray0, false, true);
      assertNotNull(string4);
      assertEquals("", string4);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-3068), 89);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string5 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload\t\t%72", string5);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "PMGClass";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("PMGClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)38;
      byte byte0 = (byte)104;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)106;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)86, 81, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature("+1FIpF*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1FIpF*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Utility.setBit(105, 105);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "OEII,fl";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.typeOfSignature("S*H\"zJb");
      Utility.format((-1763), (-1763), false, ';');
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Utility.getSignature("getfield");
      assertEquals("Lgetfield;", string0);
      
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-122);
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte) (-33);
      byteArray1[3] = (byte)117;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte) (-119);
      byteArray1[6] = (byte) (-70);
      byteArray1[7] = (byte) (-84);
      byteArray1[8] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2f", string1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        Utility.typeOfSignature("N+jiZu'8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N+jiZu'8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = Utility.isSet(60, 60);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = "r";
      stringArray0[2] = "newarray";
      stringArray0[3] = "r";
      stringArray0[4] = "r";
      stringArray0[5] = "r";
      stringArray0[6] = "r";
      String string0 = Utility.methodTypeToSignature("r", stringArray0);
      assertEquals("(L;Lr;Lnewarray;Lr;Lr;Lr;Lr;)Lr;", string0);
      
      Utility.methodSignatureArgumentTypes("(L;Lr;Lnewarray;Lr;Lr;Lr;Lr;)Lr;", true);
      String string1 = Utility.fillup("r", 60, false, 'M');
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMr", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "*lT";
      try { 
        Utility.typeOfSignature("*lT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, 554, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)115;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)115, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CYg");
      Utility.methodSignatureReturnType("CYg");
      Utility.typeOfSignature("CYg");
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      Utility.isSet((-4735), (-4735));
      try { 
        Utility.decode("CYg", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)69;
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(dataInputStream0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("monitorenter");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref((byte) (-27), 43);
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-27), 317);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2010, (int) (byte)69, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.typeOfSignature("V");
      Utility.isJavaIdentifierPart('w');
      Utility.clearBit(76, 76);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "V";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      stringArray0[3] = "S*H\"zJb";
      Utility.methodTypeToSignature("S*H\"zJb", stringArray0);
      Utility.accessToString(254);
      Utility.replace("private protected static final synchronized volatile transient", "Illegally nested brackets:", "L7} {&u!?T<:");
      String string0 = "fcmpg";
      boolean boolean0 = true;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("monitorexit", "monitorexit");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"monitorexit\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = Utility.decode("org.apache.bcel.util.ClassPath$1", false);
      assertEquals(30, byteArray0.length);
      
      String string0 = Utility.convertString("int");
      assertEquals("int", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = "Hk.Z";
      try { 
        Utility.typeOfSignature("Hk.Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hk.Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)3;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-69), (int) (byte) (-89));
      assertEquals("0:    goto\t\t#-14661\n3:    iconst_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)103;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2143), 20, true);
      assertEquals("0:    pop2\n1:    lreturn\n2:    pop\n3:    iastore\n4:    dsub\n", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)125;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)104, 46, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)69;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), 2164);
      assertEquals("0:    aconst_null\n1:    aastore\n2:    lstore_2\n3:    if_acmpeq\t\t#19656\n6:    fstore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.compactClassName(")P3oG_E5");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-124);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfMethodSignature("ixor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ixor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-90);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)29, (int) (byte)127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Utility.compactClassName("Wt>r{`WRZ(", "Wt>r{`WRZ(", false);
      assertEquals("Wt>r{`WRZ(", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore_3", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = ".h=^K";
      try { 
        Utility.typeOfSignature(".h=^K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .h=^K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 1495;
      Utility.classOrInterface(1495);
      String string0 = "wide";
      boolean boolean0 = false;
      Utility.decode("wide", false);
      String string1 = "z>m-mh5Nx:22`";
      boolean boolean1 = true;
      Utility.fillup("z>m-mh5Nx:22`", 1495, true, '<');
      try { 
        Utility.typeOfSignature("A$KRn!)C]MjI<ht'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A$KRn!)C]MjI<ht'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<");
      Utility.replace("\"J[O[]Ox!r<x", "<", "3~]x@^5u, M2<?<O");
      Utility.searchOpcode("3~]x@^5u, M2<?<O");
      Utility.accessToString((-1990));
      Utility.compactClassName("private static final synchronized strictfp synthetic annotation enum", "H8ckt3)YdQ:]ImyBI", false);
      try { 
        Utility.typeOfSignature("\"J[O[]Ox!r3~]x@^5u, M2<?<Ox");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"J[O[]Ox!r3~]x@^5u, M2<?<Ox
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)113;
      byteArray0[8] = (byte)125;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)47, (-1283));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 8, (int) (byte)65);
      assertEquals("8:    lushr\n", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-49);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (-269));
      assertEquals("0:    l2d\n1:    if_icmpne\t\t#9608\n4:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "!Z*HNej";
      Utility.typeOfSignature("!Z*HNej");
      // Undeclared exception!
      try { 
        Utility.signatureToString("!Z*HNej");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!Z*HNej'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kD%L6}cXft3Os3_p$ ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.checkError();
      Utility.printArray((PrintWriter) mockPrintWriter1, (Object[]) null);
      Utility.accessToString(183);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, 6, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-608), (-2832), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_2
         // 1:    lastore
         // 2:    athrow
         // 3:    ishr
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-100);
      Utility.toHexString(byteArray0);
      Utility.format((byte) (-58), 1982, true, '-');
      try { 
        Utility.typeOfSignature("28 01 c6 bb 9c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 28 01 c6 bb 9c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)43;
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)52;
      byte byte1 = (byte) (-85);
      byteArray0[6] = (byte) (-85);
      ConstantPool constantPool0 = null;
      int int0 = (-2259);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (-2259));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.compactClassName("[", "[", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte)2;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)69);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantPool0.dump(dataOutputStream0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1864, (int) (byte) (-121), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "Yx7]|Oz$Pl|";
      try { 
        Utility.typeOfSignature("Yx7]|Oz$Pl|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yx7]|Oz$Pl|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-69);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M7_LM~ZDV}gZB(gGCx=");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 235, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.isJavaIdentifierPart('>');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, (-2067));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      Utility.encode(byteArray0, false);
      boolean boolean0 = false;
      byte[] byteArray1 = Utility.decode("$f6", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[8];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-10));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = null;
      try {
        constantDouble1 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-60);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (-1968), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.read(byteArray0);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "&~]h5V";
      try { 
        Utility.typeOfSignature("&~]h5V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &~]h5V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.setBit(139, 2803);
      try { 
        Utility.typeOfSignature("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.compactClassName("l@ni.XxPCpTx7,+p=");
      int int0 = 2735;
      Utility.accessToString(2735);
      String string0 = "\t\t<";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("\t\t<", stringArray0);
      String string1 = "P#oc_Rq&H>{5E/j@~";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("P#oc_Rq&H>{5E/j@~", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P#oc_Rq&H>{5E/j@~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "float");
      String string0 = "qjr&#?aLs\\_S\\2{`5p";
      Utility.searchOpcode("qjr&#?aLs_S\u0002{`5p");
      try { 
        Utility.methodSignatureReturnType("<yd/)[j?! \"OS_DC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `j?! \"OS_DC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      try { 
        Utility.typeOfSignature("@p|Z0?^X[6W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @p|Z0?^X[6W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "java.lang.Object@3d192da2";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Jm{o*ifC[?tqU[Bj", "java.lang.Object@3d192da2", "java.lang.Object@3d192da2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `m{o*ifC[?tqU[Bj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(78, 58);
      constantArray0[0] = (Constant) constantFieldref0;
      Constant constant0 = constantFieldref0.copy();
      constantArray0[1] = constant0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantString constantString0 = new ConstantString(62);
      constantArray0[3] = (Constant) constantString0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)14, (byte)30);
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("ret\t\t%62", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)69;
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(dataInputStream0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("monitorenter");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref((byte) (-27), 43);
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-27), 317);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2010, (int) (byte)69, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(58, (byte)11);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2548), 58);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("7F", false);
      try { 
        Utility.typeOfSignature("7F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-16);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-55), (int) (byte) (-85), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.isSet(1808, 1808);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)116;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, (int) (byte)73, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = Utility.clearBit((-3693), (-3693));
      assertEquals((-527981), int0);
      
      Utility.replace("impdep2", "newarray", "HU'|[ku-'=#vR}7L(v");
      String string0 = Utility.compactClassName("newarray");
      assertEquals("newarray", string0);
      
      byte[] byteArray0 = Utility.decode("newarray", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-527981));
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3693), (-527981), false);
      assertEquals("0:    fdiv\n1:    lsub\n2:    dneg\n3:    ladd\n4:    frem\n5:    frem\n6:    ladd\n7:    lshl\n", string1);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)65;
      byteArray1[4] = (byte)20;
      byteArray1[5] = (byte)96;
      String string2 = Utility.encode(byteArray1, false);
      assertEquals("P$_$FA$U$60", string2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 241, 88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-63);
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-61), (byte) (-61));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(356, (byte) (-61));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-63), (-2331));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2331), (-1146), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("ifnonnull");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.fillup("{}", (short)199, true, 'p');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)67;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 195, (int) (byte) (-82), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iQO#V7 $Z 7>p\"BS");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteArray0[0] = (byte) (-72);
      ConstantPool constantPool0 = null;
      int int0 = (-1204);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-72), (-1204));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-64);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(87, (-1));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-64), (byte)104);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 68, 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-53);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte) (-71);
      byteArray1[2] = (byte) (-53);
      byteArray1[3] = (byte) (-32);
      byteArray1[4] = (byte) (-71);
      byteArray1[5] = (byte) (-89);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.typeOfSignature("ZQ`kf.0|");
      Utility.format((-3860), (-32768), false, 'R');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-3860");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-3860", (int) (byte)4, 201);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.signatureToString("Zlqsn(F9qM/O.EI", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("boolean", stringArray0);
      Utility.searchOpcode("2vPIVT]d(");
      Utility.printArray((Object[]) stringArray0, false, false);
      String string0 = "H0\"v=oi5*Z(!n>t>";
      int int0 = 204;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "()Z");
      Utility.fillup("H0\"v=oi5*Z(!n>t>", 204, false, '?');
      int int1 = 40;
      Utility.accessToString(40, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("eB Q3U", "CONSTANT_Utf8", "CONSTANT_Utf8", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eB Q3U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.compactClassName("putfield", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.compactClassName("LV4ZaAc0{BsiC,y.oN");
      Utility.convertString("WD0%2oLT");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.signatureToString("Bra<^BK)<N");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "Xi[AU7YgWc5vI^5\\v#A";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xi[AU7YgWc5vI^5v#A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xi[AU7YgWc5vI^5v#A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "v@w>WzaFC/ S!YYr0";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v@w>WzaFC/ S!YYr0");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)95;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 123, (-80), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "<illegal opcode>";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.fillup("checkcast", (-2281), false, 'L');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-35);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, 139, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)102;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)102, (int) (byte) (-94));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = Utility.convertString("float");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-32);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("19 8a 9d 70 3d 42 e0", string1);
      
      Utility.fillup("19 8a 9d 70 3d 42 e0", (byte)61, true, 'V');
      String string2 = Utility.compactClassName("float", true);
      assertTrue(string2.equals((Object)string0));
      
      Utility.convertString("19 8a 9d 70 3d 42 e0VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV");
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-32), (int) (byte) (-32), true);
      assertEquals("0:    aload\t\t%138\n2:    ifgt\t\t#28735\n5:    lstore_3\n6:    <illegal opcode>\n", string3);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.isJavaIdentifierPart(']');
      // Undeclared exception!
      try { 
        Utility.signatureToString("YP8^R\"mBlDth:jW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YP8^R\"mBlDth:jW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString((-2717), false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte) (-125);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, 2217);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K:Di<f'd#'+3G#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K:Di<f'd#'+3G#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)5;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1227, (int) (byte)5, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)91;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-39), (int) (byte)51, false);
      assertEquals("0:    fsub\n1:    dup_x2\n2:    <illegal opcode>\n3:    baload\n4:    aconst_null\n5:    <illegal opcode>\n6:    aload_0\n7:    dup_x2\n", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-98);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), (int) (byte) (-99));
      assertEquals("0:    fload_3\n1:    dup2\n2:    astore_1\n3:    iconst_5\n4:    <illegal opcode>\n5:    ifgt\t\t#19619\n", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.clearBit(1701, 248);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)16;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-106), (int) (byte)110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fdiv
         // 1:    i2c
         // 2:    dload_2
         // 3:    dload_2
         // 4:    fcmpg
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = Utility.format(2406, 2406, false, '[');
      Utility.typeOfSignature(string0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)13;
      DataInput dataInput0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("; sVU4:yN7=C:7", "; sVU4:yN7=C:7", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, 18, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)85;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.getSignature("~{FB tHu]KG");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)3;
      byteArray0[0] = (byte)3;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, true);
      Object[] objectArray1 = new Object[5];
      Object object1 = new Object();
      objectArray1[0] = object1;
      objectArray1[1] = (Object) "\"java.lang.Object@1e6c9704\"";
      objectArray1[2] = object0;
      objectArray1[3] = (Object) "\"java.lang.Object@1e6c9704\"";
      objectArray1[4] = object0;
      Utility.printArray(objectArray1);
      Utility.classOrInterface(2989);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("interface", "irem", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ret");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "ret";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "ret";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfSignature("1VADcb0Z3{*]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1VADcb0Z3{*]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      try { 
        Utility.decode("RmBcZ2{d@S^/xW$.9he", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = Utility.getSignature("!/");
      assertEquals("L!/;", string0);
      
      String string1 = Utility.compactClassName("!/", "!/", false);
      assertEquals("!.", string1);
      
      int int0 = Utility.setBit((-1295), (-1194));
      assertEquals((-1295), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(65, (-1295));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("astore_0", string2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)91;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-39), (int) (byte)55, false);
      assertEquals("0:    fsub\n1:    dup_x2\n2:    <illegal opcode>\n3:    lstore\t\t%1\n5:    <illegal opcode>\n6:    aload_0\n7:    dup_x2\n", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "(";
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "int";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "int");
      try { 
        Utility.typeOfSignature("()l(;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()l(;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("CLASSPATH component ", true);
      String string0 = ";v%UCDw8;P.[kc}";
      try { 
        Utility.methodSignatureArgumentTypes(";v%UCDw8;P.[kc}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;v%UCDw8;P.[kc}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "y;'wCy??OlQe)LO?sy:";
      try { 
        Utility.methodSignatureReturnType("y;'wCy??OlQe)LO?sy:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LO?sy:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "MPX5E>22dZF]oz'\u0003";
      stringArray0[1] = "MPX5E>22dZF]oz'\u0003";
      stringArray0[2] = "MPX5E>22dZF]oz'\u0003";
      stringArray0[3] = "MPX5E>22dZF]oz'\u0003";
      stringArray0[4] = "MPX5E>22dZF]oz'\u0003";
      stringArray0[5] = "MPX5E>22dZF]oz'\u0003";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[6] = "\nAttribute(s):\n";
      stringArray0[7] = "MPX5E>22dZF]oz'\u0003";
      String string0 = Utility.methodTypeToSignature("MPX5E>22dZF]oz'\u0003", stringArray0);
      assertEquals("(LMPX5E>22dZF]oz'\u0003;LMPX5E>22dZF]oz'\u0003;LMPX5E>22dZF]oz'\u0003;LMPX5E>22dZF]oz'\u0003;LMPX5E>22dZF]oz'\u0003;LMPX5E>22dZF]oz'\u0003;LAttribute(s):;LMPX5E>22dZF]oz'\u0003;)LMPX5E>22dZF]oz'\u0003;", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "byte";
      stringArray0[1] = "byte";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")jB h*");
      Utility.methodTypeToSignature("byte", stringArray0);
      try { 
        Utility.methodSignatureReturnType("R%rc&+7cNYH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R%rc&+7cNYH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)28;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-64);
      byteArray1[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 125, 199, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-65);
      byte byte0 = (byte)53;
      byteArray0[4] = (byte)53;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16, (int) (byte)53, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "H@wbm`>}^}";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("H@wbm`>}^}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H@wbm`>}^}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.isSet(0, 0);
      String string0 = "Qaoq";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qaoq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qaoq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "+C{(CH@ic!9B";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+C{(CH@ic!9B");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.typeOfSignature("Jli@t!Gn");
      try { 
        Utility.methodSignatureArgumentTypes("Jli@t!Gn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Jli@t!Gn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("S5%sO%@!");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("S5%sO%@!", "S5%sO%@!", "if_acmpeq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S5%sO%@!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.getSignature("ocs/?4+3W$Kq!aJDp");
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)6;
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)24;
      byte byte1 = (byte) (-51);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-95);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-28);
      Utility.toHexString(byteArray0);
      try { 
        Utility.decode("ocs/?4+3W$Kq!aJDp", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 127;
      Utility.isSet(127, 127);
      String string0 = "Xw\",JXnGnXQ";
      try { 
        Utility.typeOfSignature("Xw\",JXnGnXQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xw\",JXnGnXQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.getSignature("JK3kN*v,B{2$W(1'D5");
      assertEquals("LJK3kN*v,B{2$W(1'D5;", string0);
      
      byte byte0 = Utility.typeOfSignature("LJK3kN*v,B{2$W(1'D5;");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.classOrInterface(157);
      assertEquals("class", string1);
      
      String string2 = Utility.accessToString((-2895), false);
      assertEquals("public final synchronized transient abstract synthetic annotation enum", string2);
      
      int int0 = Utility.clearBit((-1229), (-1229));
      assertEquals((-525517), int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("astore_1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-59);
      byte byte0 = (byte) (-22);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)69;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)69);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble0.toString();
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-22), 174);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = (-854);
      Utility.isSet((-2030), (-854));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.signatureToString("V", true);
      try { 
        Utility.methodSignatureReturnType("void", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "goto_w";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto_w");
      try { 
        Utility.typeOfSignature(", class=<unknown>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , class=<unknown>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("return", true);
      Utility.compactClassName("return", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("return", "return", "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.setBit(39, 39);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1!AGlZ/mH");
      String string0 = "Unreachable default case reached!";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("Invalid signature: ", true);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "M>b{@A\\xtN,J";
      try { 
        Utility.typeOfSignature("M>b{@AxtN,J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M>b{@AxtN,J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-36);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-104);
      byteArray0[1] = (byte) (-112);
      byteArray0[8] = (byte)73;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("$<Wf3j4_)W*P", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W*P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-13);
      byte byte0 = (byte) (-88);
      byteArray0[7] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)40;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      Utility.printArray(objectArray0, false);
      Utility.replace("40, null, null, null", "ret", "ret");
      try { 
        Utility.typeOfSignature("40, null, null, null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 40, null, null, null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}5hL");
      String string0 = "\")";
      Utility.decode("\")", false);
      String string1 = "5lF*,bs36HvZ>3paI5";
      try { 
        Utility.typeOfSignature("5lF*,bs36HvZ>3paI5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5lF*,bs36HvZ>3paI5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.fillup("jDL>O O@~GMbh_s?p=", 160, false, ')');
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.fillup("))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))jDL>O O@~GMbh_s?p=", 201, true, ',');
      Utility.classOrInterface(1687);
      Utility.setBit(1224, (byte) (-91));
      Utility.encode(byteArray0, true);
      Utility.format((-653), 178, true, ',');
      String string0 = "3+\\@z^5GN+XFk";
      Code code0 = null;
      try {
        code0 = new Code(160, (byte)59, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("aQi5KYb}UGp#8uaW,Y_=?UW");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "$B$vThGc$I$b6$m";
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) (byte)84;
      objectArray0[3] = (Object) "$B$vThGc$I$b6$m";
      objectArray0[4] = (Object) (byte)1;
      objectArray0[5] = (Object) (byte)1;
      PrintWriter printWriter0 = mockPrintWriter0.format("Ha#Wke6Q!t5!", objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) (byte)104;
      objectArray1[1] = (Object) byteSequence0;
      Utility.printArray(printWriter0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = ")]2Cs";
      String string0 = "n[t(mq";
      stringArray0[1] = "n[t(mq";
      stringArray0[2] = ")]2Cs";
      stringArray0[3] = ")]2Cs";
      stringArray0[4] = ")]2Cs";
      String string1 = "}msr$#wR)RVM";
      stringArray0[5] = "}msr$#wR)RVM";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(")]2Cs", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[t(mq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      stringArray0[2] = "[]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ret";
      stringArray0[1] = "ret";
      stringArray0[2] = "ret";
      stringArray0[3] = "ret";
      stringArray0[4] = "ret";
      stringArray0[5] = "long";
      Utility.methodTypeToSignature("ret", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ret", "if_icmplt", "?>...", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ret
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, (int) (byte)10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.searchOpcode("1W ]aN459uI>UI");
      String string0 = ">;";
      try { 
        Utility.typeOfSignature(">;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = 0;
      Utility.isSet(1067, 0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("U$^d !Ch'@V4yjyQ", ":", "U$^d !Ch'@V4yjyQ");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = Utility.clearBit((-907), (-1419));
      assertEquals((-2098059), int0);
      
      String string0 = Utility.compactClassName(")", ")", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto");
      Utility.isSet(90, 2415);
      Utility.searchOpcode("+vco77>-");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("\t\t", stringArray0);
      boolean boolean0 = true;
      Utility.printArray((Object[]) stringArray0, true);
      Utility.convertString("\t\t");
      Utility.searchOpcode("\t\t");
      Utility.setBit((short) (-1), (short) (-1));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        constantPool0.getConstant((int) (byte) (-125), (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -125. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, (int) (byte)10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte)85;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "EJfewL";
      Utility.convertString("EJfewL");
      try { 
        Utility.typeOfSignature("EJfewL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EJfewL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("goto");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)86;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)6;
      Utility.toHexString(byteArray0);
      Utility.accessToString(3531);
      Utility.replace("if_icmpne", " not found: ", "public private static volatile transient native abstract strictfp");
      short short0 = Utility.searchOpcode("if_icmpne");
      assertEquals((short)160, short0);
      
      String string0 = Utility.accessToString(1334);
      assertEquals("private protected final synchronized native abstract", string0);
      
      Utility.toHexString(byteArray0);
      String string1 = Utility.convertString("invokestatic");
      assertEquals("invokestatic", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "goto";
      stringArray0[1] = " not found: ";
      stringArray0[2] = "public private static volatile transient native abstract strictfp";
      stringArray0[3] = "private protected final synchronized native abstract";
      stringArray0[4] = "invokestatic";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[5] = "YP8^R\"mBlDth:jW";
      String string2 = Utility.methodTypeToSignature("YP8^R\"mBlDth:jW", stringArray0);
      assertEquals("(Lgoto;Lnot;Lpublic;Lprivate;Linvokestatic;LYP8^R\"mBlDth:jW;)LYP8^R\"mBlDth:jW;", string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("54 56 06", string3);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g=o g\",");
      Utility.getSignature("g=o g\",");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)24;
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('\'');
      Utility.convertString("ret");
      Utility.getSignature("ret");
      Utility.compactClassName("<|~NHTD`=E", true);
      Utility.convertString("<|~NHTD`=E");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "wHk,Y`vwKNn7P", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "Dk*/ PejLIG9t";
      boolean boolean0 = false;
      Utility.signatureToString("Dk*/ PejLIG9t", false);
      String string1 = "The list of suffixes must not be null";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of suffixes must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "M8KUjUD";
      try { 
        Utility.methodSignatureReturnType("M8KUjUD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M8KUjUD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      Utility.typeOfSignature("IJo");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("G$<3g", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G$<3g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = 130;
      Utility.classOrInterface(130);
      Utility.clearBit((-947), 3075);
      Utility.fillup("4q`8^Y|4d43'@~1", 2, true, 'e');
      // Undeclared exception!
      try { 
        Utility.signatureToString("+9iJoJ5Ey>(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+9iJoJ5Ey>('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.searchOpcode("/1P7Nm>y");
      try { 
        Utility.typeOfSignature("compiler version\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: compiler version\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.classOrInterface(186);
      Utility.replace("class", "class", "class");
      Utility.getSignature("class");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)90;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)90, (int) (byte)90, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "(\"";
      try { 
        Utility.methodSignatureArgumentTypes("(\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.fillup("?>...", (-1592), false, 'n');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(250, (-3412));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte) (-21);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1823, (int) (byte) (-13));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 59623. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-84);
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "OO8.";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("OO8.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OO8.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("wide", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      int int0 = 80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 80, 255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "\t\t<";
      Utility.replace("\t\t<", "\t\t<", "\t\t<");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("\t\t<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Utility.accessToString(93, false);
      assertEquals("public protected static final volatile", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "public protected static final volatile";
      objectArray0[1] = (Object) "public protected static final volatile";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "public protected static final volatile";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "public protected static final volatile";
      objectArray0[6] = (Object) "public protected static final volatile";
      objectArray0[7] = (Object) "public protected static final volatile";
      String string1 = Utility.printArray(objectArray0);
      short short0 = Utility.searchOpcode("anewarray");
      assertEquals((short)189, short0);
      
      String string2 = Utility.printArray(objectArray0, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string3 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dstore_3", string3);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Utility.accessToString(8, false);
      Utility.isSet(40, 8);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)58;
      String string0 = Utility.toHexString(byteArray0);
      Utility.accessToString((-393), false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "public private protected final synchronized volatile interface abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) (byte) (-10);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "static";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) (byte)6;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) (byte)59;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = 1;
      Utility.clearBit(1, 1);
      Utility.methodTypeToSignature("instanceof", (String[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, true, true);
      Utility.convertString("3Fd*BZA=hyz'\"aqM_RP");
      Utility.classOrInterface(1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "3Fd*BZA=hyz'\"aqM_RP";
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "3Fd*BZA=hyz'\"aqM_RP";
      objectArray0[4] = (Object) "class";
      Utility.printArray(objectArray0, false);
      Utility.accessToString(1, true);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[9];
      MockFile mockFile0 = new MockFile("public");
      File file0 = MockFile.createTempFile("class", "void", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "boolean");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"boolean\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char char0 = '^';
      Utility.format((-1994), (-1994), true, '^');
      Utility.setBit((-1994), (-1994));
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)49;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (-1968), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.read(byteArray0);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(32767, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)13);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantString1.setStringIndex(3831);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantPool0.dump(dataOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        constantString1.getConstantValue(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3831. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.classOrInterface((-200));
      Utility.accessToString((-2369), false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "public private protected static final synchronized transient interface abstract synthetic annotation enum";
      stringArray0[1] = "public private protected static final synchronized transient interface abstract synthetic annotation enum";
      stringArray0[2] = "public private protected static final synchronized transient interface abstract synthetic annotation enum";
      stringArray0[3] = "interface";
      stringArray0[4] = "public private protected static final synchronized transient interface abstract synthetic annotation enum";
      stringArray0[5] = "public private protected static final synchronized transient interface abstract synthetic annotation enum";
      stringArray0[6] = "interface";
      stringArray0[7] = "public private protected static final synchronized transient interface abstract synthetic annotation enum";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[8] = "public private protected static final synchronized transient interface abstract synthetic annotation enum";
      Utility.methodTypeToSignature("public private protected static final synchronized transient interface abstract synthetic annotation enum", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.compactClassName("oIiG!\f..3o", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oIiG!\f..3o");
      Utility.isSet(5, 41);
      Utility.isSet(5, 5);
      Utility.isJavaIdentifierPart('t');
      Utility.accessToString(41);
      try { 
        Utility.methodSignatureArgumentTypes("public static synchronized", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public static synchronized
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.isSet(31, 77);
      Utility.format(77, 31, false, 'A');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "\"s4mKjhmvvAO";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("AAAAAAAAAAAAAAAAAAAAAAAAAAAAA77", "\"s4mKjhmvvAO");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \"s4mKjhmvvAO
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "ac*";
      boolean boolean0 = true;
      try { 
        Utility.decode("ac*", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)57;
      byte byte0 = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-1);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3446, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = Utility.isSet(5800, (-927));
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("filename\t\t");
      assertEquals("filename\t\t", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)1;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vWErB`d/&7Em");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "invokedynamic";
      objectArray0[1] = (Object) "invokedynamic";
      mockPrintWriter0.write("vWErB`d/&7Em");
      objectArray0[2] = (Object) "invokedynamic";
      objectArray0[3] = (Object) "vWErB`d/&7Em";
      PrintWriter printWriter0 = mockPrintWriter0.format("invokedynamic", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      Utility.replace("invokedynamic", "J_~NlV0YcL", "J_~NlV0YcL");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      int int0 = 95;
      int int1 = (-8);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "K";
      Utility.replace("\t\t<", "K", "K");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("K", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (int) (byte) (-36));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      try { 
        Utility.typeOfSignature("OKz,t@';V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OKz,t@';V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.compactClassName("woRNX<0SAR]8Avuh");
      Utility.compactClassName("woRNX<0SAR]8Avuh", false);
      try { 
        Utility.methodSignatureArgumentTypes("xG+:j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: xG+:j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "*|rAfp}g*";
      try { 
        Utility.typeOfMethodSignature("*|rAfp}g*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *|rAfp}g*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Utility.fillup("org.apache.bcel.classfile.Utility$JavaWriter", 216, false, '7');
      assertEquals("7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777org.apache.bcel.classfile.Utility$JavaWriter", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.accessToString(128);
      String string1 = Utility.compactClassName("transient", false);
      assertTrue(string1.equals((Object)string0));
      
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.Utility");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = 48;
      Utility.classOrInterface(48);
      String string0 = "dATDAQ|]2zO[VKi{";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dATDAQ|]2zO[VKi{", "<", "<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dATDAQ|]2zO[VKi{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ifne", "yk6:", " nK7fVCW=ufO-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.accessToString((-527));
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = Utility.fillup(">0`LsO+lI^Z.AZ", (-1134), true, 'q');
      short short0 = Utility.searchOpcode("Invalid byte tag in constant pool: ");
      assertEquals((short) (-1), short0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Invalid byte tag in constant pool: ");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.println(false);
      objectArray0[0] = (Object) ">0`LsO+lI^Z.AZ";
      PrintStream printStream0 = mockPrintStream0.format("java.lang.Object", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      boolean boolean0 = Utility.isSet(170, (short) (-1));
      assertFalse(boolean0);
      
      String string1 = Utility.replace(">0`LsO+lI^Z.AZ", ", name_and_type_index = ", "#Lr|m\"");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true);
      Utility.isSet(1391, 469);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byte byte0 = (byte)106;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)50;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte1 = (byte)96;
      byteArray0[3] = (byte)96;
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte)96);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 106, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-38);
      Utility.equals(byteArray0, byteArray0);
      Utility.convertString("G%O$j9Gc(9U?c{");
      try { 
        Utility.methodSignatureReturnType("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Wkss");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wkss
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.clearBit(1654, 1654);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-49);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)53;
      Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 53
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "lstore_3";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("lstore_3", "lstore_3");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // lstore_3
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e}";
      stringArray0[1] = "{org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e}";
      stringArray0[2] = "{org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e}";
      stringArray0[3] = "{org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e}";
      stringArray0[4] = "{org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e}";
      stringArray0[5] = "{org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e}";
      Utility.methodTypeToSignature("{org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e}", stringArray0);
      Utility.printArray((Object[]) stringArray0, false);
      Utility.searchOpcode("Invalid type: void[]");
      String string0 = Utility.compactClassName("{org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e, org.evosuite.runtime.testdata.FileSystemHandling@19bef3e}");
      Utility.methodSignatureToString("(L{org/evosuite/runtime/testdata/FileSystemHandling@19bef3e,;L{org/evosuite/runtime/testdata/FileSystemHandling@19bef3e,;L{org/evosuite/runtime/testdata/FileSystemHandling@19bef3e,;L{org/evosuite/runtime/testdata/FileSystemHandling@19bef3e,;L{org/evosuite/runtime/testdata/FileSystemHandling@19bef3e,;L{org/evosuite/runtime/testdata/FileSystemHandling@19bef3e,;)L{org/evosuite/runtime/testdata/FileSystemHandling@19bef3e,;", "GPJ~0\"gFuUi@f", "");
      String string1 = Utility.printArray((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
  }
}
