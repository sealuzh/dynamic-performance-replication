/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:05:42 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.FocusEvent;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelListener;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.beans.EventSetDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.util.Vector;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.Document;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.awt.SunHints;
import weka.clusterers.FilteredClusterer;
import weka.core.BinarySparseInstance;
import weka.core.ChebyshevDistance;
import weka.core.CheckOptionHandler;
import weka.core.EuclideanDistance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.converters.C45Loader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataSourceListener;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainingSetEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      Sorter sorter0 = new Sorter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      BeanVisual beanVisual0 = sorter0.m_visual;
      Filter filter0 = new Filter();
      filter0.setVisual(beanVisual0);
      filter0.useDefaultVisual();
      assertEquals("Sorter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getFilter();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("AllFilter", beanVisual0.getText());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(substringLabeler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.SubstringLabeler : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.performRequest("B=rH($wXws");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // B=rH($wXws not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      filter0.addInstanceListener(classifier0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addTestSetListener(flowByExpression0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.removeTrainingSetListener(attributeSummarizer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      appender0.requestFocus();
      filter0.removeInstanceListener(appender0);
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.useDefaultVisual();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.addTrainingSetListener(scatterPlotMatrix0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      boolean boolean0 = filter0.eventGeneratable("weka/gui/beans/icons/");
      assertFalse(boolean0);
      
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel(wekaTaskMonitor0, false, false, true);
      filter0.removeDataSourceListener((DataSourceListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getConnectedFormat();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, (-1953441301), 1215);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      Associator associator0 = new Associator();
      associator0.getStructure("|");
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      ThreadGroup threadGroup0 = new ThreadGroup("J");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "O");
      filter0.getBorder();
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "O");
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup2);
      filter0.m_filterThread = (Thread) mockThread0;
      sorter0.getStructure("O");
      Thread[] threadArray0 = new Thread[8];
      threadArray0[1] = filter0.m_filterThread;
      filter0.eventGeneratable("otherwise");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Appender appender0 = new Appender();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Appender appender1 = new Appender();
      DataSetEvent dataSetEvent0 = new DataSetEvent(sorter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.stop();
      filter0.notifyInstanceListeners((InstanceEvent) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setDoubleBuffered(false);
      filter0.stop();
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getStructure("elihood");
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null, (-1698), (-1));
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      filter0.getVetoableChangeListeners();
      ThreadGroup threadGroup0 = new ThreadGroup("`5'qLJk_^]Q)rPHKpW");
      MockThread mockThread0 = new MockThread(threadGroup0, "`5'qLJk_^]Q)rPHKpW");
      filter0.m_filterThread = (Thread) mockThread0;
      filter0.enumerateRequests();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      filter0.connectionNotification("`5'qLJk_^]Q)rPHKpW", integer0);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setFilter(attributeSelection0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.notifyInstanceListeners((InstanceEvent) null);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.addInstanceListener(instanceStreamToBatchMaker0);
      assertEquals("AttributeSelection", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      MockThread mockThread0 = new MockThread("");
      MockThread mockThread1 = new MockThread(mockThread0);
      filter0.m_filterThread = (Thread) mockThread0;
      filter0.createToolTip();
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      FlowByExpression flowByExpression1 = new FlowByExpression();
      BeanVisual beanVisual0 = flowByExpression1.m_visual;
      beanVisual0.getComponentListeners();
      filter0.setVisual(beanVisual0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.disconnectionNotification("", mockThread1);
      assertTrue(filter0.isBusy());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Filter filter0 = new Filter();
      TextViewer textViewer0 = new TextViewer();
      filter0.removeTestSetListener(textViewer0);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.setWrappedAlgorithm(spreadSubsample0);
      assertEquals("SpreadSubsample", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.connectionNotification("u-h", "u-h");
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      Logger logger0 = appender0.m_log;
      filter0.setLog((Logger) null);
      FlowByExpression.ExpressionClause.ExpressionType flowByExpression_ExpressionClause_ExpressionType0 = FlowByExpression.ExpressionClause.ExpressionType.GREATERTHANEQUAL;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      filter0.connectionNotification("ers", predictionAppender0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      instanceEvent0.setStatus((-25));
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      filter0.removeFocusListener(defaultCaret0);
      filter0.getUI();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.enumerateRequests();
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      wekaTaskMonitor0.remove((Component) filter0);
      FocusEvent focusEvent0 = new FocusEvent(wekaTaskMonitor0, 0);
      defaultCaret0.focusLost(focusEvent0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      wekaTaskMonitor0.createVolatileImage(0, 2103, imageCapabilities0);
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel(wekaTaskMonitor0, false, false, false);
      filter0.setLog(logPanel0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      filter0.connectionNotification(")!!.xU5[WlEI[", classifierPerformanceEvaluator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = filter0.eventGeneratable(")!!.xU5[WlEI[");
      assertFalse(boolean0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Action.DISPLAYED_MNEMONIC_INDEX_KEY;
      filter0.disconnectionNotification(")!!.xU5[WlEI[", ")!!.xU5[WlEI[");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      Saver saver0 = new Saver();
      saver0.getX();
      filter0.connectionNotification("fPd{", mouseWheelListener0);
      boolean boolean0 = filter0.eventGeneratable("fPd{");
      MockThread mockThread0 = new MockThread("fPd{");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      filter0.removeFocusListener(defaultCaret0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      BeanVisual beanVisual0 = flowByExpression0.m_visual;
      C45Loader c45Loader0 = new C45Loader();
      boolean boolean1 = filter0.eventGeneratable("=+(UC;qf{wd!Oo<)");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      ThreadGroup threadGroup0 = new ThreadGroup("");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      MockThread mockThread0 = new MockThread("p;Mg1/,Ct$MMz:@");
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread1);
      filter0.m_filterThread = (Thread) mockThread2;
      filter0.createToolTip();
      sorter0.getStructure("");
      Thread[] threadArray0 = new Thread[8];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = filter0.m_filterThread;
      filter0.eventGeneratable("otherwise");
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      InstanceEvent instanceEvent0 = new InstanceEvent(mockThread0);
      Appender appender0 = new Appender();
      Appender appender1 = new Appender();
      InstanceEvent instanceEvent1 = appender1.m_ie;
      FlowByExpression flowByExpression0 = new FlowByExpression();
      BeanVisual beanVisual0 = flowByExpression0.m_visual;
      filter0.setVisual(beanVisual0);
      boolean boolean0 = filter0.isBusy();
      assertEquals("FlowByExpression", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      testSetMaker0.eventGeneratable("CF has to be gr}ater than zero and smaller than one!");
      filter0.addDataSourceListener(testSetMaker0);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      Appender appender0 = new Appender();
      Logger logger0 = appender0.m_log;
      FlowByExpression.ExpressionClause.ExpressionType flowByExpression_ExpressionClause_ExpressionType0 = FlowByExpression.ExpressionClause.ExpressionType.GREATERTHANEQUAL;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.grabFocus();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      FlowByExpression flowByExpression0 = new FlowByExpression();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      Filter filter0 = new Filter();
      filter0.addConfigurationListener((ConfigurationListener) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance((Instances) null);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance(instances0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(chebyshevDistance0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      JComponent.getDefaultLocale();
      filter0.connectionNotification("2!G.x]U5[l{I[", classifierPerformanceEvaluator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      SunHints.Value sunHints_Value0 = (SunHints.Value)RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(sunHints_Value0, instances0, 0, (-1), 1, 1);
      filter0.acceptTrainingSet(trainingSetEvent0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        filter0.performRequest(".arff");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .arff not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      MetaBean metaBean0 = new MetaBean();
      Sorter sorter0 = new Sorter();
      ThreadGroup threadGroup0 = new ThreadGroup("J");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      MockThread mockThread0 = new MockThread("");
      MockThread mockThread1 = new MockThread(mockThread0);
      filter0.m_filterThread = (Thread) mockThread0;
      filter0.createToolTip();
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel(wekaTaskMonitor0, false);
      logPanel0.getCursor();
      logPanel0.repaint(1186L, 0, 0, 0, (-38));
      filter0.setLog(logPanel0);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      FlowByExpression flowByExpression1 = new FlowByExpression();
      BeanVisual beanVisual0 = flowByExpression1.m_visual;
      beanVisual0.getComponentListeners();
      filter0.setVisual(beanVisual0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      filter0.getVisual();
      assertTrue(filter0.isBusy());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      filter0.connectionNotification("2!G.x]U5[l{I[", classifierPerformanceEvaluator0);
      boolean boolean0 = filter0.eventGeneratable("2!G.x]U5[l{I[");
      assertFalse(boolean0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Classifier classifier0 = new Classifier();
      TestSetEvent testSetEvent0 = new TestSetEvent(classifier0, instances0);
      testSetEvent0.m_setNumber = (-1698);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      filter0.addMouseWheelListener((MouseWheelListener) null);
      Classifier classifier0 = new Classifier();
      filter0.getInheritsPopupMenu();
      filter0.getInputVerifier();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Saver saver0 = new Saver();
      saver0.getX();
      saver0.requestFocus(true);
      saver0.getInputContext();
      filter0.connectionNotification("model", saver0);
      Random.setNextRandom((-1934218055));
      boolean boolean0 = filter0.eventGeneratable("model");
      assertTrue(boolean0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.setConsumeNonMatching(false);
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      SysErrLog sysErrLog0 = new SysErrLog();
      sysErrLog0.logMessage("<!-- globalinfo-end -->");
      filter0.setLog(sysErrLog0);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.connectionNotification("model", mouseWheelListener1);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = AffineTransformOp.TYPE_NEAREST_NEIGHBOR;
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster0, (MouseMotionListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((MouseWheelListener) aWTEventMulticaster0, (MouseWheelListener) aWTEventMulticaster0);
      filter0.addMouseWheelListener((MouseWheelListener) null);
      Classifier classifier0 = new Classifier();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Saver saver0 = new Saver();
      Dimension dimension0 = filter0.getMinimumSize();
      saver0.getX();
      dimension0.height = 0;
      filter0.connectionNotification("model", saver0);
      Random.setNextRandom(0);
      filter0.eventGeneratable(".bsi");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.addHierarchyBoundsListener(aWTEventMulticaster1);
      Filter filter1 = new Filter();
      filter1.grabFocus();
      AllFilter allFilter0 = new AllFilter();
      Appender appender0 = new Appender();
      BeanVisual beanVisual0 = appender0.m_visual;
      filter0.setVisual(beanVisual0);
      System.setCurrentTimeMillis(0);
      filter0.addInstanceListener(filter1);
      Filter filter2 = new Filter();
      filter0.getVisual();
      filter0.notifyInstanceListeners((InstanceEvent) null);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      filter0.stop();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      filter0.eventGeneratable("configuration");
      AttributeSelection attributeSelection0 = new AttributeSelection();
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.shouldAllThrowIOExceptions();
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      WekaTaskMonitor wekaTaskMonitor1 = new WekaTaskMonitor();
      wekaTaskMonitor0.transferFocusDownCycle();
      int int0 = wekaTaskMonitor0.getWidth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Filter filter0 = new Filter();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      Classifier classifier0 = new Classifier();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Saver saver0 = new Saver();
      saver0.getX();
      filter0.getInputContext();
      boolean boolean0 = filter0.eventGeneratable("model");
      assertFalse(boolean0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      classifier0.setVisual((BeanVisual) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(false);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      flowByExpression0.getConnectedFormat();
      DataSetEvent dataSetEvent0 = new DataSetEvent(textDirectoryLoader0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      classifier0.remove((Component) filter0);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      substringLabeler0.doLayout();
      BeanVisual beanVisual0 = flowByExpression0.m_visual;
      boolean boolean1 = classifier0.m_reject;
      Filter filter1 = new Filter();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      Random.setNextRandom(139);
      Random.setNextRandom(2342);
      Filter filter2 = new Filter();
      filter2.stop();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance((Instances) null);
      ConfigurationListener configurationListener1 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter2.addConfigurationListener(configurationListener1);
      assertEquals("AllFilter", filter2.getCustomName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.useDefaultVisual();
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      add0.setNominalLabels("kF!J/`pqsN]");
      weka.filters.Filter.makeCopies(add0, 670);
      filter0.setFilter(add0);
      filter0.getWrappedAlgorithm();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      SubstringReplacer substringReplacer1 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      SubstringReplacer substringReplacer2 = new SubstringReplacer();
      AllFilter allFilter0 = new AllFilter();
      filter0.disconnectionNotification("m9\u0017&%>J>Fe$JbYkU", allFilter0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      add0.setNominalLabels("kF!N_;pqsN]");
      weka.filters.Filter.makeCopies(add0, 670);
      filter0.setFilter(add0);
      filter0.getWrappedAlgorithm();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      filter0.getBounds();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      InstanceEvent instanceEvent1 = substringReplacer0.m_ie;
      instanceEvent0.setStatus(1);
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      MultiListUI multiListUI0 = new MultiListUI();
      DefaultComboBoxModel<FilterInputStream> defaultComboBoxModel0 = null;
      try {
        defaultComboBoxModel0 = new DefaultComboBoxModel<FilterInputStream>((Vector<FilterInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DefaultComboBoxModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getToolkit();
      filter0.useDefaultVisual();
      filter0.getAccessibleContext();
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      add0.setNominalLabels("kF!J/`pqsN]");
      weka.filters.Filter.makeCopies(add0, 670);
      filter0.setFilter(add0);
      Add add1 = new Add();
      Random.setNextRandom(670);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = new Rectangle();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      int[] intArray0 = new int[6];
      intArray0[1] = 670;
      intArray0[2] = 670;
      intArray0[3] = 670;
      intArray0[4] = 670;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.25, intArray0, 670);
      InstanceEvent instanceEvent0 = new InstanceEvent(attributeSummarizer0, binarySparseInstance0, (-1726229785));
      filter0.acceptInstance(instanceEvent0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getToolkit();
      filter0.useDefaultVisual();
      filter0.getAccessibleContext();
      Add add0 = new Add();
      add0.setNominalLabels("kF!J/`pqsN]");
      filter0.setFilter(add0);
      filter0.getWrappedAlgorithm();
      Random.setNextRandom(2);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[6];
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[5] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 2);
      binarySparseInstance0.setMissing((-733));
      InstanceEvent instanceEvent0 = new InstanceEvent(attributeSummarizer0, binarySparseInstance0, 2);
      filter0.acceptInstance(instanceEvent0);
      C45Loader c45Loader0 = new C45Loader();
      filter0.setCustomName(".names");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      add0.setNominalLabels("configuration");
      weka.filters.Filter.makeCopies(add0, 670);
      filter0.setFilter(add0);
      Add add1 = new Add();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0);
      SunHints.Value sunHints_Value0 = (SunHints.Value)RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB;
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      instanceEvent1.setStatus(486);
      filter0.acceptInstance(instanceEvent1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ImageSaver imageSaver0 = new ImageSaver();
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      add0.setNominalLabels("kF!J/`pqsN]");
      weka.filters.Filter.makeCopies(add0, 1);
      Filter filter0 = new Filter();
      Random.setNextRandom(1);
      filter0.connectionAllowed("kF!J/`pqsN]");
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = new Rectangle();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      rectangle0.x = 1415;
      Loader loader0 = new Loader();
      loader0.getStructure("kF!J/`pqsN]");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(add0, (Instances) null, 2000, 608, 0, (-499));
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      System.setCurrentTimeMillis(608);
      filter0.addTrainingSetListener(attributeSummarizer0);
      Filter filter1 = new Filter();
      filter1.getVisual();
      filter0.getVisual();
      filter0.addTrainingSetListener(attributeSummarizer0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter1.removeDataSourceListener(crossValidationFoldMaker0);
      filter0.acceptTrainingSet(trainingSetEvent0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      filter0.getKeyListeners();
      filter0.eventGeneratable("!?/O=qCG?&|-");
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      Classifier classifier0 = new Classifier();
      classifier0.remove((Component) classifierPerformanceEvaluator0);
      Filter filter1 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      AllFilter allFilter1 = new AllFilter();
      Classifier classifier1 = new Classifier();
      classifier0.remove((Component) filter1);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      substringLabeler1.doLayout();
      BeanVisual beanVisual0 = flowByExpression0.m_visual;
      boolean boolean0 = substringLabeler1.m_nominalBinary;
      Filter filter2 = new Filter();
      Random.setNextRandom(1);
      String string0 = Document.StreamDescriptionProperty;
      Random.setNextRandom((-747));
      filter2.performRequest("Stop");
      filter0.addTrainingSetListener(flowByExpression0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      add0.setNominalLabels("configuration");
      weka.filters.Filter.makeCopies(add0, 670);
      filter0.setFilter(add0);
      Add add1 = new Add();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Classifier classifier0 = new Classifier();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      SunHints.Value sunHints_Value0 = (SunHints.Value)RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB;
      EuclideanDistance euclideanDistance1 = new EuclideanDistance(instances0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(euclideanDistance1, instances0, 2, 0, (-399), 4513);
      filter0.acceptTrainingSet(trainingSetEvent0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances1 = substringLabeler0.m_outputStructure;
      PredictionAppender predictionAppender0 = new PredictionAppender();
      filter0.connectionNotification("@relation", substringLabeler0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      Filter filter1 = new Filter();
      filter0.acceptTestSet(testSetEvent0);
      TestSetEvent testSetEvent1 = new TestSetEvent(instanceEvent0, (Instances) null);
      filter1.setCustomName(".arff");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      add0.setNominalLabels("configuration");
      weka.filters.Filter.makeCopies(add0, 670);
      filter0.setFilter(add0);
      Add add1 = new Add();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Classifier classifier0 = new Classifier();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      SunHints.Value sunHints_Value0 = (SunHints.Value)RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB;
      EuclideanDistance euclideanDistance1 = new EuclideanDistance(instances0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(euclideanDistance1, instances0, 2, 0, (-399), 4513);
      filter0.acceptTrainingSet(trainingSetEvent0);
      Appender appender0 = new Appender();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Appender appender1 = new Appender();
      InstanceEvent instanceEvent0 = new InstanceEvent(add0, instances0);
      filter0.acceptInstance(instanceEvent0);
      AWTKeyStroke.getAWTKeyStroke('?');
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      DataSetEvent dataSetEvent0 = new DataSetEvent(spreadSubsample0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.stop();
      filter0.notifyInstanceListeners(instanceEvent0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter1 = new Filter();
      filter1.isBusy();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Add add0 = new Add();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      add0.setNominalLabels("configuration");
      weka.filters.Filter.makeCopies(add0, 670);
      filter0.setFilter(add0);
      Add add1 = new Add();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Classifier classifier0 = new Classifier();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      SunHints.Value sunHints_Value0 = (SunHints.Value)RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB;
      EuclideanDistance euclideanDistance1 = new EuclideanDistance(instances0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(euclideanDistance1, instances0, 2, 0, (-399), 4513);
      filter0.acceptTrainingSet(trainingSetEvent0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances1 = substringLabeler0.m_outputStructure;
      FlowByExpression flowByExpression0 = new FlowByExpression();
      FlowByExpression flowByExpression1 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression1.m_ie;
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent1 = substringReplacer0.m_ie;
      instanceEvent0.setStatus((-3765));
      flowByExpression1.isFocusOwner();
      instanceEvent1.setStatus(1458);
      filter0.acceptInstance(instanceEvent0);
      BeanVisual beanVisual0 = flowByExpression0.getVisual();
      filter0.setVisual(beanVisual0);
      MultiListUI multiListUI0 = new MultiListUI();
      DefaultComboBoxModel<FilterInputStream> defaultComboBoxModel0 = null;
      try {
        defaultComboBoxModel0 = new DefaultComboBoxModel<FilterInputStream>((Vector<FilterInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DefaultComboBoxModel", e);
      }
  }
}
