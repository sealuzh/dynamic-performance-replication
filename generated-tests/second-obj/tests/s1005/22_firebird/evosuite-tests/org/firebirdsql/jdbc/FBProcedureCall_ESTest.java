/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:16:51 GMT 2018
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.firebirdsql.jdbc.FBProcedureCall;
import org.firebirdsql.jdbc.FBProcedureParam;
import org.firebirdsql.jdbc.FBSQLException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBProcedureCall_ESTest extends FBProcedureCall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam(64);
      assertEquals((-1), fBProcedureParam0.getIndex());
      
      fBProcedureParam0.setIndex(64);
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      int int0 = fBProcedureCall0.mapOutParamIndexToPosition(64);
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(2522, "se");
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      assertEquals(2522, fBProcedureParam0.getPosition());
      
      int int0 = fBProcedureCall0.mapOutParamIndexToPosition(2522);
      assertEquals(2522, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getInputParam(2121);
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      assertTrue(FBProcedureCall.OLD_CALLABLE_STATEMENT_COMPATIBILITY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = new FBProcedureParam((-684), "");
      // Undeclared exception!
      try { 
        fBProcedureCall0.addOutputParam(fBProcedureParam0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -684
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(12, "");
      assertEquals(12, fBProcedureParam0.getPosition());
      
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.getInputParam(12);
      assertEquals(0, fBProcedureParam1.getPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      Object object0 = fBProcedureCall0.clone();
      fBProcedureCall0.getOutputParams();
      assertNotSame(fBProcedureCall0, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(11, "S.+1xXU8VYg>2z");
      assertEquals(11, fBProcedureParam0.getPosition());
      
      Object object0 = fBProcedureCall0.clone();
      assertNotSame(object0, fBProcedureCall0);
      assertTrue(object0.equals((Object)fBProcedureCall0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(12, "");
      assertEquals(12, fBProcedureParam0.getPosition());
      
      String string0 = fBProcedureCall0.getSQL(false);
      assertEquals("EXECUTE PROCEDURE null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.getInputParam(15);
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(15, "#v*Q8kWUyY$`");
      assertEquals(15, fBProcedureParam0.getPosition());
      
      fBProcedureCall0.getName();
      String string0 = fBProcedureCall0.getSQL(true);
      assertEquals("SELECT * FROM null(null, #v*Q8kWUyY$`)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(635, "You cannot set value of an non-existing parameter.");
      assertEquals(635, fBProcedureParam0.getPosition());
      
      String string0 = fBProcedureCall0.getSQL(true);
      assertEquals("SELECT * FROM null(You cannot set value of an non-existing parameter.)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      try { 
        fBProcedureCall0.mapOutParamIndexToPosition(0, false);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // Specified parameter does not exist.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureCall", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      Object object0 = fBProcedureCall0.clone();
      boolean boolean0 = fBProcedureCall0.equals(object0);
      assertNotSame(object0, fBProcedureCall0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      int int0 = 64;
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam(64);
      try { 
        fBProcedureParam0.setValue(fBProcedureCall0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot set value of an non-existing parameter.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureCall$NullParam", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(1184, "'d<");
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      assertEquals(1184, fBProcedureParam0.getPosition());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      // Undeclared exception!
      try { 
        fBProcedureCall0.addParam((-684), "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -684
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      // Undeclared exception!
      try { 
        fBProcedureCall0.addParam((-210982157), "gN&%&v+");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -210982157
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      try { 
        fBProcedureCall0.registerOutParam(1660, 1660);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // Cannot find parameter with the specified position.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureCall", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureCall fBProcedureCall1 = (FBProcedureCall)fBProcedureCall0.clone();
      fBProcedureCall0.setName("EXECUTE PROCEDURE");
      boolean boolean0 = fBProcedureCall0.equals(fBProcedureCall1);
      assertTrue(boolean0);
      
      fBProcedureCall1.addParam(4, "EXECUTE PROCEDURE");
      String string0 = fBProcedureCall1.getSQL(true);
      assertEquals("SELECT * FROM null(EXECUTE PROCEDURE)", string0);
      assertFalse(fBProcedureCall1.equals((Object)fBProcedureCall0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.addParam(855, "\"QH!?'*<CMx6qS8jv");
      fBProcedureCall0.getSQL(false);
      fBProcedureCall0.setName("m4~ssMwsm!:|T");
      assertTrue(FBProcedureCall.OLD_CALLABLE_STATEMENT_COMPATIBILITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam((-1));
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      fBProcedureCall0.addParam(855, "\"QH!?'*<CMx6qS8jv");
      fBProcedureCall0.getInputParam(855);
      // Undeclared exception!
      try { 
        fBProcedureCall0.getSQL(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 855
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = new FBProcedureParam();
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureCall0.registerOutParam((-1), 41);
      Object object0 = fBProcedureCall0.clone();
      assertNotSame(object0, fBProcedureCall0);
      assertTrue(object0.equals((Object)fBProcedureCall0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(888, "\"QH!?'*<CMx6qS8jv");
      fBProcedureCall0.getInputParams();
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.getOutputParam(888);
      fBProcedureParam0.setType(888);
      fBProcedureParam1.setType(888);
      assertEquals(64, fBProcedureParam1.getIndex());
      
      fBProcedureParam1.setIndex(888);
      fBProcedureCall0.setName("\"QH!?'*<CMx6qS8jv");
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      fBProcedureParam1.setType((-38765950));
      fBProcedureCall0.mapOutParamIndexToPosition((-38765950));
      fBProcedureCall0.getOutputParams();
      String string0 = fBProcedureCall0.getSQL(true);
      assertEquals("SELECT * FROM \"QH!?'*<CMx6qS8jv(\"QH!?'*<CMx6qS8jv)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.setName("1s");
      fBProcedureCall0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam(2754);
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      Object object0 = fBProcedureCall0.clone();
      assertNotSame(object0, fBProcedureCall0);
      assertTrue(object0.equals((Object)fBProcedureCall0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = new FBProcedureParam(2522, "");
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      int int0 = fBProcedureCall0.mapOutParamIndexToPosition(2522);
      assertEquals(2522, int0);
      
      Object object0 = fBProcedureCall0.clone();
      assertNotSame(object0, fBProcedureCall0);
      assertTrue(object0.equals((Object)fBProcedureCall0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(905, "\"Q!?'*<CMx6qS8jv");
      fBProcedureParam0.setType(905);
      Object object0 = new Object();
      fBProcedureParam0.setType(905);
      fBProcedureParam0.setValue("\"Q!?'*<CMx6qS8jv");
      Object object1 = fBProcedureCall0.clone();
      FBProcedureParam fBProcedureParam1 = new FBProcedureParam();
      String string0 = fBProcedureCall0.getSQL(true);
      assertEquals("SELECT * FROM null(\"Q!?'*<CMx6qS8jv)", string0);
      
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      assertNotSame(fBProcedureCall0, object1);
      assertTrue(fBProcedureCall0.equals((Object)object1));
      assertEquals(905, fBProcedureParam0.getPosition());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureCall fBProcedureCall1 = new FBProcedureCall();
      int int0 = (-1);
      String string0 = "07001";
      fBProcedureCall1.setName("07001");
      FBProcedureParam fBProcedureParam0 = new FBProcedureParam((-1), "07001");
      fBProcedureCall1.mapOutParamIndexToPosition((-1));
      fBProcedureCall0.equals(fBProcedureCall1);
      // Undeclared exception!
      try { 
        fBProcedureCall1.getInputParam((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(918, "\"QH!?'*<CMx6qS8jv");
      fBProcedureParam0.setIndex(918);
      fBProcedureCall0.clone();
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.addParam(1, "\"QH!?'*<CMx6qS8jv");
      fBProcedureParam1.clone();
      fBProcedureParam0.setIndex(1);
      fBProcedureCall0.getName();
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      try { 
        fBProcedureCall0.getSQL(false);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // Value of parameter -1 not set and it was not registered as output parameter.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureCall", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = new FBProcedureParam(1734, "hk_.mb");
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.addParam(1734, "hk_.mb");
      fBProcedureCall0.addOutputParam(fBProcedureParam1);
      assertEquals(1734, fBProcedureParam1.getPosition());
      
      fBProcedureCall0.registerOutParam((-1), 1734);
      Object object0 = fBProcedureCall0.clone();
      fBProcedureCall0.getName();
      assertTrue(fBProcedureCall0.equals((Object)object0));
      assertNotSame(fBProcedureCall0, object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(843, "\"QH!?'*<CMx6qS8jv");
      Object object0 = new Object();
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureParam0.setType(843);
      fBProcedureParam0.setValue(object0);
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      fBProcedureCall0.registerOutParam((-1), (-1));
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.getOutputParam((-1));
      boolean boolean0 = fBProcedureCall0.equals(fBProcedureParam1);
      assertEquals(843, fBProcedureParam1.getPosition());
      assertFalse(boolean0);
      assertEquals((-1), fBProcedureParam1.getType());
      
      String string0 = fBProcedureCall0.getSQL(true);
      assertEquals("SELECT * FROM null(\"QH!?'*<CMx6qS8jv)", string0);
      
      List<FBProcedureParam> list0 = fBProcedureCall0.getInputParams();
      assertEquals(844, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(861, "\"QH!?'*<CMx6qS8jv");
      Object object0 = new Object();
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureParam0.setType(861);
      fBProcedureParam0.setValue(object0);
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      fBProcedureCall0.registerOutParam((-1), (-1));
      Object object1 = fBProcedureParam0.clone();
      boolean boolean0 = FBProcedureCall.OLD_CALLABLE_STATEMENT_COMPATIBILITY;
      fBProcedureCall0.equals(object1);
      assertEquals((-1), fBProcedureParam0.getType());
      
      fBProcedureCall0.getSQL(true);
      int int0 = fBProcedureCall0.mapOutParamIndexToPosition((-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.addParam(2463, "OUt!HT");
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam(2463);
      assertFalse(fBProcedureParam0.isValueSet());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      String string0 = fBProcedureCall0.getSQL(true);
      assertEquals("SELECT * FROM null", string0);
      
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(31, "Inyf)zPOZ3|");
      assertEquals("Inyf)zPOZ3|", fBProcedureParam0.getParamValue());
      
      List<FBProcedureParam> list0 = fBProcedureCall0.getInputParams();
      assertEquals(32, list0.size());
  }
}
