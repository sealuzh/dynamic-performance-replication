/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:14:34 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.File;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.Spliterator;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;
import java.util.function.LongBinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      TypeUtils.castToSqlTime(byte0);
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass(";;{d}!B{_QiDe%Q^V?");
      String string0 = "c,aS{+gz~%Ht|!Y)J/";
      ThreadGroup threadGroup0 = new ThreadGroup("c,aS{+gz~%Ht|!Y)J/");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<AtomicLong> class0 = AtomicLong.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, true);
      Random.setNextRandom((-1247));
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      Class<Timestamp> class1 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) classLoader0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Properties properties0 = new Properties();
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      AtomicLong atomicLong0 = new AtomicLong((-3131L));
      TypeUtils.castToLong(atomicLong0);
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig1 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONPDeserializer0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.JSONPDeserializer@e4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class0, parserConfig0);
      Class<Long> class1 = Long.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeUtils.isPath(class0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Class<SQLDataException> class1 = SQLDataException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) type0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      LinkageError linkageError0 = new LinkageError("getName", noClassDefFoundError0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(linkageError0);
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockIllegalStateException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.lang.MockThrowable: java.lang.LinkageError: getName
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Hashtable<SQLDataException, StackTraceElementDeserializer> hashtable0 = new Hashtable<SQLDataException, StackTraceElementDeserializer>();
      Class<Short> class0 = Short.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("parseLong error, field : ", "to");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("parseLong error, field : ", "j", (-2021161078), sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("parseLong error, field : ", "parseLong error, field : ", sQLRecoverableException0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      hashtable0.put(sQLDataException0, stackTraceElementDeserializer0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashtable0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException cannot be cast to java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      ParserConfig parserConfig1 = new ParserConfig();
      Class<GridBagConstraints> class1 = GridBagConstraints.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(numberDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@ef
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      String string0 = "<init>";
      Method method0 = null;
      String string1 = "{";
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "{", fieldArray0);
      int int0 = 56;
      Class<NumberFormat> class1 = NumberFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.loadClass("d]!7zc7");
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("isisTrueVolatile", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : [checksum=0x480651ac]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "78X+:i");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("78X+:i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"78X+:i\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getGenericParamType(class0);
      java.util.IdentityHashMap<InternalError, SQLInvalidAuthorizationSpecException> identityHashMap0 = new java.util.IdentityHashMap<InternalError, SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(identityHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.util\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      AtomicLong atomicLong0 = new AtomicLong(2010L);
      atomicLong0.decrementAndGet();
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      TypeUtils.castToInt(atomicLong0);
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ljava.awt.Font", classLoader0, true);
      TypeUtils.getGenericParamType((Type) null);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypeUtils.isPath(class0);
      Class<?> class1 = TypeUtils.loadClass("Ljava.awt.Font", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONObject jSONObject0 = new JSONObject(5176);
      JSONObject jSONObject1 = jSONObject0.fluentPut("kotlin.jvm.internal.DefaultConstructorMarker", class0);
      Class<Time> class1 = Time.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(45);
      JSONObject jSONObject1 = jSONObject0.fluentPut("EQ", "EQ");
      jSONObject1.put("1.2.46", (Object) jSONObject0);
      Class<Method> class0 = Method.class;
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ClassLoader.getSystemClassLoader();
      TypeUtils.fnv1a_64("R3Tim.]U+)xC1l,w");
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      AtomicLong atomicLong0 = new AtomicLong(2010L);
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      TypeUtils.castToInt(atomicLong0);
      System.setCurrentTimeMillis((-1363L));
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("SqX");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("(I)Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : (I)Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.isGenericParamType(class0);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      Boolean boolean0 = new Boolean(false);
      TypeUtils.getSerializeFeatures(class1);
      String string0 = "org.springframework.security.core.authority.SimpleGrantedAuthority";
      TypeUtils.getClassFromMapping("org.springframework.security.core.authority.SimpleGrantedAuthority");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(23, 23, 23);
      concurrentHashMap0.put("ErrorCode", "ErrorCode");
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      Class<Annotation> class1 = Annotation.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      TypeUtils.isHibernateInitialized((Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ErrorCode");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@2b130b3c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      TypeUtils.castToString(gridBagConstraints0);
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, (PropertyNamingStrategy) null, false);
      parserConfig0.addAccept("java.awt.GridBagConstraints@0000000001");
      Class<Float> class1 = Float.class;
      Class<Float> class2 = Float.class;
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "java.awt.GridBagConstraints@0000000001", class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeUtils.isProxy(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "!");
      TypeUtils.castToDate((Object) null);
      Locale locale0 = Locale.PRC;
      PageAttributes pageAttributes0 = new PageAttributes();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.isProxy(class0);
      TypeUtils.loadClass("=j9-7V@<?[F15]g");
      TypeUtils typeUtils0 = new TypeUtils();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("kotlin.Metadata", "!");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<NullPointerException> class0 = NullPointerException.class;
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap1, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<FieldInfo> class0 = FieldInfo.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      TypeUtils.fnv1a_64_lower("/0(D=a+#Ws'0<x");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("I}15V}kjaIsqxQz", hashMap0);
      TypeUtils.isNumber(":&}(:b");
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      java.util.IdentityHashMap<NoClassDefFoundError, Jdk8DateCodec> identityHashMap0 = new java.util.IdentityHashMap<NoClassDefFoundError, Jdk8DateCodec>();
      TypeUtils.getClassFromMapping("getWidth");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Type[] typeArray0 = new Type[5];
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      typeArray0[1] = null;
      typeArray0[2] = null;
      typeArray0[3] = null;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[3]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0.propertyNamingStrategy, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@b9f531f5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils.loadClass("0000-00-00T00:00:00.000");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("0000-00-00T00:00:00.000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 0000-00-00T00:00:00.000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Type[] typeArray0 = new Type[3];
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      ParserConfig.getGlobalInstance();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      TypeUtils.loadClass("java.nio.file.Path");
      System.setCurrentTimeMillis(1802L);
      TypeUtils.getGenericParamType(typeArray0[1]);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      timeUnit0.sleep(1802L);
      Float float0 = new Float((double) 1802L);
      Class<Integer> class1 = Integer.class;
      Integer integer0 = TypeUtils.castToJavaBean((Object) float0, class1);
      assertEquals(1802, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("h?-SA~JkZc9", "(I)Z");
      TypeUtils.castToShort((Object) null);
      TypeUtils.castToBytes("(I)Z");
      Locale locale0 = TypeUtils.toLocale("(I)Z");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("i/ ;hA*)P<F{q", "i/ ;hA*)P<F{q");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLTimeoutException: i/ ;hA*)P<F{q
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(2446L);
      AtomicLong atomicLong1 = new AtomicLong(2446L);
      atomicLong1.decrementAndGet();
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TreeMap<UUID, DecimalFormatSymbols> treeMap0 = new TreeMap<UUID, DecimalFormatSymbols>();
      Class<IllegalAccessError> class1 = IllegalAccessError.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = TypeUtils.decapitalize("~HB{3>%Sb[vN5");
      assertEquals("~HB{3>%Sb[vN5", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<Integer> class0 = Integer.TYPE;
      Class<TimeZone> class1 = TimeZone.class;
      String[] stringArray0 = new String[4];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OP0G|G");
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      treeMap1.replace("nYjd44#@bfjr<", "nYjd44#@bfjr<");
      Class<RenderingHints> class0 = RenderingHints.class;
      treeMap0.put("nYjd44#@bfjr<", "vuN.U`K[$=");
      treeMap1.put("Ljava.util.concurrent.ConcurrentSkipListSet", "Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      int int0 = Opcodes.DUP;
      ClassLoader.getSystemClassLoader();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "oracle.sql.TIMESTAMP");
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(linkedHashMap0);
      TypeUtils.getClassFromMapping("/4t'$9");
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) sQLClientInfoException0, (Type) class0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      Boolean boolean1 = new Boolean(false);
      TypeUtils.getClassFromMapping("org.springframework.security.core.authority.SimpleGrantedAuthority");
      boolean boolean2 = TypeUtils.isNumber("%Ad?");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(I)Z");
      Class<Currency> class0 = Currency.class;
      TypeUtils.getParserFeatures(class0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.util.Currency
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(40);
      atomicInteger0.decrementAndGet();
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intBinaryOperator0).applyAsInt(anyInt() , anyInt());
      atomicInteger0.accumulateAndGet(40, intBinaryOperator0);
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intUnaryOperator0).applyAsInt(anyInt());
      atomicInteger0.updateAndGet(intUnaryOperator0);
      atomicInteger0.getAndDecrement();
      Class<Byte> class0 = Byte.class;
      TypeUtils.castToJavaBean((Object) atomicInteger0, class0);
      TypeUtils.fnv1a_64("Ljava.util.concurrent.ConcurrentSkipListMap");
      String string0 = "}'wR";
      TypeUtils.decapitalize("}'wR");
      SecurityException securityException0 = new SecurityException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("bGbRmRDK+)xHDp6x ,");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("}'wR", "Ljava.util.concurrent.ConcurrentSkipListMap", "Ljava.util.concurrent.ConcurrentSkipListMap", 23);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("]S(?f]'93#", "bGbRmRDK+)xHDp6x ,", "]S(?f]'93#", 40);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Ljava.awt.Point", "Lorg.springframework.util.LinkedMultiValueMap", "com.alibaba.fastjson.JSONPathException", 23);
      stackTraceElementArray0[2] = stackTraceElement2;
      securityException0.setStackTrace(stackTraceElementArray0);
      securityException0.addSuppressed(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(securityException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.SecurityException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 0.0F);
      TypeUtils.castToShort(float0);
      Class<SQLException> class0 = SQLException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "toL");
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.isNumber("toL");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("toL");
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^{Nn&16m`1:iM?vP=");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      SecurityException securityException0 = new SecurityException();
      TypeUtils.isHibernateInitialized(timeDeserializer0);
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.getParserFeatures(class0);
      TreeMap<Point, Byte> treeMap0 = new TreeMap<Point, Byte>();
      TypeUtils.castToShort((Object) null);
      Class<?> class1 = TypeUtils.loadClass("can not cast to Date, value : ");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(I)Z");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getSerializeFeatures(class0);
      ClassLoader.getSystemClassLoader();
      TypeUtils.isNumber("~^CXB=kq3F+aL>");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sqlDateDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "Tv+ZPr~";
      ClassLoader.getSystemClassLoader();
      Class<DataTruncation> class0 = DataTruncation.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      MockThread mockThread0 = new MockThread("Tv+ZPr~");
      mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Tv+ZPr~", (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "B";
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("B");
      TypeUtils.castToString(noSuchMethodError0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      SortedMap<String, String> sortedMap0 = treeMap0.headMap("nYjd44#@bfjr<");
      Short.compare((short)39, (short)91);
      Short.toUnsignedLong((short)21);
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.isNumber("java.lang.NoSuchMethodError@0000000001");
      Class<Boolean> class0 = Boolean.class;
      treeMap0.putAll(sortedMap0);
      TypeUtils.isProxy(class0);
      List<FieldInfo> list0 = new LinkedList<FieldInfo>();
      Class<Currency> class1 = Currency.class;
      Class<Currency> class2 = Currency.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "nYjd44#@bfjr<", class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(jSONPDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JSONPDeserializer@f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertNotNull(illegalThreadStateException0);
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.toString());
      
      Throwable throwable0 = illegalThreadStateException0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(illegalThreadStateException0, throwable0);
      assertSame(throwable0, illegalThreadStateException0);
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.toString());
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", throwable0.toString());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", throwable0.getMessage());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<InstantiationException> class0 = InstantiationException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertNotNull(javaBeanDeserializer0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("V0p", illegalThreadStateException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: V0p", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("V0p", sQLTransactionRollbackException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransactionRollbackException: V0p
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Locale locale0 = TypeUtils.toLocale("");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      Class<?> class0 = TypeUtils.loadClass("", classLoader0);
      assertNull(class0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      InstantiationException instantiationException0 = new InstantiationException("");
      assertNotNull(instantiationException0);
      assertEquals("", instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException: ", instantiationException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(instantiationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InstantiationException: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      Time time0 = TypeUtils.castToSqlTime(byte0);
      assertNotNull(time0);
      assertEquals("00:00:00", time0.toString());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertNotNull(type1);
      assertFalse(type1.equals((Object)type0));
      
      Class<?> class0 = TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?");
      assertNull(class0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?", classLoader1, true);
      assertNull(class1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<MockMinguoDate> class2 = MockMinguoDate.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class2, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      long long0 = TypeUtils.fnv1a_64_lower("frame");
      assertEquals((-2822574621311413722L), long0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("frame");
      assertNotNull(threadGroup0);
      assertEquals("frame", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "getNumberInstance");
      assertNotNull(mockThread0);
      assertEquals("frame", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals("frame", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Class<?> class2 = TypeUtils.loadClass("Currency", classLoader0, false);
      assertNull(class2);
      assertEquals("frame", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      System.setCurrentTimeMillis((-704L));
      Class<?> class0 = TypeUtils.loadClass("Set");
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      long long0 = TypeUtils.fnv1a_64_lower("fastjson.compatibleWithJavaBean");
      assertEquals((-3779014738112645319L), long0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class2.toString());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("FwZ~&l_]>>(");
      assertNotNull(locale0);
      assertEquals("]>>(", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fwz~&l_]>>(", locale0.toString());
      assertEquals("fwz~&l", locale0.getLanguage());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      boolean boolean1 = TypeUtils.isPath(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized("FwZ~&l_]>>(");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Random.setNextRandom(476);
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FwZ~&l_]>>(");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string0 = TypeUtils.decapitalize("FwZ~&l_]>>(");
      assertEquals("fwZ~&l_]>>(", string0);
      assertNotNull(string0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.sql.SQLClientInfoException", class1.toString());
      assertFalse(class1.isAnnotation());
      
      Class<?> class2 = TypeUtils.getRawClass(class1);
      assertNotNull(class2);
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.sql.SQLClientInfoException", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.sql.SQLClientInfoException", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("FwZ~&l_]>>(");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fwz~&l_]>>(", locale0.toString());
      assertEquals("]>>(", locale0.getCountry());
      assertEquals("fwz~&l", locale0.getLanguage());
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized("FwZ~&l_]>>(");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Random.setNextRandom(476);
      Class<SQLWarning> class1 = SQLWarning.class;
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FwZ~&l_]>>(");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertNotNull(illegalThreadStateException0);
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.toString());
      
      Throwable throwable0 = illegalThreadStateException0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(illegalThreadStateException0, throwable0);
      assertSame(throwable0, illegalThreadStateException0);
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.toString());
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", throwable0.toString());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", throwable0.getMessage());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ljava.util.concurrent.ConcurrentSkipListMap";
      stringArray0[1] = "Ljava.util.concurrent.ConcurrentSkipListMap";
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class2 = javaBeanSerializer0.getType();
      assertNotNull(class2);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.JSONPDeserializer", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      
      Class<?> class3 = TypeUtils.getRawClass(class2);
      assertNotNull(class3);
      assertSame(class2, class3);
      assertSame(class3, class2);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.JSONPDeserializer", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.JSONPDeserializer", class3.toString());
      assertFalse(class3.isAnnotation());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[5]);
      assertNotNull(parameterizedTypeImpl1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(parameterizedTypeImpl1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@bc67fed8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("(I)Z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(I)Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      AtomicLong atomicLong0 = new AtomicLong(2010L);
      assertNotNull(atomicLong0);
      assertEquals((byte) (-38), atomicLong0.byteValue());
      assertEquals(2010, atomicLong0.intValue());
      assertEquals(2010L, atomicLong0.get());
      assertEquals("2010", atomicLong0.toString());
      assertEquals((short)2010, atomicLong0.shortValue());
      assertEquals(2010.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2010.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(2010L, atomicLong0.longValue());
      
      long long0 = atomicLong0.decrementAndGet();
      assertEquals(2009L, long0);
      assertEquals((byte) (-39), atomicLong0.byteValue());
      assertEquals(2009L, atomicLong0.longValue());
      assertEquals((short)2009, atomicLong0.shortValue());
      assertEquals(2009L, atomicLong0.get());
      assertEquals(2009, atomicLong0.intValue());
      assertEquals(2009.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("2009", atomicLong0.toString());
      assertEquals(2009.0, atomicLong0.doubleValue(), 0.01);
      
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("S&#QTI1*+yO", "d&-&I");
      assertNotNull(sQLTimeoutException0);
      assertEquals("d&-&I", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: S&#QTI1*+yO", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("S&#QTI1*+yO", sQLTimeoutException0.getMessage());
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Short short0 = TypeUtils.castToShort(atomicLong0);
      assertEquals((short)2009, (short)short0);
      assertNotNull(short0);
      assertEquals((byte) (-39), atomicLong0.byteValue());
      assertEquals(2009L, atomicLong0.longValue());
      assertEquals((short)2009, atomicLong0.shortValue());
      assertEquals(2009L, atomicLong0.get());
      assertEquals(2009, atomicLong0.intValue());
      assertEquals(2009.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("2009", atomicLong0.toString());
      assertEquals(2009.0, atomicLong0.doubleValue(), 0.01);
      
      Class<?> class1 = TypeUtils.loadClass("S&#QTI1*+yO");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      Time time0 = TypeUtils.castToSqlTime(byte0);
      assertNotNull(time0);
      assertEquals("00:00:00", time0.toString());
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("class [B", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      
      Class<?> class2 = TypeUtils.loadClass(";;{d}!B{_QiDe%Q^V?");
      assertNull(class2);
      
      ThreadGroup threadGroup0 = new ThreadGroup("c,aS{+gz~%Ht|!Y)J/");
      assertNotNull(threadGroup0);
      assertEquals("c,aS{+gz~%Ht|!Y)J/", threadGroup0.getName());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "Lorg.springframework.util.LinkedMultiValueMap");
      assertNotNull(threadGroup1);
      assertEquals("c,aS{+gz~%Ht|!Y)J/", threadGroup0.getName());
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread0 = new MockThread(threadGroup1, "org.springframework.security.web.csrf.DefaultCsrfToken");
      assertNotNull(mockThread0);
      assertEquals("c,aS{+gz~%Ht|!Y)J/", threadGroup0.getName());
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread1 = new MockThread(mockThread0, "Lorg.springframework.util.LinkedMultiValueMap");
      assertNotNull(mockThread1);
      assertEquals("c,aS{+gz~%Ht|!Y)J/", threadGroup0.getName());
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ThreadGroup threadGroup2 = (ThreadGroup)MockThread.getDefaultUncaughtExceptionHandler();
      assertNotNull(threadGroup2);
      assertNotSame(threadGroup2, threadGroup0);
      assertNotSame(threadGroup2, threadGroup1);
      assertEquals("c,aS{+gz~%Ht|!Y)J/", threadGroup2.getName());
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup0);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertEquals("c,aS{+gz~%Ht|!Y)J/", threadGroup0.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      
      MockThread mockThread2 = new MockThread(threadGroup0, "c,aS{+gz~%Ht|!Y)J/");
      assertNotNull(mockThread2);
      assertEquals("c,aS{+gz~%Ht|!Y)J/", threadGroup0.getName());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(threadGroup1, threadGroup2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertEquals("c,aS{+gz~%Ht|!Y)J/", threadGroup0.getName());
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      
      StackTraceElement[] stackTraceElementArray0 = mockThread2.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertEquals("c,aS{+gz~%Ht|!Y)J/", threadGroup0.getName());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertEquals("c,aS{+gz~%Ht|!Y)J/", threadGroup0.getName());
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Random.setNextRandom(68);
      String string0 = "11%.(,gzZX";
      boolean boolean1 = TypeUtils.isNumber("11%.(,gzZX");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.springframework.security.web.csrf.DefaultCsrfToken", "country", (byte)48);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("org.springframework.security.web.csrf.DefaultCsrfToken", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.springframework.security.web.csrf.DefaultCsrfToken", sQLNonTransientConnectionException0.toString());
      assertEquals(48, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("country", sQLNonTransientConnectionException0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("org.springframework.security.web.csrf.DefaultCsrfToken", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.springframework.security.web.csrf.DefaultCsrfToken", sQLNonTransientConnectionException0.toString());
      assertEquals(48, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("country", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.springframework.security.web.csrf.DefaultCsrfToken", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLNonTransientConnectionException: org.springframework.security.web.csrf.DefaultCsrfToken", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransactionRollbackException0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLTransactionRollbackException: java.sql.SQLNonTransientConnectionException: org.springframework.security.web.csrf.DefaultCsrfToken
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("class java.sql.SQLTimeoutException", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      int int1 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      Class<?> class3 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertNotNull(class3);
      assertNotSame(class3, class1);
      assertEquals(1537, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertTrue(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("interface java.util.List", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.equals((Object)class1));
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@113d216c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(I)Z");
      assertFalse(boolean0);
      
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      Class<SQLTransientException> class1 = SQLTransientException.class;
      boolean boolean1 = TypeUtils.isPath(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = TypeUtils.isKotlin(class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Class<MockHijrahDate> class2 = MockHijrahDate.class;
      int int0 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Locale locale0 = TypeUtils.toLocale("WEEK_OF_YEAR_FIELD");
      assertNotNull(locale0);
      assertEquals("YEAR", locale0.getVariant());
      assertEquals("week_OF_YEAR", locale0.toString());
      assertEquals("week", locale0.getLanguage());
      assertEquals("OF", locale0.getCountry());
      
      TypeUtils.clearClassMapping();
      Class<?> class3 = TypeUtils.loadClass((String) null, classLoader0);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<InstantiationError> class1 = InstantiationError.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      ParserConfig.parserAllFieldToCache(class1, linkedHashMap0);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(13, linkedHashMap0.size());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, parserConfig0.propertyNamingStrategy, false);
      assertNotNull(serializeBeanInfo0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      parserConfig0.addAccept("fastjson.parser.autoTypeSupport");
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {serialVersionUID=private static final long java.lang.InstantiationError.serialVersionUID, stackTrace=private java.lang.StackTraceElement[] java.lang.Throwable.stackTrace, detailMessage=private java.lang.String java.lang.Throwable.detailMessage, cause=private java.lang.Throwable java.lang.Throwable.cause, suppressedExceptions=private java.util.List java.lang.Throwable.suppressedExceptions, UNASSIGNED_STACK=private static final java.lang.StackTraceElement[] java.lang.Throwable.UNASSIGNED_STACK, CAUSE_CAPTION=private static final java.lang.String java.lang.Throwable.CAUSE_CAPTION, NULL_CAUSE_MESSAGE=private static final java.lang.String java.lang.Throwable.NULL_CAUSE_MESSAGE, SELF_SUPPRESSION_MESSAGE=private static final java.lang.String java.lang.Throwable.SELF_SUPPRESSION_MESSAGE, SUPPRESSED_CAPTION=private static final java.lang.String java.lang.Throwable.SUPPRESSED_CAPTION, EMPTY_THROWABLE_ARRAY=private static final java.lang.Throwable[] java.lang.Throwable.EMPTY_THROWABLE_ARRAY, SUPPRESSED_SENTINEL=private static final java.util.List java.lang.Throwable.SUPPRESSED_SENTINEL, $assertionsDisabled=static final boolean java.lang.Throwable.$assertionsDisabled}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertNotNull(list0);
      assertEquals(10, list0.size());
      assertFalse(list0.isEmpty());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      Class<Properties> class1 = Properties.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = TypeUtils.isNumber("getClass");
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) list0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : [nanos, date, day, hours, minutes, month, seconds, timezoneOffset, year, time]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      long long0 = TypeUtils.fnv1a_64_lower("6w-M/0kl5z");
      assertEquals(478807707379398534L, long0);
      
      Class<MockDate> class0 = MockDate.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Field field0 = ParserConfig.getFieldFromCache("Zq oJ6r?NK ", hashMap0);
      assertNull(field0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.deny", "ll=$$fc");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.deny", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("ll=$$fc", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("fastjson.parser.deny", sQLIntegrityConstraintViolationException0.getMessage());
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("Zq oJ6r?NK ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Zq oJ6r?NK \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(class1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Random.setNextRandom(30);
      boolean boolean2 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError((String) null);
      assertNotNull(verifyError0);
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNull(verifyError0.getMessage());
      
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "getClass");
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("getClass", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      AtomicLong atomicLong0 = new AtomicLong((-1363L));
      assertNotNull(atomicLong0);
      assertEquals((byte) (-83), atomicLong0.byteValue());
      assertEquals((-1363.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1363L), atomicLong0.longValue());
      assertEquals("-1363", atomicLong0.toString());
      assertEquals((-1363.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-1363), atomicLong0.intValue());
      assertEquals((-1363L), atomicLong0.get());
      assertEquals((short) (-1363), atomicLong0.shortValue());
      
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(I)Z");
      assertFalse(boolean0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      long long0 = TypeUtils.fnv1a_64_lower("fastjson.compatibleWithJavaBean");
      assertEquals((-3779014738112645319L), long0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(2010L);
      assertNotNull(atomicLong0);
      assertEquals(2010.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2010.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(2010, atomicLong0.intValue());
      assertEquals((short)2010, atomicLong0.shortValue());
      assertEquals((byte) (-38), atomicLong0.byteValue());
      assertEquals("2010", atomicLong0.toString());
      assertEquals(2010L, atomicLong0.longValue());
      assertEquals(2010L, atomicLong0.get());
      
      long long0 = atomicLong0.decrementAndGet();
      assertEquals(2009L, long0);
      assertEquals("2009", atomicLong0.toString());
      assertEquals(2009.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((short)2009, atomicLong0.shortValue());
      assertEquals(2009.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-39), atomicLong0.byteValue());
      assertEquals(2009, atomicLong0.intValue());
      assertEquals(2009L, atomicLong0.longValue());
      assertEquals(2009L, atomicLong0.get());
      
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Integer integer0 = TypeUtils.castToInt(atomicLong0);
      assertEquals(2009, (int)integer0);
      assertNotNull(integer0);
      assertEquals("2009", atomicLong0.toString());
      assertEquals(2009.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((short)2009, atomicLong0.shortValue());
      assertEquals(2009.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-39), atomicLong0.byteValue());
      assertEquals(2009, atomicLong0.intValue());
      assertEquals(2009L, atomicLong0.longValue());
      assertEquals(2009L, atomicLong0.get());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Type type0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      AtomicLong atomicLong0 = new AtomicLong(2010L);
      assertNotNull(atomicLong0);
      assertEquals("2010", atomicLong0.toString());
      assertEquals(2010L, atomicLong0.get());
      assertEquals((byte) (-38), atomicLong0.byteValue());
      assertEquals(2010, atomicLong0.intValue());
      assertEquals((short)2010, atomicLong0.shortValue());
      assertEquals(2010.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2010.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(2010L, atomicLong0.longValue());
      
      long long0 = atomicLong0.decrementAndGet();
      assertEquals(2009L, long0);
      assertEquals((byte) (-39), atomicLong0.byteValue());
      assertEquals(2009L, atomicLong0.get());
      assertEquals(2009, atomicLong0.intValue());
      assertEquals(2009.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)2009, atomicLong0.shortValue());
      assertEquals(2009.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2009L, atomicLong0.longValue());
      assertEquals("2009", atomicLong0.toString());
      
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Integer integer0 = TypeUtils.castToInt(atomicLong0);
      assertEquals(2009, (int)integer0);
      assertNotNull(integer0);
      assertEquals((byte) (-39), atomicLong0.byteValue());
      assertEquals(2009L, atomicLong0.get());
      assertEquals(2009, atomicLong0.intValue());
      assertEquals(2009.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)2009, atomicLong0.shortValue());
      assertEquals(2009.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2009L, atomicLong0.longValue());
      assertEquals("2009", atomicLong0.toString());
      
      Random.setNextRandom(49);
      boolean boolean0 = TypeUtils.isNumber("exponentSeparator");
      assertFalse(boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(I)Z", "L0za$n+;h)e]a", 96);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("L0za$n+;h)e]a", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: (I)Z", sQLNonTransientConnectionException0.toString());
      assertEquals("(I)Z", sQLNonTransientConnectionException0.getMessage());
      assertEquals(96, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("L0za$n+;h)e]a", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: (I)Z", sQLNonTransientConnectionException0.toString());
      assertEquals("(I)Z", sQLNonTransientConnectionException0.getMessage());
      assertEquals(96, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLNonTransientConnectionException: (I)Z", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: (I)Z", sQLTransactionRollbackException0.getMessage());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<HttpCookie> class0 = HttpCookie.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "country", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Locale locale0 = TypeUtils.toLocale("jS|@@kKwoTSDiB;");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("js|@@kkwotsdib;", locale0.getLanguage());
      assertEquals("js|@@kkwotsdib;", locale0.toString());
      
      TypeUtils.clearClassMapping();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0);
      assertNull(class0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      InternalError internalError0 = TypeUtils.cast((Object) "", (Type) null, (ParserConfig) null);
      assertNull(internalError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("jS|@@kKwoTSDiB;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : jS|@@kKwoTSDiB;
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      Time time0 = TypeUtils.castToSqlTime(byte0);
      assertNotNull(time0);
      assertEquals("00:00:00", time0.toString());
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class [B", class1.toString());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertFalse(class1.isSynthetic());
      
      Class<?> class2 = TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?");
      assertNull(class2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<?> class3 = TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?", classLoader1, true);
      assertNull(class3);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<?> class4 = TypeUtils.getClassFromMapping(";;{d}!B{cQ\u0006DeQ^V?");
      assertNull(class4);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
      
      Class<Rectangle> class0 = Rectangle.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class2);
      assertNull(annotation0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("syntax error, unexpect token ", "~!Ta4TC");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("~!Ta4TC", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: syntax error, unexpect token ", sQLTimeoutException0.toString());
      assertEquals("syntax error, unexpect token ", sQLTimeoutException0.getMessage());
      
      InstantiationException instantiationException0 = new InstantiationException();
      assertNotNull(instantiationException0);
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      assertNull(instantiationException0.getMessage());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("F", instantiationException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      assertNull(instantiationException0.getMessage());
      assertEquals("F", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: F", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLNonTransientException: F
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      assertNull(string0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = hashMap0.put("fastjson.parser.deny", "NULL");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      assertNotNull(weakHashMap0);
      
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      String string2 = TypeUtils.castToJavaBean((Object) class0, class1);
      assertNotNull(string2);
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      Class<JSONPDeserializer> class2 = JSONPDeserializer.class;
      boolean boolean0 = TypeUtils.isKotlin(class2);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      String string3 = hashMap0.putIfAbsent(";~g5i", "fastjson.parser.autoTypeAccept");
      assertNull(string3);
      assertNotSame(hashMap0, hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.equals((Object)hashMap1));
      
      Class<Boolean> class3 = Boolean.TYPE;
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("boolean", class3.toString());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      
      Class<?> class4 = TypeUtils.getCollectionItemClass(class3);
      assertNotNull(class4);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("boolean", class3.toString());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isEnum());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass(":zqS5QQpv`+}V\"Q{$\" ", classLoader0);
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertNotNull(class2);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isEnum());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      
      JSONPDeserializer jSONPDeserializer0 = TypeUtils.cast((Object) null, (Type) class2, (ParserConfig) null);
      assertNull(jSONPDeserializer0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isEnum());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      
      Locale locale0 = null;
      try {
        locale0 = new Locale("getfillInStackTrace", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      assertNotNull(string0);
      
      String string1 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.autoTypeSupport", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      List<FieldInfo> list0 = new ArrayList<FieldInfo>();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(857L);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Class<Time> class0 = Time.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Properties> class1 = Properties.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, (Map<String, String>) null);
      assertNotNull(javaBeanSerializer0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertNotNull(imageCapabilities0);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.PRIOR;
      assertNotNull(bufferCapabilities_FlipContents0);
      
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      assertNotNull(bufferCapabilities0);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(bufferCapabilities0.isFullScreenRequired());
      assertFalse(bufferCapabilities0.isMultiBufferAvailable());
      assertTrue(bufferCapabilities0.isPageFlipping());
      
      try { 
        javaBeanSerializer0.getFieldValuesMap(bufferCapabilities0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("getStackTrace", "Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: getStackTrace", sQLTimeoutException0.toString());
      assertEquals("getStackTrace", sQLTimeoutException0.getMessage());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", sQLTimeoutException0.getSQLState());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("=j9-7V@<?[Fa5]g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : =j9-7V@<?[Fa5]g
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class0);
      assertNull(annotation0);
      
      long long0 = TypeUtils.fnv1a_64_lower("double");
      assertEquals((-6879236761899114840L), long0);
      
      Class<Long> class1 = Long.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals("long", class1.toString());
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertNotNull(class2);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals("long", class1.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Short> class0 = Short.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      TreeMap<UUID, DecimalFormatSymbols> treeMap0 = new TreeMap<UUID, DecimalFormatSymbols>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = TypeUtils.decapitalize("l");
      assertEquals("l", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      
      TypeUtils.clearClassMapping();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0);
      assertNull(class0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      InternalError internalError0 = TypeUtils.cast((Object) "", (Type) null, (ParserConfig) null);
      assertNull(internalError0);
      
      Time time0 = TypeUtils.castToSqlTime("");
      assertNull(time0);
      
      Random.setNextRandom((-1178154274));
      StringCharacterIterator stringCharacterIterator0 = null;
      try {
        stringCharacterIterator0 = new StringCharacterIterator("N/*{uv@^-4Ow5L$5+(", 71, 71, 71);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid substring range
         //
         verifyException("java.text.StringCharacterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("S+*c9BKzI/}V", "S+*c9BKzI/}V", mockException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("S+*c9BKzI/}V", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("S+*c9BKzI/}V", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: S+*c9BKzI/}V", sQLNonTransientConnectionException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Class<Annotation> class1 = Annotation.class;
      Class<InternalError> class2 = InternalError.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class2, class1);
      assertNull(annotation0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      Timestamp timestamp0 = jSONObject0.getTimestamp("S{[");
      assertNull(timestamp0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      Class<String> class3 = String.class;
      String string0 = TypeUtils.castToJavaBean((Object) null, class3);
      assertNull(string0);
      
      boolean boolean3 = TypeUtils.isKotlin(class0);
      assertFalse(boolean3);
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Collection<String> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string1 = File.pathSeparator;
      assertEquals(":", string1);
      assertNotNull(string1);
      
      Class<?> class4 = TypeUtils.getCollectionItemClass(class1);
      assertNotNull(class4);
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isPrimitive());
      
      Class<BatchUpdateException> class5 = BatchUpdateException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class6 = JavaBeanInfo.getBuilderClass(class5, jSONType0);
      assertNull(class6);
      
      Class<PropertyProcessable> class7 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class7);
      assertNotNull(propertyProcessableDeserializer0);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Throwable throwable0 = illegalThreadStateException0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(illegalThreadStateException0, throwable0);
      assertSame(throwable0, illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      assertNull(throwable0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", throwable0.toString());
      
      boolean boolean1 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      InstantiationException instantiationException0 = new InstantiationException();
      assertNotNull(instantiationException0);
      assertNull(instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      
      instantiationException0.printStackTrace();
      assertNull(instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      
      Throwable[] throwableArray0 = instantiationException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertNull(instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      
      Throwable throwable1 = instantiationException0.initCause(illegalThreadStateException0);
      assertNotNull(throwable1);
      assertSame(illegalThreadStateException0, throwable0);
      assertSame(instantiationException0, throwable1);
      assertSame(throwable1, instantiationException0);
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      assertNull(instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      assertNull(throwable1.getMessage());
      assertEquals("java.lang.InstantiationException", throwable1.toString());
      
      boolean boolean2 = TypeUtils.isHibernateInitialized(instantiationException0);
      assertTrue(boolean2);
      assertSame(instantiationException0, throwable1);
      assertNull(instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      assertNull(string0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      LinkedHashMap<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> linkedHashMap0 = new LinkedHashMap<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("B");
      assertNotNull(noSuchMethodError0);
      assertEquals("B", noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError: B", noSuchMethodError0.toString());
      
      String string0 = TypeUtils.castToString(noSuchMethodError0);
      assertNotNull(string0);
      assertEquals("B", noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError: B", noSuchMethodError0.toString());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      SortedMap<String, String> sortedMap0 = treeMap0.headMap("nYjd44#@bfjr<");
      assertNotNull(sortedMap0);
      assertEquals(0, treeMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      int int0 = AffineTransform.TYPE_MASK_SCALE;
      assertEquals(6, int0);
      
      long long0 = Short.toUnsignedLong((short)21);
      assertEquals(21L, long0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nYjd44#@bfjr<");
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      boolean boolean1 = TypeUtils.isNumber("java.lang.NoSuchMethodError@0000000001");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Boolean> class0 = Boolean.class;
      treeMap0.putAll(sortedMap0);
      assertEquals(0, treeMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      
      ChoiceFormat choiceFormat0 = new ChoiceFormat("getget2DigitYearStart");
      assertNotNull(choiceFormat0);
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertTrue(choiceFormat0.isGroupingUsed());
      assertFalse(choiceFormat0.isParseIntegerOnly());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      assertNotNull(timeDeserializer0);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Class<Time> class2 = Time.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@8d880ceb
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertNotNull(illegalThreadStateException0);
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.toString());
      
      Throwable throwable0 = illegalThreadStateException0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(illegalThreadStateException0, throwable0);
      assertSame(throwable0, illegalThreadStateException0);
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.toString());
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", throwable0.toString());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", throwable0.getMessage());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      VerifyError verifyError0 = new VerifyError("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertNotNull(verifyError0);
      assertEquals("java.lang.VerifyError: Ljava.util.concurrent.ConcurrentSkipListMap", verifyError0.toString());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", verifyError0.getMessage());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertNull(class0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      LinkedHashSet<TimeUnit> linkedHashSet0 = new LinkedHashSet<TimeUnit>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ljava.util.concurrent.ConcurrentSkipListMap", "Ljava.util.concurrent.ConcurrentSkipListMap");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Ljava.util.concurrent.ConcurrentSkipListMap", sQLTimeoutException0.toString());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", sQLTimeoutException0.getMessage());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      AtomicLong atomicLong0 = new AtomicLong(2011L);
      assertNotNull(atomicLong0);
      assertEquals(2011.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2011.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-37), atomicLong0.byteValue());
      assertEquals(2011L, atomicLong0.longValue());
      assertEquals((short)2011, atomicLong0.shortValue());
      assertEquals(2011L, atomicLong0.get());
      assertEquals("2011", atomicLong0.toString());
      assertEquals(2011, atomicLong0.intValue());
      
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      System.setCurrentTimeMillis(48L);
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(atomicLong0);
      assertNotNull(timestamp0);
      assertEquals("1970-01-01 00:00:02.011", timestamp0.toString());
      assertEquals(11000000, timestamp0.getNanos());
      assertEquals(2011.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2011.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-37), atomicLong0.byteValue());
      assertEquals(2011L, atomicLong0.longValue());
      assertEquals((short)2011, atomicLong0.shortValue());
      assertEquals(2011L, atomicLong0.get());
      assertEquals("2011", atomicLong0.toString());
      assertEquals(2011, atomicLong0.intValue());
      
      long long0 = TypeUtils.fnv1a_64_lower("[8S3er");
      assertEquals((-3280491390991169437L), long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Random.setNextRandom((-1247));
      Class<Timestamp> class0 = Timestamp.class;
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      WeakHashMap<ParameterizedTypeImpl, Dimension> weakHashMap0 = new WeakHashMap<ParameterizedTypeImpl, Dimension>();
      assertNotNull(weakHashMap0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNotNull(noSuchMethodError0);
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(49, false, true, 1337, 19);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.toString());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.getMessage());
      
      Throwable throwable0 = illegalThreadStateException0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(illegalThreadStateException0, throwable0);
      assertSame(throwable0, illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.toString());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.getMessage());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", throwable0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", throwable0.toString());
      
      String string0 = "A[%6%}I>\";.";
      StackTraceElement stackTraceElement0 = new StackTraceElement("getclone", "", "A[%6%}I>\";.", 26);
      assertNotNull(stackTraceElement0);
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals("getclone", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(26, stackTraceElement0.getLineNumber());
      assertEquals("A[%6%}I>\";.", stackTraceElement0.getFileName());
      assertEquals("getclone.(A[%6%}I>\";.:26)", stackTraceElement0.toString());
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("short", class0.toString());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchMethodException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class0 = TypeUtils.loadClass("d]!3zcI");
      assertNull(class0);
      
      Random.setNextRandom(41);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.String", class1.toString());
      assertEquals(17, class1.getModifiers());
      
      boolean boolean1 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = TypeUtils.toLocale("Px|+i|N8aWYL");
      assertNotNull(locale0);
      assertEquals("px|+i|n8awyl", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("px|+i|n8awyl", locale0.getLanguage());
      
      PageAttributes.ColorType pageAttributes_ColorType0 = PageAttributes.ColorType.MONOCHROME;
      assertNotNull(pageAttributes_ColorType0);
      
      PageAttributes.MediaType pageAttributes_MediaType0 = PageAttributes.MediaType.B9;
      assertNotNull(pageAttributes_MediaType0);
      
      PageAttributes.OrientationRequestedType pageAttributes_OrientationRequestedType0 = PageAttributes.OrientationRequestedType.LANDSCAPE;
      assertNotNull(pageAttributes_OrientationRequestedType0);
      
      PageAttributes.OriginType pageAttributes_OriginType0 = PageAttributes.OriginType.PRINTABLE;
      assertNotNull(pageAttributes_OriginType0);
      
      PageAttributes.PrintQualityType pageAttributes_PrintQualityType0 = PageAttributes.PrintQualityType.NORMAL;
      assertNotNull(pageAttributes_PrintQualityType0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 41;
      intArray0[1] = 2053;
      intArray0[2] = 41;
      PageAttributes pageAttributes0 = null;
      try {
        pageAttributes0 = new PageAttributes(pageAttributes_ColorType0, pageAttributes_MediaType0, pageAttributes_OrientationRequestedType0, pageAttributes_OriginType0, pageAttributes_PrintQualityType0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid value for attribute printerResolution
         //
         verifyException("java.awt.PageAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "(I)Z";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      TypeUtils.clearClassMapping();
      Class<?> class0 = TypeUtils.loadClass("toS", classLoader0);
      assertNull(class0);
      
      Byte byte0 = new Byte((byte) (-115));
      assertEquals((byte) (-115), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -115
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      AtomicLong atomicLong0 = new AtomicLong(275L);
      assertNotNull(atomicLong0);
      assertEquals(275.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((byte)19, atomicLong0.byteValue());
      assertEquals(275L, atomicLong0.longValue());
      assertEquals("275", atomicLong0.toString());
      assertEquals(275.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(275L, atomicLong0.get());
      assertEquals(275, atomicLong0.intValue());
      assertEquals((short)275, atomicLong0.shortValue());
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Class<Float> class1 = Float.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      
      String string0 = "A[%6%}I>\";.";
      StackTraceElement stackTraceElement0 = new StackTraceElement("getclone", ":j&{BO.}", "A[%6%}I>\";.", 26);
      assertNotNull(stackTraceElement0);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("getclone.:j&{BO.}(A[%6%}I>\";.:26)", stackTraceElement0.toString());
      assertEquals(":j&{BO.}", stackTraceElement0.getMethodName());
      assertEquals("getclone", stackTraceElement0.getClassName());
      assertEquals("A[%6%}I>\";.", stackTraceElement0.getFileName());
      assertEquals(26, stackTraceElement0.getLineNumber());
      
      InstantiationException instantiationException0 = new InstantiationException();
      assertNotNull(instantiationException0);
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      assertNull(instantiationException0.getMessage());
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(instantiationException0);
      assertTrue(boolean0);
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      assertNull(instantiationException0.getMessage());
      
      Random.setNextRandom(26);
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      WeakHashMap<ParameterizedTypeImpl, Dimension> weakHashMap0 = new WeakHashMap<ParameterizedTypeImpl, Dimension>();
      assertNotNull(weakHashMap0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNotNull(noSuchMethodError0);
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      assertNotNull(mockNullPointerException0);
      
      byte[] byteArray0 = TypeUtils.castToBytes(":j&{BO.}");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-63)}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Ljava.util.concurrent.ConcurrentSkipListMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("na", "}j{6n[WkWd", "[D", (-1141312604));
      assertNotNull(stackTraceElement0);
      assertEquals("na", stackTraceElement0.getClassName());
      assertEquals("[D", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("}j{6n[WkWd", stackTraceElement0.getMethodName());
      assertEquals("na.}j{6n[WkWd([D)", stackTraceElement0.toString());
      assertEquals((-1141312604), stackTraceElement0.getLineNumber());
      
      Class<TimeUnit> class0 = TimeUnit.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElement0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("kotlin.Metadata", "!");
      assertNotNull(sQLTimeoutException0);
      assertEquals("kotlin.Metadata", sQLTimeoutException0.getMessage());
      assertEquals("!", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: kotlin.Metadata", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException1);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNull(sQLTimeoutException1.getSQLState());
      assertNull(sQLTimeoutException1.getMessage());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean1 = TypeUtils.isNumber("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      SimplePropertyPreFilter simplePropertyPreFilter0 = null;
      try {
        simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      AtomicLong atomicLong0 = new AtomicLong(2010L);
      assertNotNull(atomicLong0);
      assertEquals(2010.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(2010.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2010L, atomicLong0.longValue());
      assertEquals((byte) (-38), atomicLong0.byteValue());
      assertEquals((short)2010, atomicLong0.shortValue());
      assertEquals(2010L, atomicLong0.get());
      assertEquals("2010", atomicLong0.toString());
      assertEquals(2010, atomicLong0.intValue());
      
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertNotNull(mockThread1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<SQLException> class0 = SQLException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      assertNotNull(javaBeanDeserializer0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class1 = TypeUtils.loadClass("fastjson.parser.autoTypeSupport");
      assertNull(class1);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      String string0 = concurrentHashMap0.put("rXQg(qbjuNoy\u0005;*xM}", "rXQg(qbjuNoy\u0005;*xM}");
      assertNull(string0);
      assertFalse(concurrentHashMap0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rXQg(qbjuNoy\u0005;*xM}");
      assertFalse(boolean0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2273;
      intArray0[1] = 532;
      intArray0[2] = (-960);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertArrayEquals(new int[] {2273, 532, (-960)}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      assertArrayEquals(new int[] {2273, 532, (-960)}, intArray0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", sQLTransactionRollbackException0.getMessage());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      java.util.IdentityHashMap<String, ClientInfoStatus> identityHashMap0 = new java.util.IdentityHashMap<String, ClientInfoStatus>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(identityHashMap0, sQLTransactionRollbackException0);
      assertArrayEquals(new int[] {2273, 532, (-960)}, intArray0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException", sQLClientInfoException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLTransactionRollbackException: java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = treeMap0.put("$X3xBe4g-8mIF", "$X3xBe4g-8mIF");
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      String string1 = treeMap0.putIfAbsent("$X3xBe4g-8mIF", "k`/pOCAC");
      assertEquals("$X3xBe4g-8mIF", string1);
      assertNotNull(string1);
      assertEquals(1, treeMap0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertNotNull(list0);
      assertEquals(1, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      System.setCurrentTimeMillis(1637L);
      TreeMap<String, Object> treeMap1 = new TreeMap<String, Object>();
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      Class<SqlDateDeserializer>[] classArray0 = (Class<SqlDateDeserializer>[]) Array.newInstance(Class.class, 3);
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      classArray0[0] = class2;
      Class<SqlDateDeserializer> class3 = SqlDateDeserializer.class;
      classArray0[1] = class3;
      Class<SqlDateDeserializer> class4 = SqlDateDeserializer.class;
      classArray0[2] = class4;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<?> class5 = TypeUtils.getCollectionItemClass(class1);
      assertNotNull(class5);
      assertSame(class5, class1);
      assertSame(class1, class5);
      assertEquals("class java.lang.Object", class5.toString());
      assertFalse(class5.isArray());
      assertFalse(class5.isInterface());
      assertEquals(1, class5.getModifiers());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isEnum());
      assertFalse(class5.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) parserConfig0, (Class<BigInteger>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clazz is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      
      int int0 = (-330);
      Dimension dimension0 = new Dimension((-3912), 0);
      assertNotNull(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals((-3912), dimension0.width);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals((-3912.0), dimension0.getWidth(), 0.01);
      
      Dimension dimension1 = new Dimension();
      assertNotNull(dimension1);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertFalse(dimension1.equals((Object)dimension0));
      
      Rectangle rectangle0 = new Rectangle(point0, dimension1);
      assertNotNull(rectangle0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertFalse(dimension1.equals((Object)dimension0));
      
      DecimalFormat decimalFormat0 = new DecimalFormat("d]!7zc7");
      assertNotNull(decimalFormat0);
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("d]!7zc7#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("d]!7zc7", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-d]!7zc7", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("d]!7zc7#", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      
      Currency currency0 = decimalFormat0.getCurrency();
      assertNotNull(currency0);
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("d]!7zc7#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("d]!7zc7", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-d]!7zc7", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("d]!7zc7#", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("XXX", currency0.toString());
      assertEquals((-1), currency0.getDefaultFractionDigits());
      assertEquals("XXX", currency0.getCurrencyCode());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      java.util.Date date0 = TypeUtils.castToDate(calendar0);
      assertNotNull(date0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      LinkedHashMap<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> linkedHashMap0 = new LinkedHashMap<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = treeMap0.put("$X3xBe4g-8mIF", "$X3xBe4g-8mIF");
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      String string1 = treeMap0.putIfAbsent("$X3xBe4g-8mIF", "k`/pOCAC");
      assertEquals("$X3xBe4g-8mIF", string1);
      assertNotNull(string1);
      assertEquals(1, treeMap0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertNotNull(list0);
      assertEquals(1, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      System.setCurrentTimeMillis(1637L);
      TreeMap<String, Object> treeMap1 = new TreeMap<String, Object>();
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Class<SqlDateDeserializer>[] classArray0 = (Class<SqlDateDeserializer>[]) Array.newInstance(Class.class, 3);
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      classArray0[0] = class2;
      Class<SqlDateDeserializer> class3 = SqlDateDeserializer.class;
      classArray0[1] = class3;
      Class<SqlDateDeserializer> class4 = SqlDateDeserializer.class;
      classArray0[2] = class4;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Float> class5 = Float.class;
      int[] intArray0 = new int[2];
      intArray0[0] = 91;
      intArray0[1] = 91;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("$X3xBe4g-8mIF", "k`/pOCAC", 91, intArray0, sQLSyntaxErrorException0);
      assertArrayEquals(new int[] {91, 91}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(91, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: $X3xBe4g-8mIF", batchUpdateException0.toString());
      assertEquals("$X3xBe4g-8mIF", batchUpdateException0.getMessage());
      assertEquals("k`/pOCAC", batchUpdateException0.getSQLState());
      
      Spliterator<Throwable> spliterator0 = batchUpdateException0.spliterator();
      assertArrayEquals(new int[] {91, 91}, intArray0);
      assertNotNull(spliterator0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(91, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: $X3xBe4g-8mIF", batchUpdateException0.toString());
      assertEquals("$X3xBe4g-8mIF", batchUpdateException0.getMessage());
      assertEquals("k`/pOCAC", batchUpdateException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("J2q:q09kM", batchUpdateException0);
      assertArrayEquals(new int[] {91, 91}, intArray0);
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(91, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: $X3xBe4g-8mIF", batchUpdateException0.toString());
      assertEquals("$X3xBe4g-8mIF", batchUpdateException0.getMessage());
      assertEquals("k`/pOCAC", batchUpdateException0.getSQLState());
      assertEquals("J2q:q09kM", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: J2q:q09kM", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorException1.addSuppressed(batchUpdateException0);
      assertArrayEquals(new int[] {91, 91}, intArray0);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(91, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: $X3xBe4g-8mIF", batchUpdateException0.toString());
      assertEquals("$X3xBe4g-8mIF", batchUpdateException0.getMessage());
      assertEquals("k`/pOCAC", batchUpdateException0.getSQLState());
      assertEquals("J2q:q09kM", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: J2q:q09kM", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLSyntaxErrorException1, class5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.SQLSyntaxErrorException: J2q:q09kM
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = null;
      String string1 = TypeUtils.decapitalize((String) null);
      assertNull(string1);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      int int0 = (-266);
      Integer integer0 = new Integer((-266));
      assertEquals((-266), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'Q';
      try { 
        Integer.parseUnsignedInt("k", 90);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 90 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"asmEnable\":true,\"autoTypeSupport\":false,\"compatibleWithJavaBean\":true,\"deserializers\":{},\"fieldBased\":false,\"propertyNamingStrategy\":\"KebabCase\",\"symbolTable\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("illegal enum. ");
      assertNull(class0);
      
      Class<Boolean> class1 = Boolean.TYPE;
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertNotNull(class2);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      System.setCurrentTimeMillis(2912L);
      int int0 = TypeUtils.getParserFeatures(class2);
      assertEquals(0, int0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("illegal enum. ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : illegal enum. 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(I)Z");
      assertFalse(boolean0);
      
      Class<ClassLoader> class0 = ClassLoader.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, false);
      assertNotNull(list0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      SQLException sQLException0 = new SQLException("(I)Z", "isname", 57);
      assertNotNull(sQLException0);
      assertEquals("isname", sQLException0.getSQLState());
      assertEquals(57, sQLException0.getErrorCode());
      assertEquals("(I)Z", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: (I)Z", sQLException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("Ljava.awt.Font", sQLException0);
      assertNotNull(sQLDataException0);
      assertEquals("isname", sQLException0.getSQLState());
      assertEquals(57, sQLException0.getErrorCode());
      assertEquals("(I)Z", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: (I)Z", sQLException0.toString());
      assertEquals("Ljava.awt.Font", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: Ljava.awt.Font", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(I)Z", "Ljava.awt.Font", 57, sQLDataException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("isname", sQLException0.getSQLState());
      assertEquals(57, sQLException0.getErrorCode());
      assertEquals("(I)Z", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: (I)Z", sQLException0.toString());
      assertEquals("Ljava.awt.Font", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: Ljava.awt.Font", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("(I)Z", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: (I)Z", sQLSyntaxErrorException0.toString());
      assertEquals(57, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Ljava.awt.Font", sQLSyntaxErrorException0.getSQLState());
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(sQLSyntaxErrorException0);
      assertTrue(boolean1);
      assertEquals("isname", sQLException0.getSQLState());
      assertEquals(57, sQLException0.getErrorCode());
      assertEquals("(I)Z", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: (I)Z", sQLException0.toString());
      assertEquals("Ljava.awt.Font", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: Ljava.awt.Font", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("(I)Z", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: (I)Z", sQLSyntaxErrorException0.toString());
      assertEquals(57, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Ljava.awt.Font", sQLSyntaxErrorException0.getSQLState());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "isname");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      assertNotNull(mockIllegalAccessException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      VerifyError verifyError0 = new VerifyError("-");
      assertNotNull(verifyError0);
      assertEquals("-", verifyError0.getMessage());
      assertEquals("java.lang.VerifyError: -", verifyError0.toString());
      
      Class<?> class0 = TypeUtils.loadClass("-");
      assertNull(class0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      classLoader0.clearAssertionStatus();
      LinkedHashSet<TimeUnit> linkedHashSet0 = new LinkedHashSet<TimeUnit>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("-", "-");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: -", sQLTimeoutException0.toString());
      assertEquals("-", sQLTimeoutException0.getSQLState());
      assertEquals("-", sQLTimeoutException0.getMessage());
      
      Class<MockDateFormat> class1 = MockDateFormat.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertNotNull(decimalFormatSymbols0);
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(class1);
      assertTrue(boolean0);
      
      Hashtable<MockJapaneseDate, Locale> hashtable0 = new Hashtable<MockJapaneseDate, Locale>(1416, 1416);
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      Class<?> class2 = TypeUtils.loadClass("-");
      assertNull(class2);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      Type type1 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("read string from reader error", "getgetCause", ";xUIManxh7$sxK[>D", 24180);
      assertNotNull(stackTraceElement0);
      assertEquals("getgetCause", stackTraceElement0.getMethodName());
      assertEquals(";xUIManxh7$sxK[>D", stackTraceElement0.getFileName());
      assertEquals(24180, stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("read string from reader error.getgetCause(;xUIManxh7$sxK[>D:24180)", stackTraceElement0.toString());
      assertEquals("read string from reader error", stackTraceElement0.getClassName());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("getgetCause", "getgetCause", "getgetCause", 101);
      assertNotNull(stackTraceElement1);
      assertEquals(101, stackTraceElement1.getLineNumber());
      assertEquals("getgetCause", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("getgetCause", stackTraceElement1.getMethodName());
      assertEquals("getgetCause", stackTraceElement1.getClassName());
      assertEquals("getgetCause.getgetCause(getgetCause:101)", stackTraceElement1.toString());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement(";xUIManxh7$sxK[>D", "read string from reader error", "SQLState", 24180);
      assertNotNull(stackTraceElement2);
      assertEquals(";xUIManxh7$sxK[>D", stackTraceElement2.getClassName());
      assertEquals(24180, stackTraceElement2.getLineNumber());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("read string from reader error", stackTraceElement2.getMethodName());
      assertEquals("SQLState", stackTraceElement2.getFileName());
      assertEquals(";xUIManxh7$sxK[>D.read string from reader error(SQLState:24180)", stackTraceElement2.toString());
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("isWriteClassName", "iterator", "fi", 24180);
      assertNotNull(stackTraceElement3);
      assertEquals(24180, stackTraceElement3.getLineNumber());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("fi", stackTraceElement3.getFileName());
      assertEquals("iterator", stackTraceElement3.getMethodName());
      assertEquals("isWriteClassName", stackTraceElement3.getClassName());
      assertEquals("isWriteClassName.iterator(fi:24180)", stackTraceElement3.toString());
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[3] = stackTraceElement3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fi", "T2B)Bvct", 182);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(182, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("T2B)Bvct", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("fi", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: fi", sQLNonTransientConnectionException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.getMessage());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<HttpCookie> class1 = HttpCookie.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, jSONType0);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElement3, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : isWriteClassName.iterator(fi:24180)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = File.pathSeparator;
      assertEquals(":", string0);
      assertNotNull(string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertNotNull(list0);
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      TreeMap<String, Object> treeMap1 = new TreeMap<String, Object>();
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      
      Class<SqlDateDeserializer>[] classArray0 = (Class<SqlDateDeserializer>[]) Array.newInstance(Class.class, 3);
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      classArray0[0] = class2;
      Class<SqlDateDeserializer> class3 = SqlDateDeserializer.class;
      classArray0[1] = class3;
      Class<SqlDateDeserializer> class4 = SqlDateDeserializer.class;
      classArray0[2] = class4;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 91;
      String string1 = hashMap0.putIfAbsent("(B)Ljava/lang/Byte;", ":");
      assertNull(string1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      InterruptedException interruptedException0 = new InterruptedException();
      assertNotNull(interruptedException0);
      assertNull(interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      assertNotNull(illegalAccessError0);
      assertNull(illegalAccessError0.getMessage());
      assertEquals("java.lang.IllegalAccessError", illegalAccessError0.toString());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      Class<BigInteger> class5 = BigInteger.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) classLoader0, class5);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("FwZ~&l_]>>(");
      assertNotNull(locale0);
      assertEquals("fwz~&l_]>>(", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fwz~&l", locale0.getLanguage());
      assertEquals("]>>(", locale0.getCountry());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      boolean boolean1 = TypeUtils.isPath(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized("FwZ~&l_]>>(");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Random.setNextRandom(476);
      Byte byte0 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean3 = TypeUtils.isHibernateInitialized(byte0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "is");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Class<Method> class0 = Method.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("$3%zq{Xx.HHn/K0hr:", "lineNumber");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertNotNull(list0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Throwable> class1 = Throwable.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FwZ~&l_]>>(");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.toUnsignedInt((byte)48);
      assertEquals(48, int0);
      
      Time time0 = TypeUtils.castToSqlTime(byte0);
      assertNotNull(time0);
      assertEquals("00:00:00", time0.toString());
      
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [C", class1.toString());
      assertFalse(class1.isInterface());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string0 = ";;{d}!B{cQ\\6DeQ^V?";
      Class<?> class2 = TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?");
      assertNull(class2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      boolean boolean1 = true;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      boolean boolean2 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Class<NoSuchMethodException> class3 = NoSuchMethodException.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class3, map0, true, propertyNamingStrategy1);
      assertNotNull(list0);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, map0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte byte0 = (byte)48;
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals("class [B", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      
      String string0 = ";;{d}!B{_Q\\iDe%Q^V?";
      Class<?> class2 = TypeUtils.loadClass(";;{d}!B{_QiDe%Q^V?");
      assertNull(class2);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      assertEquals(PropertyNamingStrategy.SnakeCase, propertyNamingStrategy0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.awt.Point");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("7B;QU1C8<(2", "L;;{d}!B{cQ\u0006DeQ^V?");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: 7B;QU1C8<(2", sQLTimeoutException0.toString());
      assertEquals("L;;{d}!B{cQ\u0006DeQ^V?", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("7B;QU1C8<(2", sQLTimeoutException0.getMessage());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B&NM");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.awt.Point");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertNotNull(parserConfig1);
      assertNotSame(parserConfig1, parserConfig0);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject(linkedHashMap0);
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      Class<Dimension> class0 = Dimension.class;
      Dimension dimension0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig1);
      assertNotNull(dimension0);
      assertNotSame(parserConfig1, parserConfig0);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Ljava.awt.Point");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.awt.Point\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      
      Throwable throwable0 = illegalThreadStateException0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(illegalThreadStateException0, throwable0);
      assertSame(throwable0, illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertEquals("java.lang.IllegalThreadStateException", throwable0.toString());
      assertNull(throwable0.getMessage());
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("getclone", "", "A[%6%}I>\";.", 26);
      assertNotNull(stackTraceElement0);
      assertEquals("getclone", stackTraceElement0.getClassName());
      assertEquals("getclone.(A[%6%}I>\";.:26)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("A[%6%}I>\";.", stackTraceElement0.getFileName());
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals(26, stackTraceElement0.getLineNumber());
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A[%6%}I>\";.";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      assertNotNull(javaBeanSerializer0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertNotNull(imageCapabilities0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap(imageCapabilities0);
      assertNotNull(map0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QhyzU>:6");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xFZ*WDJjI`nc3");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("`iy?[%kRZ]hfxi#", throwable0);
      assertNotNull(typeNotPresentException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertEquals("java.lang.IllegalThreadStateException", throwable0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("`iy?[%kRZ]hfxi#", typeNotPresentException0.typeName());
      assertEquals("java.lang.TypeNotPresentException: Type `iy?[%kRZ]hfxi# not present", typeNotPresentException0.toString());
      assertEquals("Type `iy?[%kRZ]hfxi# not present", typeNotPresentException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = typeNotPresentException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertSame(illegalThreadStateException0, throwable0);
      assertSame(throwable0, illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertEquals("java.lang.IllegalThreadStateException", throwable0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("`iy?[%kRZ]hfxi#", typeNotPresentException0.typeName());
      assertEquals("java.lang.TypeNotPresentException: Type `iy?[%kRZ]hfxi# not present", typeNotPresentException0.toString());
      assertEquals("Type `iy?[%kRZ]hfxi# not present", typeNotPresentException0.getMessage());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Dimension> class1 = Dimension.class;
      ParserConfig parserConfig1 = new ParserConfig();
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      Dimension dimension0 = TypeUtils.castToJavaBean(map0, class1, parserConfig1);
      assertNotNull(dimension0);
      assertNotSame(parserConfig1, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      java.util.Date date0 = TypeUtils.castToDate("");
      assertNull(date0);
      
      SQLDataException sQLDataException0 = new SQLDataException(throwable0);
      assertNotNull(sQLDataException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertEquals("java.lang.IllegalThreadStateException", throwable0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.lang.IllegalThreadStateException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLDataException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertEquals("java.lang.IllegalThreadStateException", throwable0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.lang.IllegalThreadStateException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLDataException: java.lang.IllegalThreadStateException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLDataException: java.lang.IllegalThreadStateException", sQLSyntaxErrorException0.getMessage());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.Object@73849f99
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      ThreadGroup threadGroup0 = new ThreadGroup("L");
      assertNotNull(threadGroup0);
      assertEquals("L", threadGroup0.getName());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "javassist.util.proxy.ProxyObject");
      assertNotNull(threadGroup1);
      assertEquals("L", threadGroup0.getName());
      assertEquals("javassist.util.proxy.ProxyObject", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      long long0 = TypeUtils.fnv1a_64_lower("L");
      assertEquals((-5808551375595768565L), long0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Field field0 = ParserConfig.getFieldFromCache("javassist.util.proxy.ProxyObject", hashMap0);
      assertNull(field0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean2 = TypeUtils.isNumber("]`*5HjQk<H-D");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Field field1 = hashMap0.put("L", (Field) null);
      assertNull(field1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      hashMap0.clear();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(true);
      assertNotNull(sqlDateDeserializer0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("getgetMaximumFractionDigits", parserConfig0, 29);
      assertNotNull(defaultJSONParser0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("java.lang.AutoCloseable", classLoader1, true);
      assertNotNull(class0);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("interface java.lang.AutoCloseable", class0.toString());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = ':';
      charArray0[2] = '|';
      charArray0[3] = '=';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      Time time0 = TypeUtils.castToSqlTime(byte0);
      assertNotNull(time0);
      assertEquals("00:00:00", time0.toString());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class [Z", class1.toString());
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(class1).when(genericArrayType1).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertNotNull(type0);
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class [Z", class1.toString());
      
      Class<?> class2 = TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?");
      assertNull(class2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<?> class3 = TypeUtils.loadClass(";;{d}!B{cQ\u0006DeQ^V?", classLoader1, true);
      assertNull(class3);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<MockMinguoDate> class4 = MockMinguoDate.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class4, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      int int0 = 49;
      Random.setNextRandom(49);
      String string0 = "L0za$n+;h)e]a";
      String string1 = "Fd]W6pFEi0";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Fd]W6pFEi0", "rTt", 49);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("Fd]W6pFEi0", sQLNonTransientConnectionException0.getMessage());
      assertEquals("rTt", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(49, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Fd]W6pFEi0", sQLNonTransientConnectionException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("Fd]W6pFEi0", sQLNonTransientConnectionException0.getMessage());
      assertEquals("rTt", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(49, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Fd]W6pFEi0", sQLNonTransientConnectionException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLNonTransientConnectionException: Fd]W6pFEi0", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Fd]W6pFEi0", sQLTransactionRollbackException0.getMessage());
      
      LinkedHashMap<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> linkedHashMap1 = new LinkedHashMap<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException>();
      assertNotNull(linkedHashMap1);
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Fd]W6pFEi0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Fd]W6pFEi0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      
      Throwable throwable0 = illegalThreadStateException0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(illegalThreadStateException0, throwable0);
      assertSame(throwable0, illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", throwable0.toString());
      assertNull(throwable0.getMessage());
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("getclone", "", "A[%6%}I>\";.", 26);
      assertNotNull(stackTraceElement0);
      assertEquals("A[%6%}I>\";.", stackTraceElement0.getFileName());
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals("getclone.(A[%6%}I>\";.:26)", stackTraceElement0.toString());
      assertEquals("getclone", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(26, stackTraceElement0.getLineNumber());
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      InstantiationException instantiationException0 = new InstantiationException();
      assertNotNull(instantiationException0);
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      assertNull(instantiationException0.getMessage());
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(instantiationException0);
      assertTrue(boolean1);
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      assertNull(instantiationException0.getMessage());
      assertFalse(boolean1 == boolean0);
      
      Random.setNextRandom(26);
      boolean boolean2 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertNotNull(imageCapabilities0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      
      WeakHashMap<ParameterizedTypeImpl, Dimension> weakHashMap0 = new WeakHashMap<ParameterizedTypeImpl, Dimension>();
      assertNotNull(weakHashMap0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNotNull(noSuchMethodError0);
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      
      StackTraceElement stackTraceElement1 = new StackTraceElement("A[%6%}I>\";.", "com.alibaba.fastjson.asm.TypeCollector", "", 183);
      assertNotNull(stackTraceElement1);
      assertEquals(183, stackTraceElement1.getLineNumber());
      assertEquals("A[%6%}I>\";.", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("", stackTraceElement1.getFileName());
      assertEquals("A[%6%}I>\";..com.alibaba.fastjson.asm.TypeCollector(:183)", stackTraceElement1.toString());
      assertEquals("com.alibaba.fastjson.asm.TypeCollector", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("UNEERz%t", "C%%ZnC*", 26);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(26, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("C%%ZnC*", sQLTransactionRollbackException0.getSQLState());
      assertEquals("UNEERz%t", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: UNEERz%t", sQLTransactionRollbackException0.toString());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      stackTraceElementArray0[0] = stackTraceElement1;
      stackTraceElementArray0[1] = stackTraceElement0;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      assertEquals(26, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("C%%ZnC*", sQLTransactionRollbackException0.getSQLState());
      assertEquals("UNEERz%t", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: UNEERz%t", sQLTransactionRollbackException0.toString());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<OutOfMemoryError> class1 = OutOfMemoryError.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.createJavaBeanDeserializer(class1, class1);
      assertNotNull(objectDeserializer0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      
      TypeUtils.cast((Object) "", (Type) class0, parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, (PropertyNamingStrategy) null, true);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      String string0 = concurrentHashMap0.put("rXQg(qbjuNoy\u0005;*xM}", "rXQg(qbjuNoy\u0005;*xM}");
      assertNull(string0);
      assertFalse(concurrentHashMap0.isEmpty());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      assertNotNull(list0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer", sQLFeatureNotSupportedException0.getMessage());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      ConcurrentHashMap<MockJapaneseDate, Locale> concurrentHashMap1 = new ConcurrentHashMap<MockJapaneseDate, Locale>();
      assertNotNull(concurrentHashMap1);
      assertTrue(concurrentHashMap1.isEmpty());
      
      int int0 = concurrentHashMap1.size();
      assertEquals(0, int0);
      assertTrue(concurrentHashMap1.isEmpty());
      
      WeakHashMap<MockJapaneseDate, Locale> weakHashMap0 = new WeakHashMap<MockJapaneseDate, Locale>(concurrentHashMap1);
      assertNotNull(weakHashMap0);
      assertTrue(concurrentHashMap1.isEmpty());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      String string0 = "6w-M/0kl5z";
      long long0 = TypeUtils.fnv1a_64_lower("6w-M/0kl5z");
      assertEquals(478807707379398534L, long0);
      
      String string1 = "\\Zq oJ6r?NK ";
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("Zq oJ6r?NK ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Zq oJ6r?NK \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      
      IllegalThreadStateException illegalThreadStateException1 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException1);
      assertNull(illegalThreadStateException1.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException1.toString());
      assertFalse(illegalThreadStateException1.equals((Object)illegalThreadStateException0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Short> class0 = Short.class;
      Class<MapDeserializer> class1 = MapDeserializer.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      TreeMap<UUID, DecimalFormatSymbols> treeMap0 = new TreeMap<UUID, DecimalFormatSymbols>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<GridBagConstraints> class2 = GridBagConstraints.class;
      String[] stringArray1 = TypeUtils.getKoltinConstructorParameters(class2);
      assertNull(stringArray1);
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class2);
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertEquals("class java.awt.GridBagConstraints", class3.toString());
      assertFalse(class3.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      AtomicLong atomicLong0 = new AtomicLong(2010L);
      assertNotNull(atomicLong0);
      assertEquals(2010.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(2010.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)2010, atomicLong0.shortValue());
      assertEquals(2010, atomicLong0.intValue());
      assertEquals(2010L, atomicLong0.get());
      assertEquals("2010", atomicLong0.toString());
      assertEquals(2010L, atomicLong0.longValue());
      assertEquals((byte) (-38), atomicLong0.byteValue());
      
      long long0 = atomicLong0.decrementAndGet();
      assertEquals(2009L, long0);
      assertEquals(2009.0, atomicLong0.doubleValue(), 0.01);
      assertEquals("2009", atomicLong0.toString());
      assertEquals(2009.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)2009, atomicLong0.shortValue());
      assertEquals(2009L, atomicLong0.longValue());
      assertEquals(2009, atomicLong0.intValue());
      assertEquals(2009L, atomicLong0.get());
      assertEquals((byte) (-39), atomicLong0.byteValue());
      
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Integer integer0 = TypeUtils.castToInt(atomicLong0);
      assertEquals(2009, (int)integer0);
      assertNotNull(integer0);
      assertEquals(2009.0, atomicLong0.doubleValue(), 0.01);
      assertEquals("2009", atomicLong0.toString());
      assertEquals(2009.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)2009, atomicLong0.shortValue());
      assertEquals(2009L, atomicLong0.longValue());
      assertEquals(2009, atomicLong0.intValue());
      assertEquals(2009L, atomicLong0.get());
      assertEquals((byte) (-39), atomicLong0.byteValue());
      
      Random.setNextRandom(49);
      boolean boolean0 = TypeUtils.isNumber("exponentSeparator");
      assertFalse(boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(I)Z", "L0za$n+;h)e]a", 96);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: (I)Z", sQLNonTransientConnectionException0.toString());
      assertEquals("L0za$n+;h)e]a", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(96, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("(I)Z", sQLNonTransientConnectionException0.getMessage());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: (I)Z", sQLNonTransientConnectionException0.toString());
      assertEquals("L0za$n+;h)e]a", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(96, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("(I)Z", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: (I)Z", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLNonTransientConnectionException: (I)Z", sQLTransactionRollbackException0.toString());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<HttpCookie> class0 = HttpCookie.class;
      Class<Long> class1 = Long.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("long", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNotNull(class2);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("long", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertEquals("long", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "country", (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : country
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)79;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)79, (byte)79, (byte)79}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AtomicLong atomicLong0 = new AtomicLong((byte)79);
      assertNotNull(atomicLong0);
      assertEquals("79", atomicLong0.toString());
      assertEquals(79.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(79.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((byte)79, atomicLong0.byteValue());
      assertEquals(79L, atomicLong0.longValue());
      assertEquals((short)79, atomicLong0.shortValue());
      assertEquals(79L, atomicLong0.get());
      assertEquals(79, atomicLong0.intValue());
      
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      long long0 = atomicLong0.getAndAccumulate((-626L), longBinaryOperator0);
      assertEquals(79L, long0);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      System.setCurrentTimeMillis(1593L);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("(I)Z");
      assertNotNull(illegalThreadStateException0);
      assertEquals("(I)Z", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: (I)Z", illegalThreadStateException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(4, false, true, (byte)79, 58);
      assertNotNull(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      Class<TimeZone> class0 = TimeZone.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      
      Dimension dimension0 = new Dimension((-3912), 0);
      assertNotNull(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals((-3912), dimension0.width);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals((-3912.0), dimension0.getWidth(), 0.01);
      
      Dimension dimension1 = new Dimension();
      assertNotNull(dimension1);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertFalse(dimension1.equals((Object)dimension0));
      
      Rectangle rectangle0 = new Rectangle(point0, dimension1);
      assertNotNull(rectangle0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertFalse(dimension1.equals((Object)dimension0));
      
      DecimalFormat decimalFormat0 = new DecimalFormat("d]!7zc7");
      assertNotNull(decimalFormat0);
      assertEquals("d]!7zc7#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("-d]!7zc7", decimalFormat0.getNegativePrefix());
      assertEquals("d]!7zc7", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("d]!7zc7#", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      
      Currency currency0 = decimalFormat0.getCurrency();
      assertNotNull(currency0);
      assertEquals("d]!7zc7#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("-d]!7zc7", decimalFormat0.getNegativePrefix());
      assertEquals("d]!7zc7", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("d]!7zc7#", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("XXX", currency0.toString());
      assertEquals("XXX", currency0.getCurrencyCode());
      assertEquals((-1), currency0.getDefaultFractionDigits());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      java.util.Date date0 = TypeUtils.castToDate(calendar0);
      assertNotNull(date0);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertNotNull(class0);
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("interface java.util.List", class0.toString());
      assertTrue(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1537, class0.getModifiers());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl1);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      
      System.setCurrentTimeMillis((-330));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class0 = TypeUtils.loadClass("d]!3zcI");
      assertNull(class0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d]!3zcI");
      assertFalse(boolean0);
      
      Random.setNextRandom(41);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      String string0 = linkedHashMap0.put("d]!3zcI", "d]!3zcI");
      assertNull(string0);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      
      Class<?> class2 = TypeUtils.getClassFromMapping(" `c4vbS%EeY");
      assertNull(class2);
      
      Class<?> class3 = TypeUtils.getClass((Type) class1);
      assertNotNull(class3);
      assertSame(class1, class3);
      assertSame(class3, class1);
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(17, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.lang.String", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl1);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("DateFormatSymbols", sQLSyntaxErrorException0);
      assertNotNull(typeNotPresentException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.lang.TypeNotPresentException: Type DateFormatSymbols not present", typeNotPresentException0.toString());
      assertEquals("Type DateFormatSymbols not present", typeNotPresentException0.getMessage());
      assertEquals("DateFormatSymbols", typeNotPresentException0.typeName());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Ljava.lang.AutoCloseable", "]\"5F4Mc", 19);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("]\"5F4Mc", sQLTransientConnectionException0.getSQLState());
      assertEquals("Ljava.lang.AutoCloseable", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: Ljava.lang.AutoCloseable", sQLTransientConnectionException0.toString());
      assertEquals(19, sQLTransientConnectionException0.getErrorCode());
      
      AtomicInteger atomicInteger0 = new AtomicInteger(32);
      assertNotNull(atomicInteger0);
      assertEquals((short)32, atomicInteger0.shortValue());
      assertEquals(32L, atomicInteger0.longValue());
      assertEquals(32, atomicInteger0.get());
      assertEquals(32.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("32", atomicInteger0.toString());
      assertEquals(32.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(32, atomicInteger0.intValue());
      assertEquals((byte)32, atomicInteger0.byteValue());
      
      java.util.Date date0 = TypeUtils.castToDate(atomicInteger0);
      assertNotNull(date0);
      assertEquals((short)32, atomicInteger0.shortValue());
      assertEquals(32L, atomicInteger0.longValue());
      assertEquals(32, atomicInteger0.get());
      assertEquals(32.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("32", atomicInteger0.toString());
      assertEquals(32.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(32, atomicInteger0.intValue());
      assertEquals((byte)32, atomicInteger0.byteValue());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      Long long0 = new Long(287);
      assertEquals(287L, (long)long0);
      assertNotNull(long0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl1);
      assertNotNull(type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl1);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl1, type0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Class<PropertyProcessable> class4 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class4);
      assertNotNull(propertyProcessableDeserializer0);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        properties0.putIfAbsent((Object) null, propertyProcessableDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      AtomicLong atomicLong0 = new AtomicLong();
      assertNotNull(atomicLong0);
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals("0", atomicLong0.toString());
      
      long long0 = atomicLong0.decrementAndGet();
      assertEquals((-1L), long0);
      assertEquals((byte) (-1), atomicLong0.byteValue());
      assertEquals((-1L), atomicLong0.longValue());
      assertEquals((short) (-1), atomicLong0.shortValue());
      assertEquals((-1.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1), atomicLong0.intValue());
      assertEquals((-1L), atomicLong0.get());
      assertEquals((-1.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals("-1", atomicLong0.toString());
      
      LinkedHashMap<SQLException, MockSimpleDateFormat> linkedHashMap0 = new LinkedHashMap<SQLException, MockSimpleDateFormat>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Integer integer0 = TypeUtils.castToInt(atomicLong0);
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      assertEquals((byte) (-1), atomicLong0.byteValue());
      assertEquals((-1L), atomicLong0.longValue());
      assertEquals((short) (-1), atomicLong0.shortValue());
      assertEquals((-1.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1), atomicLong0.intValue());
      assertEquals((-1L), atomicLong0.get());
      assertEquals((-1.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals("-1", atomicLong0.toString());
      
      Random.setNextRandom(49);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<HttpCookie> class0 = HttpCookie.class;
      Class<MockCalendar> class1 = MockCalendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("class org.evosuite.runtime.mock.java.util.MockCalendar", class2.toString());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "country", (Type) class2, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"country\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
