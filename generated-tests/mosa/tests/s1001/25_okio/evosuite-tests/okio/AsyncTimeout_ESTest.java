/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:58:55 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.PrintStream;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.GzipSource;
import okio.Pipe;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      asyncTimeout0.timedOut();
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      asyncTimeout0.source(gzipSource0);
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      assertEquals("java.io.InterruptedIOException: timeout", iOException0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.clearDeadline();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      AsyncTimeout asyncTimeout2 = (AsyncTimeout)asyncTimeout0.deadline(65536L, timeUnit0);
      asyncTimeout0.enter();
      Buffer buffer0 = new Buffer();
      MockIOException mockIOException0 = new MockIOException("DeflaterSink(");
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout2.newTimeoutException(mockIOException0);
      InterruptedIOException interruptedIOException1 = (InterruptedIOException)asyncTimeout1.exit((IOException) interruptedIOException0);
      InterruptedIOException interruptedIOException2 = (InterruptedIOException)asyncTimeout0.exit((IOException) interruptedIOException1);
      assertSame(interruptedIOException2, interruptedIOException0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearDeadline();
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      asyncTimeout0.deadline(65536L, timeUnit0);
      MockIOException mockIOException0 = new MockIOException(mockThrowable1);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.newTimeoutException(interruptedIOException0);
      asyncTimeout0.enter();
      boolean boolean0 = true;
      asyncTimeout0.exit(true);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      asyncTimeout0.deadline(65536L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      MockIOException mockIOException1 = new MockIOException(mockThrowable0);
      asyncTimeout0.newTimeoutException(mockIOException1);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout0.newTimeoutException(iOException0);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit((IOException) null);
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.exit(iOException0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Fbk=spJfP");
      Pipe pipe0 = new Pipe(235929600000000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      pipe_PipeSink0.close();
      asyncTimeout0.sink(pipe_PipeSink0);
      asyncTimeout0.enter();
      asyncTimeout0.timedOut();
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("[hex=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[hex=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "byteCount < 0: ");
      IOException iOException0 = asyncTimeout1.exit((IOException) mockIOException0);
      MockIOException mockIOException1 = new MockIOException("", iOException0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("byteCount < 0: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockIOException1.printStackTrace((PrintStream) mockPrintStream0);
      asyncTimeout0.newTimeoutException(mockIOException1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      asyncTimeout0.exit();
      asyncTimeout1.enter();
      System.setCurrentTimeMillis(235929600000000000L);
      asyncTimeout1.enter();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      long long0 = 65536L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.timeout(65536L, timeUnit0);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
}
