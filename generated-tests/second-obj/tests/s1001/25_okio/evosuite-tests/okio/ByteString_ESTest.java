/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:49:39 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.indexOf(byteArray0, 5);
      byte[] byteArray1 = byteString0.internalArray();
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-82);
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.hex();
      assertEquals("00", string0);
      
      boolean boolean0 = byteString0.equals(byteArray0);
      boolean boolean1 = byteString0.endsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte byte0 = (byte) (-39);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString.decodeBase64("VmM_p|[_N/_&C");
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        byteString0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-21);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      Charset.defaultCharset();
      byteString0.toAsciiUppercase();
      String string0 = "";
      // Undeclared exception!
      try { 
        Charset.isSupported("w8<*>YT^F.VJ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // w8<*>YT^F.VJ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)23;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=2d07]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString.decodeBase64("`>5o&!");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`>5o&!");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("`>5o&!");
      ByteString.of(byteBuffer0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("W,B[]p9hpc=jCB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: W
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)9;
      ByteString byteString0 = new ByteString(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("RF4owK6se/hT%");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      byteString0.write(objectOutputStream0);
      assertEquals(2, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 1757, 965);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=1757 byteCount=965
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("US-ASCII", charset0);
      Buffer buffer0 = new Buffer();
      byteString0.indexOf(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "]7!!n5?S'/M5e^";
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("]7!!n5?S'/M5e^", charset0);
      byteString0.toString();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      byteString0.indexOf(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-30);
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=e2]", string0);
      
      ByteString byteString1 = ByteString.decodeBase64("");
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString0.size();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      byteBuffer0.slice();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      byteString1.internalArray();
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.EMPTY.lastIndexOf(byteString1, (int) (byte)8);
      byteString1.toString();
      ByteString byteString2 = ByteString.decodeBase64("");
      byteString2.EMPTY.endsWith(byteArray0);
      byteString0.startsWith(byteString2);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pipe pipe0 = new Pipe(62L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)59;
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.asByteBuffer();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(1952, 1952);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)121;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.base64();
      int int0 = (-1232);
      byteString0.indexOf(byteArray0, (-1232));
      // Undeclared exception!
      try { 
        byteString0.getByte(1488);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteString0.indexOf(byteString1, (int) (byte) (-24));
      byteString0.compareTo(byteString1);
      byteString0.hashCode();
      byteString1.substring(0);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteString byteString0 = ByteString.of(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)8;
      int int0 = byteString0.lastIndexOf(byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      Charset charset0 = Charset.defaultCharset();
      String string0 = "";
      ByteString byteString0 = ByteString.encodeString("", charset0);
      byteString0.toString();
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      byteString0.indexOf(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (byte) (-68));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -68
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString.decodeBase64("um(%a?");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.decodeHex("");
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(671L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("]7!!n5?S'/M5e^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ]
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("&b%>h|*x]q`HU}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: &
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.EMPTY.lastIndexOf(byteString1, (int) (byte)8);
      byteString1.toString();
      ByteString.decodeBase64("[hex=080000]");
      // Undeclared exception!
      try { 
        byteString0.startsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteString1, (int) (byte) (-24));
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int2 = byteString1.hashCode();
      assertFalse(int2 == int0);
      
      ByteString byteString2 = byteString1.substring(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int3 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int4 = byteString2.EMPTY.indexOf(byteArray0);
      int int5 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int6 = byteString0.indexOf(byteString1);
      assertEquals(0, int6);
      assertFalse(int6 == int4);
      
      byteString0.EMPTY.lastIndexOf(byteArray0, 56);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ruffr@Y0%/QO\"{f>%8");
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertSame(byteString1, byteString2);
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("]7!!n5?S'/M5e^", charset0);
      byteString0.toString();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-68);
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      byteString0.indexOf(byteArray0);
      byteString0.endsWith(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString1 = null;
      // Undeclared exception!
      try { 
        byteString0.endsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString.decodeBase64("VmM_p|[_N/_&C");
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)83;
      byteString0.lastIndexOf(byteArray0, 1018);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[0] = (byte)20;
      byteArray0[0] = (byte)56;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-66);
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString0.hmacSha256(byteString1);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      // Undeclared exception!
      try { 
        byteString0.substring((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.hmacSha512(byteString1);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString2 = hashingSource0.hash();
      byteString0.startsWith(byteString2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 54;
      // Undeclared exception!
      try { 
        byteString2.substring((-1871));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (int) (byte) (-49), 85);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      String string0 = byteString0.utf8;
      byteString1.EMPTY.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-39);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.sha512();
      byteString1.EMPTY.base64();
      byteString0.endsWith(byteArray0);
      ByteString byteString2 = ByteString.of(byteArray0);
      byteString2.EMPTY.utf8 = "v";
      byteString1.lastIndexOf(byteString2, (int) (byte) (-39));
      byteString0.endsWith(byteString1);
      byteString2.base64();
      // Undeclared exception!
      try { 
        HashingSource.md5((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.asByteBuffer();
      byteString1.toString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[hex=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: [hex=
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("p-bQp/", charset0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      try { 
        ByteString.read(sequenceInputStream0, 38);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toAsciiLowercase();
      sequenceInputStream0.read((byte[]) null, 261, 8);
      sequenceInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      ByteString.of(byteArray0);
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString byteString1 = byteString0.md5();
      byteString0.hex();
      ByteString.codePointIndexToCharIndex("[hex=", 4);
      byteString0.compareTo(byteString1);
      byteString1.rangeEquals((-1), byteArray0, 4, (int) (byte)8);
      ByteString byteString2 = ByteString.decodeBase64("size=%s fromIndex=%s toIndex=%s");
      assertNull(byteString2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      ByteString byteString1 = ByteString.encodeUtf8("5l5W//&");
      ByteString byteString2 = byteString1.md5();
      int int0 = ByteString.codePointIndexToCharIndex("5l5W//&", (byte) (-1));
      assertEquals((-1), int0);
      
      byteString2.internalArray();
      assertEquals(8, byteString1.size());
      
      byteString0.hmacSha256(byteString1);
      Charset.defaultCharset();
      ByteString byteString3 = byteString2.toAsciiUppercase();
      assertNotSame(byteString3, byteString2);
      assertFalse(byteString3.equals((Object)byteString2));
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteString byteString4 = new ByteString(byteArray0);
      assertTrue(byteString4.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.toString();
      ByteString byteString1 = ByteString.decodeBase64("Unexpected hex digit: ");
      // Undeclared exception!
      try { 
        byteString1.EMPTY.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString1.base64();
      Charset.defaultCharset();
      byteString1.toAsciiUppercase();
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      byteString0.toString();
      byteString2.toAsciiUppercase();
      byteString1.equals(byteString2);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("]7!!n5?S'/M5e^", charset0);
      byteString0.sha1();
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(3556, 3556);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.equals(byteArray0);
      Pipe pipe0 = new Pipe(1460L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      boolean boolean0 = realBufferedSource0.closed;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString1.toString();
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      boolean boolean1 = byteString0.endsWith(byteString1);
      assertTrue(boolean1);
      
      ByteString byteString2 = byteString0.toAsciiLowercase();
      int int0 = byteString2.indexOf(byteString0);
      assertEquals(0, int0);
      
      byteString1.toByteArray();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte) (-104);
      byteArray1[4] = (byte)36;
      byteArray1[5] = (byte)47;
      byteArray1[6] = (byte)3;
      byteArray1[7] = (byte) (-12);
      byteArray1[8] = (byte) (-100);
      ByteString byteString3 = new ByteString(byteArray1);
      int int1 = byteString0.compareTo(byteString3);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.indexOf(byteArray0, 53);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)90;
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      ByteString byteString1 = ByteString.encodeUtf8("K{%]Iy=");
      ByteString byteString2 = byteString1.md5();
      ByteString.codePointIndexToCharIndex("[hex=", (-1074));
      byteString2.substring(5);
      byteString1.sha1();
      byteString1.compareTo(byteString2);
      // Undeclared exception!
      try { 
        byteString1.substring((int) (byte)90, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString0.hashCode();
      byteString1.substring(1);
      byteString1.equals(byteString0);
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString1;
      byteStringArray0[0] = byteString0;
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1533L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1533
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[5];
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        HashingSource.sha1((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString1.rangeEquals((int) (byte)8, byteArray0, 49, 49);
      assertFalse(boolean0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VJ2");
      byteString1.hashCode();
      Charset charset0 = Charset.defaultCharset();
      byteString1.string(charset0);
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.base64();
      Charset.defaultCharset();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      HashingSink hashingSink1 = HashingSink.hmacSha512(hashingSink0, byteString1);
      ByteString byteString3 = hashingSink1.hash();
      byteString3.lastIndexOf(byteArray0, (int) (byte) (-61));
      byteString3.startsWith(byteString0);
      // Undeclared exception!
      try { 
        byteString2.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("]7!!n5?S'/M5e^", charset0);
      byteString0.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-68);
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      byteString0.endsWith(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString1 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.indexOf(byteArray0, 3487);
      ByteString byteString2 = byteString0.EMPTY.sha256();
      byteString2.EMPTY.toAsciiLowercase();
      byteString0.size();
      byteString0.size();
      byteString0.EMPTY.hashCode();
      // Undeclared exception!
      try { 
        byteString0.getByte((byte)33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset.defaultCharset();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.sha1();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      hashingSink0.hash();
      String string0 = byteString0.utf8;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      HashingSource.sha256(realBufferedSource0);
      realBufferedSource2.readByteString();
      boolean boolean0 = realBufferedSource0.closed;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString3 = realBufferedSource1.readByteString();
      byteString3.toAsciiLowercase();
      realBufferedSource0.readByteArray();
      int int0 = byteString1.compareTo(byteString2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        ByteString.encodeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      sequenceInputStream0.close();
      ByteString byteString0 = ByteString.read(sequenceInputStream0, 0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("7Cl7z&xw2f@+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: l
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-55);
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(671L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = ByteString.decodeHex("3d");
      assertEquals(1, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      Charset.defaultCharset();
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.sha512();
      Pipe pipe0 = new Pipe((byte)33);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("m,S4wb/`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: m
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.indexOf(byteString1, (int) (byte) (-24));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString1.hashCode();
      ByteString byteString2 = byteString1.substring(0);
      byteString1.equals(byteString0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString2.EMPTY.indexOf(byteArray0);
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString0.indexOf(byteString1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ruffr@Y0%/QO\"{f>%8");
      byteString1.startsWith(byteString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      try { 
        ByteString.read(bufferedInputStream0, 4);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.hmacSha512(byteString1);
      ByteString byteString2 = byteString0.sha1();
      byteString2.toString();
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)33);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (byte)33);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.toString();
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString1.base64();
      Charset.defaultCharset();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString2 = hashingSink0.hash();
      ByteString byteString3 = byteString2.sha1();
      ByteString byteString4 = byteString3.substring((int) (byte)0, (int) (byte)0);
      byteString4.EMPTY.hashCode = 1517;
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString4;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString2;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 93
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[6];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-114);
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      byteStringArray0[1] = byteString1;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byteString1.toString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString2 = byteString0.toAsciiUppercase();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      ByteString byteString3 = realBufferedSource1.readByteString();
      realBufferedSource1.readByteString();
      realBufferedSource1.readByteString();
      HashingSource.sha1(realBufferedSource2);
      realBufferedSource0.readByteString();
      byteString0.equals(byteString2);
      ByteString byteString4 = byteString2.sha1();
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource2);
      boolean boolean0 = realBufferedSource3.closed;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString4.toString();
      byteString0.endsWith(byteString2);
      byteString3.toAsciiLowercase();
      byteString4.base64();
  }
}
