/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:03:40 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 0);
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(14, 14);
      cRSMatrix0.determinant();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateColumn(14, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '14' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(48);
      assertEquals(48, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.020833333333333332, cRSMatrix0.density(), 0.01);
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.maxInColumn(6);
      assertEquals(48, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.020833333333333332, cRSMatrix0.density(), 0.01);
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix(48, 48, 48);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(48, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(48, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      
      boolean boolean0 = cRSMatrix1.equals((Object) cRSMatrix0);
      assertEquals(48, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.020833333333333332, cRSMatrix0.density(), 0.01);
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(48, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(48, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertFalse(boolean0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-18), (-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -18x-18
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformColumn(0, vectorFunction0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(15);
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(15, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(15, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(15, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(byteArray0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#\u00A0##0,###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      String string0 = cRSMatrix0.mkString((NumberFormat) decimalFormat0);
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(15, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#\u00A0##0,###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(string0);
      assertEquals("1 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 1 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 1 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 1 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.rows());
      assertNotNull(cRSMatrix1);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      boolean boolean0 = cRSMatrix0.equals((Object) cRSMatrix1);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(boolean0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      String string0 = cRSMatrix0.toCSV();
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(string0);
      assertEquals("0.000, 0.000\n0.000, 0.000\n", string0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cRSMatrix0.columnMajorIterator();
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(columnMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = Matrix.constant(2, 2, 3084.084090765794);
      assertEquals(2, matrix0.rows());
      assertEquals(2, matrix0.columns());
      assertNotNull(matrix0);
      
      cRSMatrix0.setAll((-701.0));
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals((-701.0), cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals((-701.0), cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
      
      cRSMatrix0.hashCode();
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 2083);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      int int0 = denseMatrix0.rows();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, int0);
      
      int int1 = denseMatrix0.rows();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      double double0 = denseMatrix0.manhattanNorm();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      int int0 = (-1928);
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceTopLeft((-1928), (-1928));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1928][0..-1928].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(15);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertEquals(15, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(15, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertEquals(15, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(1.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceBottomRight(15, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [15..15][17..15].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(15, 15);
      assertEquals(15, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.slice(15, 15, 37, 37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '15' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(112, 2023.794745);
      assertEquals(112, rowMajorSparseMatrix0.columns());
      assertEquals(2023.794745, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(112, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.008928571428571428, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(112, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.slice((-630), (-630), (-630), (-630));
      assertEquals(112, rowMajorSparseMatrix0.columns());
      assertEquals(2023.794745, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(112, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.008928571428571428, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(112, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, double0, 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.each(matrixProcedure0);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiply((Matrix) denseMatrix0);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(2, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(1955, (-403), (-403));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1955x-403
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.identity((-454));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(14, 14);
      assertEquals(14, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(14, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.power(14);
      assertEquals(14, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(14, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(14, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(14, cRSMatrix1.columns());
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      cRSMatrix1.rotate();
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("o+DQGS^xP~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      String string0 = cRSMatrix0.toCSV();
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(string0);
      assertEquals("1.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 1.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 1.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 1.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 1.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 1.000\n", string0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.divide(1.0);
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix1.density(), 0.01);
      assertEquals(6, cRSMatrix1.columns());
      assertEquals(6, cRSMatrix1.rows());
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(48, 48, 48);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      
      // Undeclared exception!
      try { 
        cRSMatrix1.subtract((Matrix) cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 48x48.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      double double0 = cRSMatrix0.sum();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(15);
      assertEquals(0.06666666666666667, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(15, cRSMatrix0.columns());
      assertEquals(15, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(15, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(15, 10, mockRandom0);
      assertEquals(10, matrix0.columns());
      assertEquals(15, matrix0.rows());
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(19, 19);
      assertEquals(19, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(19, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(19, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(19, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.slice((-1), (-1), 19, 19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(69, 72, 72);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(72, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(69, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.power((-2460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2460.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)SparseMatrix.zero(0, 0, 0);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.update(matrixFunction0);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix1, (SparseMatrix) cRSMatrix1);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, rowMajorSparseMatrix0);
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      
      cRSMatrix2.hashCode();
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, rowMajorSparseMatrix0);
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 48;
      CRSMatrix cRSMatrix3 = (CRSMatrix)cRSMatrix0.shuffle();
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.cardinality());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertNotNull(cRSMatrix3);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix2);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix3);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix2));
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)rowMajorSparseMatrix0));
      
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.from2DArray(doubleArray1);
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(2, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.rotate();
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(2, basic2DMatrix0.columns());
      assertEquals(4, basic2DMatrix1.columns());
      assertEquals(2, basic2DMatrix1.rows());
      assertNotNull(basic2DMatrix1);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-1), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.shuffle();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(2, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(3, (-4044.6547));
      assertEquals(3, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      assertEquals(3, denseVector0.length());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotNull(matrix0);
      
      VectorIterator vectorIterator0 = matrix0.iteratorOfRow(23);
      assertEquals(3, denseVector0.length());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotNull(vectorIterator0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      assertEquals(3, denseVector0.length());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) inPlaceCopyMatrixToMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Matrix.diagonal(3456, 3456);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      cRSMatrix0.removeLastRow();
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = new CRSMatrix(19, 19);
          cRSMatrix0.getColumn(19);
          LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
          cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
          cRSMatrix0.determinant();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1439);
      CRSMatrix cRSMatrix2 = new CRSMatrix(23, 1439, 23);
      cRSMatrix1.equals((Object) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      cRSMatrix0.mkString("OL>5F&g)R_i+$W", "<>67bu2P");
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix1.shuffle();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.randomSymmetric(0, mockRandom0);
      basic2DMatrix0.kroneckerProduct(cRSMatrix0);
      basic2DMatrix0.min();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2 rows and 2 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = CRSMatrix.identity(15);
          CRSMatrix cRSMatrix1 = new CRSMatrix(15, 15);
          cRSMatrix0.equals((Object) cRSMatrix1);
          SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(15, 485.9);
          cRSMatrix0.determinant();
          // Undeclared exception!
          cRSMatrix1.kroneckerProduct(sparseMatrix0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1);
      sparseMatrix0.trace();
      sparseMatrix0.multiply((double) 1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
          DenseVector denseVector0 = DenseVector.constant(9, 9);
          Matrix matrix0 = denseVector0.toDiagonalMatrix();
          matrix0.copyOfRows(328);
          VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
          doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
          matrix0.foldRows(vectorAccumulator0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2, 2);
      cRSMatrix0.rank();
      cRSMatrix0.mkString("Wrong input file format: can not read header '%%MatrixMarket'.", "uKTRb?");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 1636.5823090222787);
      sparseMatrix0.toColumnMajorSparseMatrix();
      sparseMatrix0.toCSV();
      sparseMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1428, 1428);
      matrix0.copy();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(19, 19);
      cRSMatrix0.determinant();
      cRSMatrix0.sliceBottomRight(10, 13);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = new CRSMatrix(14, 14);
          cRSMatrix0.determinant();
          LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
          cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      cRSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(14, 14);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      // Undeclared exception!
      try { 
        cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInColumn((-1), vectorProcedure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(19, 19);
      // Undeclared exception!
      try { 
        cRSMatrix0.transformColumn(38, (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '38' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(29);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(29, 29, 29);
      cRSMatrix1.copyOfColumns(29);
      cRSMatrix0.removeLastColumn();
      cRSMatrix1.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 2);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      sparseMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(7, 7);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.removeRow(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(14, 14);
      cRSMatrix0.removeLastColumn();
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(14, 14, 14);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      cRSMatrix0.euclideanNorm();
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(14, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..13
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(14, 14, 14);
      cRSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInColumn(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '14' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 0);
      matrix0.getColumn(0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, (-120.3435));
      sparseMatrix0.removeFirstColumn();
      sparseMatrix0.toCSV();
      sparseMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(50);
      cRSMatrix0.infinityNorm();
      cRSMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(19, 19);
      cRSMatrix0.determinant();
      cRSMatrix0.blankOfColumns(19);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1, 1117, 486);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 1117 cols at 0, 0 in a 1x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV(",");
      // Undeclared exception!
      try { 
        cRSMatrix0.add((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 405;
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(Integer.MAX_VALUE, 1428, 405);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(7, 7);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseVector denseVector0 = DenseVector.unit(7);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow((-4249), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 2);
      sparseMatrix0.toRowMajorSparseMatrix();
      sparseMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.product();
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket vector coordinate real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      rowMajorSparseMatrix0.setRow(0, 305.71889);
      ((CRSMatrix) rowMajorSparseMatrix0).setAll(305.71889);
      rowMajorSparseMatrix0.euclideanNorm();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.get(0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(15);
      CRSMatrix cRSMatrix1 = new CRSMatrix(15, 15, 15);
      cRSMatrix0.equals((Object) cRSMatrix1);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(15, 15);
      cRSMatrix2.euclideanNorm();
      MockRandom mockRandom0 = new MockRandom(15);
      DenseVector denseVector0 = DenseVector.random(15, mockRandom0);
      cRSMatrix0.multiply((Vector) denseVector0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(48);
      cRSMatrix0.toString();
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2, 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(19, 19, 19);
      cRSMatrix0.blankOfRows(19);
      cRSMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow((-1868));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1868
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(15);
      cRSMatrix0.iteratorOfColumn(9);
      cRSMatrix0.determinant();
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 15;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(15);
      CRSMatrix cRSMatrix1 = new CRSMatrix(15, 15);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(15, 1.1102230246251565E-14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(7, 7);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseVector.unit(7);
      // Undeclared exception!
      try { 
        cRSMatrix0.swapRows(7, 1926);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2, 2);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(2, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6);
      cRSMatrix0.rank();
      cRSMatrix0.toCSV();
      cRSMatrix0.determinant();
      cRSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(19, 19);
      CRSMatrix cRSMatrix1 = new CRSMatrix(19, 19);
      cRSMatrix0.insert((Matrix) cRSMatrix1, 19, 19);
      cRSMatrix0.determinant();
      cRSMatrix1.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(48, 48, 48);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix1.insert((Matrix) cRSMatrix0, 48, (-3803));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 48x-3803
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(7, 4);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseVector denseVector0 = DenseVector.unit(4);
      cRSMatrix0.insertRow(5, denseVector0);
      // Undeclared exception!
      try { 
        Matrix.fromCSV("rv");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Matrix matrix0 = Matrix.from1DArray(18, 18, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(7, 7);
      sparseMatrix0.determinant();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.updateRow(7, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1214, 784);
      // Undeclared exception!
      sparseMatrix0.setColumn(8, (double) 1214);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 1651.0);
      Matrix matrix0 = sparseMatrix0.removeFirstColumn();
      sparseMatrix0.toCSV();
      CRSMatrix.fromCSV("1651.000,    0.000\n   0.000, 1651.000\n");
      // Undeclared exception!
      try { 
        matrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[1];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      rowMajorSparseMatrix0.swapRows(32, 32);
      inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      Matrix.diagonal(32, 32);
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(48, 48, 48);
      cRSMatrix0.sliceTopLeft(48, 48);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.insert((Matrix) cRSMatrix1);
      cRSMatrix1.setColumn(48, (double) 48);
      cRSMatrix1.subtract((-452.3207119));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(28, 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      Matrix matrix1 = ooPlaceKroneckerProduct0.applyCommon(cRSMatrix0, cRSMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.hadamardProduct(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 56x0 does not equal to 3136x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldColumns(vectorAccumulator0);
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 2);
      sparseMatrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        Matrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CRSMatrix.identity(3);
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3, 3);
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(14, 14);
      cRSMatrix0.swapColumns((-65), (-65));
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.determinant();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 7;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(7, 7);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(7, 7);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) cRSMatrix0, (-1), (-1), 7, 7, 7, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative source position: 7, 7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2, 2);
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns((-4139), 236);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-4139' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(48);
      CRSMatrix cRSMatrix1 = new CRSMatrix(48, 48, 48);
      cRSMatrix1.toColumnVector();
      cRSMatrix0.equals((Object) cRSMatrix1);
      cRSMatrix1.determinant();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 1651.0);
      sparseMatrix0.toMatrixMarket();
      sparseMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 414);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(274);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn(414, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..273
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6, 6);
      cRSMatrix0.determinant();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.non(advancedMatrixPredicate0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      RowMajorSparseMatrix.zero(9, 6, 9);
      cRSMatrix0.insert((Matrix) cRSMatrix0);
      Integer integer0 = new Integer(6);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix.zero(2, 2);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rank();
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      cRSMatrix0.determinant();
      cRSMatrix0.norm();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(141, 6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(8, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(7, 7);
      sparseMatrix0.determinant();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 632);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateColumn(7, vectorFunction0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cRSMatrix0, sparseMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 48);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(48);
      cRSMatrix0.insertColumn(8, denseVector0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 22);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(22, 22);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn((-2241), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..21
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(281);
      CRSMatrix cRSMatrix1 = new CRSMatrix(281, 281, 281);
      cRSMatrix0.equals((Object) null);
      CRSMatrix.zero(281, 281);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(14, 14);
      cRSMatrix0.determinant();
      cRSMatrix0.copyOfRows(14);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(15);
      SparseMatrix.diagonal(15, 1651.0);
      cRSMatrix0.removeFirstColumn();
      String string0 = cRSMatrix0.toCSV();
      CRSMatrix.fromCSV(string0);
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      denseMatrix0.shuffle();
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray1);
      denseMatrix0.transpose();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      cRSMatrix0.determinant();
      // Undeclared exception!
      try { 
        denseMatrix1.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 14;
      CRSMatrix cRSMatrix0 = new CRSMatrix(14, 14);
      cRSMatrix0.transpose();
      cRSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInColumn(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '14' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.1102230246251565E-14;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2169.14379);
      doubleArray1[3] = 3098.0;
      doubleArray1[4] = 1.1102230246251565E-14;
      doubleArray1[5] = (-1326.779680833);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 2203.36;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.transpose();
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, matrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2, 2);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1, 2, 2, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2, 2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 2;
      CRSMatrix.identity(2);
      // Undeclared exception!
      try { 
        Matrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(141, 6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(37, vectorFunction0);
      int int0 = cRSMatrix0.rank();
      cRSMatrix0.determinant();
      cRSMatrix0.maxInRow(int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(7, 7);
      cRSMatrix0.mkString("OL>5F&g)R_i+$W", "OL>5F&g)R_i+$W");
      Matrix matrix0 = cRSMatrix0.power(1265);
      cRSMatrix0.equals((Object) matrix0);
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, true, true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.is(matrixPredicate0);
      cRSMatrix0.removeRow(2);
      cRSMatrix0.toString();
      cRSMatrix0.multiplyByItsTranspose();
      Vector vector0 = Vector.unit(1265);
      // Undeclared exception!
      try { 
        matrix1.setRow(2658, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1265. Should be: 7.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
          DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 414);
          CRSMatrix cRSMatrix0 = CRSMatrix.identity(274);
          // Undeclared exception!
          try { 
            cRSMatrix0.insertColumn(8, denseVector0);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Wrong vector length: 414. Should be: 274.
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)SparseMatrix.diagonal(4869, 0);
      cRSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1, (-1725), 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1725x1000
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      DenseMatrix.randomSymmetric(0, mockRandom0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(0, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix1.non(matrixPredicate0);
      cRSMatrix0.setColumn(0, 0.0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(47, 47, 47);
      Integer integer0 = new Integer(5);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      numberFormat0.setMinimumIntegerDigits(15);
      cRSMatrix0.toCSV(numberFormat0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      cRSMatrix0.insert(matrix0, 47, 9, 5, 9, 9, 10);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = NumberFormat.INTEGER_FIELD;
      Integer integer0 = new Integer(2);
      NumberFormat.getIntegerInstance();
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 0);
      cRSMatrix0.equals((Object) "<KH");
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real 0eneral ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown symmetry type: 0eneral.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(48);
      CRSMatrix cRSMatrix1 = new CRSMatrix(48, 5, 65);
      cRSMatrix0.equals((Object) cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.blankOfShape(45, 45);
      int int0 = (-51);
      int int1 = 353;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cRSMatrix0, (-51), 45, 45, 353, 21, 21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 45, 353
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
