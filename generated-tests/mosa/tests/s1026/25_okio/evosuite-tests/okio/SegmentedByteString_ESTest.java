/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:34:22 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("s.limit == s.pos");
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      segmentedByteString0.equals(buffer1);
      segmentedByteString0.write(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(32L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("nBVd ");
      ByteString byteString0 = buffer0.snapshot();
      String string0 = byteString0.hex();
      assertEquals(5, byteString0.size());
      assertEquals("6e42566420", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("]");
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      segmentedByteString0.write(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("J");
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = byteString0.sha1();
      byteString0.endsWith(byteString1);
      byteString0.sha1();
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(0);
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = byteString0.sha1();
      byteString0.indexOf(byteString1, 0);
      byte byte0 = byteString0.getByte(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      buffer0.writeInt(0);
      ByteString byteString0 = buffer0.snapshot();
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("s.limit == s.pos");
      ByteString byteString0 = buffer0.snapshot();
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals(16, byteString0.size());
      assertEquals("s.limit == s.pos", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("v~=\"");
      ByteString byteString0 = buffer0.snapshot();
      boolean boolean0 = byteString0.endsWith(byteString0);
      assertTrue(boolean0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      boolean boolean1 = byteString0.equals(byteString1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("]r_Pr7dy+");
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      byte[] byteArray0 = segmentedByteString0.internalArray();
      assertArrayEquals(new byte[] {(byte)93, (byte)114, (byte)95, (byte)80, (byte)114, (byte)55, (byte)100, (byte)121, (byte)43}, byteArray0);
      assertEquals(9, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("`");
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      segmentedByteString0.write(buffer1);
      assertFalse(buffer1.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("Nx[.zunV{yV$9F)5");
      ByteString byteString0 = buffer0.snapshot();
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      String string0 = byteString0.base64();
      assertEquals(16, byteString0.size());
      assertEquals("TnhbLnp1blZ7eVYkOUYpNQ==", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("J");
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertFalse(boolean0);
      
      byteString0.sha1();
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("J");
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = byteString0.hmacSha1(byteString0);
      assertEquals(20, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("J");
      ByteString byteString0 = buffer0.snapshot();
      byteString0.hashCode();
      byteString0.endsWith(byteString0);
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("v~=\"");
      ByteString byteString0 = buffer0.snapshot();
      boolean boolean0 = byteString0.endsWith(byteString0);
      assertTrue(boolean0);
      
      ByteString byteString1 = byteString0.sha1();
      String string0 = byteString0.base64Url();
      assertEquals("dn49Ig==", string0);
      
      byteString0.equals(byteString1);
      assertEquals(4, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(2);
      buffer1.snapshot();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.write(byteArrayOutputStream0);
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = buffer0.snapshot();
      buffer0.writeUtf8("0");
      ByteString byteString2 = buffer0.snapshot();
      byteString1.endsWith(byteString2);
      // Undeclared exception!
      try { 
        byteString0.toAsciiLowercase();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("nBMd ");
      ByteString byteString0 = buffer0.snapshot();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString0.rangeEquals((-525), byteArray0, 0, 1121);
      assertFalse(boolean0);
      assertEquals(5, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("Mds1Tl");
      ByteString byteString0 = buffer0.snapshot();
      byte[] byteArray0 = new byte[9];
      byteString0.startsWith(byteArray0);
      byteString0.sha256();
      assertEquals(6, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("M]");
      ByteString byteString0 = buffer0.snapshot();
      byte byte0 = byteString0.getByte(1);
      assertEquals((byte)93, byte0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("Nx[.zunVWyV$9Fj5");
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = ByteString.EMPTY;
      ByteString byteString2 = byteString0.toAsciiUppercase();
      boolean boolean0 = byteString0.equals(byteString2);
      assertFalse(boolean0);
      
      int int0 = byteString0.size();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("nBVd ");
      ByteString byteString0 = buffer0.snapshot();
      byte byte0 = byteString0.getByte(0);
      assertEquals((byte)110, byte0);
      
      boolean boolean0 = byteString0.rangeEquals((int) (byte)110, (ByteString) null, 0, 0);
      assertFalse(boolean0);
      assertEquals(5, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(0);
      ByteString byteString0 = buffer0.snapshot();
      byteString0.getByte(0);
      byteString0.hashCode();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      boolean boolean0 = byteString0.rangeEquals((int) (byte)0, byteArray0, 1077, 0);
      assertEquals(4, byteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("");
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      // Undeclared exception!
      try { 
        buffer0.snapshot();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // s.limit == s.pos
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("v~k=\"");
      buffer1.copyTo(buffer0, 1L, 1L);
      ByteString byteString0 = buffer1.snapshot();
      byteString0.endsWith(byteString0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertEquals(6, byteString1.size());
  }
}
