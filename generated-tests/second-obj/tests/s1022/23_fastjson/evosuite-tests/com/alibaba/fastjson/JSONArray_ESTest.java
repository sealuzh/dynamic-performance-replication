/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:46:15 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.time.Clock;
import java.time.Duration;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.MinguoDate;
import java.time.temporal.ChronoUnit;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.fluentSet((-1316), jSONArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(3089, 105);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 105
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(2993);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONBytes((Object) jSONArray0, serializeConfig0, serializerFeatureArray0);
      int int0 = jSONArray0.lastIndexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3057);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd(3057, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3057, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.fluentRetainAll(jSONArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      List<MockHijrahDate> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getLongValue(1358);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1358, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(940);
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      jSONArray0.fluentRemove((Object) serializerFeature0);
      // Undeclared exception!
      try { 
        jSONArray0.add(935, (Object) serializerFeature0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 935, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Predicate.isEqual((Object) "`AKc9");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(55, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getTimestamp(917);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 917, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[3] = serializerFeatureArray0[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[4] = serializerFeature0;
      ConcurrentSkipListMap<JSONObject, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<JSONObject, String>();
      jSONArray0.remove((Object) concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, serializerFeature0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray1.forEach(consumer0);
      System.setCurrentTimeMillis((-3961L));
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : WriteNullListAsEmpty
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      JSONArray jSONArray1 = jSONArray0.fluentSet(387, "}_mWuflyw7hNQTeyBS`");
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(2993);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2993, Size: 388
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(86);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.fluentSet(1698, mockJapaneseDate0);
      Integer integer0 = new Integer(1698);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(2993);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2993, Size: 1700
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      jSONArray0.fluentClear();
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      chronoUnit0.getDuration();
      Object[] objectArray0 = jSONArray0.toArray();
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      List<JSONPath.Operator> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Duration duration0 = chronoUnit0.getDuration();
      Clock clock1 = MockClock.offset(clock0, duration0);
      MinguoDate minguoDate0 = MockMinguoDate.now(clock1);
      jSONArray1.equals(minguoDate0);
      assertTrue(jSONArray1.equals((Object)jSONArray2));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(3392903);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3392903, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1783);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      jSONArray0.add((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1783);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1783, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "`AKc9");
      jSONArray0.removeIf(predicate0);
      Object object0 = new Object();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(951, class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray1.setRelatedArray(class0);
      jSONArray1.getDoubleValue(949);
      JSONPath.Operator[] jSONPath_OperatorArray0 = new JSONPath.Operator[0];
      // Undeclared exception!
      try { 
        jSONArray0.toArray(jSONPath_OperatorArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1783);
      jSONArray0.fluentSet(1783, "}_mWuflyw7hNQTeyBS`");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(1783);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      MockMinguoDate.now((ZoneId) zoneOffset0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockMinguoDate0);
      jSONArray1.fluentRemoveAll(jSONArray0);
      assertEquals(0, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JSONArray jSONArray1 = new JSONArray(2993);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray(921);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(2993);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2993, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      List<MockJapaneseDate> list0 = new LinkedList<MockJapaneseDate>();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JSONArray jSONArray1 = new JSONArray(2993);
      byte byte0 = ObjectStreamConstants.TC_CLASS;
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1005);
      Class<InputStream> class0 = InputStream.class;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, fileDescriptor0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray1.contains(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.io.FileDescriptor@c5bf5d1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Predicate.isEqual((Object) "`AKc9");
      int int0 = 55;
      Class<Object> class0 = Object.class;
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(55);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(4096);
      JSONObject jSONObject0 = new JSONObject(4096);
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.toJSON((Object) jSONObject0, parserConfig0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(4096, (Object) null);
      jSONArray1.getString(4096);
      jSONArray1.getByte(2993);
      assertEquals(4097, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      List<JSONPath.Operator> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray0.parallelStream();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) mockMinguoDate0);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      // Undeclared exception!
      try { 
        jSONArray3.fluentAddAll(3089, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      Duration duration0 = chronoUnit0.getDuration();
      Clock clock1 = MockClock.offset(clock0, duration0);
      MockMinguoDate.now(clock1);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 63
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setRelatedArray((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(2993);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2993, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(950, mockThaiBuddhistDate0);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      MockThaiBuddhistDate.now();
      JSONObject jSONObject0 = new JSONObject(3089);
      Object object1 = new Object();
      jSONObject0.fluentRemove(jSONArray1);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      Class<FieldInfo> class0 = FieldInfo.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      ParserConfig.getGlobalInstance();
      jSONArray1.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(385);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 385, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONArray0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      jSONArray0.fluentSet((-1), predicate1);
      jSONArray0.toArray();
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c-A(;J1]#K71(d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet(951, class0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(2993);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2993, Size: 952
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.fluentSet(0, serializerFeature0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : WriteDateUseDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.getComponentType();
      int int0 = 151;
      // Undeclared exception!
      try { 
        jSONArray0.getDate(151);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 151, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2239);
      jSONArray0.fluentSet(2239, (Object) null);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.getDoubleValue(2239);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray0.getRelatedArray();
      jSONArray2.retainAll(jSONArray0);
      Class<Annotation> class0 = Annotation.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONArray0.toJavaList(class0);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.InitStringFieldAsEmpty;
      featureArray0[2] = feature1;
      Feature feature2 = Feature.SupportNonPublicField;
      featureArray0[3] = feature2;
      Object object0 = new Object();
      JSONArray jSONArray1 = new JSONArray(2993);
      jSONArray1.clone();
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      List<MockThaiBuddhistDate> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, class0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      concurrentSkipListMap0.higherEntry("");
      ParserConfig.getFieldFromCache("X3O>v", concurrentSkipListMap0);
      JSONObject jSONObject0 = new JSONObject(2993, true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray4 = jSONArray3.fluentRemove((Object) propertyNamingStrategy0);
      jSONArray4.getObject(2993, (Type) class0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      mockThaiBuddhistDate0.getMockedClassName();
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject((-4505));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&zcSYG'jmBg-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[*<:'Rs_fib`");
      JSONArray jSONArray0 = new JSONArray(401);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      List<JSONPath.Operator> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(951, class0);
      jSONArray1.getFloatValue(616);
      jSONArray1.iterator();
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      jSONArray0.getRelatedArray();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2993, fileDescriptor0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2994
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1;
      JSONArray jSONArray0 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(936);
      jSONArray0.getRelatedArray();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      List<MockMinguoDate> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.retainAll(list0);
      jSONArray0.clone();
      MockJapaneseDate[] mockJapaneseDateArray0 = new MockJapaneseDate[5];
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      mockJapaneseDateArray0[0] = mockJapaneseDate0;
      MockJapaneseDate mockJapaneseDate1 = new MockJapaneseDate();
      mockJapaneseDateArray0[1] = mockJapaneseDate1;
      MockJapaneseDate mockJapaneseDate2 = new MockJapaneseDate();
      mockJapaneseDateArray0[2] = mockJapaneseDate2;
      MockJapaneseDate mockJapaneseDate3 = new MockJapaneseDate();
      mockJapaneseDateArray0[3] = mockJapaneseDate3;
      MockJapaneseDate mockJapaneseDate4 = new MockJapaneseDate();
      mockJapaneseDateArray0[4] = mockJapaneseDate4;
      jSONArray0.toArray(mockJapaneseDateArray0);
      jSONArray0.indexOf(mockJapaneseDate0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      jSONArray0.toJavaList(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(972, mockThaiBuddhistDate0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      concurrentSkipListMap0.higherEntry("");
      ParserConfig.getFieldFromCache("`AKc9", concurrentSkipListMap0);
      JSONObject jSONObject0 = new JSONObject(1, true);
      byte byte0 = ObjectStreamConstants.TC_OBJECT;
      jSONArray1.getObject(926, (Type) null);
      mockThaiBuddhistDate0.getMockedClassName();
      jSONArray1.getJSONObject(916);
      jSONArray0.getByteValue((byte)115);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      List<JSONPath.Operator> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(2993);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class1, class1, (Field) null, 1781, 3089, (-4));
      Class<MockThaiBuddhistDate> class2 = MockThaiBuddhistDate.class;
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getFieldType();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      jSONArray2.contains(list0);
      jSONArray0.setComponentType(fieldInfo0.declaringClass);
      jSONArray2.add((Object) concurrentSkipListMap0);
      JSONArray jSONArray3 = jSONArray1.fluentRemoveAll(jSONArray2);
      jSONArray3.containsAll(jSONArray2);
      jSONArray2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      List<MockThaiBuddhistDate> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentRemoveAll(list0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, mockThaiBuddhistDate0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      concurrentSkipListMap0.higherEntry("1.2.46");
      ParserConfig.getFieldFromCache("`AKc9", concurrentSkipListMap0);
      JSONObject jSONObject0 = new JSONObject(1, false);
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      jSONArray1.getObject(926, (Type) null);
      jSONArray2.getBooleanValue(937);
      mockThaiBuddhistDate0.getMockedClassName();
      jSONArray1.getJSONObject(916);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getBoolean(916);
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@29e00e48
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2993, mockThaiBuddhistDate0);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(2993);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@4a970e2a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.fluentClear();
      jSONArray1.clear();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 972;
      JSONArray jSONArray1 = jSONArray0.fluentSet(972, mockThaiBuddhistDate1);
      Class<Object> class0 = Object.class;
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("`AKc9", concurrentSkipListMap0);
      Class<Method> class1 = Method.class;
      FieldInfo fieldInfo0 = new FieldInfo("", class0, class1, class1, (Field) null, 2993, (-3743), 972);
      jSONArray0.getObject(5, fieldInfo0.fieldType);
      jSONArray1.getBooleanValue(55);
      jSONArray0.defaultLocale.getDisplayScript();
      jSONArray1.getJSONObject(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray2.getBoolean(2993);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2993, Size: 973
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockThaiBuddhistDate1.getMockedClassName();
      JSONArray jSONArray1 = jSONArray0.fluentSet(972, mockThaiBuddhistDate0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap1 = new ConcurrentSkipListMap<String, Field>();
      concurrentSkipListMap1.subMap("", "`AKc9");
      concurrentSkipListMap1.higherEntry("`AKc9");
      JSONArray jSONArray2 = jSONArray0.fluentAddAll(972, (Collection<?>) jSONArray1);
      jSONArray2.getComponentType();
      mockThaiBuddhistDate0.getMockedClassName();
      jSONArray1.getJSONObject(926);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONArray2.listIterator();
      jSONArray0.hashCode();
      jSONArray1.getLongValue(16);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JSONArray jSONArray1 = new JSONArray(2993);
      System.setCurrentTimeMillis((-2554));
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger((-2554));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 386;
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(386, class0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(386);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(34);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(950, mockThaiBuddhistDate0);
      Object object1 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "an=?waNadU");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.contains("UvW'hR");
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(2993);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2993, Size: 951
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&zcSYG'jmBg-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[*<:'Rs_fib`");
      JSONArray jSONArray0 = new JSONArray(387);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      LinkedList<JSONPath.Operator> linkedList0 = new LinkedList<JSONPath.Operator>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      jSONArray0.fluentSet(955, class0);
      ConcurrentSkipListMap<Object, MockJapaneseDate> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, MockJapaneseDate>();
      JSONArray jSONArray2 = jSONArray1.fluentSet(2993, concurrentSkipListMap0);
      JSONArray jSONArray3 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2994
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, mockThaiBuddhistDate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockThaiBuddhistDate0.getMockedClassName();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap1 = new ConcurrentSkipListMap<String, Field>();
      JSONArray jSONArray2 = new JSONArray(2993);
      jSONArray2.getComponentType();
      mockThaiBuddhistDate1.getMockedClassName();
      jSONArray0.iterator();
      mockThaiBuddhistDate0.getMockedClassName();
      jSONArray1.getBoolean(2993);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(387, "`AKc9");
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(387, (Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      List<MockThaiBuddhistDate> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentRemoveAll(list0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, mockThaiBuddhistDate0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONObject jSONObject0 = new JSONObject(1, false);
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      jSONArray1.getObject(926, (Type) null);
      jSONArray2.getBooleanValue(937);
      mockThaiBuddhistDate0.getMockedClassName();
      MockThaiBuddhistDate mockThaiBuddhistDate2 = new MockThaiBuddhistDate();
      mockThaiBuddhistDate2.getMockedClassName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray2.getBoolean(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@1e3062d7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
