/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 20:15:32 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Integer, HashMap<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, Object>, Integer>();
      Integer integer1 = new Integer(0);
      doubleKeyMap0.put(integer1, (HashMap<String, Object>) null, integer1);
      Integer integer2 = doubleKeyMap0.remove(integer0, (HashMap<String, Object>) null);
      assertTrue(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(class0);
      Map<Object, Integer> map0 = doubleKeyMap0.newMap();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, "", (Object) map0);
      Map<String, Object> map1 = doubleKeyMap0.remove(integer0);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(class0);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, "us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      Map<String, Object> map0 = doubleKeyMap0.get(integer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = doubleKeyMap0.remove((String) null, "b");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      Map<HashMap<Integer, String>, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Integer, String>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, String>, Object, String>(map0);
      Map<Object, String> map1 = doubleKeyMap1.remove((HashMap<Integer, String>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Integer, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<Object, String>>();
      Map<Object, Map<Map<Object, Object>, HashMap<Integer, String>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Object, Object>, HashMap<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Object>, HashMap<Integer, String>>(map0, class0);
      HashMap<Object, Map<Object, Map<String, Object>>> hashMap0 = new HashMap<Object, Map<Object, Map<String, Object>>>();
      DoubleKeyMap<Object, Object, Map<String, Object>> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Map<String, Object>>(hashMap0);
      Map<Object, Map<String, Object>> map1 = doubleKeyMap2.remove((Object) doubleKeyMap1);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>(class0);
      Object object0 = doubleKeyMap2.put((Object) "@;oeQdkmC", "", (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<Object, Object>, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Object>, Map<Integer, String>>(class0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Map<Integer, String> map0 = doubleKeyMap0.put((Object) null, hashMap0, (Map<Integer, String>) hashMap1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Map<HashMap<Integer, Object>, Integer>> hashMap0 = new HashMap<String, Map<HashMap<Integer, Object>, Integer>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      Object object0 = new Object();
      String string0 = doubleKeyMap1.put(object0, (Object) hashMap0, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Object object0 = doubleKeyMap0.get("us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Map<String, Integer>> hashMap0 = new HashMap<Integer, Map<String, Integer>>();
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap0.get((Integer) null, "4WNVNn0%}/M5a8");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, "M-$[y;");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(map0);
      Map<Object, String> map1 = doubleKeyMap1.get((Integer) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Object object0 = new Object();
      Map<Object, String> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<String, Object>, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<String, Object>, Object>, Object, String>();
      Map<HashMap<Integer, Integer>, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Integer>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, String>(map0, class0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(hashMap0, object0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Integer, HashMap<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, Object>, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put(integer0, hashMap0, integer0);
      Integer integer1 = doubleKeyMap0.remove(integer0, (HashMap<String, Object>) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer(0);
      DoubleKeyMap<String, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, Object>>();
      HashMap<String, Object> hashMap0 = doubleKeyMap0.remove("t", (Object) class0);
      DoubleKeyMap<Integer, HashMap<String, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<String, Object>, Integer>();
      doubleKeyMap1.put(integer0, (HashMap<String, Object>) null, integer0);
      Integer integer1 = doubleKeyMap1.put(integer0, hashMap0, integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap1.get("oA5-<YU/U", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      Map<Integer, HashMap<Map<String, Object>, Map<Map<String, Object>, Map<HashMap<Integer, Object>, Object>>>> map0 = doubleKeyMap0.newMap();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      doubleKeyMap1.put((Object) hashMap0, "", "");
      String string0 = doubleKeyMap1.get((Object) map0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(string0);
  }
}
