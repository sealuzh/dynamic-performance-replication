/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 18:43:56 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>(0);
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Map<Integer, Object> map0 = doubleKeyMap0.newMap();
      hashMap0.put("", map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Object>(hashMap0, class0);
      Integer integer0 = new Integer((-1));
      doubleKeyMap1.remove("", integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.put("", (Object) "", (Object) "");
      Map<Object, Object> map0 = doubleKeyMap0.remove("");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Integer integer0 = new Integer((-1));
      String string0 = doubleKeyMap0.put(integer0, (String) null, "rx,qqA/n");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(hashMap0, class0);
      Integer integer0 = doubleKeyMap0.get((Object) ",5f eg^AZ1xXX7B", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DoubleKeyMap<Object, Integer, HashMap<String, Map<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<String, Map<Object, Object>>>();
      Map<Integer, HashMap<String, Map<Object, Object>>> map0 = doubleKeyMap0.get((Object) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.put("", (Object) "", (Object) "");
      Object object0 = doubleKeyMap0.remove("", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put("", "", hashMap0);
      HashMap<Object, String> hashMap1 = doubleKeyMap0.remove("", "");
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      Map<String, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Integer>(map0, class0);
      Integer integer0 = new Integer(2355);
      Integer integer1 = doubleKeyMap1.get("", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put("", hashMap0, "");
      String string0 = doubleKeyMap0.get("", hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, String, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Map<String, Object>>();
      DoubleKeyMap<String, String, String> doubleKeyMap1 = new DoubleKeyMap<String, String, String>((Map<String, Map<String, String>>) null);
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      Map<String, Object> map1 = doubleKeyMap0.remove(map0, "");
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, String, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Map<String, Object>>();
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.remove((Map<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Map<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Map<Object, Object>, Integer>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(1);
      Integer integer1 = doubleKeyMap0.put(hashMap0, (Map<Object, Object>) hashMap1, integer0);
      Integer integer2 = doubleKeyMap0.put(hashMap0, (Map<Object, Object>) hashMap1, integer1);
      assertEquals(1, (int)integer2);
  }
}
