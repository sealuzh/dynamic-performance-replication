/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 15:09:03 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("UfJ0U", 0);
      String string0 = "QTEpA}";
      ByteString.codePointIndexToCharIndex("QTEpA}", 0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("UfJ0U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: UfJ0U
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64Url();
      byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("s#iTcj9w<ugYAbUBq'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-89);
      byteString0.endsWith(byteArray0);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      ByteString byteString2 = byteString0.hmacSha512(byteString1);
      ByteString byteString3 = byteString1.EMPTY.hmacSha512(byteString2);
      byteString3.hex();
      ByteString.codePointIndexToCharIndex("J7", (-1));
      // Undeclared exception!
      try { 
        ByteString.encodeString("J7", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ByteString.codePointIndexToCharIndex("\r", 55296);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64Url();
      byteString0.EMPTY.startsWith(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.sha512();
      byteString1.asByteBuffer();
      byteString0.EMPTY.indexOf(byteArray0, 2234);
      ByteString byteString2 = ByteString.of(byteArray0, 0, 0);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("", charset0);
      byteString2.EMPTY.asByteBuffer();
      byteString0.lastIndexOf(byteArray0);
      byteString0.sha256();
      ByteString byteString3 = ByteString.decodeHex("");
      byteString3.indexOf(byteArray0, 0);
      // Undeclared exception!
      try { 
        byteString3.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.rangeEquals(46, byteString0, 5171, 48);
      int int0 = byteString1.lastIndexOf(byteString0);
      assertEquals(0, int0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      Pipe pipe0 = new Pipe(1732L);
      pipe0.sourceClosed = false;
      pipe0.sourceClosed = false;
      pipe0.sourceClosed = false;
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      buffer0.write(byteString0);
      byteString0.EMPTY.write(buffer0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      int int0 = 2814;
      byteString1.rangeEquals(2814, byteArray0, 2814, 1583);
      // Undeclared exception!
      try { 
        byteString1.substring(2814, 1583);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-2);
      byteArray0[0] = (byte) (-2);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.EMPTY.hmacSha256(byteString0);
      ByteString byteString3 = byteString0.toAsciiLowercase();
      byteString3.rangeEquals((int) (byte) (-2), byteArray0, (int) (byte) (-2), (int) (byte)0);
      int int0 = 0;
      byteString3.rangeEquals((int) (byte) (-2), byteArray0, (int) (byte) (-2), 0);
      ByteString byteString4 = byteString2.sha1();
      byteString4.EMPTY.hmacSha1(byteString2);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)83;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.sha512();
      byteString1.hmacSha512(byteString0);
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      ByteString byteString3 = byteString2.EMPTY.hmacSha512(byteString0);
      assertFalse(byteString3.equals((Object)byteString1));
      
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      byteString0.utf8();
      boolean boolean0 = byteString0.rangeEquals(48, byteArray0, (int) (byte)0, (-976));
      assertTrue(boolean0);
      
      int int1 = ByteString.codePointIndexToCharIndex("(t\uFFFD\u0000\uFFFDS", (byte) (-64));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        ByteString.read(sequenceInputStream0, (-2448));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2448
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)28;
      byte byte1 = (byte)0;
      byteArray0[5] = (byte)0;
      byte byte2 = (byte)52;
      byteArray0[6] = (byte)52;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.utf8();
      byteString0.EMPTY.indexOf(byteString1, (int) (byte)0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int int0 = ByteString.codePointIndexToCharIndex("e%XS)d:", 2729);
      assertEquals(7, int0);
      
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte) (-35);
      byteArray1[2] = (byte)95;
      int int1 = byteString0.lastIndexOf(byteArray1);
      assertEquals((-1), int1);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      HashingSink hashingSink1 = HashingSink.hmacSha256(hashingSink0, byteString1);
      Sink sink0 = hashingSink1.delegate();
      HashingSink.md5(sink0);
      ByteString byteString2 = hashingSink0.hash();
      byteString1.hmacSha256(byteString2);
      int int2 = byteString2.lastIndexOf(byteString1, 0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("tG84s\"RtpQ(c7", 2447);
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)61;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      byteString0.EMPTY.lastIndexOf(byteArray0);
      HashingSink hashingSink1 = HashingSink.hmacSha256(hashingSink0, byteString0);
      byteString0.EMPTY.toAsciiLowercase();
      Sink sink0 = hashingSink1.delegate();
      HashingSink hashingSink2 = HashingSink.md5(sink0);
      ByteString byteString1 = hashingSink2.hash();
      ByteString byteString2 = byteString1.hmacSha256(byteString0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("tG84s\"RtpQ(c7", false);
      try { 
        byteString2.EMPTY.write(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-fz0agaWmFLM3f!:/2&");
      byteString0.write(mockFileOutputStream0);
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-2);
      byteArray0[0] = (byte) (-2);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      byteString1.EMPTY.hmacSha256(byteString0);
      ByteString byteString2 = byteString0.toAsciiLowercase();
      byteString2.rangeEquals((int) (byte) (-2), byteArray0, (int) (byte) (-2), (int) (byte)0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("r%raibo!#DjLP@gP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: r
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)14;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode = (int) (byte)52;
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("[text=", charset0);
      ByteString.encodeString("[text=", charset0);
      // Undeclared exception!
      try { 
        byteString0.getByte(94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("[text=", charset0);
      ByteBuffer byteBuffer0 = charset0.encode("[text=");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      ByteString.of(byteBuffer1);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("[text=", charset0);
      String string0 = byteString0.toString();
      assertEquals("[text=[text=]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("endIndex > length(", charset0);
      ByteString byteString1 = byteString0.md5();
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("[textk'=", charset0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeBase64("-}SR_+krVq\"0#h?!7ig");
      assertNull(byteString1);
      
      ByteString byteString2 = byteString0.substring((int) (byte)0);
      ByteString byteString3 = byteString0.toAsciiUppercase();
      assertSame(byteString3, byteString2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = byteString1.indexOf(byteArray0);
      int int2 = byteString0.compareTo(byteString1);
      assertSame(byteString1, byteString0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.size();
      byteString0.utf8();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("LBtMy", charset0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)93;
      byteString0.endsWith(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-256");
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      ByteString byteString1 = realBufferedSource0.readByteString(0L);
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64Url();
      byteString0.EMPTY.startsWith(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("", charset0);
      byteString1.endsWith(byteString0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2 byteCount=2
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ByteString.decodeHex(";_{Wl/!#PLn.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ;
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.encodeUtf8("");
      byteString1.EMPTY.endsWith(byteString0);
      byte[] byteArray1 = new byte[1];
      byteString1.EMPTY.toAsciiUppercase();
      byteArray1[0] = (byte)102;
      byteString0.EMPTY.sha512();
      byteString1.sha1();
      ByteString byteString2 = ByteString.decodeBase64("");
      byteString2.EMPTY.sha256();
      ByteString byteString3 = byteString1.EMPTY.md5();
      byteString3.EMPTY.lastIndexOf(byteArray1, 32);
      byteString0.indexOf(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        byteString0.getByte(1615);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.size();
      String string0 = byteString0.hex();
      assertEquals("00", string0);
      
      boolean boolean0 = byteString0.equals(byteArray0);
      assertFalse(boolean0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)117;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      byteString0.hmacSha256(byteString1);
      ByteString byteString2 = byteString1.toAsciiLowercase();
      byteString2.rangeEquals(119, byteArray0, (int) (byte)50, 19);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("file == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: i
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("byteCount < 0: ", charset0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C-o0OXAFXU$;/Ko");
      byteArray0[1] = (byte)18;
      byteString0.rangeEquals((-1685), byteArray0, (int) (byte)18, (int) (byte)21);
      Pipe pipe0 = new Pipe((byte)18);
      Buffer buffer0 = pipe0.buffer;
      byteString0.write(buffer0);
      byteString0.string(charset1);
      String string0 = byteString0.hex();
      assertEquals("6206046c48600c6e04208c20808a20", string0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.substring((int) (byte)0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex(".g{t<5.T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: .
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)117;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      byteString1.hmacSha256(byteString2);
      byteString0.startsWith(byteString1);
      String string0 = byteString2.base64();
      assertEquals("oLv9yD3FsikTnHLNceaawY6KC4s=", string0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)50;
      byteString0.rangeEquals(1272, byteArray1, 65, 16);
      String string1 = byteString1.toString();
      assertEquals("[hex=a000e4c864c40226266c42c442e66ac28e8a0080]", string1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)117;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      ByteString byteString3 = byteString2.hmacSha256(byteString1);
      boolean boolean0 = byteString3.startsWith(byteString1);
      assertFalse(boolean0);
      
      byteString0.EMPTY.base64();
      byteString2.rangeEquals(119, byteArray0, (int) (byte)50, 19);
      int int0 = byteString2.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      String string0 = byteString1.toString();
      assertEquals("[hex=444640e006604e444204206006440e04606404046400e66e4e4444442e4040044006446400464e44e4e606404466444466400400400e02446e44424642262e26]", string0);
      
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)117;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.sha1();
      ByteString byteString3 = byteString1.hmacSha256(byteString0);
      ByteString byteString4 = byteString1.toAsciiLowercase();
      boolean boolean0 = byteString2.rangeEquals(349, byteArray0, (int) (byte)117, (int) (byte)50);
      ByteString byteString5 = ByteString.decodeHex("");
      boolean boolean1 = byteString5.equals(byteString3);
      assertNotSame(byteString1, byteString4);
      assertFalse(byteString1.equals((Object)byteString4));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.utf8 = "p<1d+LmoYC.e5-airw";
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString0.substring((int) (byte)0);
      int int0 = byteString2.EMPTY.indexOf(byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = byteString2.startsWith(byteArray0);
      boolean boolean1 = byteString0.equals(byteString1);
      assertSame(byteString0, byteString2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)19;
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte) (-18);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)33;
      ByteString byteString2 = new ByteString(byteArray1);
      ByteString byteString3 = byteString0.sha1();
      byteString2.hmacSha256(byteString1);
      byteString3.toAsciiLowercase();
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-13);
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte) (-13);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      ByteString byteString3 = byteString2.hmacSha256(byteString1);
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
      
      byteString2.base64();
      byteString3.rangeEquals((int) (byte) (-13), byteArray0, (int) (byte) (-13), (int) (byte) (-13));
      String string0 = byteString2.toString();
      assertEquals("[hex=0e4004260ee26444444442262e44064046424064]", string0);
      
      ByteString byteString4 = ByteString.of(byteArray0);
      int int0 = byteString3.indexOf(byteArray0);
      assertTrue(byteString0.equals((Object)byteString4));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString0.sha1();
      ByteString byteString3 = byteString1.hmacSha256(byteString0);
      ByteString byteString4 = byteString0.toAsciiLowercase();
      int int0 = byteString4.EMPTY.lastIndexOf(byteString3);
      assertEquals((-1), int0);
      
      boolean boolean0 = byteString2.equals(byteString1);
      assertTrue(boolean0);
      
      String string0 = byteString2.toString();
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals("[hex=424646000404e444040404604ee4044460400464]", string0);
      assertSame(byteString0, byteString4);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      byteString0.sha1();
      byteString1.hmacSha256(byteString0);
      byteString0.toAsciiLowercase();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte)50;
      byteArray1[3] = (byte)50;
      byteArray1[4] = (byte)50;
      byteArray1[5] = (byte)50;
      byteArray1[6] = (byte)50;
      byteArray1[7] = (byte)50;
      byteArray1[8] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        ByteString.read(dataInputStream0, (byte)50);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring(6);
      int int0 = byteString1.size();
      assertEquals(3, int0);
      
      byteString0.utf8();
      int int1 = byteString0.compareTo(byteString1);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      ByteString byteString2 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      buffer0.write(byteString2);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      ByteString byteString3 = byteString2.EMPTY.sha1();
      HashingSource hashingSource0 = HashingSource.hmacSha1(inflaterSource0, byteString2);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      int int0 = byteString3.indexOf(byteString0);
      assertEquals((-1), int0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)117;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha1();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      HashingSink hashingSink1 = HashingSink.sha1(buffer1);
      ByteString byteString1 = hashingSink1.hash();
      ByteString byteString2 = byteString1.hmacSha256(byteString0);
      ByteString byteString3 = hashingSink0.hash();
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt((-119));
      HashingSink.sha256(bufferedSink0);
      ByteString byteString4 = byteString3.toAsciiLowercase();
      byteString1.lastIndexOf(byteString4);
      boolean boolean0 = byteString3.equals(byteString2);
      assertFalse(boolean0);
      
      String string0 = byteString1.toString();
      assertEquals("[hex=446646004040e04460440e0e644426644e464446]", string0);
      
      ByteString byteString5 = byteString2.sha256();
      assertFalse(byteString5.equals((Object)byteString4));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      inflaterSource0.refill();
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      byteString0.internalArray();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.compareTo(byteString0);
      byteString0.EMPTY.write(buffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "size < 4: ");
      int int0 = 1297;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1297);
      byteString0.write(byteArrayOutputStream0);
      byteString0.sha1();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteString byteString2 = ByteString.read(dataInputStream0, 0);
      // Undeclared exception!
      try { 
        byteString2.indexOf((byte[]) null, (-2813));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
