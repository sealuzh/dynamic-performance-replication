/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 00:15:50 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.LongUnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.isTransient((Method) null);
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      linkedHashMap0.put("7Xnki_:EPs>56[", class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      linkedHashMap0.put(".", class0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.setAutoTypeSupport(false);
      TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class1, parserConfig0);
      Class<Object> class2 = Object.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      InstantiationException instantiationException0 = new InstantiationException("fastjson.parser.autoTypeAccept");
      MessageFormat messageFormat0 = new MessageFormat("7Xnki_:EPs>56[");
      InstantiationException instantiationException1 = new InstantiationException("YKYJh{%");
      // Undeclared exception!
      try { 
        messageFormat0.format((Object) instantiationException1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.InstantiationException cannot be cast to [Ljava.lang.Object;
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.castToDouble((Object) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("&a_?C,L*/.[", "&a_?C,L*/.[");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLTransientConnectionException: &a_?C,L*_/.[
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<SecurityException> class0 = SecurityException.class;
      TypeUtils.isNumber("1");
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.lang.AutoCloseable");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "Ljava.lang.AutoCloseable");
      MockThread mockThread0 = new MockThread(threadGroup1, "Ljava.lang.AutoCloseable");
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0, "Ljava.lang.AutoCloseable");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SecurityException securityException0 = TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, parserConfig0);
      assertNull(securityException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = AffineTransform.TYPE_GENERAL_ROTATION;
      MockDate mockDate0 = new MockDate();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      long long0 = TypeUtils.fnv1a_64_lower("}9");
      assertEquals(639514478731261635L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.loadClass("=G3&c", (ClassLoader) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.isNumber("=G3&c");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("=G3&c", "=G3&c");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      mockJapaneseDate0.getMockedClassName();
      String string0 = TypeUtils.castToString(mockJapaneseDate0);
      assertNotNull(string0);
      
      String string1 = TypeUtils.decapitalize("[Z");
      assertEquals("[Z", string1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = ParserConfig.DENY_PROPERTY;
      TypeUtils.loadClass("fastjson.parser.deny");
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.toLocale("Lorg.springframework.util.LinkedMultiValueMap");
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      TreeMap<MockJapaneseDate, Float> treeMap0 = new TreeMap<MockJapaneseDate, Float>();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError("java.");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.getStackTrace();
      Locale locale0 = Locale.US;
      DecimalFormatSymbols.getInstance(locale0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@9d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Type[] typeArray0 = new Type[6];
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      int int0 = (-949);
      parserConfig0.checkAutoType("Ljava.awt.Point", class0, (-949));
      typeArray0[0] = (Type) null;
      String string0 = null;
      Method method0 = null;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, (String) null, fieldArray0);
      int int1 = 1769;
      Class<RenderingHints> class1 = RenderingHints.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.getCollectionItemClass(class0);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("false", concurrentHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      WeakHashMap<RenderingHints.Key, StackTraceElementDeserializer> weakHashMap0 = new WeakHashMap<RenderingHints.Key, StackTraceElementDeserializer>();
      RenderingHints renderingHints0 = new RenderingHints(weakHashMap0);
      Class<Long> class0 = Long.TYPE;
      Long long0 = TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("h[lcdI}Ht7JlQ^&O>", classLoader1, false);
      Field[] fieldArray0 = new Field[0];
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, "h[lcdI}Ht7JlQ^&O>", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeUtils.decapitalize("6xL-");
      JobAttributes jobAttributes0 = new JobAttributes();
      byte[] byteArray0 = TypeUtils.castToBytes("6xL-");
      assertArrayEquals(new byte[] {(byte) (-21), (byte)18}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.loadClass("=G3&c", (ClassLoader) null);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(type0);
      
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      Class<DateFormatSymbols> class2 = DateFormatSymbols.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("=G3&c", hashtable0);
      FieldInfo fieldInfo0 = new FieldInfo("=G3&c", class1, class2, class0, (Field) null, 31, 5402, 36);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Type[] typeArray0 = new Type[4];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("n|uk{j", classLoader1, false);
      typeArray0[0] = (Type) null;
      Class<Short> class0 = Short.TYPE;
      typeArray0[1] = (Type) class0;
      Class<Long> class1 = Long.TYPE;
      typeArray0[2] = (Type) class1;
      Class<Boolean> class2 = Boolean.TYPE;
      typeArray0[3] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[3]);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockJapaneseDate0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = File.pathSeparator;
      TypeUtils.isNumber("can not cast to : ");
      Class<BitSet> class0 = BitSet.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(":");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \":\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      Class<SQLException> class1 = SQLException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "+m", (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.isProxy(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6zJ'2K<");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(mockJapaneseDate0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.evo\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<String> class0 = String.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isProxy(class0);
      HttpCookie httpCookie0 = new HttpCookie("|wafC't^%w~?l9W", "|wafC't^%w~?l9W");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) httpCookie0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Class<VerifyError> class0 = VerifyError.class;
      TypeUtils.isProxy(class0);
      Class<?> class1 = TypeUtils.loadClass("fO}ao4\"D");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("NULL", classLoader1);
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = ParserConfig.DENY_PROPERTY;
      TypeUtils typeUtils0 = new TypeUtils();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.toLocale("@,rw");
      Random.setNextRandom(2144);
      Class<Currency> class0 = Currency.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      TypeUtils.castToByte((Object) null);
      Class<Throwable> class0 = Throwable.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(mockJapaneseDate0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError("");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(verifyError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.VerifyError: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.castToSqlTime("");
      TypeUtils.castToString("5 Uz` }3<Gl5\"rC");
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      TypeUtils.unwrapOptional(class0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.awt.GridBagConstraints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      TypeUtils.getParserFeatures(class0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TypeUtils.isKotlin(class1);
      Class<Long> class2 = Long.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "|OkSh/Q]/i", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : |OkSh/Q]/i
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.loadClass("aUB>b$DG0");
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.loadClass("=G3&c", (ClassLoader) null);
      TypeUtils.getCollectionItemType((Type) null);
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.loadClass("+AsdW?moGaAFVB!$Hgn");
      Class<SQLException> class0 = SQLException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      String string0 = ParserConfig.DENY_PROPERTY;
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Throwable throwable0 = TypeUtils.cast((Object) null, (Type) class1, parserConfig0);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.isPath(class0);
      TypeUtils.clearClassMapping();
      TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap");
      LinkedHashMap<MockMinguoDate, Jdk8DateCodec> linkedHashMap0 = new LinkedHashMap<MockMinguoDate, Jdk8DateCodec>();
      Class<Byte> class0 = Byte.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) linkedHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.loadClass("=G3&c", (ClassLoader) null);
      TypeUtils.getCollectionItemType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@3ffbbb08
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Class<VerifyError> class0 = VerifyError.class;
      TypeUtils.isProxy(class0);
      TypeUtils.decapitalize("BrowserCompatible");
      TypeUtils.unwrapOptional(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.BatchUpdateException: java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.util.Calendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      TypeUtils.castToString("5 Uz` }3<Gl5\"rC");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("java.lang.String@0000000001", "5 Uz` }3<Gl5\"rC");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Random.setNextRandom((-1932735280));
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalAccessError0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<?> class0 = TypeUtils.loadClass("L");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockThread mockThread0 = new MockThread("s");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "Ljava.awt.Color", 655701488918567152L);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Color", (ClassLoader) aSMClassLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeUtils.toLocale("@,rw");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("@,rw");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@,rw\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      imageCapabilities0.clone();
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      bufferCapabilities0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(bufferCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.BufferCapabilities@4ffdaada
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      WeakHashMap<NumberFormat, SQLNonTransientConnectionException> weakHashMap0 = new WeakHashMap<NumberFormat, SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.awt.ImageCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Class<MessageFormat> class0 = MessageFormat.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      typeArray0[0] = (Type) class1;
      String string0 = "Ljava.awt.Color";
      Method method0 = null;
      Class<IllegalStateException> class2 = IllegalStateException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class2, "N*Bf,wk,YN|HOfT'^", fieldArray0);
      int int0 = 55;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy1);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      TypeUtils.computeGetters(class1, map0);
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      TypeUtils.castToString(linkedHashSet0);
      ThreadGroup threadGroup0 = new ThreadGroup(".z(bOr'");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "yxq");
      MockThread mockThread0 = new MockThread(threadGroup1, (Runnable) null, "get");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      Class<?> class2 = TypeUtils.loadClass(".z(bOr'", classLoader0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Class<VerifyError> class0 = VerifyError.class;
      TypeUtils.isProxy(class0);
      TypeUtils.decapitalize("BrowserCompatible");
      TypeUtils.unwrapOptional(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "BrowserCompatible", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTransientException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(sQLTransientException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<JobAttributes> class0 = JobAttributes.class;
      TypeUtils.getSerializeFeatures(class0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("null");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(stringIndexOutOfBoundsException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Short short0 = Short.valueOf((short)512);
      TypeUtils.castToSqlDate(short0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("gettoPattern");
      Class<InternalError> class0 = InternalError.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "gettoPattern", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.decapitalize("6xL-");
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "6xL-", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.text.MockDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.isNumber("[boolean");
      InstantiationError instantiationError0 = new InstantiationError("[boolean");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InstantiationError: [boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      TypeUtils.isKotlin(class0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-5);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.castToString(class0);
      TypeUtils.isNumber("]Af%Rn@ )#");
      Integer integer0 = new Integer((byte) (-5));
      Class<Insets> class1 = Insets.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) integer0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Insets
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TreeMap<RenderingHints.Key, PropertyNamingStrategy> treeMap0 = new TreeMap<RenderingHints.Key, PropertyNamingStrategy>();
      RenderingHints renderingHints0 = new RenderingHints(treeMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("ONUQ+W&}oM-q{u1so&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("S");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TypeUtils.isHibernateInitialized(noClassDefFoundError0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) noClassDefFoundError0;
      objectArray0[2] = (Object) noClassDefFoundError0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "S";
      objectArray0[5] = (Object) "S";
      objectArray0[6] = (Object) "S";
      objectArray0[7] = (Object) "S";
      objectArray0[8] = (Object) noClassDefFoundError0;
      PrintStream printStream0 = mockPrintStream0.format("S", objectArray0);
      noClassDefFoundError0.printStackTrace(printStream0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(noClassDefFoundError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoClassDefFoundError: S
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("5dX\u0001X{,+{", classLoader0, false);
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("+AdW?mcGaAYVY!$Hgn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : +AdW?mcGaAYVY!$Hgn
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.castToString(mockJapaneseDate0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.castToString(mockJapaneseDate0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@0000000001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@0000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClassFromMapping("Vja[lTb`z'fD]'");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Vja[lTb`z'fD]'");
      Class<Rectangle> class0 = Rectangle.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("principal", "([C)F");
      identityHashMap0.put("I^-=Ax1qs/[Lqu_6Ya", "\"U7WW3ei%,'9U");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      TypeUtils.castToShort((Object) null);
      TypeUtils.fnv1a_64_lower("Vja[lTb`z'fD]'");
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = ParserConfig.DENY_PROPERTY;
      Locale locale0 = Locale.CANADA;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      boolean boolean0 = TypeUtils.isHibernateInitialized(locale0);
      boolean boolean1 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      TypeUtils.getSerializeFeatures(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "get");
      Class<JSONObject> class1 = JSONObject.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy0, true, true);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig1.checkAutoType((String) null, class0, 0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Long> class0 = Long.class;
      TypeUtils.isGenericParamType(class0);
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>(53);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) arrayList0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TypeUtils.loadClass("getMetaClass");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.castToString(mockJapaneseDate0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@5fb55a27
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Field[] fieldArray0 = new Field[4];
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("org.springframework.security.web.savedrequest.DefaultSavedRequest", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("clo", class0, class1, class2, (Field) null, 298, (-3925), 19);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      fieldArray0[0] = null;
      beanContext0.getField();
      fieldArray0[1] = null;
      beanContext0.getField();
      fieldArray0[2] = null;
      beanContext0.getField();
      fieldArray0[3] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "2)7paF@74RuGW", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      TypeUtils.isKotlin(class0);
      Class<Long> class1 = Long.class;
      TypeUtils.castToJavaBean((Object) null, class1);
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      assertEquals("class java.text.RuleBasedCollator", class2.toString());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      TypeUtils.getParserFeatures(class0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TypeUtils.isKotlin(class1);
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      System.setCurrentTimeMillis(512L);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(jdk8DateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError("");
      TypeUtils.isNumber("");
      HashSet<OptionalCodec> hashSet0 = new HashSet<OptionalCodec>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TypeUtils.loadClass("toS", (ClassLoader) null);
      TypeUtils.getCollectionItemType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("+AsdW?moGaAFVb!$Hgn");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = ParserConfig.DENY_PROPERTY;
      boolean boolean0 = TypeUtils.isNumber("e");
      assertFalse(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("+AsdW?moGaAFVb!$Hgn");
      assertEquals("+asdw?mogaafvb!$hgn", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "q,";
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("q,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : q,
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      TypeUtils.getGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Constructor<RuleBasedCollator>[] constructorArray0 = (Constructor<RuleBasedCollator>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Type type0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.isGenericParamType((Type) null);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.loadClass("=G3&c", (ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("=G3&c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=G3&c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("+AsdW?moGaAFVb!$Hgn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : +AsdW?moGaAFVb!$Hgn
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = ParserConfig.DENY_PROPERTY;
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.isNumber("1");
      InstantiationError instantiationError0 = new InstantiationError("1");
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.GridBagConstraints@4dd7bdd7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockSimpleDateFormat0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@a9427c06
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = ParserConfig.DENY_PROPERTY;
      TypeUtils.toLocale("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.isNumber("[bLolean");
      InstantiationError instantiationError0 = new InstantiationError("numericCode");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("numericCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : numericCode
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.castToString(mockJapaneseDate0);
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class [I
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Random.setNextRandom((-1932735280));
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("S");
      assertEquals((-5808501897572499070L), long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils.fnv1a_64("J<'R.8SfWF_St,");
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException((String) null);
      String string0 = ParserConfig.DENY_PROPERTY;
      assertEquals("fastjson.parser.deny", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Long> class0 = Long.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      TypeUtils.isNumber("o");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Type[] typeArray0 = new Type[3];
      Class<Long> class0 = Long.TYPE;
      typeArray0[0] = (Type) class0;
      Class<Float> class1 = Float.TYPE;
      typeArray0[1] = (Type) class1;
      Class<Byte> class2 = Byte.TYPE;
      typeArray0[2] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      Class<?> class3 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("java.time.ZoneId", classLoader0, false);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("6xL-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 6xL-
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.castToTimestamp((Object) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Y:V", (String) null, 0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("sIAdZS*HW9,\"?=p", "Y:V", 2547, sQLNonTransientException0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransientConnectionException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLTransientConnectionException -> java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError("numericCode");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("(I)|EqC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : (I)|EqC
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      WeakHashMap<NumberFormat, SQLNonTransientConnectionException> weakHashMap0 = new WeakHashMap<NumberFormat, SQLNonTransientConnectionException>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"actualTypeArguments\":[{}],\"rawType\":{},\"typeName\":\"java.util.List<java.lang.String>\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.loadClass("=G3&c", (ClassLoader) null);
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Double> class1 = Double.class;
      Class<Float> class2 = Float.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("=G3&c", weakHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("org.hibernate.Hibernate", class1, class2, (Type) null, (Field) null, 92, 8232, 92);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Type type0 = beanContext0.getFieldType();
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class2;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[1] = (Type) null;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = null;
      typeArray0[5] = (Type) fieldInfo0.declaringClass;
      typeArray0[6] = (Type) fieldInfo0.declaringClass;
      typeArray0[7] = (Type) null;
      typeArray0[8] = (Type) fieldInfo0.fieldClass;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, type0, type0);
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (ParameterizedType) parameterizedTypeImpl2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@7efe21de
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Class<Integer> class0 = Integer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.autoTypeSupport", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fastjson.parser.autoTypeSupport\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      WeakHashMap<NumberFormat, SQLNonTransientConnectionException> weakHashMap0 = new WeakHashMap<NumberFormat, SQLNonTransientConnectionException>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<NumberFormat> class0 = NumberFormat.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      WeakHashMap<RenderingHints.Key, StackTraceElementDeserializer> weakHashMap0 = new WeakHashMap<RenderingHints.Key, StackTraceElementDeserializer>();
      RenderingHints renderingHints0 = new RenderingHints(weakHashMap0);
      TypeUtils.castToBigDecimal(renderingHints0);
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(uUID0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.ut\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass(".b;NxG>*EQp$XLc2I", classLoader1, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "6xL-", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = ".b;NxG>*EQp$XLc2I";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass(".b;NxG>*EQp$XLc2I", classLoader1, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "6xL-", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "6xL-", (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      WeakHashMap<RenderingHints.Key, StackTraceElementDeserializer> weakHashMap0 = new WeakHashMap<RenderingHints.Key, StackTraceElementDeserializer>();
      weakHashMap0.size();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      WeakHashMap<RenderingHints.Key, StackTraceElementDeserializer> weakHashMap0 = new WeakHashMap<RenderingHints.Key, StackTraceElementDeserializer>();
      weakHashMap0.size();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig.getGlobalInstance();
      MockException mockException0 = new MockException();
      DataTruncation dataTruncation0 = new DataTruncation(5, true, false, 55267, 12, mockException0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Class<Float> class0 = Float.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.clearAssertionStatus();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockMinguoDate0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@55d72c1f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils.decapitalize("6xL-");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("6xL-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 6xL-
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"asmEnable\":true,\"autoTypeSupport\":false,\"compatibleWithJavaBean\":true,\"deserializers\":{},\"fieldBased\":false,\"symbolTable\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      WeakHashMap<NumberFormat, SQLNonTransientConnectionException> weakHashMap0 = new WeakHashMap<NumberFormat, SQLNonTransientConnectionException>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ParserConfig parserConfig1 = new ParserConfig();
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TypeUtils.isNumber("");
      TypeUtils.castToLong("");
      TypeUtils.loadClass("");
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.getSerializeFeatures(class0);
      Collator collator0 = Collator.getInstance();
      collator0.clone();
      MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<HttpCookie> class1 = HttpCookie.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      HashMap<BufferCapabilities, ChoiceFormat> hashMap0 = new HashMap<BufferCapabilities, ChoiceFormat>();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isNumber("islongValue");
      Class<SQLTransientException> class1 = SQLTransientException.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong((-2013L));
      LongUnaryOperator longUnaryOperator0 = mock(LongUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longUnaryOperator0).applyAsLong(anyLong());
      atomicLong0.updateAndGet(longUnaryOperator0);
      atomicLong0.incrementAndGet();
      Timestamp timestamp0 = TypeUtils.castToTimestamp(atomicLong0);
      assertEquals(1000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Insets insets0 = new Insets(1025, 240, (-604), 3217);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<MockCalendar>[] classArray0 = (Class<MockCalendar>[]) Array.newInstance(Class.class, 4);
      Class<MockCalendar> class1 = MockCalendar.class;
      classArray0[0] = class1;
      Class<MockCalendar> class2 = MockCalendar.class;
      classArray0[1] = class2;
      parserConfig0.addAccept((String) null);
      Class<MockCalendar> class3 = MockCalendar.class;
      classArray0[2] = class3;
      Class<MockCalendar> class4 = MockCalendar.class;
      classArray0[3] = class4;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) insets0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("getgetSQLState");
      DecimalFormatSymbols.getInstance(locale0);
      assertEquals("getgetsqlstate", locale0.toString());
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      boolean boolean0 = TypeUtils.isHibernateInitialized(imageCapabilities0);
      assertTrue(boolean0);
      
      TypeUtils.decapitalize("d!");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Rectangle> class0 = Rectangle.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) hashMap1, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Properties properties0 = new Properties();
      Locale locale0 = Locale.JAPAN;
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.isProxy(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Class<Long> class1 = Long.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = new Boolean("xl-");
      Integer integer0 = TypeUtils.castToInt(boolean0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      Class<Integer> class0 = Integer.TYPE;
      typeArray0[0] = (Type) class0;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      ParserConfig parserConfig0 = new ParserConfig(true);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalThreadStateException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TypeUtils.decapitalize("6xl-");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Collator> class0 = Collator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "6xl-", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.Collator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean.valueOf("");
      Timestamp timestamp0 = TypeUtils.castToTimestamp("");
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TypeUtils.castToByte("");
      Hashtable<SQLTransactionRollbackException, MockHijrahDate> hashtable0 = new Hashtable<SQLTransactionRollbackException, MockHijrahDate>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
