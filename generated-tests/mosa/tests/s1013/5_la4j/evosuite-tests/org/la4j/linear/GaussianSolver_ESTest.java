/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:11:54 GMT 2018
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.GaussianSolver;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussianSolver_ESTest extends GaussianSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(5288, 0);
      rowMajorSparseMatrix0.euclideanNorm();
      GaussianSolver gaussianSolver0 = null;
      try {
        gaussianSolver0 = new GaussianSolver(rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseVector0.each(vectorProcedure0);
      gaussianSolver0.applicableTo(matrix0);
      GaussianSolver gaussianSolver1 = new GaussianSolver(matrix0);
      Vector vector0 = gaussianSolver1.solve(denseVector0);
      assertNotSame(vector0, denseVector0);
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(1, mockRandom0);
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      Matrix matrix0 = ooPlaceOuterProduct1.apply(denseVector0, denseVector0);
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system is singular.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector.fromCollection(linkedList0);
      SparseVector.fromCollection(linkedList0);
      Integer integer0 = new Integer((-907));
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      DenseVector.constant(1041, 1041);
      Integer integer1 = new Integer((-907));
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      Integer integer2 = new Integer(1041);
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      CompressedVector compressedVector0 = (CompressedVector)gaussianSolver0.solve(sparseVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      BasicVector basicVector0 = (BasicVector)gaussianSolver0.solve(denseVector0);
      assertNotSame(basicVector0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 9;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)56;
      mockRandom0.nextBytes(byteArray0);
      DenseVector denseVector0 = DenseVector.random(9, mockRandom0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can't be solved.
         //
         verifyException("org.la4j.linear.GaussianSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Integer integer0 = new Integer(1041);
      Integer integer1 = new Integer((-907));
      linkedList0.add(integer1);
      SparseVector.fromCollection(linkedList0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      ooPlaceVectorsSubtraction0.partiallyApply(sparseVector0);
      DenseVector denseVector1 = DenseVector.constant(47, 47);
      Integer integer2 = new Integer((-907));
      Integer integer3 = new Integer((-907));
      linkedList0.push(integer3);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      DenseVector.fromCollection(linkedList1);
      denseVector1.toRowMatrix();
      ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector1);
      denseVector0.product();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 38;
      doubleArray0[1] = (double) (-907);
      doubleArray0[2] = (double) 38;
      doubleArray0[3] = 0.18000000000000002;
      doubleArray0[4] = (double) 47;
      DenseVector denseVector2 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector2.toDiagonalMatrix();
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      gaussianSolver0.solve(denseVector2);
      SparseVector sparseVector1 = SparseVector.fromArray(doubleArray0);
      CompressedVector compressedVector0 = (CompressedVector)gaussianSolver0.solve(sparseVector1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }
}
