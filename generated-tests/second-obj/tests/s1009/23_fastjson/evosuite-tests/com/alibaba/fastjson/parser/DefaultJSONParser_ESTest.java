/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:26:25 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Dimension2D;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.RuleBasedCollator;
import java.time.LocalTime;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 95, parserConfig0, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(">n]i");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[8?}!GU;y. PJXl<");
      Time time0 = new Time(0L);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [8?}!GU;y. PJXl<
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j^<'!v-D,-e,`");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      defaultJSONParser0.getObject("fastjson.parser.autoTypeAccept");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";c[`?/v3n,", parserConfig0, (-788));
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-788), (-788));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TBes|Y=E");
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NQHBdkp\"Nc");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        Time.valueOf((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TBes|Y=E");
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.compatibleWithJavaBean = false;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("a=dZ5X", parserConfig0);
      LinkedHashSet<DateFormatSymbols> linkedHashSet0 = new LinkedHashSet<DateFormatSymbols>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getDateFormat();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyProcessable0).toString();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TBes|Y=E");
      Properties properties0 = new Properties();
      Locale locale0 = Locale.CANADA_FRENCH;
      Feature feature0 = Feature.AutoCloseSource;
      defaultJSONParser0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 4, json : TBes|Y=E
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONScanner jSONScanner0 = new JSONScanner(", property ", 9);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("exepct '[', but ");
      Feature feature0 = Feature.OrderedField;
      defaultJSONParser0.config(feature0, true);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{S+03.$2`7");
      // Undeclared exception!
      try { 
        DateFormat.getDateInstance(15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 15
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ", parserConfig0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("67", parserConfig0);
      // Undeclared exception!
      try { 
        JSON.parseObject("67");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "", (Object) "");
      DateFormat dateFormat0 = DateFormat.getDateInstance(0);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "value ");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Properties properties0 = new Properties();
      DecimalFormatSymbols.getInstance();
      Locale.forLanguageTag("value ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "value ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName value 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error :");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":o29", parserConfig0, 20);
      ArrayDeque<ChronoLocalDate> arrayDeque0 = new ArrayDeque<ChronoLocalDate>();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      defaultJSONParser0.setConfig(parserConfig0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.parseObject((Type) null, (Object) "");
      defaultJSONParser0.close();
      defaultJSONParser0.getDateFormat();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":o29");
      defaultJSONParser0.getExtraProcessors();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : :
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 14);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) classLoader0, (Object) parserConfig0);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) classLoader0, (Object) parserConfig0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext1, "fastjson.parser.deny");
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(6, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("FD$=^id");
      defaultJSONParser0.getContext();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, (Object) null, (Object) null);
      defaultJSONParser0.setContext(parseContext0);
      defaultJSONParser0.setResolveStatus((-742));
      assertEquals((-742), defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", pos ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "", (Object) "");
      DateFormat dateFormat0 = DateFormat.getDateInstance(0);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Properties properties0 = new Properties();
      Locale.forLanguageTag("");
      defaultJSONParser0.popContext();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("writeAsArrayNonContext", parserConfig0);
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeAccept");
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      JSON.defaultTimeZone = null;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : writeAsArrayNonContext
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "", (Object) "");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "value ");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Properties properties0 = new Properties();
      DecimalFormatSymbols.getInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      defaultJSONParser0.getLexer();
      Vector<BufferCapabilities> vector0 = new Vector<BufferCapabilities>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")9");
      defaultJSONParser0.setContext((Object) ")9", (Object) ")9");
      DateFormat.getDateInstance(2);
      defaultJSONParser0.getExtraProcessors();
      JSON.DEFFAULT_DATE_FORMAT = ")9";
      Time time0 = new Time(2);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) ")9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )9
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", pos ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$", parserConfig0, 672);
      HashMap<ParameterizedTypeImpl, DecimalFormatSymbols> hashMap0 = new HashMap<ParameterizedTypeImpl, DecimalFormatSymbols>();
      defaultJSONParser0.checkMapResolve(hashMap0, parserConfig0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0c+6k7*:rmDct");
      defaultJSONParser0.getDateFomartPattern();
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")9");
      defaultJSONParser0.setContext((Object) ")9", (Object) ")9");
      DateFormat.getDateInstance(0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getExtraTypeProviders();
      System.setCurrentTimeMillis(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")9");
      Dimension dimension0 = new Dimension();
      dimension0.setSize((Dimension2D) dimension0);
      Locale locale0 = Locale.ENGLISH;
      DecimalFormatSymbols.getInstance(locale0);
      defaultJSONParser0.getObject("value ");
      Dimension dimension1 = new Dimension();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ), pos 1, json : )9
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")9");
      defaultJSONParser0.setContext((Object) ")9", (Object) ")9");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getExtraTypeProviders();
      System.setCurrentTimeMillis(0);
      defaultJSONParser0.resolveReference(")9");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")9");
      Dimension dimension0 = new Dimension();
      dimension0.setSize((Dimension2D) dimension0);
      Locale locale0 = Locale.ENGLISH;
      DecimalFormatSymbols.getInstance(locale0);
      defaultJSONParser0.getObject(")9");
      Dimension dimension1 = new Dimension();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ), pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("73E", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 3, json : 73E
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")?<W9;");
      Boolean boolean0 = Boolean.valueOf(")?<W9;");
      defaultJSONParser0.handleResovleTask(boolean0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Properties properties0 = new Properties();
      Locale locale0 = Locale.CANADA_FRENCH;
      Float float0 = new Float((float) 1);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      imageCapabilities0.clone();
      imageCapabilities0.clone();
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, (BufferCapabilities.FlipContents) null);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockDateFormat.getDateTimeInstance(0, 0);
      defaultJSONParser0.accept(11);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 1, fieldName org.evosuite.runtime.mock.java.text.MockDateFormat@2b057745
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Properties properties0 = new Properties();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("&=8T;l3pO1", hashtable0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}$Dj", parserConfig0, (-1224));
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      defaultJSONParser0.parseObject(class0);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.getFieldTypeResolver();
      assertNull(fieldTypeResolver0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TBrs|Y=/");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}$Dj");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }$Dj
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TBes|Y=E");
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      Properties properties0 = new Properties();
      defaultJSONParser0.parseKey();
      Properties properties1 = new Properties();
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Locale locale0 = Locale.CANADA_FRENCH;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      JobAttributes jobAttributes0 = new JobAttributes();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      Properties properties0 = new Properties();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      ParserConfig parserConfig0 = new ParserConfig();
      DecimalFormat decimalFormat0 = new DecimalFormat("null", decimalFormatSymbols0);
      System.setCurrentTimeMillis(0);
      List<ExtraTypeProvider> list0 = new Stack<ExtraTypeProvider>();
      defaultJSONParser0.parse();
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeSupport");
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(I)V");
      JobAttributes jobAttributes0 = new JobAttributes();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Properties properties0 = new Properties();
      DecimalFormatSymbols.getInstance();
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      Dimension dimension2 = new Dimension(dimension1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      defaultJSONParser0.getResolveStatus();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (I)V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Properties properties0 = new Properties();
      DecimalFormatSymbols.getInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = "null";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      JobAttributes jobAttributes0 = new JobAttributes();
      Hashtable<DecimalFormatSymbols, Integer> hashtable0 = new Hashtable<DecimalFormatSymbols, Integer>();
      defaultJSONParser0.parseObject((Map) hashtable0);
      ParserConfig parserConfig0 = null;
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}$Dj");
      decimalFormatSymbols0.setInfinity("qg@=kyU4-I&KPO");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("} .C?k!", parserConfig0, 0);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer, parserConfig0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        defaultJSONParser2.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : } .C?k!
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Properties properties0 = new Properties();
      DecimalFormatSymbols.getInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      Hashtable<DecimalFormatSymbols, Integer> hashtable0 = new Hashtable<DecimalFormatSymbols, Integer>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error : ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("null", parserConfig0);
      defaultJSONParser1.parseArray((Type[]) null);
      defaultJSONParser0.getSymbolTable();
      ParserConfig parserConfig1 = new ParserConfig(false);
      defaultJSONParser0.setConfig(parserConfig1);
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 14);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getContext();
      classLoader0.setDefaultAssertionStatus(false);
      ParserConfig parserConfig1 = new ParserConfig();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("ec5FLe<4fy@SAQ:i", decimalFormatSymbols0);
      System.setCurrentTimeMillis(215L);
      Stack<ExtraTypeProvider> stack0 = new Stack<ExtraTypeProvider>();
      defaultJSONParser0.parse();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setContext((Object) "", (Object) "");
      DateFormat dateFormat0 = DateFormat.getDateInstance(0);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      defaultJSONParser0.handleResovleTask(dateFormat0);
      Properties properties0 = new Properties();
      defaultJSONParser0.popContext();
      String string0 = File.pathSeparator;
      defaultJSONParser0.close();
      ParseContext parseContext0 = defaultJSONParser0.context;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      defaultJSONParser0.resolveReference("e(Bk8j[9zF,>9u{^");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[8?}!GU;y. PJXl<");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Class<String> class0 = String.class;
      TreeSet<Double> treeSet0 = new TreeSet<Double>();
      treeSet0.clear();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [8?}!GU;y. PJXl<
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = new ParserConfig();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Hashtable<DecimalFormatSymbols, Integer> hashtable0 = new Hashtable<DecimalFormatSymbols, Integer>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[8?}!GU;y. PJXl<");
      Double double0 = new Double(0);
      Class<DefaultJSONParser.ResolveTask> class0 = DefaultJSONParser.ResolveTask.class;
      ArrayList<MockMinguoDate> arrayList0 = new ArrayList<MockMinguoDate>();
      Vector<MockMinguoDate> vector0 = new Vector<MockMinguoDate>(arrayList0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")9");
      defaultJSONParser0.setContext((Object) ")9", (Object) ")9");
      DateFormat.getDateInstance(0);
      defaultJSONParser0.getExtraProcessors();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      System.setCurrentTimeMillis(0);
      defaultJSONParser0.resolveReference("value ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")9");
      Dimension dimension0 = new Dimension();
      dimension0.setSize((Dimension2D) dimension0);
      Locale locale0 = Locale.ENGLISH;
      DecimalFormatSymbols.getInstance(locale0);
      defaultJSONParser0.getObject("value ");
      Dimension dimension1 = new Dimension();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DecimalFormatSymbols.getInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = "null";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      JobAttributes jobAttributes0 = new JobAttributes();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      Properties properties0 = new Properties();
      DecimalFormatSymbols.getInstance();
      Stack<RenderingHints.Key> stack0 = new Stack<RenderingHints.Key>();
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.getComponentType();
      defaultJSONParser0.parseArrayWithType((Type) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) mockThaiBuddhistDate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "", (Object) "");
      Properties properties0 = new Properties();
      parseContext0.toString();
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("#^_.~~qj}bdO", parserConfig0, 84);
      defaultJSONParser1.accept(1, 1);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":o29", parserConfig0, 1329);
      defaultJSONParser0.setConfig(parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :o29
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "", (Object) "");
      DateFormat dateFormat0 = DateFormat.getDateInstance(0);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      Locale locale0 = Locale.CANADA;
      parseContext0.toString();
      JSON.defaultLocale = locale0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Oikwy(,y7");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "value ");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      DecimalFormatSymbols.getInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      defaultJSONParser0.resolveReference("$");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setContext((Object) "", (Object) "");
      DateFormat dateFormat0 = DateFormat.getDateInstance(0);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getExtraTypeProviders();
      System.setCurrentTimeMillis(943L);
      defaultJSONParser0.resolveReference("value ");
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      dimension0.clone();
      Dimension dimension2 = new Dimension(dimension0);
      Dimension dimension3 = new Dimension(dimension0);
      DecimalFormatSymbols.getInstance();
      ParserConfig parserConfig0 = new ParserConfig();
      Locale locale0 = Locale.UK;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      defaultJSONParser0.getObject("$");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Properties properties0 = new Properties();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}$Dj");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("}$Dj", parserConfig0, (-1224));
      defaultJSONParser1.setContext((Object) properties0, (Object) null);
      defaultJSONParser1.setContext((ParseContext) null);
      defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser0.handleResovleTask((Object) null);
      defaultJSONParser1.getSymbolTable();
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}$Dj");
      IdentityHashMap<Date, BigInteger> identityHashMap0 = new IdentityHashMap<Date, BigInteger>();
      defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) decimalFormatSymbols0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "}$Dj");
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSON.setDefaultTypeKey("IL$ho H!");
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      treeMap0.forEach(biConsumer0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";G");
      Locale locale0 = Locale.JAPAN;
      locale0.clone();
      DecimalFormatSymbols.getInstance(locale0);
      defaultJSONParser0.getResolveStatus();
      defaultJSONParser0.getResolveTaskList();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser0.getLexer();
      Class<Timestamp> class0 = Timestamp.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getType();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ", parserConfig0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      parserConfig0.addDeny(", actual ");
      Dimension dimension0 = new Dimension(2, 0);
      Dimension dimension1 = new Dimension(dimension0);
      Object object0 = new Object();
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      defaultJSONParser0.getSymbolTable();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ", parserConfig0);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeAccept");
      defaultJSONParser0.getLexer();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      TreeMap<SimpleTimeZone, Integer> treeMap0 = new TreeMap<SimpleTimeZone, Integer>();
      MessageFormat messageFormat0 = new MessageFormat("unterminated json string, ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) messageFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Dimension dimension0 = new Dimension();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      DateFormatSymbols.getInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", actual ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ", actual ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 9, json : , actual 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Properties properties0 = new Properties();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ");
      DecimalFormatSymbols decimalFormatSymbols1 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols1.setInternationalCurrencySymbol("Sl{O");
      decimalFormatSymbols1.setInfinity("unterminated json string, ");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      defaultJSONParser0.getContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 12, json : unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setCurrencySymbol("java.lang.String@0000000153");
      ParserConfig parserConfig0 = ParserConfig.global;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]{OHVq1U3LR@_dT");
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.PRIOR;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]{OHVq1U3LR@_dT", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]{OHVq1U3LR@_dT
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}$Dj");
      decimalFormatSymbols0.setPatternSeparator('Z');
      decimalFormatSymbols0.setInfinity("qg@=kyU4-I&KPO");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("} .C?k!", parserConfig0, 0);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer, parserConfig0);
      defaultJSONParser1.getContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultJSONParser2.setContext((ParseContext) null);
      defaultJSONParser2.close();
      defaultJSONParser2.getResolveStatus();
      TreeMap<SimpleTimeZone, Integer> treeMap0 = new TreeMap<SimpleTimeZone, Integer>();
      DefaultJSONParser defaultJSONParser3 = null;
      try {
        defaultJSONParser3 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")9");
      defaultJSONParser0.setContext((Object) ")9", (Object) ")9");
      DateFormat.getDateInstance(2);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getExtraTypeProviders();
      System.setCurrentTimeMillis(0);
      Object object0 = new Object();
      Dimension dimension0 = new Dimension();
      defaultJSONParser0.setContext((Object) null, (Object) list0);
      defaultJSONParser0.getExtraProcessors();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ), pos 1, json : )9
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Properties properties0 = new Properties();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DecimalFormatSymbols.getInstance();
      Locale locale0 = Locale.FRENCH;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("null", parserConfig0, 0);
      defaultJSONParser1.parse();
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      Dimension dimension0 = new Dimension(1, 58);
      Dimension dimension1 = new Dimension(1, 1);
      dimension0.setSize((Dimension2D) dimension1);
      Locale locale1 = Locale.ENGLISH;
      DecimalFormatSymbols.getInstance(locale1);
      defaultJSONParser1.getObject("java.awt.Rectangle");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      defaultJSONParser0.parseObject(class0);
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      defaultJSONParser1.getSymbolTable();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Dimension dimension0 = new Dimension();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      DateFormatSymbols.getInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", actual ");
      ParserConfig parserConfig0 = new ParserConfig(false);
      defaultJSONParser0.setConfig(parserConfig0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ", actual ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 9, json : , actual 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Hashtable<DecimalFormatSymbols, Integer> hashtable0 = new Hashtable<DecimalFormatSymbols, Integer>();
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[8}!GU;y.JXl<");
      Stack<GridBagConstraints> stack0 = new Stack<GridBagConstraints>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [8}!GU;y.JXl<
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
