/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 09:24:17 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import java.io.StringWriter;
import java.net.URI;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.getSignature("/M0a(Fe");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("public priv", "1q5", "v2JnD]G");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)116;
      byteArray0[5] = (byte) (-118);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[6] = (byte)116;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), 932, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "v2JnD]G";
      Utility.methodTypeToSignature("0:    aload_3\n1:    nop\n2:    iinc\t\t%116\t0\n5:    l2d\n6:    ineg\n", stringArray0);
      Integer integer0 = new Integer((byte) (-118));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.compactClassName("(Lv2JnD]G;)L0:;");
      Utility.classOrInterface((byte)116);
      Utility.printArray((Object[]) constantArray0, true, false);
      Utility.methodTypeToSignature("if_icmpne", stringArray0);
      // Undeclared exception!
      try { 
        Utility.replace("iaload", (String) null, "public priv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)61, 196);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[6] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.readUnsignedByte();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      ByteSequence byteSequence6 = new ByteSequence(byteArray0);
      ByteSequence byteSequence7 = new ByteSequence(byteArray0);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      String string0 = Utility.replace("v2JnD]G", "p$blic pri#", ";- W:");
      assertEquals("v2JnD]G", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)59);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = (ConstantClass)constantClass0.copy();
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      constantClass0.setNameIndex(783);
      ConstantClass constantClass3 = new ConstantClass((byte) (-105));
      ConstantClass constantClass4 = new ConstantClass(constantClass2);
      ConstantClass constantClass5 = new ConstantClass(constantClass4);
      constantClass4.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v2JnD]G");
      Utility.codeToString(byteSequence1, constantPool1, true);
      String string1 = Utility.convertString("1)null\n2)null\n3)null\n");
      assertEquals("1)null\\n2)null\\n3)null\\n", string1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((byte) (-91));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantClass1.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_Class[7](name_index = -91)");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)31;
      byteArray0[0] = (byte) (-91);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-91));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.printArray((Object[]) null);
      Utility.printArray((Object[]) null, false, false);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("a5 1f 00 6f a5", string1);
      
      String string2 = Utility.compactClassName("if_acmpeq\t\t#7936", true);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(569);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantClass0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_Class[7](name_index = 569)");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)111);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)94;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)94);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8F=SYi{6Q(&-iF");
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence3.readFloat();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (int) (byte)94);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.signatureToString("C7;w,gs", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)110;
      MockFile mockFile0 = new MockFile("char", "C7;w,gs");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readByte();
      byteSequence0.readBoolean();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CLASSPATH component ");
      Constant[] constantArray0 = new Constant[13];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("CLASSPATH component ");
      constantArray0[0] = (Constant) constantUtf8_0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.replace("char", "lor", "3@S/>jcZ{");
      assertTrue(string1.equals((Object)string0));
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      byte byte0 = Utility.typeOfSignature("Invalid method signature: ");
      assertEquals((byte)10, byte0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)61, 196);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      Utility.accessToString((int) (byte)110, false);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      String string0 = Utility.accessToString(115, false);
      assertEquals("public private final synchronized volatile", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      byteSequence2.readByte();
      byteSequence3.readChar();
      constantArray0[0] = (Constant) constantMethodType1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence3);
      constantFieldref0.clone();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte)48;
      byte byte0 = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "boolean");
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.readBoolean();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readFloat();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "V";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "V";
      Utility.methodTypeToSignature("V", stringArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(329, (-943));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      byteArrayOutputStream0.write(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(LV;)LV;");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      constantArray0[5] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)61, 196);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      boolean boolean0 = true;
      Utility.accessToString((int) (byte)110, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte)83, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.signatureToString("C7;w,gs", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)110;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2388), (byte) (-59));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      Utility.accessToString(170, true);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      Utility.accessToString(197, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence1);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertEquals(0, constantFieldref1.getNameAndTypeIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[2] = (byte)48;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)120;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "boolean");
      Utility.encode(byteArray0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fsub");
      Utility.getSignature("\n");
      Utility.signatureToString("L;");
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.util.ByteSequence$ByteArrayStream", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.util.ByteSequence$ByteArrayStream
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-101);
      byte byte0 = (byte)62;
      byteArray0[3] = (byte)62;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, (int) (byte)62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)94;
      byte byte0 = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      Utility.accessToString((int) (byte)17, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence1.readUnsignedByte();
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref(byteSequence2);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.fillup("anewarray", 456, true, 'X');
      String string0 = Utility.accessToString(456);
      assertEquals("static volatile transient native", string0);
      
      Utility.replace("cj", "boolean", "cj");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte) (-24);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-46), (int) (byte) (-46), true);
      assertEquals("0:    ior\n1:    istore_0\n2:    aload_0\n3:    lload_0\n4:    fload_3\n5:    areturn\n6:    <illegal opcode>\n7:    <illegal opcode>\n", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0:    ior\n1:    istore_0\n2:    aload_0\n3:    lload_0\n4:    fload_3\n5:    areturn\n6:    <illegal opcode>\n7:    <illegal opcode>\n";
      stringArray0[1] = "cj";
      stringArray0[2] = "cj";
      stringArray0[3] = "cj";
      stringArray0[4] = "u|";
      stringArray0[5] = "boolean";
      stringArray0[6] = "anewarrayXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
      stringArray0[7] = "0:    ior\n1:    istore_0\n2:    aload_0\n3:    lload_0\n4:    fload_3\n5:    areturn\n6:    <illegal opcode>\n7:    <illegal opcode>\n";
      String string2 = Utility.methodTypeToSignature("u|", stringArray0);
      assertEquals("(L0:;Lcj;Lcj;Lcj;Lu|;ZLanewarrayXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;L0:;)Lu|;", string2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "char");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-101);
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)69;
      Utility.encode(byteArray0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence2.skip(0L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)100;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Utility.setBit((-2827), (-2827));
      assertEquals((-2827), int0);
      
      String string0 = Utility.accessToString(115, true);
      assertEquals("public private final volatile", string0);
      
      String string1 = Utility.compactClassName("'^8!@kpPO(N!wV");
      assertEquals("'^8!@kpPO(N!wV", string1);
      
      String string2 = Utility.fillup("", (-2827), true, '\"');
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lreturn");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "checkcast");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(172, 329);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantMethodHandle0.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.classOrInterface((byte) (-89));
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.getSignature("/M0a(Fe");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "v2JnD]G";
      Utility.replace("public priv", "1q5", "v2JnD]G");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[2] = (byte)116;
      byteArray0[5] = (byte)124;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1q5");
      byteArray0[6] = (byte)116;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readChar();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, 932, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface((-2605));
      byte[] byteArray0 = Utility.decode("class", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit(58, (-2605));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ladd";
      stringArray0[1] = "wJ8Yu!";
      Utility.methodTypeToSignature("wr?g~{RnnNx+[u]S", stringArray0);
      Locale.getISOLanguages();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("ifle", false);
      ConstantClass constantClass0 = new ConstantClass((byte) (-62));
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readByte();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence1.readInt();
      byteSequence0.skip(1768320101);
      try { 
        Utility.typeOfSignature("ifle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifle
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.decode("h$VI", false);
      Utility.decode("impdep2", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-61);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte) (-25);
      byteArray0[8] = (byte) (-107);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 95, (-2158), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.convertString("/M0a(Fe");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("/M0a(Fe");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byte[] byteArray1 = new byte[7];
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte) (-78);
      byteArray1[4] = (byte) (-78);
      byteArray1[5] = (byte)59;
      byteArray1[6] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantClass constantClass0 = new ConstantClass((byte)59);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      DataInputStream.readUTF((DataInput) byteSequence0);
      constantClass1.copy();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45627. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.replace("Inval?d type: ", "Inval?d type: ", "Inval?d type: ");
      Utility.signatureToString("Inval?d type: ", false);
      Utility.searchOpcode("$Pkkf;1MddY<$HM(");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)121;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.methodSignatureReturnType("CLASSPATH component ");
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8.getInstance("CLASSPATH component ");
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("char");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)6;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)82;
      ConstantUtf8.getCachedInstance("CLASSPATH component ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-70), (-1472432687), true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("char", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.convertString("%c");
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("ifle", false);
      ConstantClass constantClass0 = new ConstantClass((byte)122);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.convertString("char");
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(164, 164, byteSequence2, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Utility.getSignature("dsub");
      assertEquals("Ldsub;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-12);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), 40);
      assertEquals("0:    ifeq\t\t#-15093\n3:    laload\n4:    athrow\n5:    dsub\n6:    iastore\n7:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = (byte)100;
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)100;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)100;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1889), (-936));
      String string0 = "?&O6B9:VtJiIIbOn";
      File file0 = MockFile.createTempFile("eK?#P <T6", "?&O6B9:VtJiIIbOn");
      try { 
        MockFile.createTempFile("0:    nop\n1:    ifge\t\t#-25443\n4:    ifge\t\t#-12440\n7:    nop\n", "0:    nop\n1:    ifge\t\t#-25443\n4:    ifge\t\t#-12440\n7:    nop\n", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byte[] byteArray1 = Utility.decode("Dw, Nj", false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifgt\t\t#-25344", string0);
      
      short short0 = Utility.searchOpcode("ifgt\t\t#-25344");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-99), (int) (byte) (-99));
      assertEquals("0:    fstore_1\n1:    dneg\n2:    aload_2\n3:    lload_2\n4:    astore_3\n5:    fmul\n", string1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(79);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = new ConstantClass(constantClass0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass2;
      constantArray0[2] = (Constant) constantClass1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantArray0[3] = (Constant) constantClass2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.accessToString(135);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte) (-44);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.reset();
      Utility.codeToString(byteSequence2, constantPool1, true);
      Utility.classOrInterface((byte) (-44));
      try { 
        Utility.methodSignatureArgumentTypes("public private protected transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected transient
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-104));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.accessToString((-1083));
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.classOrInterface(176);
      try { 
        Utility.methodSignatureArgumentTypes("public protected volatile transient native interface strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected volatile transient native interface strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-110);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (-1680));
      assertEquals("0:    ior\n1:    i2c\n", string1);
      
      String string2 = Utility.getSignature("0:    ior\n1:    i2c\n");
      assertEquals("L0:;", string2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "!z~*~)4 *Ss97d)W";
      Utility.getSignature("!z~*~)4 *Ss97d)W");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)17;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        constantPool0.getConstant(244, (byte)17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      String string0 = "vMDQ;bF&3wl";
      Utility.getSignature("vMDQ;bF&3wl");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        constantPool1.getConstant((int) (byte)25, (byte)25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(1575);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.classOrInterface(68);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("d2l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d2l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "\td<";
      Utility.typeOfSignature("Invalid");
      String string1 = "QnR{> [8yL+E";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeVisibleParameterAnnotations", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)32);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = new ConstantClass(constantClass0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool1, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("lload_2", string0);
      
      short short0 = Utility.searchOpcode(">$ Q");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.methodSignatureReturnType("D-q=C", false);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null}", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-111);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$Aa$91", string1);
      
      byte[] byteArray1 = Utility.decode("$Aa$91", false);
      assertArrayEquals(new byte[] {(byte)0, (byte)97, (byte) (-111)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("o$", false);
      ConstantClass constantClass0 = new ConstantClass(8);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)111}, byteArray1);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String string1 = Utility.convertString("nop");
      assertTrue(string1.equals((Object)string0));
      
      byteSequence2.close();
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-3238), (-3238), byteSequence2, (ConstantPool) null);
      int int0 = Utility.setBit(8, (byte)0);
      assertEquals(9, int0);
      
      String string2 = Utility.accessToString(154);
      assertEquals("private static final transient", string2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpeq\t\t#29482", string0);
      
      int int0 = Utility.setBit((byte) (-16), 2280);
      assertEquals((-16), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-3680L));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.compactClassName("+S86!;tO`dCLV", "+S86!;tO`dCLV", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((-543));
      ConstantClass constantClass1 = new ConstantClass((byte) (-86));
      ConstantClass constantClass2 = new ConstantClass(constantClass0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[7];
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass2;
      constantArray0[3] = (Constant) constantClass2;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass1;
      constantArray0[6] = (Constant) constantClass0;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "f$0<8b%1bmdjX9pz";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.decode("f$0<8b%1bmdjX9pz", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)107, (int) (byte)11, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("*5QO0/$7 R");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*5QO0/$7 R");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-105);
      Utility.encode(byteArray0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-105);
      objectArray0[1] = (Object) (byte)57;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{-105, 57}", "Invalid byte tag in constant pool: ", "?n>{'$tl`sFixY", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {-105, 57}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)106;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "\n", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "nop";
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.convertString("nop");
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(651, 84, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.compactClassName("+S86;tO`dV", "+S86;tO`dV", true);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte)64;
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.available();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = ")^po)^a\\u7V";
      // Undeclared exception!
      try { 
        Utility.signatureToString(string0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `)^po)^a\\u7V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.methodSignatureReturnType("CLASSPATH component ");
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("CLASSPATH component ");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)127;
      ConstantUtf8.getCachedInstance("HSLI,");
      byteArray0[5] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.replace("\"", "java.lang.E{rTSx7a;3HwF?[=", "char");
      byte[] byteArray1 = Utility.decode("CLASSPATH component ", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.fillup("uIEAa0rU<Y_G@|;%kB", 18, false, '{');
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.clearBit((byte)25, (byte)25);
      Utility.isSet(25, 25);
      byte[] byteArray0 = new byte[4];
      Utility.isSet(25, (byte)63);
      byteArray0[0] = (byte)63;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      Utility.accessToString((int) (byte)25, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(44);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)25;
      byteArray1[1] = (byte)25;
      byteArray1[2] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte)63, (int) (byte)63, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.replace("Inval?d type: ", "Inval?d type: ", "Inval?d type: ");
      Utility.signatureToString("Inval?d type: ", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-113);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-65);
      byteArray1[1] = (byte) (-70);
      byteArray1[2] = (byte) (-106);
      byteArray1[3] = (byte)106;
      byteArray1[4] = (byte) (-113);
      byteArray1[5] = (byte) (-113);
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (-2364), (int) (byte) (-113), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 38506. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)100;
      byteArray0[2] = (byte) (-74);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1930), (-936));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte) (-37);
      byteArray0[8] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_1", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('P');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.convertString("/M0a(Fe");
      String string0 = "\\tq5";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tq5");
      Utility.replace("public priv", "\tq5", "v2JnD]G");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)116;
      byteArray0[5] = (byte)124;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tq5");
      byteArray0[6] = (byte)116;
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-124);
      byteArray1[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.convertString("/M0a(Fe");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("SzrIHU!sSQ|$>0", "L}rotecte9;V", "isub");
      Utility.searchOpcode("getstatic");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("/M0a(Fe");
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)122;
      byteArray0[2] = (byte) (-126);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte) (-126);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray1, constantPool1, (-2848), (int) (byte) (-126), true);
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.accessToString(88);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" 'j;b y");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-75));
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("77_o*6`!&+t0e}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 77_o*6`!&+t0e}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("Lprote7ue");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "sxhrt";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)57;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(166);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      ConstantClass constantClass3 = new ConstantClass(constantClass1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantClass3;
      constantArray0[1] = (Constant) constantClass3;
      constantArray0[2] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("sxhrt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `sxhrt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)119;
      ConstantClass constantClass0 = new ConstantClass((-83));
      constantClass0.clone();
      ConstantClass constantClass1 = new ConstantClass((byte)17);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.read();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Lprote7ue";
      Utility.getSignature("Lprote7ue");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "sxhrt";
      stringArray0[1] = "sxhrt";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(105);
      ConstantClass constantClass1 = new ConstantClass((byte)64);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 187, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.decode("if_acmpne", false);
      Utility.compactClassName("if_acmpne", "if_acmpne", false);
      String string0 = "org.apache.bcel.util.ClassPath";
      LocalVariable[] localVariableArray0 = null;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-562), (-562), (LocalVariable[]) null, constantPool0);
      try { 
        Utility.methodSignatureToString("", "org.apache.bcel.util.ClassPath", "if_acmpeq", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer((-859));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[5] = (byte) (-84);
      byteArray0[3] = (byte)31;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte)0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", low = ");
      byteSequence0.mark(1463);
      Utility.accessToString(1024, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.skip(780L);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-84), (int) (byte)31, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(\"", (String) null, "0:    lload_1\n1:    nop\n2:    nop\n3:    lload_1\n4:    nop\n5:    ireturn\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-9);
      byteArray0[0] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("@U*'@{J]%{AC2C4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @U*'@{J]%{AC2C4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "Lprote7ue";
      String string1 = "short";
      Utility.getSignature("Lprote7ue");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0_Q6PEx ";
      stringArray0[1] = "short";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "0_Q6PEx ";
      stringArray0[3] = "0_Q6PEx ";
      stringArray0[4] = "Lprote7ue";
      Utility.methodTypeToSignature("0_Q6PEx ", stringArray0);
      boolean boolean0 = true;
      Utility.methodSignatureToString("(L0_Q6PEx;SL0_Q6PEx;L0_Q6PEx;LLprote7ue;)L0_Q6PEx;", "short", "Lprote7ue", true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Utility.accessToString(45, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, (int) (byte)4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("/M0a(Fe");
      String string0 = "\\Ctq5";
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-126);
      byteArray0[4] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)46);
      constantClass0.clone();
      ConstantClass constantClass1 = new ConstantClass(byteSequence0);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, constantPool0, true);
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<String> class0 = String.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      // Undeclared exception!
      try { 
        constantPool0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.decode("impdep2", false);
      Utility.signatureToString("BR/}?Z|a ");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-49);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-37);
      byteArray0[8] = (byte) (-125);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-125);
      byteArray1[1] = (byte) (-49);
      byteArray1[2] = (byte) (-89);
      byteArray1[3] = (byte) (-49);
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte) (-37);
      byteArray1[6] = (byte)49;
      byteArray1[7] = (byte)49;
      byteArray1[8] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dload");
      Utility.format((-2605), 3, false, 'm');
      Utility.decode("-2605", false);
      Utility.compactClassName("wr?g~{RnnNx+[u]S", "-2605", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "Q\"dK+crxzQ{ U;`cd";
      objectArray0[3] = (Object) "ret";
      objectArray0[4] = (Object) "Q\"dK+crxzQ{ U;`cd";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("&~>#M8}*VuF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &~>#M8}*VuF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)17;
      byte byte0 = (byte)119;
      byteArray0[3] = (byte)119;
      ConstantClass constantClass0 = new ConstantClass((-83));
      constantClass0.clone();
      ConstantClass constantClass1 = new ConstantClass((byte)17);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfSignature("impdep2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mg8QJ$");
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.isJavaIdentifierPart('i');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedShort();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.format(253, 253, true, 'i');
      Utility.setBit((-3634), (byte)35);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("short", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-1);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 123, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.replace("Inval?d type: ", "Inval?d type: ", "Inval?d type: ");
      Utility.signatureToString("Inval?d type: ", false);
      Utility.searchOpcode("$Pkkf;1MddY<$HM(");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.signatureToString("Inval?d type: ");
      try { 
        Utility.methodSignatureToString("VA-<48x\"2Y7=22DB", "Invalid method signature: ", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VA-<48x\"2Y7=22DB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)13;
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, 2203);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)13;
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, 2203);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("5S~6l)7w)H'rkiA.@.M", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.setBit((-465), (-465));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "aastore";
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "z#ijT^c";
      try { 
        Utility.typeOfSignature("z#ijT^c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: z#ijT^c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.format(3033, 3033, false, 'w');
      MockFile mockFile0 = new MockFile("ldc");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('l');
      Utility.printArray(printWriter0, (Object[]) null);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)6;
      byteArray0[4] = (byte)33;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-128);
      byteArray0[1] = (byte)69;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte)33);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.compactClassName("fstore_2");
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-42);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=]h:dS1h.J&_yCgQ");
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("astore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ifnonnull";
      stringArray0[1] = "ifnonnull";
      stringArray0[2] = "ifnonnull";
      stringArray0[3] = "6M0SzMWP^Xjsr_w";
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)14;
      byte byte0 = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.setBit(2171, (-2312));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "h$VI";
      boolean boolean0 = false;
      String string1 = "impdep2";
      Utility.decode("impdep2", false);
      String string2 = "BR/}?Z|a ";
      Utility.signatureToString("BR/}?Z|a ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-49);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-25);
      byteArray0[8] = (byte) (-125);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 109, (-2158), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      byteSequence1.readBoolean();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit((-300), 216);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ldc_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ldc_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      byteSequence1.readBoolean();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit((-300), 216);
      String string0 = "ldc_w";
      // Undeclared exception!
      try { 
        Utility.signatureToString("ldc_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ldc_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "}rotecte9";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}rotecte9");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)100;
      byteArray0[2] = (byte) (-91);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)100;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1930), (-936));
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 1201, false);
      try { 
        Utility.typeOfSignature("0:    nop\n1:    nop\n2:    nop\n3:    if_acmpeq\t\t#175\n6:    isub\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    if_acmpeq\t\t#175
         // 6:    isub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-64);
      String string0 = ")#q";
      Utility.compactClassName(")#q", "i2l", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = 68;
      ConstantClass constantClass0 = new ConstantClass(16384);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Utility.replace("Inval?d type: ", "Inval?d type: ", "Inval?d type: ");
      assertEquals("Inval?d type: ", string0);
      
      String string1 = Utility.signatureToString("Inval?d type: ", false);
      assertEquals("int", string1);
      
      short short0 = Utility.searchOpcode("$Pkkf;1MddY<$HM(");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("monitorexit", string2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(253);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit((-1879048189), 123);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ldc_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ldc_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit(54, (-2128));
      Utility.signatureToString("Invalid signature: `");
      Utility.compactClassName("Ho(W8HV` Gq7Hl5");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("L}rotecte9;V");
      assertEquals("L}rotecte9;V", string0);
      
      Utility.signatureToString("L}rotecte9;V", true);
      short short0 = Utility.searchOpcode("long");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-69);
      String string1 = Utility.signatureToString("L}rotecte9;V");
      assertEquals("}rotecte9", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantClass constantClass0 = new ConstantClass((byte) (-69));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte byte0 = Utility.typeOfSignature("L}rotecte9;V");
      assertEquals((byte)14, byte0);
      
      Utility.printArray((Object[]) null, true, false);
      int int0 = Utility.setBit((byte) (-69), 843);
      assertEquals((-69), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "EJ&@*(hAc>$jyW&31]";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EJ&@*(hAc>$jyW&31]");
      Utility.compactClassName("EJ&@*(hAc>$jyW&31]", "EJ&@*(hAc>$jyW&31]", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(219);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.searchOpcode("L0_Q6PEx;V");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-2);
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong((byte) (-59));
      constantArray0[0] = (Constant) constantLong0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-107));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("i2d");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1399), (-1399));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(91, (byte) (-59));
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-2), 145, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fcmpl
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("h$VI", false);
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      boolean boolean1 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      MockFile mockFile0 = new MockFile("java.lang.Void");
      MockFile mockFile1 = new MockFile(mockFile0, "java.lang.Void");
      mockFile1.toURL();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.convertString("/M0a(Fe");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte) (-117);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-117);
      ConstantPool constantPool1 = null;
      int int0 = 211;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), 211);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifgt\t\t#-9845
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-85);
      byteArray0[4] = (byte)0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte)0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(194);
      ConstantClass constantClass1 = new ConstantClass((byte) (-85));
      ConstantClass constantClass2 = new ConstantClass(constantClass0);
      ConstantClass constantClass3 = (ConstantClass)constantClass0.copy();
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(2640);
      constantClass3.setNameIndex(76);
      constantClass1.setNameIndex(169);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature("i2Ox[3A[Ea\",S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[3A[Ea\",S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Float");
      Utility.typeOfSignature("Float");
      Utility.getSignature("Float");
      Utility.compactClassName("int", "Float", false);
      try { 
        Utility.methodSignatureReturnType("Q\"dK+crxzQ{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q\"dK+crxzQ{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Utility.replace("Inval?d type: ", "Inval?d type: ", "Inval?d type: ");
      assertEquals("Inval?d type: ", string0);
      
      String string1 = Utility.signatureToString("Inval?d type: ", false);
      assertEquals("int", string1);
      
      short short0 = Utility.searchOpcode("$Pkkf;1MddY<$HM(");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)127;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("land", string2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("!+E-M HQ%qf#%}*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E-M HQ%qf#%}*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-65);
      byteArray0[0] = (byte) (-65);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1877, 77);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)74);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence2, constantPool0, true);
      Utility.codeToString(byteSequence2, constantPool0, false);
      try { 
        Utility.typeOfSignature("9P+^TTfB+*sH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9P+^TTfB+*sH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2096, 2096);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte) (-79);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.methodSignatureReturnType("Illegally nested brackets:", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[2] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((-190));
      ConstantClass constantClass1 = new ConstantClass((byte)56);
      Constant constant0 = constantClass0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constant0.accept(emptyVisitor0);
      constantClass1.accept(emptyVisitor0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantClass1;
      constantArray0[2] = constant0;
      constantArray0[3] = (Constant) constantClass0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantArray0[1] = (Constant) constantClass1;
      constantArray0[5] = (Constant) constantClass1;
      constantArray0[6] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("fstore\t\t%0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fstore\t\t%0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("impdep2", false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-89);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      MockFile mockFile0 = new MockFile("impdep2");
      MockFile mockFile1 = new MockFile(mockFile0, "impdep2");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.typeOfSignature("J");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-85);
      byteArray0[4] = (byte)0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, (byte)0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(194);
      ConstantClass constantClass1 = new ConstantClass(byteSequence0);
      ConstantClass constantClass2 = new ConstantClass(constantClass0);
      constantClass0.copy();
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(2640);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      constantClass0.copy();
      constantClass1.toString();
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "implements\t\t";
      Utility.compactClassName("Z%R@MGP_=~FvP");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)84;
      Utility.signatureToString("Z%R@MGP_=~FvP", true);
      try { 
        Utility.typeOfSignature("8Own8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8Own8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.convertString("/M0a(Fe");
      String string0 = "\\Ctq5";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ctq5");
      Utility.replace("public priv", "Ctq5", "v2JnD]G");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)116;
      byteArray0[5] = (byte)124;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[6] = (byte)116;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)124, 132, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Utility.convertString("/M0a(Fe");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit((-2917), (byte) (-117));
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = Utility.convertString("/M0a(Fe");
      assertEquals("/M0a(Fe", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2d", string1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("impdep2", false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-89);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode("lload_1");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[4] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lload_1");
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("lload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wr?g~{RnnNx+[u]S");
      Utility.format((-2605), 3, false, 'm');
      byte[] byteArray0 = Utility.decode("-2605", false);
      Utility.compactClassName("wr?g~{RnnNx+[u]S", "-2605", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "Q\"dK+crxzQ{ U;`cd";
      objectArray0[3] = (Object) "ret";
      objectArray0[4] = (Object) "Q\"dK+crxzQ{ U;`cd";
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-74);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-74), (byte) (-74));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      Utility.accessToString((-2605), false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.skip((byte) (-92));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), 611, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Q\"dK+crxzQ{ U;`cd";
      stringArray0[1] = "wr?g~{RnnNx+[u]S";
      stringArray0[2] = "ret";
      stringArray0[3] = "wr?g~{RnnNx+[u]S";
      stringArray0[4] = "public private final volatile transient native abstract synthetic annotation enum";
      stringArray0[5] = "0:    aload_3\n1:    aaload\n2:    istore\t\t%48\n4:    saload\n";
      stringArray0[6] = "istore\t\t%48";
      stringArray0[7] = "istore\t\t%48";
      Utility.methodTypeToSignature("wr?g~{RnnNx+[u]S", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("Q\"dK+crxzQ{ U;`cd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q\"dK+crxzQ{ U;`cd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 6;
      String string0 = "wr?g~{RnnNx+[u]S";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format((-2605), 6, false, '{');
      byte[] byteArray0 = Utility.decode("{-2605", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int1 = 58;
      Utility.clearBit(58, (-2605));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "aaload";
      String string1 = "wJ8Yu!";
      stringArray0[1] = "wJ8Yu!";
      Utility.methodTypeToSignature("wr?g~{RnnNx+[u]S", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("mWy_p4t`d}^a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mWy_p4t`d}^a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)70;
      Utility.accessToString((int) (byte)12, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte) (-84);
      byteArray0[0] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("fstore_3", stringArray0);
      Utility.methodSignatureArgumentTypes("()Lfstore_3;", true);
      try { 
        Utility.methodSignatureReturnType("fstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fstore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("i(i", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = Utility.clearBit((-502), (-502));
      assertEquals((-1526), int0);
      
      String string0 = Utility.signatureToString("Lorg/apache/bcel/classfile/ConstantNameAndType;V");
      assertEquals("org.apache.bcel.classfile.ConstantNameAndType", string0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte)99;
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte) (-88);
      byteArray1[4] = (byte) (-74);
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("b4 63 ad a8 b6", string1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_2", string2);
      
      int int1 = Utility.setBit(91, 76);
      assertEquals(4187, int1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("o$", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence1);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      byteSequence1.skipBytes((byte) (-119));
      ConstantPool constantPool1 = new ConstantPool(dataInputStream0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertArrayEquals(new byte[] {(byte)111}, byteArray1);
      assertEquals("ddiv", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-67));
      assertEquals("public protected static final synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Utility.convertString("/M0a(Fe");
      assertEquals("/M0a(Fe", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = Utility.replace("public priv", "Ctq5", "v2JnD]G");
      assertEquals("public priv", string1);
      
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("v2JnD]G", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence1);
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      byteSequence1.skipBytes(512);
      ConstantPool constantPool1 = new ConstantPool(byteSequence0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string2 = Utility.codeToString(byteSequence2, constantPool1, true);
      assertArrayEquals(new byte[] {(byte)118, (byte)50, (byte)74, (byte)110, (byte)68, (byte)93, (byte)71}, byteArray1);
      assertEquals("fneg", string2);
      
      String string3 = Utility.accessToString(3326);
      assertEquals("private protected static final synchronized volatile transient abstract strictfp", string3);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("Lprote7ue");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "sxhrt";
      stringArray0[1] = "sxhrt";
      stringArray0[2] = "0_Q6PEx ";
      stringArray0[3] = "0_Q6PEx ";
      stringArray0[4] = "Lprote7ue";
      Utility.methodTypeToSignature("0_Q6PEx ", stringArray0);
      Utility.methodSignatureToString("(Lsxhrt;Lsxhrt;L0_Q6PEx;L0_Q6PEx;LLprote7ue;)L0_Q6PEx;", "sxhrt", "Lprote7ue", true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Utility.convertString("LLprote7ue;");
      ConstantClass constantClass0 = new ConstantClass(1076);
      constantClass0.setNameIndex(1076);
      constantClass0.setNameIndex(1076);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)92;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "dup2";
      stringArray0[1] = "dup2";
      stringArray0[2] = "dup2";
      stringArray0[3] = "swap";
      Utility.methodTypeToSignature("dup2", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("getfield", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      Utility.accessToString(66);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "private volatile");
      Integer integer0 = new Integer(611);
      Utility.signatureToString("[Sn)rZkp^19cQ<]|dH");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[1] = (Object) "private volatile";
      objectArray0[2] = (Object) "private volatile";
      Object object1 = new Object();
      objectArray0[5] = (Object) stringArray0[1];
      objectArray0[7] = (Object) stringArray0[0];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantInvokeDynamic0.setNameAndTypeIndex((byte) (-89));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantClass constantClass0 = new ConstantClass((-837));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = Utility.clearBit((byte)100, (-2666));
      assertEquals(100, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("isub", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "isub";
      String string1 = Utility.methodTypeToSignature("isub", stringArray0);
      assertEquals("(Lisub;)Lisub;", string1);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lisub;)Lisub;", false);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IO");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_NameAndType");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IO");
      byte byte0 = (byte)47;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      byte[] byteArray1 = Utility.decode("CONSTANT_NameAndType", false);
      Utility.decode("newarray", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)47, (-360));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer integer0 = new Integer((-154));
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)70;
      Utility.accessToString((int) (byte)12, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte) (-84);
      byteArray0[0] = (byte)29;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-84), (int) (byte)29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("protected static", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)6;
      byteArray0[0] = (byte)6;
      byte byte1 = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)108;
      byteArray0[1] = (byte)69;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean1 = true;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byte byte0 = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-120);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte)48);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        byteSequence1.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.compactClassName("0:");
      Utility.fillup("0:", 1472, false, 'r');
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-88);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantLong constantLong0 = new ConstantLong((byte)36);
      constantPool0.constantToString((Constant) constantLong0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)45, 885);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "](nTg5KVp ";
      Utility.searchOpcode("](nTg5KVp ");
      byte byte0 = (byte) (-66);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "astore_0");
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfMethodSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{}");
      Utility.clearBit((-596), 1887);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantDouble1;
      constantArray0[1] = (Constant) constantDouble1;
      constantArray0[2] = (Constant) constantDouble1;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble1;
      constantArray0[5] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("{}", stringArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2147483052, 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wr?g{RnnNx+[u]S");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-89);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(329, (byte) (-89));
      Constant[] constantArray0 = new Constant[6];
      constantArray0[3] = (Constant) constantMethodHandle0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantMethodHandle0.toString();
      constantMethodHandle0.dump(dataOutputStream0);
      String string0 = Utility.classOrInterface(160);
      assertEquals("class", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_icmple\t\t#-22784", string1);
      
      String string2 = Utility.compactClassName("CONSTANT_MethodHandle[15](reference_kind = 329, reference_index = -89)", "{p8:%i\">.IeM.", true);
      assertEquals("CONSTANT_MethodHandle[15](reference_kind = 329, reference_index = -89)", string2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)86);
      Constant constant0 = constantFloat0.copy();
      constantArray0[0] = constant0;
      ConstantString constantString0 = new ConstantString((byte) (-57));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)18, (byte)100);
      constantArray0[2] = (Constant) constantMethodHandle0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("int");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("int");
      constantString0.toString();
      constantArray0[4] = (Constant) constantUtf8_1;
      MockFile mockFile0 = new MockFile("YMWS:i", "YMWS:i");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantString0.dump(dataOutputStream0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.toString();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ljx+7$)i emQm.N$i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ljx+7$)i emQm.N$i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-95);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.decode("$60$fb$a1$A$A$A$A$A", false);
      boolean boolean1 = true;
      Utility.decode("NxPP.$^t-nJ^O]K", false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "org.apache.bcel.util.ClassPath$Zip", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "lload_1";
      Utility.searchOpcode("lload_1");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lload_1");
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = "$";
      try { 
        Utility.typeOfMethodSignature("$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = (byte)18;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)86);
      Constant constant0 = constantFloat0.copy();
      constantArray0[0] = constant0;
      ConstantString constantString0 = new ConstantString((byte) (-57));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)18, (byte)100);
      byte byte1 = (byte) (-53);
      byte byte2 = (byte)59;
      byte byte3 = (byte)40;
      MockPrintStream mockPrintStream0 = new MockPrintStream("\t<");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 134);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      constantString1.dump(dataOutputStream0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-773), (int) (byte)86);
      String string0 = "\tdeSault = ";
      try { 
        Utility.typeOfMethodSignature("\tdeSault = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \tdeSault = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)24;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("R3qbd!O", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R3qbd!O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "I\\Rc6)4naq:/D9P";
      Utility.compactClassName("IRc6)4naq:/D9P", "IRc6)4naq:/D9P", true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "IRc6)4naq:/D9P";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "IRc6)4naq:/D9P";
      objectArray0[3] = (Object) "IRc6)4naq:.D9P";
      objectArray0[4] = (Object) "IRc6)4naq:.D9P";
      objectArray0[0] = (Object) "IRc6)4naq:/D9P";
      objectArray0[6] = (Object) "IRc6)4naq:/D9P";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString(189, true);
      try { 
        Utility.typeOfMethodSignature("IRc6)4naq:/D9P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: IRc6)4naq:/D9P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte)110;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)123;
      String string0 = Utility.encode(byteArray1, false);
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1613), 528);
      assertEquals("0:    ifnonnull\t\t#28283\n3:    lshr\n", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte)110);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = Utility.convertString("$c7n$7b$7b");
      assertTrue(string2.equals((Object)string0));
      
      Integer integer0 = new Integer(9);
      byte[] byteArray2 = Utility.decode("$c7n$7b$7b", false);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)110, (byte)123, (byte)123}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[12];
      objectArray0[1] = (Object) "Q\"dK+crxzQ{ U;`cd";
      objectArray0[3] = (Object) "ret";
      objectArray0[4] = (Object) "Q\"dK+crxzQ{ U;`cd";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.clearBit((byte)103, (byte) (-89));
      // Undeclared exception!
      try { 
        Utility.signatureToString("ret");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ret'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = 51;
      Utility.clearBit(51, 51);
      try { 
        Utility.typeOfMethodSignature("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.setBit((byte)31, (-828));
      Utility.clearBit((byte)31, (byte)31);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(31, 6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      Utility.accessToString(31, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.fillup("'c.o4MB", 31, true, 'h');
      String[] stringArray0 = Constants.ITEM_NAMES;
      Utility.toHexString(byteArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(6, (-1205), byteSequence0, (ConstantPool) null);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("lstore_0", "", "lstore_0", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-39);
      byte byte0 = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byte byte1 = (byte)103;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)86);
      Constant constant0 = constantFloat0.copy();
      constantArray0[0] = constant0;
      ConstantString constantString0 = new ConstantString((byte) (-57));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)18, (byte)100);
      constantArray0[2] = (Constant) constantMethodHandle0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("int");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("int");
      constantString0.toString();
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.toString();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ljx+7$)i emQm.N$i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ljx+7$)i emQm.N$i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = ",cont_";
      Utility.replace(",cont_", ",cont_", ",cont_");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.decode("wgA^3%l5Z+$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, 45, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("o'fPIA4$", false);
      assertArrayEquals(new byte[] {(byte)111, (byte)39, (byte)102, (byte)80, (byte)73, (byte)65, (byte)52}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit((-2479), (-1408));
      try { 
        Utility.typeOfMethodSignature(">ypceW_x U]v)AFVr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >ypceW_x U]v)AFVr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit((byte)110, 81);
      String string0 = "\n     Method Arguments:";
      // Undeclared exception!
      try { 
        Utility.signatureToString("fmul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fmul'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit((byte)110, (-348));
      try { 
        Utility.typeOfMethodSignature("]]tz$etF-}t CT.CL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]]tz$etF-}t CT.CL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit((byte)100, (-2666));
      String string0 = "8y<`6;/";
      try { 
        Utility.typeOfMethodSignature("8y<`6;/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8y<`6;/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 224, 256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode("q/->Qh1 :d8!a3", false);
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.signatureToString("L2cf;V");
      Utility.compactClassName("L2cf;V");
      Utility.signatureToString("Jjo9_3#C H", false);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.decode("h$VI", false);
      Utility.decode("impdep2", false);
      Utility.signatureToString("BR/}?Z|a ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte) (-25);
      byteArray0[8] = (byte) (-125);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 95, (-2158), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.clearBit((byte)47, (-519));
      try { 
        Utility.typeOfMethodSignature("||GAXtuy[[4k)g_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ||GAXtuy[[4k)g_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte byte0 = (byte)100;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 95, 1305);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Utility.classOrInterface(97);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)84;
      byteArray0[1] = (byte)84;
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte)84, false);
      Utility.compactClassName("");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("2f", "2f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"2f\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit((-4005), (byte)117);
      try { 
        Utility.typeOfMethodSignature("k+vA:$za?R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k+vA:$za?R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (-1434));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit(86, (-8));
      try { 
        Utility.typeOfMethodSignature(", code_length = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , code_length = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit((-8), 83);
      try { 
        Utility.typeOfMethodSignature("k+vA:$za?R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k+vA:$za?R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)88);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant constant0 = constantClass1.copy();
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass1;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass1;
      constantArray0[5] = constant0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(12, (byte)113);
      constantArray0[6] = (Constant) constantInterfaceMethodref0;
      constantArray0[7] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantClass0.setNameIndex((-2803));
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("pop2", string0);
      
      String string1 = Utility.compactClassName("  ", "int", false);
      assertEquals("  ", string1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = Utility.compactClassName("11QjL?/PDX");
      assertEquals("11QjL?.PDX", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "void";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)89;
      byte byte0 = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 144, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-78);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte) (-78), true);
      Utility.setBit((byte)0, 64);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      Integer integer0 = new Integer((byte) (-91));
      String string0 = Utility.classOrInterface((-2642));
      assertEquals("class", string0);
      
      String string1 = Utility.methodSignatureReturnType("L;GqO(;V", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)100;
      int int0 = (-1940);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1940), (-946));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = "(";
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)0, false, 'R');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("_20\"8U($a=S'7p{8LZ", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      Integer integer0 = new Integer((byte) (-91));
      // Undeclared exception!
      try { 
        Utility.decode("()L_20\"8U($a=S'7p{8LZ;", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"a=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)15;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)15;
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("3morezOnI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3morezOnI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q(FY5W7r|5HZg-{eS");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((-236));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant constant0 = constantClass1.copy();
      Constant[] constantArray0 = new Constant[22];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = constant0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = constant0;
      constantArray0[6] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteArray0, constantPool0, (-236), (-1784));
      constantClass0.setNameIndex((-162));
      Utility.compactClassName("Q(FY5W7r|5HZg-{eS", "fload\t\t%0", false);
      Utility.equals(byteArray0, byteArray0);
      Utility.fillup("0:    fload\t\t%0\n2:    nop\n3:    nop\n", (byte)23, true, '5');
      String[] stringArray0 = Constants.ITEM_NAMES;
      Utility.toHexString(byteArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)23, 3548, byteSequence0, constantPool0);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("filename\t\t", "org.apache.bcel.classfile.ConstantMethodType", "SYWGu_/Wt5,%:H", true, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: filename\t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.typeOfSignature("Dont call getValueShort() on a non SHORT ElementValue");
      Utility.clearBit((byte)31, (byte)31);
      Utility.classOrInterface((byte)7);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(31, 6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      Utility.accessToString(31, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.skip((byte)7);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, (int) (byte)63, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wr?g~{RnnNx+[u]S");
      Utility.format((-2605), 6, false, 'm');
      byte[] byteArray0 = Utility.decode("m-2605", false);
      Utility.compactClassName("wr?g~{RnnNx+[u]S", "m-2605", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "Q\"dK+crxzQ{ U;`cd";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "ret";
      objectArray0[4] = (Object) "Q\"dK+crxzQ{ U;`cd";
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-69);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(329, (byte) (-69));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      Utility.accessToString((-2605), false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.skip((byte) (-92));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), 611, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Q\"dK+crxzQ{ U;`cd";
      stringArray0[1] = "wr?g~{RnnNx+[u]S";
      stringArray0[2] = "ret";
      stringArray0[3] = "wr?g~{RnnNx+[u]S";
      stringArray0[4] = "public private final volatile transient native abstract synthetic annotation enum";
      stringArray0[5] = "0:    ldiv\n1:    aload_3\n2:    aaload\n3:    istore\t\t%48\n5:    saload\n";
      stringArray0[6] = "aaload";
      stringArray0[7] = "aaload";
      Utility.methodTypeToSignature("wr?g~{RnnNx+[u]S", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("Q\"dK+crxzQ{ U;`cd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q\"dK+crxzQ{ U;`cd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "long");
      String string0 = Utility.getSignature("long");
      assertEquals("J", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte) (-2);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, (int) (byte) (-8));
      assertEquals("6:    <illegal opcode>\n7:    impdep1\n", string1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6M0SzMWP^Xjsr_w";
      stringArray0[1] = "6M0SzMWP^Xjsr_w";
      Utility.methodTypeToSignature("6M0SzMWP^Xjsr_w", stringArray0);
      String string0 = "lreturn";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lreturn", "Bogus", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-89));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      constantClass1.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(245);
      ConstantClass constantClass1 = new ConstantClass(byteSequence0);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      Constant constant0 = constantClass0.copy();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantClass1;
      ConstantClass constantClass3 = new ConstantClass((byte)39);
      constantArray0[1] = (Constant) constantClass3;
      constantArray0[2] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte)39;
      byte byte0 = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)103;
      byte byte1 = (byte)86;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)103, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)103);
      ConstantClass constantClass1 = new ConstantClass(byteSequence0);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      constantClass1.copy();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantClass0.toString();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.typeOfMethodSignature("lstore_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = new String[2];
      URI uRI0 = MockURI.URI((String) null, (String) null, "K]lN[k1_}li#", (String) null, "/}]%UQM");
      MockURI.resolve(uRI0, uRI0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)105;
      byteArray0[4] = (byte)64;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)105;
      Utility.searchOpcode("astore_3");
      Utility.isJavaIdentifierPart('%');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("multianewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[12];
      objectArray0[1] = (Object) "Q\"dK+crxzQ{ U;`cd";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "ret";
      objectArray0[4] = (Object) "Q\"dK+crxzQ{ U;`cd";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-89);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(329, (byte) (-89));
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      dataOutputStream0.writeInt(175);
      constantMethodHandle0.dump(dataOutputStream0);
      Utility.classOrInterface(160);
      Utility.isJavaIdentifierPart(' ');
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 329, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-56);
      byteArray0[1] = (byte)48;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte)48);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readBoolean();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    nop\n1:    faload\n2:    faload\n3:    ior\n4:    goto_w\t\t#4\n", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    faload
         // 2:    faload
         // 3:    ior
         // 4:    goto_w\t\t#4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      Utility.decode("", false);
      Utility.accessToString((-1208));
      Utility.compactClassName("", false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-48);
      byteArray0[1] = (byte)69;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte)48);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-120));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit((byte) (-120), (-697));
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.compactClassName("53", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)70;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool2, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-110));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant constant0 = constantClass1.copy();
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass1;
      constantArray0[2] = constant0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = constant0;
      constantArray0[5] = (Constant) constantClass1;
      constantArray0[6] = (Constant) constantClass0;
      constantArray0[7] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfMethodSignature("getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.methodSignatureReturnType("Illegally nested brackets:", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[2] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((-184));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant constant0 = constantClass0.copy();
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantClass1;
      constantArray0[2] = constant0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass1;
      constantArray0[5] = (Constant) constantClass1;
      constantArray0[6] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.typeOfMethodSignature("LineNumberTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LineNumberTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]RHe['");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6]RHe['";
      String string0 = null;
      String string1 = "/}]%UQM";
      URI uRI0 = MockURI.URI((String) null, (String) null, "K]lN[k1_}li#", "}me3<:Y=1e=7,+N8*<O", "/}]%UQM");
      MockURI.resolve(uRI0, uRI0);
      byte byte0 = (byte)68;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, (int) (byte)105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jsr_w");
      Utility.compactClassName("EJ&@*(hAc>$jyW&31]", "X", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(193);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature("EJ&@*(hAc>$jyW&31]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EJ&@*(hAc>$jyW&31]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Utility.convertString("JJV]DADpA$~=6@_m");
      assertEquals("JJV]DADpA$~=6@_m", string0);
      
      byte byte0 = Utility.typeOfSignature("JJV]DADpA$~=6@_m");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.convertString("/M0a(Fe");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("public priv", "Ctq5", "v2JnD]G");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)112;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      int int0 = 125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)112, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.accessToString(88);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" 'j;b y");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool3 = constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool3, true);
      constantPool2.copy();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool3, true);
      try { 
        Utility.typeOfSignature("5a0@LHXu0E k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5a0@LHXu0E k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wr?g~{RnnNx+[u]S");
      Utility.accessToString(6, false);
      byte[] byteArray0 = Utility.decode("private protected", false);
      Utility.compactClassName("wr?g~{RnnNx+[u]S", "private protected", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "Q\"dK+crxzQ{ U;`cd";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "ret";
      objectArray0[4] = (Object) "Q\"dK+crxzQ{ U;`cd";
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-89);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(292, (byte) (-89));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(17, byteArray0.length);
      
      byteSequence0.readInt();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      String string0 = Utility.accessToString((-2605), false);
      assertEquals("public private final volatile transient native abstract synthetic annotation enum", string0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType((byte) (-89));
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2605), 5902);
      assertEquals("0:    irem\n1:    frem\n2:    lmul\n3:    fneg\n4:    ladd\n5:    ineg\n6:    lsub\n7:    lload_2\n8:    irem\n9:    frem\n10:   ddiv\n11:   ineg\n12:   lsub\n13:   dadd\n14:   ineg\n15:   lsub\n16:   isub\n", string1);
      
      String string2 = Utility.compactClassName("static");
      assertEquals("static", string2);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.accessToString(88);
      byte byte0 = (byte)115;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" 'j;b y");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      constantPool0.copy();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47360. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]RHe['");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6]RHe['";
      String string0 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{6]RHe[', null, null}", string0);
      
      short short0 = Utility.searchOpcode("6]RHe['");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]RHe['");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(97);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantMethodType0;
      constantArray0[6] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-117);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-36), 472, true);
      assertEquals("0:    fconst_1\n1:    f2i\n", string1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("6]RHe['");
      mockPrintStream0.print((int) (byte) (-117));
      mockPrintStream0.println();
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) stringArray0);
      String string2 = Utility.classOrInterface(2970);
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.accessToString(88);
      byte byte0 = (byte)115;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("CB.SnE");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("org.apache.bcel.classfile.Field$1");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1885, 179);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.convertString("/M0a(Fe");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ctq5");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1354), 119);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit((byte) (-84), (byte) (-84));
      try { 
        Utility.typeOfMethodSignature("/M0a(Fe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /M0a(Fe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.accessToString(88);
      byte byte0 = (byte)115;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" 'j;b y");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      constantPool0.copy();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46336. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ConstantClass constantClass0 = new ConstantClass((byte) (-65));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant constant0 = constantClass1.copy();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantClass1;
      constantArray0[2] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      ConstantPool constantPool2 = null;
      try {
        constantPool2 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.accessToString(88);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" 'j;b y");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool2, true);
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool2, true);
      try { 
        Utility.typeOfSignature("5a0@LHXu0E k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5a0@LHXu0E k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.accessToString(88);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, 67, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-5);
      byteArray0[5] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)96;
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("22L!JmW)");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.readChar();
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.typeOfMethodSignature("22L!JmW)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 22L!JmW)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Lprotected;V");
      Utility.signatureToString("Lprotected;V", true);
      Utility.searchOpcode("long");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)62;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wr?g~{RnnNx+[u]S");
      Utility.format((-2605), 6, false, 'm');
      byte[] byteArray0 = Utility.decode("m-2605", false);
      Utility.compactClassName("wr?g~{RnnNx+[u]S", "m-2605", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "Q\"dK+crxzQ{ U;`cd";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "ret";
      objectArray0[4] = (Object) "Q\"dK+crxzQ{ U;`cd";
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-89);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(329, (byte) (-89));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      Utility.accessToString((-2605), false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 611, true);
      try { 
        Utility.methodSignatureArgumentTypes("Q\"dK+crxzQ{ U;`cd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q\"dK+crxzQ{ U;`cd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)96;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "<I=\"";
      Utility.compactClassName("53", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)70;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 61, (-1360), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.convertString("/M0a(Fe");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("public priv", "Ctq5", "v2JnD]G");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(115);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("KSsfW\":Hf!Ky");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KSsfW\":Hf!Ky
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-97);
      byteArray0[0] = (byte)46;
      byteArray0[3] = (byte)34;
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-6), (int) (byte)46, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 2E9F0022
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-48);
      byteArray0[1] = (byte)48;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte)48);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit((byte) (-128), (-697));
      try { 
        Utility.typeOfSignature("0:    iconst_3\n1:    faload\n2:    faload\n3:    ior\n4:    <illegal opcode>\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    iconst_3
         // 1:    faload
         // 2:    faload
         // 3:    ior
         // 4:    <illegal opcode>
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-81);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      int int0 = (-1600);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1600), (-296));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit((byte)69, 2299);
      try { 
        Utility.typeOfSignature("\"[&T=ZX&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"[&T=ZX&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((-3139));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantClass0.copy();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wr?g~{RnnNx+[u]S");
      Utility.format((-2605), 6, false, 'm');
      byte[] byteArray0 = Utility.decode("m-2605", false);
      Utility.compactClassName("wr?g~{RnnNx+[u]S", "m-2605", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "Q\"dK+crxzQ{ U;`cd";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "ret";
      objectArray0[4] = (Object) "Q\"dK+crxzQ{ U;`cd";
      byte[] byteArray1 = new byte[7];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2605), 6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantString constantString0 = new ConstantString((-2605));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2826, 593);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-48);
      byteArray0[1] = (byte)48;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      boolean boolean1 = true;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)121, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-58);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-27), 1619);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "<I=\"";
      Utility.compactClassName("53", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)70;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 61, (-1360), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wr?g~{RnnNx+[u]S");
      Utility.format((-2605), 6, false, 'm');
      byte[] byteArray0 = Utility.decode("m-2605", false);
      Utility.compactClassName("wr?g~{RnnNx+[u]S", "m-2605", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "Q\"dK+crxzQ{ U;`cd";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "ret";
      objectArray0[4] = (Object) "Q\"dK+crxzQ{ U;`cd";
      byte byte0 = (byte) (-89);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-89);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(329, (byte) (-89));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantMethodType0.toString();
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 50, 50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]RHe['");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6]RHe['";
      URI uRI0 = MockURI.URI((String) null, (String) null, "K]lN[k1_}li#", "}me3<:Y=1e=7,+N8*<O", "@");
      MockURI.resolve(uRI0, uRI0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfMethodSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "/M0a(Fe";
      Utility.convertString("/M0a(Fe");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("public priv", "/M0a(Fe", "v2JnD]G");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byte byte0 = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantClass1.copy();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.typeOfMethodSignature("KSsfW\":Hf!Ky");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KSsfW\":Hf!Ky
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.replace("Inval?d type: ", "Inval?d type: ", "Inval?d type: ");
      Utility.signatureToString("Inval?d type: ", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-106), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]RHe['");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6]RHe['";
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mg8QJ$");
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isJavaIdentifierPart('}');
      String string0 = Utility.printArray((Object[]) stringArray0, false, false);
      assertEquals("6]RHe[', null, null", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Lprotected;V";
      Utility.convertString("Lprotected;V");
      Utility.signatureToString("Lprotected;V", true);
      Utility.searchOpcode("long");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[2] = (byte) (-69);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("baload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: baload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.isJavaIdentifierPart('@');
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.classOrInterface('@');
      Utility.searchOpcode("");
      try { 
        Utility.typeOfSignature("Au[9+&\"xKJZHVa.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Au[9+&\"xKJZHVa.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.compactClassName("EJ&@*(0hAc>$jyW&31]", "X", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EJ&@*(0hAc>$jyW&31]";
      Utility.methodTypeToSignature("X", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)101;
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2005), (byte) (-115));
      constantArray0[0] = (Constant) constantFieldref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantString constantString0 = new ConstantString((byte)101);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2257, 144, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.convertString("/M0a(Fe");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ctq5");
      Utility.replace("public priv", "Ctq5", "v2JnD]G");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)116;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte) (-54);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 346, (int) (byte)71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]RHe['");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]RHe['");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6]RHe['";
      String string0 = "/}]%UQM";
      MockURI.URI((String) null, (String) null, "K]lN[k1_}li#", "}me3<:Y=1e=7,+N8*<O", "/}]%UQM");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, (int) (byte) (-51), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "H11$IXKH";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("H11$IXKH", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H11$IXKH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.convertString("/M0a(Fe");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("public priv", "Ctq5", "v2JnD]G");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte)59;
      byteArray1[2] = (byte) (-57);
      byteArray1[3] = (byte)86;
      byteArray1[4] = (byte)86;
      byteArray1[5] = (byte)59;
      byteArray1[6] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantClass constantClass0 = new ConstantClass((byte) (-57));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantClass1.copy();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.typeOfMethodSignature("KSsfW\":Hf!Ky");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KSsfW\":Hf!Ky
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-89));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      constantClass1.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-72);
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-89));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      constantClass1.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.readLong();
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String[] stringArray0 = new String[3];
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-27);
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)49;
      byte byte1 = (byte)34;
      byteArray0[3] = (byte)34;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-89);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      constantClass1.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("Lprotected;V");
      Utility.signatureToString("Lprotected;V", true);
      String string0 = "long";
      Utility.searchOpcode("long");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-52);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("6$AH8pxd'@tsclRSoy");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit((-3), (byte)8);
      try { 
        Utility.typeOfMethodSignature("newInvokeSpecial");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: newInvokeSpecial
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.replace("Inval?d type: ", "Inval?d type: ", "Inval?d type: ");
      boolean boolean0 = false;
      Utility.signatureToString("Inval?d type: ", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        Utility.typeOfSignature("8;$SsY*XJlD8 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8;$SsY*XJlD8 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.isJavaIdentifierPart('@');
      Utility.printArray((Object[]) null, false, false);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.compactClassName("", "", false);
      Utility.searchOpcode("dstore_0");
      Utility.printArray((Object[]) null);
      try { 
        Utility.typeOfSignature("Au[9+&\"xKJZHVa.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Au[9+&\"xKJZHVa.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      String string0 = "}me3<:Y=1e=7,+N8*<O";
      MockURI.URI((String) null, "\"", "f8Dwm8SM=Q)oan14'", "\t\t%", "V");
      boolean boolean0 = true;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte) (-89);
      byteArray1[3] = (byte) (-68);
      byteArray1[4] = (byte) (-51);
      byteArray1[5] = (byte) (-68);
      // Undeclared exception!
      Utility.codeToString(byteArray1, (ConstantPool) null, (-1829), 1, true);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-48);
      byteArray0[1] = (byte)69;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte)48);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit((byte) (-120), (-697));
      try { 
        Utility.typeOfSignature("0:    iconst_3\n1:    fstore_2\n2:    fstore_2\n3:    l2i\n4:    <illegal opcode>\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    iconst_3
         // 1:    fstore_2
         // 2:    fstore_2
         // 3:    l2i
         // 4:    <illegal opcode>
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]RHe['");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6]RHe['";
      String string0 = "/}]%UQM";
      MockURI.URI((String) null, (String) null, "K]lN[k1_}li#", "}me3<:Y=1e=7,+N8*<O", "/}]%UQM");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-51);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1047, (int) (byte) (-51), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("JcJ}M.}lH=bjw7");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2072), 9);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("if_icmpeq", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]RHe['");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6]RHe['";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)49;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "](nTg5KVp ";
      stringArray0[1] = "](nTg5KVp ";
      Utility.methodTypeToSignature("](nTg5KVp ", stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.accessToString(4324, true);
      Utility.getSignature("](nTg5KVp ");
      Utility.compactClassName("protected volatile transient synthetic");
      Utility.accessToString(66);
      Utility.getSignature("](nTg5KVp ");
      Utility.setBit(92, 611);
      Utility.classOrInterface(54);
      Utility.signatureToString("[Sn)rZkp^19cQ<]|dH");
      MockFile mockFile0 = new MockFile((String) null, "E(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "L](nTg5KVp;";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "private volatile";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "class";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "short[]";
      objectArray0[7] = (Object) null;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Integer integer0 = new Integer((-471));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)27;
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-471), (int) (byte)27);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit(54, 145);
      try { 
        Utility.typeOfMethodSignature("iload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)89;
      Utility.encode(byteArray0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[3] = "astore_0";
      stringArray0[4] = null;
      stringArray0[5] = "Invalid byte tag in constant pool: ";
      stringArray0[6] = null;
      stringArray0[7] = stringArray0[4];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.printArray((Object[]) stringArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature(stringArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.searchOpcode("Invalid StackMap offset: ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Invalid StackMap offset: ";
      objectArray0[1] = (Object) "Invalid StackMap offset: ";
      objectArray0[2] = (Object) "Invalid StackMap offset: ";
      objectArray0[3] = (Object) "Invalid StackMap offset: ";
      objectArray0[4] = (Object) "Invalid StackMap offset: ";
      objectArray0[5] = (Object) "Invalid StackMap offset: ";
      objectArray0[6] = (Object) "Invalid StackMap offset: ";
      objectArray0[7] = (Object) "Invalid StackMap offset: ";
      Utility.printArray(objectArray0);
      Utility.searchOpcode("putStatic");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-13);
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1179), (-899));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]RHe['");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6]RHe['";
      String string0 = "/}]%UQM";
      URI uRI0 = MockURI.URI((String) null, (String) null, "K]lN[k1_}li#", "}me3<:Y=1e=7,+N8*<O", "/}]%UQM");
      MockURI.resolve(uRI0, uRI0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-98);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 85, (-807));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("+S86!;tO`dCLV", "+S86!;tO`dCLV", true);
      String string0 = "java.lang.)\t";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantPool constantPool0 = null;
      int int0 = 20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]RHe['");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6]RHe['";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      constantClass1.copy();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass2;
      constantArray0[1] = (Constant) constantClass2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_0", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("$M;.z q7xyP<z}obI", "Illegal type: ", false);
      assertEquals("$M;.z q7xyP<z}obI", string1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q(FY5W7r|5HZg-{eS");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((-162));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant constant0 = constantClass1.copy();
      Constant[] constantArray0 = new Constant[11];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = constant0;
      constantArray0[2] = (Constant) constantClass1;
      constantArray0[3] = (Constant) constantClass0;
      ConstantDouble constantDouble0 = new ConstantDouble(3976.044372051656);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[4] = (Constant) constantDouble1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)23);
      constantArray0[5] = (Constant) constantInteger0;
      constantArray0[6] = (Constant) constantClass1;
      constantArray0[7] = (Constant) constantClass0;
      constantArray0[8] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.replace("Q(FY5W7r|5HZg-{eS", "Q(FY5W7r|5HZg-{eS", "Q(FY5W7r|5HZg-{eS");
      MockFile.createTempFile("if_icmpge", "if_icmpge");
      try { 
        Utility.typeOfSignature("Q(FY5W7r|5HZg-{eS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q(FY5W7r|5HZg-{eS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.typeOfSignature("IInid tycpe: ");
      String string0 = "QnRmU[8yLE";
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[4];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1475), 170, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[1];
      int int0 = 78;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-95);
      Utility.compactClassName(":DKnXmH[^&j;X8+ 6");
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "\"[&T=ZX&";
      try { 
        Utility.typeOfSignature("KSFG;5yRE(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KSFG;5yRE(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-57));
      ConstantClass constantClass1 = new ConstantClass((byte)37);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      Constant constant0 = constantClass2.copy();
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantClass2;
      constantArray0[1] = (Constant) constantClass2;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass2;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = constant0;
      constantArray0[6] = (Constant) constantClass0;
      constantArray0[7] = (Constant) constantClass1;
      constantArray0[8] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]RHe['");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6]RHe['";
      URI uRI0 = MockURI.URI((String) null, (String) null, "K]lN[k1_}li#", "}me3<:Y=1e=7,+N8*<O", "/}]%UQM");
      MockURI.resolve(uRI0, uRI0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)105;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Integer integer0 = new Integer((-181));
      String string0 = "short";
      Utility.accessToString(88);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, 67, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Utility.replace("Inval?d type: ", "Inval?d type: ", "Inval?d type: ");
      Utility.signatureToString("Inval?d type: ", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)13, (int) (byte) (-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q(FY5W7r|5HZg-{eS");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((-213));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant constant0 = constantClass1.copy();
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = constant0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = constant0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = constant0;
      constantArray0[6] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteArray0, constantPool1, 0, (-213));
      assertEquals("0:    fload\t\t%0\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Utility.replace("Inval?d type: ", "Inval?d type: ", "Inval?d type: ");
      Utility.signatureToString("Inval?d type: ", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(13);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant constant0 = constantClass0.copy();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)13, (int) (byte) (-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)23;
      byteArray0[0] = (byte)23;
      byte byte1 = (byte)70;
      byteArray0[1] = (byte)70;
      byte byte2 = (byte)27;
      byteArray0[2] = (byte)27;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)23;
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray1, (ConstantPool) null, (-68), 290);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 600, 290);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(79);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant constant0 = constantClass1.copy();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence1, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("Lprotected;V");
      assertEquals("Lprotected;V", string0);
      
      Utility.signatureToString("Lprotected;V", true);
      short short0 = Utility.searchOpcode("long");
      assertEquals((short) (-1), short0);
      
      Utility.compactClassName(")\t", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-93);
      byteArray0[2] = (byte)89;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)40;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)68);
      assertEquals("4:    fstore_1\n5:    dload_3\n6:    dload_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)27;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)31;
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray1, (ConstantPool) null, (-68), 290);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 600, 290);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-102);
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)103);
      ConstantClass constantClass1 = new ConstantClass(32767);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      Constant constant0 = constantClass1.copy();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = constant0;
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantClass2.setNameIndex((-634));
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('@');
      assertFalse(boolean0);
      
      Utility.printArray((Object[]) null, false, false);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string0 = Utility.classOrInterface(84);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), (-513), false);
      int int0 = Utility.setBit(6, 34);
      assertEquals(6, int0);
      
      Utility.printArray((Object[]) null, false);
      short short0 = Utility.searchOpcode("O)&D>n:Jp");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.compactClassName("class", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)27;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)31;
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte) (-84);
      byteArray0[0] = (byte)27;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-84), (int) (byte)27);
      assertEquals("0:    fstore_3\n1:    lload_1\n2:    lload_1\n3:    ireturn\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.encode(byteArray1, false);
      assertEquals("F$l$l$ac$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lHk7<Fq<)avn|n|BS^");
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)104);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantClass1.copy();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), 4344);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    imul
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-66);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte) (-66);
      byteArray1[3] = (byte)74;
      byteArray1[4] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)70;
      ConstantLong constantLong0 = new ConstantLong(2074L);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)31, 16);
      ConstantClass constantClass0 = new ConstantClass(4559);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(42, 448);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantLong0.accept(emptyVisitor0);
      constantMethodHandle0.copy();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(117, 117);
      Utility.compactClassName("Invalid signature: `");
      Utility.accessToString(117);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 457, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Integer integer0 = new Integer((-162));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)45;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$lF$z$A", string0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)31;
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte) (-84);
      byteArray0[0] = (byte)45;
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-84), (int) (byte)45);
      assertEquals("0:    fstore_3\n1:    lload_1\n2:    lload_1\n3:    ireturn\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_3", string2);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-89));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      constantClass1.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.readLong();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.methodSignatureReturnType("Illegally nested brackets:", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-24);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("int", "int", "8i$40$5b$e8", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      String string0 = "aload_2";
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aload_2", ">U+AX'E", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.clearBit((-864), 168);
      Utility.getSignature("'[N),%pxr]!#");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(81, (-4970));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantString constantString0 = new ConstantString(168);
      constantArray0[1] = (Constant) constantString0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("4NQ~#O2QNQ.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4NQ~#O2QNQ.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-89));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      constantClass1.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lstore\t\t%190", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Utility.isJavaIdentifierPart('A');
      Utility.accessToString((-570), true);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("private protected volatile transient native abstract strictfp synthetic annotation enum", "private protected volatile transient native abstract strictfp synthetic annotation enum", "private protected volatile transient native abstract strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected volatile transient native abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      MockFile mockFile0 = new MockFile("O{2SPuutAo#^B", "=_yVbFc'Gh<'");
      mockFile0.getAbsoluteFile();
      boolean boolean0 = false;
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("=_yVbFc'Gh<'", (String) null, (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      try { 
        Utility.typeOfSignature("#i;Hmjrkgg|;d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #i;Hmjrkgg|;d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String[] stringArray0 = new String[3];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)96;
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("22L!JmW)");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.printArray((Object[]) stringArray0, true, false);
      try { 
        Utility.typeOfSignature("astore_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-95);
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("$5b$ea$60$a1");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "$5b$ea$60$a1";
      stringArray0[3] = "astore_0";
      stringArray0[4] = null;
      stringArray0[5] = "Invalid byte tag in constant pool: ";
      stringArray0[6] = null;
      stringArray0[7] = stringArray0[4];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.printArray((Object[]) stringArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature(stringArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-118));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(67);
      ConstantString constantString0 = new ConstantString(67);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(160, 3253);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-368), 174);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(117, 117);
      Utility.compactClassName("Invalid signature: `");
      Utility.accessToString(117);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-62), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorenter
         // 1:    monitorenter
         // 2:    monitorenter
         // 3:    dneg
         // 4:    iconst_5
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(117, 117);
      Utility.compactClassName("Invalid signature: `");
      Utility.accessToString(117);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), (int) (byte) (-61), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    monitorexit
         // 2:    monitorexit
         // 3:    dneg
         // 4:    iconst_5
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Utility.replace("Inval?d type: ", "Inval?d type: ", "Inval?d type: ");
      Utility.signatureToString("Inval?d type: ", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V");
      Utility.getSignature("T;bl@<}mg");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lHk7<Fq<)avn|n|BS^");
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 6, false);
      Utility.setBit(480, 6);
      Utility.compactClassName("0:    nop\n1:    nop\n", ":z@W9", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{}", "{}", "{}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-89));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-66), (int) (byte)86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    goto\t\t#18983
         // 3:    lstore\t\t%190
         // 5:    dsub
         // 6:    sastore
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Integer integer0 = new Integer((-181));
      Utility.getSignature("short");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "S";
      stringArray0[1] = "dreturn";
      stringArray0[2] = "short";
      String string0 = Utility.methodTypeToSignature("dreturn", stringArray0);
      assertEquals("(LS;Ldreturn;S)Ldreturn;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-122);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("25 6d b0 65 ba 10 86", string1);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Utility.replace("Inval?d type: ", "Inval?d type: ", "Inval?d type: ");
      Utility.signatureToString("Inval?d type: ", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V");
      Utility.getSignature("T;bl@<}mg");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("EJ&@*(0hAc>$jyW&31]", "X", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EJ&@*(0hAc>$jyW&31]";
      Utility.methodTypeToSignature("X", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)101;
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2005), (byte)112);
      constantArray0[0] = (Constant) constantFieldref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantString constantString0 = new ConstantString((byte)101);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 243, 90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Utility.typeOfSignature("Invalid type: ");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.searchOpcode("Invalid type: ");
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.ConstantClass");
      int int0 = (-180);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-180));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 79, (-1154), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      short short0 = Utility.searchOpcode("Invalid StackMap offset: ");
      assertEquals((short) (-1), short0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Invalid StackMap offset: ";
      objectArray0[1] = (Object) "Invalid StackMap offset: ";
      objectArray0[2] = (Object) "Invalid StackMap offset: ";
      objectArray0[3] = (Object) "Invalid StackMap offset: ";
      objectArray0[4] = (Object) "Invalid StackMap offset: ";
      objectArray0[5] = (Object) "Invalid StackMap offset: ";
      objectArray0[6] = (Object) "Invalid StackMap offset: ";
      objectArray0[7] = (Object) "Invalid StackMap offset: ";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{Invalid StackMap offset: , Invalid StackMap offset: , Invalid StackMap offset: , Invalid StackMap offset: , Invalid StackMap offset: , Invalid StackMap offset: , Invalid StackMap offset: , Invalid StackMap offset: }", string0);
      
      short short1 = Utility.searchOpcode("putStatic");
      assertEquals((short)179, short1);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid StackMap offset: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)12;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)94);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-36), (int) (byte)12, false);
      assertEquals("0:    ifnonnull\t\t#29323\n3:    lstore_3\n4:    dup2_x2\n5:    fconst_1\n", string1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("EJ&@*(0hAc");
      mockPrintStream0.print((int) (short) (-1));
      mockPrintStream0.println();
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string2 = Utility.classOrInterface((short)179);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)23);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Utility.convertString("");
      Utility.signatureToString("B", true);
      Utility.searchOpcode("\t\t#");
      String string0 = Utility.compactClassName(")\t", true);
      assertEquals(")\t", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)89;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (byte)40);
      assertEquals("0:    dload_2\n1:    istore_0\n2:    iconst_1\n3:    lreturn\n4:    dup\n5:    iconst_1\n6:    dload_2\n7:    dup\n", string1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-22), (int) (byte)88, false);
      assertEquals("0:    pop2\n1:    nop\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, 676);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)91;
      byteArray0[0] = (byte)91;
      String string0 = "Warning: Padding byte != 0 in ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Utility.searchOpcode("long");
      Utility.compactClassName(")\t", true);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)89, (int) (byte)41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2181);
      ConstantString constantString0 = new ConstantString((-4377));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3582, (byte)0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 12, 1336);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 255. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = "Invalid type: ";
      String string1 = "R";
      try { 
        Utility.typeOfSignature("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("Lprotected;V");
      assertEquals("Lprotected;V", string0);
      
      Utility.signatureToString("Lprotected;V", true);
      short short0 = Utility.searchOpcode("long");
      assertEquals((short) (-1), short0);
      
      Utility.compactClassName(")\t", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)40;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)68);
      assertEquals("6:    dload_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(117, 117);
      Utility.compactClassName("Invalid signature: `");
      Utility.accessToString(117);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)16, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-67));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(67);
      ConstantString constantString0 = new ConstantString(67);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(160, 3253);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 1, 1119);
      assertEquals("1:    nop\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)79;
      byte byte0 = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 121, (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-22);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 240, (int) (byte) (-22), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ifnonnull";
      stringArray0[1] = "ifnonnull";
      stringArray0[2] = "ifnonnull";
      byte byte0 = (byte)79;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.compactClassName("EJ&@*(0hAc>$jyW&31]", "X", true);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 226, 25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".@<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .@<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "Invalid type: ";
      Utility.typeOfSignature("Invalid type: ");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("QnR{> [8yL+E", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QnR{> [8yL+E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, 283, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = ">";
      Utility.searchOpcode(">");
      Utility.convertString(">");
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("M*hn<E>9UgMqE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M*hn<E>9UgMqE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(117, 117);
      Utility.compactClassName("Invalid signature: `");
      Utility.accessToString(117);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)112;
      Constant[] constantArray0 = new Constant[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantLong constantLong0 = new ConstantLong(dataInputStream0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-61), (int) (byte) (-17));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    iconst_1
         // 2:    bipush\t\t119
         // 4:    iconst_5
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Utility.accessToString(0);
      String string0 = "C";
      Utility.signatureToString("C", true);
      try { 
        Utility.methodSignatureArgumentTypes("N5,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N5,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readShort();
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = "Invalid type: ";
      Utility.replace("$A6", "$A6", "Invalid type: ");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = "P";
      // Undeclared exception!
      try { 
        Utility.signatureToString("P", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.convertString("");
      String string0 = ";lg5]-v%f96PbyS$M";
      String string1 = "*lnMbv{|X~";
      Utility.replace(";lg5]-v%f96PbyS$M", "*lnMbv{|X~", "goto_w");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.replace("", ";lg5]-v%f96PbyS$M", "I8Jo\t");
      Utility.classOrInterface((byte)0);
      try { 
        Utility.typeOfSignature(";lg5]-v%f96PbyS$M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;lg5]-v%f96PbyS$M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = Utility.replace("Invalid type: ", "uuIN?2A$cvV+j(2JiJJ", "DucVj//H}J 3Dh");
      assertEquals("Invalid type: ", string0);
      
      Utility.signatureToString("VST5_?IG#=", false);
      int int0 = Utility.setBit(80, 80);
      assertEquals(65616, int0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("S_{>n^0LgJ|", false);
      Utility.accessToString(178, false);
      Utility.getSignature("private final synchronized transient");
      Utility.compactClassName("S_{>n^0LgJ|", "dsub", false);
      Utility.format(0, 32, false, '+');
      Utility.searchOpcode("S_{>n^0LgJ|");
      Utility.clearBit(178, 70);
      String string0 = Utility.accessToString(0, false);
      Utility.classOrInterface(178);
      String string1 = Utility.replace("%", "ifle", "s|WWG(CJHZUguwJm");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Utility.searchOpcode("Invalid StackMap offset: ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Invalid StackMap offset: ";
      objectArray0[1] = (Object) "Invalid StackMap offset: ";
      objectArray0[2] = (Object) "Invalid StackMap offset: ";
      objectArray0[3] = (Object) "Invalid StackMap offset: ";
      objectArray0[4] = (Object) "Invalid StackMap offset: ";
      objectArray0[5] = (Object) "Invalid StackMap offset: ";
      objectArray0[6] = (Object) "Invalid StackMap offset: ";
      objectArray0[7] = (Object) "Invalid StackMap offset: ";
      Utility.printArray(objectArray0);
      Utility.searchOpcode("putStatic");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid StackMap offset: ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "Invalid StackMap offset: ", "{Invalid StackMap offset: , Invalid StackMap offset: , Invalid StackMap offset: , Invalid StackMap offset: , Invalid StackMap offset: , Invalid StackMap offset: , Invalid StackMap offset: , Invalid StackMap offset: }");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Utility.getSignature("Ly{nN/?3B");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ly{nN/?3B", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ly{nN/?3B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3%H{I,{ZgX1");
      Utility.typeOfSignature("Vgjq-_w");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "Lprotected;V", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Utility.getSignature("Y ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("YL!IttV{y0saj8", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YL!IttV{y0saj8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Utility.replace("Invalid type: ", "uuIN?2A$cvV+j(2JiJJ", "DucVj//H}J 3Dh");
      // Undeclared exception!
      try { 
        Utility.signatureToString("[#nSFAqR-0C|N<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `#nSFAqR-0C|N<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[#nSFAqR-0C|N<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `#nSFAqR-0C|N<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/S6-~_%c+x,*lIu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /S6-~_%c+x,*lIu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = Utility.compactClassName("\n]}5f:z", "\n]}5f:z", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4|$no{bY'wJ[X? ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4|$no{bY'wJ[X? 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = Utility.getSignature("FULL");
      assertEquals("LFULL;", string0);
      
      String string1 = Utility.signatureToString("FULL", true);
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        Utility.getSignature("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)37;
      byte byte0 = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)83;
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      char char0 = '7';
      Utility.format((byte)83, (byte) (-62), false, '7');
      // Undeclared exception!
      try { 
        MockFile.createTempFile("83", "rO\":@q60");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CLASSPATH component ");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$8'7RNo1b{?F]DzD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $8'7RNo1b{?F]DzD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)17;
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = "java.lang.*?+L#}";
      Utility.compactClassName("java.lang.*?+L#}");
      String string1 = "{c+5XX VM";
      boolean boolean0 = false;
      int int0 = (-1720306077);
      int int1 = (-1);
      LocalVariable[] localVariableArray0 = new LocalVariable[9];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*?+L#}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?+L#}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Utility.convertString("Only element values of type annotation can be built with this ctor - type specified: ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Only element values of type annotation can be built with this ctor - type specified: ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type annotation can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = Utility.replace(":", "\t<", "\t<");
      assertEquals(":", string0);
      
      String string1 = Utility.getSignature("\t<");
      assertEquals("L<;", string1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit(63, 63);
      try { 
        Utility.typeOfSignature("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = "'P4\"d_&#!o";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Utility.replace("$A6", "[#nSFAqR-0C|N<", "Invalid type: ");
      try { 
        Utility.typeOfSignature("\"[&T=ZX&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"[&T=ZX&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = null;
      String string1 = "new";
      String string2 = "#=&Yw$l^";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "new", "#=&Yw$l^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ifnonnull";
      stringArray0[1] = "ifnonnull";
      stringArray0[2] = "ifnonnull";
      stringArray0[3] = "6M0SzMWP^Xjsr_w";
      stringArray0[4] = "ifnonnull";
      stringArray0[5] = "ifnonnull";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      stringArray0[6] = "ifnonnull";
      stringArray0[7] = "ifnonnull";
      Utility.methodTypeToSignature("ifnonnull", stringArray0);
      Utility.methodSignatureToString("(Lifnonnull;Lifnonnull;Lifnonnull;L6M0SzMWP^Xjsr_w;Lifnonnull;Lifnonnull;Lifnonnull;Lifnonnull;)Lifnonnull;", "ifnonnull", "Bogus", false);
      Utility.typeOfMethodSignature("(Lifnonnull;Lifnonnull;Lifnonnull;L6M0SzMWP^Xjsr_w;Lifnonnull;Lifnonnull;Lifnonnull;Lifnonnull;)Lifnonnull;");
      try { 
        Utility.methodSignatureArgumentTypes("6M0SzMWP^Xjsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6M0SzMWP^Xjsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Jn/>*4N`=hSINr'?2G,", "Invalid type: ", "static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Jn/>*4N`=hSINr'?2G,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V-gY");
      byte byte0 = Utility.typeOfSignature("V-gY");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.getSignature("V-gY");
      assertEquals("LV-gY;", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Utility.getSignature("&:Dp6LUt");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "L&:Dp6LUt;", "F*H:Op", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'r?#|e#h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'r?#|e#h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = "YEg*)5])^Wk.q";
      Utility.replace("YEg*)5])^Wk.q", "YEg*)5])^Wk.q", "YEg*)5])^Wk.q");
      String string1 = "\"";
      try { 
        Utility.typeOfSignature("YEg*)5])^Wk.q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YEg*)5])^Wk.q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("S!zs:9p6Ryo+FlF#s", "S!zs:9p6Ryo+FlF#s", "(type=", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S!zs:9p6Ryo+FlF#s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = Utility.signatureToString("BSun9[%:2`H^P,4F{l", false);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = Utility.signatureToString("C", false);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 37, (int) (byte) (-82), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("Uz7DE+*/zT{]Cf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Uz7DE+*_/zT{]Cf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      try { 
        Utility.typeOfSignature("APM2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: APM2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":KI*x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :KI*x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = Utility.getSignature("short");
      assertEquals("S", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = "KcI";
      // Undeclared exception!
      try { 
        Utility.signatureToString("KcI", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KcI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = Utility.typeOfSignature("DJ");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Uz7DE+*/zT{]Cf";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\n", "putfield", "impdep2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Utility.replace("EJ&@*(0hAc>$jyW&31]", "EJ&@*(0hAc>$jyW&31]", "EJ&@*(0hAc>$jyW&31]");
      Utility.setBit(172, 172);
      Utility.signatureToString("StackMap(", false);
      Utility.compactClassName("invokespecial");
      String string0 = "0%iw=}*7c`VW*<";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("J", "0%iw=}*7c`VW*<", "SURfo`!9Huf6L=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = "Dont call getValueChar() on a non CHAR ElementValue";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.compactClassName("Dont call getValueChar() on a non CHAR ElementValue", false);
      Utility.decode("ladd", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("W]9Ic~l`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W]9Ic~l`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Utility.typeOfSignature("TSQ0");
      Utility.getSignature(" (");
      Utility.accessToString((int) (byte)14);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L(;", "TSQ0", "\t\t#", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L(;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      try { 
        Utility.typeOfSignature("EJ&@*(0hAc>$jyW&31]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EJ&@*(0hAc>$jyW&31]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Uz7DE+*/zT{]Cf", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Uz7DE+*_/zT{]Cf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)83;
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)122;
      byte byte1 = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)61;
      byte byte2 = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-113);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte)60, true);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte)83, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Utility.typeOfSignature("Illegal type for StackMapType: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int int0 = Utility.setBit(1113, 1113);
      assertEquals(33555545, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(90);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong((byte)13);
      constantArray0[1] = (Constant) constantLong0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[2] = constant0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[3] = (Constant) constantClass0;
      ConstantLong constantLong1 = new ConstantLong(1995L);
      constantArray0[4] = (Constant) constantLong1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(40, (-1845));
      constantArray0[5] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(242, 15);
      constantArray0[6] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[7] = (Constant) constantInterfaceMethodref1;
      ConstantLong constantLong2 = new ConstantLong(90);
      constantArray0[8] = (Constant) constantLong2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fconst_2", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Utility.typeOfSignature("L^`h;M&&hw<Oy;V");
      String string0 = null;
      try { 
        Utility.methodSignatureReturnType(")\t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L42kj0*L}f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L42kj0*L}f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1^95s~=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1^95s~=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-89));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("goto\t\t#18983", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Utility.compactClassName("invokeinterface");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)39;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Utility.getSignature("in8vokeinterface");
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.decode("`F0>ug,#a_$b-'", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("G2N1:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G2N1:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace("laload", (String) null, "X7gq.h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PED2@}xoY0*w}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PED2@}xoY0*w}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = "@$,A%hIp+%C:y\"v^}Y=";
      try { 
        Utility.decode("@$,A%hIp+%C:y\"v^}Y=", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = Utility.signatureToString("Jq.hh^XwAs ek#mM");
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("YEg*)5]?^Wk.-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YEg*)5]?^Wk.-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("aV(127[%/X<9\"h,8P\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[%/X<9\"h,8P\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Utility.typeOfSignature("The magic number cannot be null");
      Utility.clearBit((byte)14, 138);
      Utility.getSignature("^YFNQm|A%m~q");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      Utility.printArray((Object[]) null);
      String string0 = Utility.classOrInterface(144);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Utility.typeOfSignature("I%k");
      Utility.convertString("I%k");
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegal type for StackMapType: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.convertString("%k");
      assertEquals("%k", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = "%k";
      try { 
        Utility.typeOfSignature("N=*n,<*&5(k-_a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N=*n,<*&5(k-_a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L^`h;M&&hw<Oy;V");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.convertString("L^`h;M&&hw<Oy;V");
      assertEquals("L^`h;M&&hw<Oy;V", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = Utility.convertString("void");
      assertEquals("void", string0);
      
      int int0 = Utility.clearBit(81, 81);
      assertEquals(81, int0);
      
      String string1 = Utility.getSignature("void");
      assertEquals("V", string1);
      
      String string2 = Utility.signatureToString("V");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("!nNs=%MW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !nNs=%MW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = "`+*APxMry*+2e\\#tE";
      Utility.convertString("`+*APxMry*+2e#tE");
      try { 
        Utility.methodSignatureArgumentTypes("`+*APxMry*+2e\\#tE", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `+*APxMry*+2e\\#tE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      try { 
        Utility.methodSignatureArgumentTypes("H^=;5EUBB>L=W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H^=;5EUBB>L=W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Utility.replace("EJ&@*(0hAc>$jyW&31]", "EJ&@*(0hAc>$jyW&31]", "EJ&@*(0hAc>$jyW&31]");
      // Undeclared exception!
      try { 
        Utility.signatureToString("EJ&@*(0hAc>$jyW&31]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EJ&@*(0hAc>$jyW&31]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit(3, (-66));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2014578022));
      assertEquals("interface", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = Utility.setBit((-2974), 14);
      assertEquals((-2974), int0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Utility.compactClassName("6]Rye['");
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)110;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)110;
      objectArray0[1] = (Object) (byte)47;
      Utility.printArray(objectArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 47
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("X7gq.h", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X7gq.h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("B");
      assertEquals((byte)8, byte0);
      
      int int0 = Utility.clearBit((byte)8, 81);
      assertEquals(8, int0);
      
      String string0 = Utility.getSignature("B");
      assertEquals("LB;", string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      File file0 = MockFile.createTempFile("\t(wide)", "\t\t<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) file0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "\t\t<";
      objectArray0[3] = (Object) "\t(wide)";
      objectArray0[4] = (Object) "\t\t<";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) file0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      //  // Unstable assertion: assertEquals(110L, file0.length());
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Utility.typeOfSignature("SCZNi',HFRJ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "SCZNi',HFRJ";
      objectArray0[1] = (Object) "SCZNi',HFRJ";
      objectArray0[2] = (Object) "SCZNi',HFRJ";
      objectArray0[5] = (Object) "SCZNi',HFRJ";
      objectArray0[4] = (Object) "SCZNi',HFRJ";
      objectArray0[5] = (Object) "SCZNi',HFRJ";
      Utility.signatureToString("SCZNi',HFRJ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",0SGHgHs(cWsSw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,0SGHgHs(cWsSw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Utility.convertString("");
      String string0 = Utility.classOrInterface(2569);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      int int0 = Utility.clearBit((-798), (-276));
      assertEquals((-4894), int0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-79);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$G0E$88$d0$y$b1", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Utility.printArray((Object[]) null);
      String string0 = "swap";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "swap");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("FqXjJJ<*O&{Xu2xTkZ");
      assertEquals("float", string0);
      
      String string1 = Utility.accessToString((-316), false);
      assertEquals("protected volatile transient interface abstract strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.signatureToString("Lputstatic;V", false);
      assertEquals("putstatic", string2);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Utility.compactClassName("11QjL?/PDX");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "double");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Utility.compactClassName("11QjL?/PDX");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = "&9rAAcccp";
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.signatureToString("BqXjJJm*O&{Xu2xT,Z");
      try { 
        Utility.methodSignatureArgumentTypes("iadd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iadd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.replace("FqXjJJ<*O&{Xu2xT,Z", "FqXjJJ<*O&{Xu2xT,Z", "FqXjJJ<*O&{Xu2xT,Z");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "FqXjJJ<*O&{Xu2xT,Z";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "FqXjJJ<*O&{Xu2xT,Z";
      stringArray0[4] = "FqXjJJ<*O&{Xu2xT,Z";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Utility.isSet((-1889), (-1889));
      // Undeclared exception!
      try { 
        Utility.signatureToString("L^`h;M&&hw<Oy;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L^`h;M&&hw<Oy;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Utility.isSet(1091, 1091);
      // Undeclared exception!
      try { 
        Utility.signatureToString("M", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Utility.compactClassName("11QjL?&PDX");
      try { 
        Utility.typeOfMethodSignature("\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)35;
      byteArray0[6] = (byte) (-15);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("1$AeP$p$A$f1", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G2N1:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G2N1:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Utility.replace("EJ&@*(0hAc>$jyW&31]", "EJ&@*(0hAc>$jyW&31]", "EJ&@*(0hAc>$jyW&31]");
      try { 
        Utility.methodSignatureReturnType("EJ&@*(0hAc>$jyW&31]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EJ&@*(0hAc>$jyW&31]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Utility.typeOfSignature("+S86!;'`tO`dCLV");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "invokevirtual";
      stringArray0[1] = ">\t";
      Utility.methodTypeToSignature(">\t", stringArray0);
      try { 
        Utility.typeOfSignature("invokevirtual");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokevirtual
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SCZNi',HFRJ");
      assertEquals((byte)9, byte0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "SCZNi',HFRJ";
      objectArray0[1] = (Object) "SCZNi',HFRJ";
      objectArray0[2] = (Object) "SCZNi',HFRJ";
      objectArray0[3] = (Object) "SCZNi',HFRJ";
      objectArray0[4] = (Object) "SCZNi',HFRJ";
      objectArray0[5] = (Object) "SCZNi',HFRJ";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{SCZNi',HFRJ, SCZNi',HFRJ, SCZNi',HFRJ, SCZNi',HFRJ, SCZNi',HFRJ, SCZNi',HFRJ}", string0);
      
      String string1 = Utility.getSignature("SCZNi',HFRJ");
      assertEquals("LSCZNi',HFRJ;", string1);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Nx*TQR8:HF]9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nx*TQR8:HF]9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(reference_kind = ");
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      String string0 = Utility.printArray(objectArray0);
      String string1 = Utility.compactClassName("(reference_kind = ");
      assertEquals("(reference_kind = ", string1);
      
      String string2 = Utility.printArray(objectArray0, false);
      assertFalse(string2.equals((Object)string0));
      
      short short0 = Utility.searchOpcode("(reference_kind = ");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("+S86!;'`tO`dCLV");
      assertEquals((byte)9, byte0);
      
      boolean boolean0 = Utility.isSet((byte)9, (byte)9);
      boolean boolean1 = Utility.isJavaIdentifierPart('z');
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.compactClassName("+S86!;'`tO`dCLV");
      assertEquals("+S86!;'`tO`dCLV", string0);
      
      String string1 = Utility.fillup("fload_2", (-3037), false, 'd');
      assertEquals("fload_2", string1);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)24;
      byte byte0 = (byte)79;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)64;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, 122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Utility.typeOfSignature("ZV9");
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isSet(5, 5);
      Utility.classOrInterface(5);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The filters must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The filters must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lHk7<Fq<)avn|n|BS^");
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-98);
      int int0 = 6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)104, 6, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('x');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("putField");
      assertEquals("putField", string0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Utility.isSet(3, (-1889));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "G2N1:";
      try { 
        Utility.methodSignatureReturnType("G2N1:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G2N1:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String[] stringArray0 = new String[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray((Object[]) stringArray0);
      Utility.methodSignatureReturnType("LK]UCP_rI&7{;V");
      try { 
        Utility.methodSignatureReturnType("K]UCP_rI&7{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K]UCP_rI&7{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(reference_kind = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (reference_kind = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[");
      assertEquals((byte)13, byte0);
      
      String string0 = Utility.convertString("[");
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Utility.isSet(85, 5);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = (-858);
      Utility.format((-858), (-858), false, 'z');
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("+S86!;'`tO`dCLV");
      assertEquals((byte)9, byte0);
      
      boolean boolean0 = Utility.isSet((byte)9, (byte)9);
      assertFalse(boolean0);
      
      String string0 = Utility.fillup("+S86!;'`tO`dCLV", 75, false, 'z');
      assertEquals("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz+S86!;'`tO`dCLV", string0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      try { 
        Utility.typeOfSignature("WSCZNi',HFRJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WSCZNi',HFRJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      boolean boolean0 = Utility.isSet(5, 5);
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("BoD`nYs5", true);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(reference_kind = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (reference_kind = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X+S86c;'p`tO`dCLV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X+S86c;'p`tO`dCLV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("o(URC", false);
      String string0 = Utility.encode(byteArray0, false);
      int int0 = Utility.setBit((-889), (-889));
      assertEquals((-889), int0);
      
      String string1 = Utility.convertString("o$uURC");
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "o$uURC";
      objectArray0[1] = (Object) "o$uURC";
      objectArray0[2] = (Object) "o$uURC";
      objectArray0[3] = (Object) "o$uURC";
      Object object0 = new Object();
      objectArray0[4] = object0;
      String string2 = Utility.printArray(objectArray0);
      assertNotNull(string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("6f 28 55 52 43", string3);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)86;
      byteArray1[1] = (byte) (-116);
      byteArray1[2] = (byte) (-11);
      byteArray1[3] = (byte) (-122);
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte) (-124);
      String string4 = Utility.encode(byteArray1, false);
      assertEquals("V$8c$f5$86$M$84", string4);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6]RHe['";
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType(stringArray0[1], false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      String[] stringArray0 = new String[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray((Object[]) stringArray0);
      String string0 = Utility.getSignature("{null, null, null}");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-124);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[0];
      String string1 = Utility.toHexString(byteArray1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      boolean boolean0 = Utility.isSet(3, (-1889));
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("I", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = Utility.printArray((Object[]) stringArray0);
      assertNotNull(string0);
      assertEquals("{null, null, null}", string0);
      
      String string1 = Utility.getSignature("0g");
      assertEquals("L0g;", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)66, 85);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong((-3812L));
      constantArray0[2] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(448, (byte)66);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(48, 871);
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantClass constantClass0 = new ConstantClass((byte)66);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[5] = (Constant) constantClass1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2951, 251);
      constantArray0[6] = (Constant) constantMethodref0;
      Constant constant0 = constantMethodHandle0.copy();
      constantArray0[7] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lstore_3", string2);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = "2E";
      String string1 = "ifnull";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "2E", "ifnull");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2E");
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)86;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("3e e6 00 df 56", string0);
      
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "3e e6 00 df 56";
      objectArray0[1] = (Object) (byte) (-26);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "2E";
      objectArray0[4] = (Object) (byte) (-33);
      objectArray0[5] = (Object) (byte)86;
      objectArray0[6] = (Object) (byte) (-26);
      objectArray0[7] = (Object) "2E";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string1);
      
      String string2 = Utility.format((byte)0, (byte)86, true, '_');
      assertEquals("0_____________________________________________________________________________________", string2);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6]RHe['";
      String string0 = Utility.replace("tl:.N$", "Synthetic", "");
      assertEquals("tl:.N$", string0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("+S86!;'`tO`dCLV");
      assertEquals((byte)9, byte0);
      
      String string0 = Utility.compactClassName("G2N1:");
      assertEquals("G2N1:", string0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{null, null, null}", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("{null, null, null}");
      assertEquals("L{null,;", string1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6]RHe['";
      try { 
        Utility.typeOfSignature("6]RHe['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6]RHe['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Utility.convertString("?]7U{J8?G$'Ec");
      Utility.replace("public priv", "Ctq5", "v2JnD]G");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-111);
      byte byte0 = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-54);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 346, (int) (byte)90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('c');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(printWriter0, objectArray0);
      Utility.isSet(12, 125);
      // Undeclared exception!
      try { 
        Utility.signatureToString("byte", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `byte'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      int int0 = 67;
      Utility.accessToString(67, false);
      boolean boolean0 = true;
      Utility.compactClassName("public private volatile", "IHiw1J'\"s:", true);
      Utility.convertString("public private volatile");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-107);
      byteArray0[0] = (byte) (-107);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = "CONSTANT_Float";
      Utility.convertString("CONSTANT_Float");
      String string1 = "_njz^XV";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_njz^XV");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.accessToString(1148);
      Utility.convertString("CONSTANT_Float");
      Utility.methodSignatureReturnType("CONSTANT_Float");
      int int0 = 703;
      Utility.setBit(703, 1148);
      try { 
        Utility.methodSignatureReturnType("protected static final synchronized volatile abstract", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `protected static final synchronized volatile abstract'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("FTI}>2a_5Lpd0{(,j@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `FTI}>2a_5Lpd0{(,j@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = Utility.replace("v>|,mE(cvL=8o{'", "v>|,mE(cvL=8o{'", "v>|,mE(cvL=8o{'");
      assertEquals("v>|,mE(cvL=8o{'", string0);
      
      String string1 = Utility.replace("Lk+S86c;'p`tO`dCLV;V", "void", "j");
      assertEquals("Lk+S86c;'p`tO`dCLV;V", string1);
      
      String string2 = Utility.getSignature("Lk+S86c;'p`tO`dCLV;V");
      assertEquals("LLk+S86c;'p`tO`dCLV;V;", string2);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", "ifnull");
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)72;
      byteArray1[3] = (byte) (-69);
      byteArray1[4] = (byte)51;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String string0 = Utility.compactClassName("b/?");
      assertEquals("b.?", string0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Utility.convertString("H:l\"tW9xj<SM");
      try { 
        Utility.methodSignatureReturnType("<tAN:4Z6'DQ|,E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<tAN:4Z6'DQ|,E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H:l\"tW9xj<SM]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H:l\"tW9xj<SM]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = "<unknown object>";
      Utility.convertString("<unknown object>");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("<unknown object>", stringArray0);
      Utility.isSet((-1278), (-1675));
      try { 
        Utility.methodSignatureArgumentTypes("<unknown object>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <unknown object>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format((-506), 20, true, '}');
      Utility.isSet(20, 40);
      Utility.accessToString(810, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)14;
      byte byte0 = (byte)73;
      byteArray0[3] = (byte)73;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 81);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(65);
      try { 
        Utility.methodSignatureReturnType("HTwbUA6;>zt[WyAc+4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HTwbUA6;>zt[WyAc+4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.isSet(99, 99);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 2459, false, 'H');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      // Undeclared exception!
      Utility.fillup("", 32767, false, '1');
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<unknown object>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <unknown object>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)86;
      String string0 = Utility.toHexString(byteArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "3e e6 00 df 56";
      objectArray0[1] = (Object) (byte) (-26);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "2E";
      objectArray0[4] = (Object) (byte) (-33);
      objectArray0[5] = (Object) (byte)86;
      objectArray0[6] = (Object) (byte) (-26);
      objectArray0[7] = (Object) "2E";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      String string0 = "K";
      try { 
        Utility.decode("K", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      boolean boolean0 = Utility.isJavaIdentifierPart('Y');
      assertTrue(boolean0);
      
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      Utility.methodTypeToSignature(" ", (String[]) null);
      Utility.methodTypeToSignature(" ", (String[]) null);
      String string0 = Utility.methodTypeToSignature("()L;", (String[]) null);
      assertEquals("()L()L;;", string0);
      
      short short0 = Utility.searchOpcode("()L;");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("TG*q_j$n92F?ZE5-,yx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TG*q_j$n92F?ZE5-,yx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Utility.fillup("'", 171, true, '5');
      byte[] byteArray0 = null;
      MockFile mockFile0 = new MockFile((String) null, "L{lpn");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"'\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)9;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte) (-69);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("9e 5b 09 dc b4 ca d9 bb", string0);
      
      byte[] byteArray1 = Utility.decode("9e 5b 09 dc b4 ca d9 bb", false);
      assertEquals(23, byteArray1.length);
      
      Utility.convertString("");
      String string1 = Utility.replace("", "fF7<Nkz>FQBP#d{WH", "fF7<Nkz>FQBP#d{WH");
      int int0 = Utility.clearBit((byte) (-69), 62);
      assertEquals((-1073741893), int0);
      
      int int1 = Utility.setBit(57, (byte) (-54));
      assertEquals(1081, int1);
      
      Utility.setBit((byte) (-69), 57);
      String string2 = Utility.printArray(objectArray0, false, false);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6]RHe['";
      String string0 = Utility.printArray((Object[]) stringArray0, true, false);
      assertNotNull(string0);
      assertEquals("{6]RHe[', null, null}", string0);
      
      short short0 = Utility.searchOpcode("6]RHe['");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      Utility.isJavaIdentifierPart('Y');
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.getSignature("");
      String string0 = Utility.format(28, 28, false, '\\');
      assertEquals("\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\28", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      assertFalse(boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(28);
      PipedInputStream pipedInputStream0 = new PipedInputStream(46);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.print(1.0);
      mockPrintWriter0.println(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteSequence0, pipedInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(byteSequence0, sequenceInputStream0);
      mockPrintWriter0.println((Object) sequenceInputStream0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) sequenceInputStream1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string1 = Utility.compactClassName("", false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = "A1\"?Q#~C4r\";LJUy@";
      boolean boolean0 = false;
      Utility.compactClassName("A1\"?Q#~C4r\";LJUy@", "A1\"?Q#~C4r\";LJUy@", false);
      Utility.searchOpcode("A1\"?Q#~C4r\";LJUy@");
      Utility.format((short) (-1), 159, false, '/');
      Utility.isJavaIdentifierPart('/');
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[6];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-67));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantString constantString0 = new ConstantString((byte) (-93));
      constantArray0[2] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 160);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[4] = (Constant) constantClass0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 0, (int) (byte)101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    if_icmpgt\t\t#40
         // 4:    lsub
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = "=5K_HHir\"L@6c";
      int int0 = (-4859);
      Utility.isJavaIdentifierPart('/');
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-4859));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -4859
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = Utility.accessToString(2765);
      assertEquals("public protected static volatile transient interface strictfp", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)55;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)97;
      objectArray0[3] = (Object) (byte)65;
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{0, 0, 97, 65}", string1);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = null;
      Utility.convertString("?]7U{J8?G$'Ec");
      String string0 = "\\Ctq5";
      Utility.compactClassName("Ctq5", true);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = "y\"F\"7tK#h4CrYKrb";
      boolean boolean0 = false;
      Utility.fillup("y\"F\"7tK#h4CrYKrb", 7, false, '|');
      try { 
        Utility.methodSignatureReturnType("y\"F\"7tK#h4CrYKrb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `y\"F\"7tK#h4CrYKrb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = Utility.accessToString(2765);
      assertEquals("public protected static volatile transient interface strictfp", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte) (-111);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[6];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-67));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantString constantString0 = new ConstantString((byte) (-93));
      constantArray0[2] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 160);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[4] = (Constant) constantClass0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 0, (int) (byte)101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 41728. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.bcel.classfile.ConstantValue");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "org.apache.bcel.classfile.ConstantValue";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "AW[mJ|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = "?]7U{J8?G$'Ec";
      try { 
        Utility.typeOfSignature("?]7U{J8?G$'Ec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?]7U{J8?G$'Ec
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      int int0 = (-1);
      Utility.accessToString((-1));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-114);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Utility.convertString("xn)<w/L*,[z=Sd");
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "xn)<w/L*,[z=Sd", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = "y\"F\"7tK#h4CrYs_rbG";
      boolean boolean0 = false;
      Utility.fillup("y\"F\"7tK#h4CrYs_rbG", (-102), false, '|');
      Utility.fillup("y\"F\"7tK#h4CrYs_rbG", (-102), false, 'V');
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)20;
      Utility.encode(byteArray0, true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)47;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 af 00 00 02 97 82 0b 2f", string0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("O", "q", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String string0 = "7";
      // Undeclared exception!
      try { 
        Utility.signatureToString("7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String string0 = "Invalid method signature: ";
      boolean boolean0 = true;
      try { 
        Utility.decode("Invalid method signature: ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("<unknown object>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <unknown object>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      int int0 = 22;
      Utility.clearBit(22, 172);
      boolean boolean0 = true;
      char char0 = '^';
      Utility.format(22, 172, true, '^');
      String string0 = "?>...";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("22^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "?>...", "22^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 22^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Utility.clearBit(0, 0);
      Utility.isSet(0, 0);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.bcel.classfile.Utility$1";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Utility.methodTypeToSignature("", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("k5B6", "", "zt8@/%4-\"9ouZ'AcPP1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k5B6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      String string0 = "";
      Utility.getSignature("");
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName("", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      String string0 = "-z0{'cG=Bq";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("-z0{'cG=Bq", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-z0{'cG=Bq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("transient", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `transient'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      String string0 = "a=L@Nby{Di&?l|EZ}*";
      try { 
        Utility.typeOfMethodSignature("a=L@Nby{Di&?l|EZ}*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a=L@Nby{Di&?l|EZ}*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String string0 = "O";
      try { 
        Utility.methodSignatureReturnType("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6]RHe['";
      stringArray0[1] = "6]RHe['";
      stringArray0[2] = "6]RHe['";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("6]RHe['", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      try { 
        Utility.typeOfSignature("v>|,mE(cvL=8o{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: v>|,mE(cvL=8o{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      int int0 = (-2139);
      int int1 = 0;
      boolean boolean0 = true;
      Utility.format((-2139), 0, true, 'N');
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("-2139");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -2139
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, false);
      Utility.format(1727, (-370), true, 'o');
      try { 
        Utility.methodSignatureReturnType("{java.lang.Object@c4c322, java.lang.Object@61d5603b, java.lang.Object@ad3bf13}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{java.lang.Object@c4c322, java.lang.Object@61d5603b, java.lang.Object@ad3bf13}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "0u";
      try { 
        Utility.methodSignatureReturnType("0u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String string0 = Utility.compactClassName("A1\"?Q#~C4r\";LJUy@", "A1\"?Q#~C4r\";LJUy@", false);
      short short0 = Utility.searchOpcode("A1\"?Q#~C4r\";LJUy@");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.compactClassName("A1\"?Q#~C4r\";LJUy@", true);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString((int) (short) (-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A1\"?Q#~C4r\";LJUy@";
      stringArray0[1] = "public private protected static final volatile transient native abstract strictfp synthetic annotation enum";
      stringArray0[2] = "A1\"?Q#~C4r\";LJUy@";
      stringArray0[3] = "public private protected static final volatile transient native abstract strictfp synthetic annotation enum";
      stringArray0[4] = "org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations";
      stringArray0[5] = "A1\"?Q#~C4r\";LJUy@";
      String string3 = Utility.methodTypeToSignature("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", stringArray0);
      assertEquals("(LA1\"?Q#~C4r\";LJUy@;Lpublic;LA1\"?Q#~C4r\";LJUy@;Lpublic;Lorg/apache/bcel/classfile/RuntimeVisibleParameterAnnotations;LA1\"?Q#~C4r\";LJUy@;)Lpublic;", string3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)4;
      String string4 = Utility.toHexString(byteArray0);
      assertEquals("b9 de 27 bc 04", string4);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.commons.io.filefilter.DirectoryFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.DirectoryFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Object[] objectArray0 = null;
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true, true);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("2E", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
