/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 18:31:16 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.isJavaIdentifierPart('T');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-70);
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      Utility.printArray(objectArray0);
      Utility.accessToString((int) (byte) (-22), true);
      try { 
        Utility.typeOfMethodSignature("fload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = Utility.classOrInterface(2671);
      assertEquals("interface", string0);
      
      Object[] objectArray0 = new Object[1];
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{null}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Ve*", true);
      assertEquals("void", string0);
      
      String string1 = Utility.accessToString(34, true);
      assertEquals("private", string1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.typeOfSignature("Jf~cT");
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.typeOfMethodSignature("Jf~cT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Jf~cT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("v`[8", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `v`[8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.convertString("");
      Utility.isJavaIdentifierPart('8');
      byte byte0 = Constants.ATTR_RUNTIMEVISIBLE_ANNOTATIONS;
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Utility.classOrInterface(3025);
      try { 
        Utility.methodSignatureReturnType("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.accessToString(2048);
      try { 
        Utility.methodSignatureArgumentTypes("strictfp", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: strictfp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.format(11, (-1499), true, '4');
      Utility.signatureToString("IEr#0?KmNe4v{'z");
      Utility.compactClassName("11");
      Utility.convertString("invokeVirtual");
      try { 
        Utility.methodSignatureArgumentTypes("arraylength", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("C =T:-|mS?BQ7s0?SK");
      assertEquals((byte)5, byte0);
      
      byte byte1 = Constants.ITEM_Object;
      String string0 = Utility.signatureToString("C =T:-|mS?BQ7s0?SK", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = (-724);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      try { 
        Utility.methodSignatureArgumentTypes("<clinit>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.accessToString(580);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "protected volatile interface";
      objectArray0[1] = (Object) "protected volatile interface";
      objectArray0[2] = (Object) "protected volatile interface";
      objectArray0[3] = (Object) "protected volatile interface";
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-69), 580);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(0, 0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.searchOpcode("");
      Utility.compactClassName("mZF&v+cjSw=K|b");
      Utility.convertString("mZF&v+cjSw=K|b");
      Utility.isJavaIdentifierPart('0');
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "static";
      boolean boolean0 = false;
      Utility.compactClassName("static", "9}Gd3?3", false);
      try { 
        Utility.methodSignatureReturnType("static", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `static'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "|bD";
      Utility.compactClassName("|bD");
      int int0 = 182;
      Utility.fillup("DKF*J", 182, true, 'b');
      Utility.compactClassName("iconst_5");
      try { 
        Utility.typeOfSignature("iconst_5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iconst_5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 6078;
      boolean boolean0 = false;
      char char0 = '@';
      Utility.format(6078, 6078, false, '@');
      String string0 = "1i#W2Q.%";
      // Undeclared exception!
      try { 
        Utility.signatureToString("1i#W2Q.%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1i#W2Q.%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 2346;
      Utility.setBit(2346, 76);
      String string0 = "\\n";
      boolean boolean0 = false;
      char char0 = 'c';
      Utility.fillup("\n", (-3480), false, 'c');
      String string1 = "xR*Wr3V";
      // Undeclared exception!
      try { 
        Utility.signatureToString("xR*Wr3V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `xR*Wr3V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.clearBit(1103, 1103);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)13;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      Utility.printArray(objectArray0);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("C =T:-|mS?BQ7s0?SK");
      assertEquals((byte)5, byte0);
      
      byte byte1 = Constants.ITEM_Object;
      int int0 = Utility.clearBit((byte)7, 5);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.classOrInterface(223);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isSet(247, 223);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.clearBit(0, (-1844));
      Utility.isSet(126, (-3501));
      char char0 = ':';
      Utility.isJavaIdentifierPart(':');
      String string0 = "The filters must not be null";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("The filters must not be null", "The filters must not be null", "The filters must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The filters must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.isJavaIdentifierPart('E');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(descriptor_index = ";
      stringArray0[1] = "(descriptor_index = ";
      stringArray0[2] = "(descriptor_index = ";
      stringArray0[3] = "(descriptor_index = ";
      Utility.methodTypeToSignature("(descriptor_index = ", stringArray0);
      try { 
        Utility.methodSignatureToString("MMN$pk(G?_]-WU4", "(descriptor_index = ", "[?Nc+$?$6", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MMN$pk(G?_]-WU4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.getSignature("l");
      // Undeclared exception!
      try { 
        Utility.signatureToString("xwA887#*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `xwA887#*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.clearBit(162, 1605);
      String string0 = "~An\\]";
      Utility.fillup("~An]", 130, true, 'g');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "~An]ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.accessToString(0, false);
      Utility.compactClassName("<");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)44;
      Constant[] constantArray0 = new Constant[9];
      ConstantFloat constantFloat0 = new ConstantFloat(0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-120));
      constantArray0[2] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantClass constantClass1 = new ConstantClass((byte) (-18));
      constantArray0[4] = (Constant) constantClass1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2984), 0);
      constantArray0[5] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[6] = (Constant) constantMethodHandle1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[7] = (Constant) constantMethodType1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType0);
      constantArray0[8] = (Constant) constantMethodType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-30), 0, false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      Utility.encode(byteArray0, true);
      Utility.isJavaIdentifierPart('n');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PrintStream printStream0 = null;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      Object object1 = new Object();
      objectArray0[6] = object1;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.convertString("6)6Ocm)17v&g]d'ZZH");
      Utility.isJavaIdentifierPart('>');
      Utility.compactClassName("? super ");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.compactClassName("monitorexit");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)0;
      Utility.searchOpcode("monitorexit");
      Utility.classOrInterface((byte)90);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.accessToString(580);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "protected volatile interface";
      objectArray0[2] = (Object) "protected volatile interface";
      objectArray0[3] = (Object) "protected volatile interface";
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-69), 580);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-9), (int) (byte) (-69), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_1
         // 1:    aastore
         // 2:    <illegal opcode>
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "6)6Ocm)17v&g]d'ZZH";
      Utility.convertString("6)6Ocm)17v&g]d'ZZH");
      Utility.isJavaIdentifierPart('>');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "6)6Ocm)17v&g]d'ZZH";
      objectArray0[1] = (Object) "6)6Ocm)17v&g]d'ZZH";
      objectArray0[2] = (Object) "6)6Ocm)17v&g]d'ZZH";
      objectArray0[3] = (Object) "6)6Ocm)17v&g]d'ZZH";
      objectArray0[4] = (Object) "6)6Ocm)17v&g]d'ZZH";
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((-1511));
      // Undeclared exception!
      try { 
        Utility.signatureToString("new");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `new'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("T$ee$3a2$f4$cf$A$A", string0);
      
      byte byte0 = Utility.typeOfSignature("Couldn't find: ");
      assertEquals((byte)5, byte0);
      
      byte byte1 = Utility.typeOfSignature("T$ee$3a2$f4$cf$A$A");
      assertEquals((byte)14, byte1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("C;,:$CFfyn\"SzbP&", false);
      Utility.convertString("Z(:B@)\u0003=9");
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Utility.encode(byteArray0, true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.printArray((Object[]) null);
      String string0 = Utility.compactClassName("ldc", false);
      assertEquals("ldc", string0);
      
      byte[] byteArray0 = Utility.decode("R$ ", false);
      assertArrayEquals(new byte[] {(byte)82, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("$7GH00/h=pPsuB$Y~", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7G\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.compactClassName("f4 00 00 00");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.typeOfSignature("Jf~cT");
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte byte0 = (byte) (-124);
      String string0 = Constants.ILLEGAL_OPCODE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      Utility.typeOfSignature("Dm:yU/gSXZU");
      try { 
        Utility.typeOfSignature("Qc&W)]idQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qc&W)]idQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)58;
      byte byte1 = (byte)50;
      byteArray0[3] = (byte)50;
      byte byte2 = (byte) (-12);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-49);
      byte byte3 = (byte) (-39);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)0;
      Utility.encode(byteArray0, false);
      Utility.typeOfSignature("Couldn't find: ");
      try { 
        Utility.typeOfSignature("$A$ee$3a2$f4$cf$d9$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$ee$3a2$f4$cf$d9$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.accessToString(580);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "protected volatile interface";
      objectArray0[1] = (Object) "protected volatile interface";
      objectArray0[2] = (Object) "protected volatile interface";
      objectArray0[3] = (Object) "protected volatile interface";
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-69), 580);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1187, 1187);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1187);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.compactClassName("{protected volatile interface, protected volatile interface, protected volatile interface, protected volatile interface}");
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-12);
      byte byte0 = Utility.typeOfSignature("S\"R4Vk'Az()n?&V");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "Qc&W)]idQ";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Utility.replace("Qc&W)]idQ", "Qc&W)]idQ", "Qc&W)]idQ");
      try { 
        Utility.typeOfSignature("invokevirtual");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokevirtual
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("R!xEYF*GW`r`)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R!xEYF*GW`r`)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)80;
      Utility.encode(byteArray0, false);
      Utility.classOrInterface(252);
      byte[] byteArray1 = Utility.decode("b$NJz$7c$de$97$3bP", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteArray1;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) "oni<trxft";
      objectArray0[3] = (Object) "oni<trxft";
      objectArray0[4] = (Object) byteArray1;
      objectArray0[5] = (Object) "oni<trxft";
      // Undeclared exception!
      try { 
        Signature.translate("oni<trxft");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal signature: oni<trxft read o
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Utility.decode("u*ElE$lD~E %gEQz", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      String string0 = "org.apache.bcel.util.ClassPath";
      Utility.compactClassName("org.apache.bcel.util.ClassPath", true);
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("7n,xLy*DK?V[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7n,xLy*DK?V[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".Pm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .Pm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("2", string0);
      
      String string1 = Utility.classOrInterface(2671);
      byte[] byteArray1 = Utility.decode("interface", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)110, (byte)116, (byte)101, (byte)114, (byte)102, (byte)97, (byte)99, (byte)101}, byteArray1);
      
      String string2 = Utility.replace("interface", "2", "new");
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = Utility.isJavaIdentifierPart(';');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.isJavaIdentifierPart('E');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(descriptor_index = ";
      stringArray0[1] = "(descriptor_index = ";
      stringArray0[2] = "(descriptor_index = ";
      Utility.printArray((Object[]) stringArray0);
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte byte0 = (byte) (-124);
      String string0 = Constants.ILLEGAL_OPCODE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      byte byte1 = Constants.ITEM_Object;
      try { 
        Utility.typeOfSignature("%^1H-p&14");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %^1H-p&14
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.setBit(102, 102);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)46, 0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantFieldref1.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)46, 25, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 282, (int) (byte)56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = Constants.T_FLOAT;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qc&W)]AWidQ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qc&W)]AWidQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.typeOfSignature("Invalid method signature: ");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6)6Ocm)17v&g]d'ZZH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6)6Ocm)17v&g]d'ZZH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        Utility.typeOfSignature("XMO+6P9e}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XMO+6P9e}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = ".Pm";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".Pm");
      String string1 = "Yl7)y";
      try { 
        Utility.typeOfSignature("Yl7)y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yl7)y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8c8&WPx]id_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8c8&WPx]id_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte byte0 = Constants.T_BOOLEAN;
      try { 
        Utility.typeOfSignature("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("H|4iJa;r=m7x5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H|4iJa;r=m7x5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.classOrInterface((-1329));
      Utility.convertString(" arg");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) " arg";
      objectArray0[1] = (Object) " arg";
      objectArray0[2] = (Object) " arg";
      objectArray0[3] = (Object) "interface";
      Utility.printArray(objectArray0, false, false);
      Utility.clearBit((-1329), 11);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = "E<9:O@{ .{hy";
      try { 
        Utility.typeOfSignature("E<9:O@{ .{hy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E<9:O@{ .{hy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+_s?(8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _s?(8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"CRVxVb@;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"CRVxVb@;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_String;
      byte byte1 = Constants.ITEM_InitObject;
      String[] stringArray0 = new String[1];
      stringArray0[0] = " can't be both final and abstract";
      String string0 = Utility.methodTypeToSignature(" can't be both final and abstract", stringArray0);
      assertEquals("(Lcan't;)Lcan't;", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        Utility.typeOfSignature("56mB1GVe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 56mB1GVe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte byte0 = Constants.T_FLOAT;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pm", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pm'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9fq\"'xJ}<`]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9fq\"'xJ}<`]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte byte0 = Constants.T_VOID;
      try { 
        Utility.typeOfSignature("Pm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.signatureToString("Ve*", true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Ve*";
      objectArray0[1] = (Object) "Ve*";
      objectArray0[2] = (Object) "Ve*";
      objectArray0[3] = (Object) "void";
      objectArray0[4] = (Object) "Ve*";
      objectArray0[5] = (Object) "Ve*";
      objectArray0[6] = (Object) "Ve*";
      objectArray0[7] = (Object) "Ve*";
      objectArray0[8] = (Object) "void";
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfMethodSignature("{Ve*, Ve*, Ve*, void, Ve*, Ve*, Ve*, Ve*, void}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {Ve*, Ve*, Ve*, void, Ve*, Ve*, Ve*, Ve*, void}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        Utility.typeOfSignature("AQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-93);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-1124), (int) (byte)70, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_3
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte byte0 = Constants.T_FLOAT;
      Utility.signatureToString("SimpleElementValue doesnt know how to write out type ", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("^L%zC0{$h`182", "xJc)!", "^L%zC0{$h`182", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^L%zC0{$h`182
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O.%+:4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O.%+:4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.convertString("zcn\"OhPui6Cuh/R}0");
      String string0 = Utility.convertString("zcn\"OhPui6Cuh/R}0");
      assertEquals("zcn\\\"OhPui6Cuh/R}0", string0);
      
      String string1 = Utility.compactClassName("8Fy9ml88&CWF", false);
      assertEquals("8Fy9ml88&CWF", string1);
      
      String string2 = Utility.replace("dAx b6i!", "imul", "lo}Wc_46");
      assertEquals("dAx b6i!", string2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mj)ymc|a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mj)ymc|a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@U'u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @U'u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3HeeQ\">mG7vKDzucu$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3HeeQ\">mG7vKDzucu$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_Utf8;
      // Undeclared exception!
      try { 
        Utility.signatureToString("The suffix must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The suffix must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("L4C;V", true);
      assertEquals("4C", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.isJavaIdentifierPart('z');
      String string0 = "L~U3;V";
      Utility.methodSignatureReturnType("L~U3;V", true);
      Utility.compactClassName("+F=gTqUxQb~!Jw");
      Utility.clearBit((-1568), (-1568));
      byte[] byteArray0 = new byte[0];
      int int0 = 117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 117, (-1568));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = Constants.ITEM_Object;
      // Undeclared exception!
      try { 
        Utility.signatureToString("L/T?[:4uov,W|&IpXU", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L/T?[:4uov,W|&IpXU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("NewObject", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NewObject'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.accessToString(2048);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte)25;
      Constant[] constantArray0 = new Constant[2];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte) (-108);
      byteArray1[2] = (byte)89;
      byteArray1[3] = (byte) (-124);
      byteArray1[4] = (byte)79;
      byteArray1[5] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-684), (byte)82);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-718), 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    swap
         // 1:    iastore
         // 2:    idiv
         // 3:    dastore
         // 4:    d2f
         // 5:    iinc\t\t%89\t55
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[2] = (byte) (-71);
      byteArray0[6] = (byte) (-124);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-124);
      String string0 = Utility.getSignature("lconst_0");
      assertEquals("Llconst_0;", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iinc\t\t%0\t-71", string1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.typeOfSignature("L/T?[:4uov,W|&IpXU");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "OY=";
      stringArray0[1] = "if_icmpgt";
      stringArray0[2] = "-ij0^<*)X{x4|xOg=N";
      stringArray0[3] = "L/T?[:4uov,W|&IpXU";
      stringArray0[4] = "L/T?[:4uov,W|&IpXU";
      stringArray0[5] = "if_icmpgt";
      stringArray0[6] = "L/T?[:4uov,W|&IpXU";
      stringArray0[7] = "L/T?[:4uov,W|&IpXU";
      stringArray0[8] = "L/T?[:4uov,W|&IpXU";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("if_icmpgt", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[:4uov,W|&IpXU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.typeOfSignature("J1{&4P");
      Utility.signatureToString("J1{&4P", true);
      try { 
        Utility.typeOfSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "=SF";
      try { 
        Utility.typeOfSignature("=SF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =SF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.accessToString((-409));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-78);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[4] = (byte)75;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-78);
      byteArray2[1] = (byte) (-78);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, (int) (byte) (-31), (int) (byte) (-31));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)25, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NewObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NewObject
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "/O0$_OkRlR{\"M:3/";
      try { 
        Utility.typeOfSignature("/O0$_OkRlR{\"M:3/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /O0$_OkRlR{\"M:3/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("H\":p/}F,^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H\":p/}F,^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.format(45, 45, false, 'G');
      Utility.isSet(78, 45);
      Utility.compactClassName("(type=", "(type=", false);
      Utility.convertString("Q$>RDjvdG`");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)74;
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-926), 3472);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantString constantString0 = new ConstantString((-926));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[3] = (Constant) constantString1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType((byte)65);
      constantArray0[4] = (Constant) constantMethodType2;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[5] = (Constant) constantFloat0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((-2963), (-926));
      constantArray0[6] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1340), (-1674), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore\t\t%65
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = Utility.signatureToString("FDlo<o", true);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Rl;OYf", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rl;OYf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)72;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "char");
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)85;
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart(')');
      Utility.printArray((Object[]) null, false, false);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G~PTH/w{h&>lUA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G~PTH/w{h&>lUA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("Z");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte byte0 = ElementValue.CLASS;
      Utility.isJavaIdentifierPart('$');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, (-5902));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)42;
      byte byte0 = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)34;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 229, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Utility.signatureToString("D(;T-((tsRG({", false);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("GH|C4ajr`Mv8o", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GH|C4ajr`Mv8o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, 2, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)91;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1617), (-1617));
      try { 
        Utility.typeOfSignature("0:    dup_x2\n1:    dup_x2\n2:    dup_x2\n3:    dup_x2\n4:    if_icmple\t\t#23391\n7:    dup_x2\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dup_x2
         // 1:    dup_x2
         // 2:    dup_x2
         // 3:    dup_x2
         // 4:    if_icmple\t\t#23391
         // 7:    dup_x2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2963), (-2963));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, (-1674), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "&q{Km~9";
      try { 
        Utility.typeOfSignature("&q{Km~9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &q{Km~9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)85;
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart('^');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0c 55 55");
      Utility.printArray((Object[]) null, false, true);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, 245);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-79);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b1$b14$b1", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 2, (int) (byte) (-79), false);
      assertEquals("2:    caload\n3:    return\n", string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = ElementValue.CLASS;
      Utility.isJavaIdentifierPart('$');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      Utility.signatureToString("Zvc%6M:M|Y7@6u]\"");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Zvc%6M:M|Y7@6u]\"";
      stringArray0[1] = "Zvc%6M:M|Y7@6u]\"";
      stringArray0[2] = "boolean";
      stringArray0[3] = "boolean";
      stringArray0[4] = "Zvc%6M:M|Y7@6u]\"";
      stringArray0[5] = "boolean";
      stringArray0[6] = "Zvc%6M:M|Y7@6u]\"";
      stringArray0[7] = "boolean";
      stringArray0[8] = "boolean";
      Utility.methodTypeToSignature("Zvc%6M:M|Y7@6u]\"", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("if_icmpgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-93);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      try { 
        Utility.typeOfSignature("-<C3Oe)Bp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -<C3Oe)Bp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart('^');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0c 32 32");
      Utility.printArray((Object[]) null, false, true);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, 251);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, 2, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")\t";
      stringArray0[1] = "ozJ7QRbMy]";
      stringArray0[2] = ")\t";
      stringArray0[3] = "<illegal opcode>";
      stringArray0[4] = "ozJ7QRbMy]";
      stringArray0[5] = "ozJ7QRbMy]";
      String string0 = Utility.methodTypeToSignature("ozJ7QRbMy]", stringArray0);
      assertEquals("(L);LozJ7QRbMy];L);L<illegal;LozJ7QRbMy];LozJ7QRbMy];)LozJ7QRbMy];", string0);
      
      String string1 = Utility.convertString("ozJ7QRbMy]");
      assertEquals("ozJ7QRbMy]", string1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-79);
      byteArray1[1] = (byte) (-79);
      byteArray1[2] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)90, 12, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.typeOfSignature("L/T?[:4uov,W|&IpXU");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "OY=";
      stringArray0[1] = "if_icmpgt";
      stringArray0[2] = "-ij0^<*)X{x4|xOg=N";
      stringArray0[3] = "L/T?[:4uov,W|&IpXU";
      stringArray0[4] = "L/T?[:4uov,W|&IpXU";
      stringArray0[5] = "if_icmpgt";
      stringArray0[6] = "L/T?[:4uov,W|&IpXU";
      try { 
        Utility.methodSignatureReturnType("OY=", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OY='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("bjMi)2P_~r9A[`__)E");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "k{nPWvt,<{,";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "k{nPWvt,<{,";
      PrintStream printStream0 = mockPrintStream0.printf("k{nPWvt,<{,", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.CHINA;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "]zu#pV 9zKf5Y6zi}^", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 15, 2640);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(NgCl=-J78");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (NgCl=-J78
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2078, 5, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)67;
      byteArray0[3] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.format((-277), (byte) (-62), true, '3');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, 199, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)56;
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte) (-80);
      byteArray1[3] = (byte) (-80);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-80), (int) (byte)56, false);
      String string0 = Constants.CONSTRUCTOR_NAME;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    areturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.accessToString((-409));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.format(2870, 162, true, 'T');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-31), (-919), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iushr
         // 1:    fconst_0
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = (byte)92;
      byte byte1 = (byte)65;
      byte byte2 = (byte) (-22);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)65;
      byte byte3 = (byte)92;
      byteArray0[2] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.format(34, 5, true, '&');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 42, 34, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-65);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3), (int) (byte)110);
      try { 
        Utility.typeOfSignature("0:    athrow\n1:    lastore\n2:    aconst_null\n3:    irem\n4:    <illegal opcode>\n5:    athrow\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    athrow
         // 1:    lastore
         // 2:    aconst_null
         // 3:    irem
         // 4:    <illegal opcode>
         // 5:    athrow
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.signatureToString("Zvc%6M:M|Y7@6u]\"");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-2);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Zvc%6M:M|Y7@6u]\"";
      objectArray0[1] = (Object) "boolean";
      objectArray0[2] = (Object) "boolean";
      Utility.printArray(objectArray0, false, true);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, 188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.format(45, 45, false, 'G');
      Utility.isSet(78, 45);
      Utility.compactClassName("(type=", "(type=", false);
      Utility.convertString("Q$>RDjvdG`");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-72);
      byteArray0[1] = (byte)74;
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-926), 3472);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantString constantString0 = new ConstantString((-926));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[3] = (Constant) constantString1;
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[5] = (Constant) constantFloat0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((-2963), (-926));
      constantArray0[6] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1340), (-1674), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    dstore_3
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")\t";
      stringArray0[1] = "ozJ7QRbMy]";
      stringArray0[2] = ")\t";
      stringArray0[3] = "<illegal opcode>";
      stringArray0[4] = "ozJ7QRbMy]";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 172, 10, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arraylength");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-69);
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart(')');
      Utility.printArray((Object[]) null, true, false);
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, 197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto_w");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)91;
      Utility.codeToString(byteArray0, (ConstantPool) null, 5, 5);
      try { 
        Utility.methodSignatureReturnType("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)91;
      byte byte0 = Utility.typeOfSignature("FIHVMCv");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)42;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte) (-95);
      byteArray1[3] = (byte) (-22);
      byteArray1[4] = (byte)54;
      byteArray1[5] = (byte)77;
      byteArray1[6] = (byte)42;
      byteArray1[7] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)54, 1843, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, (-31));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "A}\\5v2T#Ti>";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)110;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A}\u0005v2T#Ti>");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)110, 186);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, 119, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.signatureToString("Zvc%6M:M|Y7@6u]\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Zvc%6M:M|Y7@6u]\"");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      int int0 = 3557;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3557, (-469));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)3;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2487, (int) (byte)3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.classOrInterface(146);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-47);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 3567);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.setBit(70, 184);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-118);
      byteArray0[8] = (byte) (-95);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)75);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 225, (int) (byte) (-95), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4040. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "ozJ7QRbMy]";
      stringArray0[3] = "<illegal opcode>";
      stringArray0[4] = "ozJ7QRbMy]";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 172, 10, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[z,I/:!6FyI5%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `z,I/:!6FyI5%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.classOrInterface(146);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yj\"6IHB;1&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yj\"6IHB;1&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)72;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokeinterface");
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)85;
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart(')');
      Utility.printArray((Object[]) null, false, false);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-758), (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifge\t\t#4186
         // 3:    iconst_4
         // 4:    dstore_1
         // 5:    ior
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-16));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1464), (byte)25);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[4] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1560, (int) (byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 123, 189);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)94;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (int) (byte)94);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2487, (int) (byte)3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Mv8Y[8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mv8Y[8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-88);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 176);
      String string1 = Utility.compactClassName("0:    nop\n1:    jsr\t\t#-87\n");
      assertTrue(string1.equals((Object)string0));
      
      short short0 = Utility.searchOpcode("0:    nop\n1:    jsr\t\t#-87\n");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-117);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (int) (byte) (-124));
      String string0 = Utility.convertString("q?~5}]mS3");
      assertEquals("q?~5}]mS3", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), 1578, false);
      assertEquals("0:    iconst_m1\n1:    fastore\n2:    f2d\n3:    <illegal opcode>\n4:    iinc\t\t%21\t-80\n7:    f2i\n", string1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.classOrInterface(146);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte) (-52);
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte) (-127);
      byteArray1[4] = (byte) (-52);
      byteArray1[5] = (byte)72;
      byteArray1[6] = (byte) (-70);
      byteArray1[7] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-607), (int) (byte) (-52), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_3
         // 1:    <illegal opcode>
         // 2:    fload_0
         // 3:    lor
         // 4:    <illegal opcode>
         // 5:    dstore_1
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-10), (int) (byte) (-76), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-65);
      byte byte0 = Utility.typeOfSignature("BLnF~|U_");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.classOrInterface((byte) (-65));
      assertEquals("interface", string0);
      
      String string1 = Utility.convertString("vBYPQH");
      assertEquals("vBYPQH", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BLnF~|U_";
      stringArray0[1] = "vBYPQH";
      stringArray0[2] = "interface";
      stringArray0[3] = "vBYPQH";
      stringArray0[4] = "BLnF~|U_";
      String string2 = Utility.methodTypeToSignature("OZWSt`+CP/4X~S", stringArray0);
      assertEquals("(LBLnF~|U_;LvBYPQH;Linterface;LvBYPQH;LBLnF~|U_;)LOZWSt`+CP/4X~S;", string2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "\t\t";
      Utility.getSignature("\t\t");
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)104;
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (int) (byte) (-16), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    imul
         // 1:    impdep1
         // 2:    ifeq\t\t#-20392
         // 5:    bipush\t\t-16
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, 192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.classOrInterface(146);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte) (-52);
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte) (-97);
      byteArray1[4] = (byte) (-52);
      byteArray1[1] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)72, 171, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<illegal;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "L<illegal;V";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<illegal;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.typeOfSignature("Ve*");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      try { 
        Utility.typeOfSignature("WnZ0E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WnZ0E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte byte0 = (byte)14;
      byte byte1 = (byte) (-100);
      byte byte2 = (byte)26;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_1
         // 1:    ret\t\t%172
         // 3:    ishl
         // 4:    ifne\t\t#-22022
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.accessToString(72);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("#|JffyKKt esC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #|JffyKKt esC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[2] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 209);
      assertEquals("0:    ret\t\t%0\n2:    caload\n3:    nop\n", string0);
      
      String string1 = Utility.getSignature("0:    ret\t\t%0\n2:    caload\n3:    nop\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.convertString("\n     ");
      assertEquals("\\n     ", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, 119, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.classOrInterface(146);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1701, 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("UMtf3F'^l e Jee", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UMtf3F'^l e Jee'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)106;
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1346, (-753));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)94;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), (int) (byte)94);
      assertEquals("0:    lconst_1\n1:    dup_x1\n2:    ifle\t\t#-25017\n5:    monitorenter\n6:    d2l\n7:    dup2_x2\n", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Method method0 = new Method();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2344), (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    ladd
         // 2:    goto_w\t\t#-1739483640
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (-573));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, (int) (byte) (-47));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte byte0 = (byte)14;
      byte byte1 = (byte)26;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, (int) (byte)76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-54);
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), (int) (byte) (-125));
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((byte) (-55));
      try { 
        Utility.methodSignatureArgumentTypes("83 3e c9 b3 e2 83 ca", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 83 3e c9 b3 e2 83 ca
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 428, (-1339));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-13);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[7] = (byte)113;
      int int0 = 207;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1914, 207);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-117);
      Utility.convertString("q?~5}]mS3");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-117);
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)81;
      byteArray1[4] = (byte) (-7);
      byteArray1[5] = (byte)2;
      Utility.codeToString(byteArray1, (ConstantPool) null, (-1646), (-371));
      Utility.toHexString(byteArray1);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "q?~5}]mS3";
      objectArray0[2] = (Object) byteArray0;
      Utility.printArray(objectArray0);
      boolean boolean0 = Utility.isSet((byte) (-117), 49);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)97;
      int int0 = 947;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 947, 947);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte) (-123);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1241), 59);
      try { 
        Utility.methodSignatureReturnType("0:    nop\n1:    lstore_0\n2:    istore_0\n3:    d2i\n4:    dup2_x1\n5:    dsub\n6:    pop\n7:    astore\t\t%133\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    lstore_0
         // 2:    istore_0
         // 3:    d2i
         // 4:    dup2_x1
         // 5:    dsub
         // 6:    pop
         // 7:    astore\t\t%133
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1293, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2963), (-2963));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantFloat0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)7;
      byte byte0 = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-25);
      Utility.accessToString((int) (byte) (-25));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 164, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.signatureToString("WrW_Y0r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WrW_Y0r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)56;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-80);
      byteArray0[11] = (byte)56;
      byteArray0[4] = (byte) (-80);
      try { 
        Utility.methodSignatureReturnType("Elhm>j>q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Elhm>j>q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte) (-90);
      byteArray1[3] = (byte) (-60);
      byteArray1[4] = (byte)107;
      byteArray1[5] = (byte)57;
      byteArray1[6] = (byte)57;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-57), (int) (byte)57, false);
      assertEquals("0:    iconst_3\n1:    iconst_3\n2:    if_acmpne\t\t#-15251\n5:    dstore\t\t%57\n", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "UMtf3F'^l e Jee";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-92);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = (-1364);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1364), 923);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifgt\t\t#-4703
         // 3:    dcmpg
         // 4:    bastore
         // 5:    dup_x1
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2963), (-2963));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantNameAndType0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2021, (int) (byte)39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47177. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)70;
      Utility.encode(byteArray0, false);
      Utility.decode("$a4$d2$7f$e6$y$afF", false);
      Utility.fillup("/G$J/k", 489, false, ' ');
      Utility.convertString("Yj\"6IHB;1&");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(fB-C=:*g.dod$}9", "(fB-C=:*g.dod$}9", "(fB-C=:*g.dod$}9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fB-C=:*g.dod$}9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_1
         // 1:    ret\t\t%172
         // 3:    ireturn
         // 4:    ifne\t\t#-22022
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.signatureToString("BP&i%E^Rgu8", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BP&i%E^Rgu8");
      try { 
        Utility.typeOfSignature("'ng+,`M8@5]TY>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'ng+,`M8@5]TY>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("X%9Rr].=h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X%9Rr].=h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.typeOfSignature("L<illegal;V");
      try { 
        Utility.methodSignatureArgumentTypes("(^J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)59;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1405, (int) (byte) (-46));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-9);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$f0$r9$o$9e$be$o$f7", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1582), 179);
      assertEquals("0:    <illegal opcode>\n1:    fload_3\n2:    dstore\t\t%34\n4:    ifle\t\t#-16858\n7:    <illegal opcode>\n", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("f0 25 39 22 9e be 22 f7", string2);
      
      Utility.classOrInterface(104);
      String string3 = Utility.getSignature(">h");
      assertEquals("L>h;", string3);
      
      String string4 = Utility.compactClassName("5i:]");
      assertEquals("5i:]", string4);
      
      short short0 = Utility.searchOpcode("5i:]");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 170, 1135);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("4");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (int) (byte) (-87));
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), (int) (byte) (-87), false);
      assertEquals("0:    goto\t\t#-22100\n3:    ireturn\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)119;
      byteArray0[1] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)119, (int) (byte)119);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)122;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-731), (int) (byte)10);
      assertEquals("0:    dsub\n1:    lconst_1\n2:    <illegal opcode>\n3:    iconst_m1\n4:    iload_1\n5:    lushr\n6:    lstore\t\t%122\n", string0);
      
      String string1 = Utility.classOrInterface(49);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("()L;", string0);
      
      String string1 = Utility.methodSignatureToString("()L;", "class", "()L;");
      assertEquals("()L;  class()", string1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("g%PsheaZD", stringArray0);
      Utility.methodSignatureToString("()Lg%PsheaZD;", "lload_3", "g%PsheaZD");
      try { 
        Utility.methodSignatureArgumentTypes("lload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[3] = (byte) (-17);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (-3357));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.compactClassName("A}\u0005v2T#Ti>", "A}\u0005v2T#Ti>", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)62;
      byte byte0 = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-65);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 47, (int) (byte) (-68), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "g%PsheaZD";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("g%PsheaZD", stringArray0);
      Utility.methodSignatureToString("()Lg%PsheaZD;", "()Lg%PsheaZD;", "g%PsheaZD");
      Utility.methodSignatureArgumentTypes("()Lg%PsheaZD;");
      byte byte0 = (byte) (-80);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Utility.format(1477, 1477, true, 'p');
      Utility.isJavaIdentifierPart('m');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1477ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte)111);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      MockFile mockFile0 = new MockFile("Txf(.cWx\"9LAZ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)12;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte) (-60));
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-83);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-10), 76);
      assertEquals("0:    fconst_1\n1:    ret\t\t%172\n3:    ireturn\n4:    ifne\t\t#-22022\n7:    lreturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)114, (int) (byte)114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[0] = (byte) (-65);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)49;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-492), 158, true);
      assertEquals("0:    faload\n1:    faload\n2:    f2d\n3:    daload\n", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.replace("\n     ", "\n     ", "\n     ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 197, (int) (byte) (-59));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Utility.replace("\n     ", "\n     ", "\n     ");
      assertEquals("\n     ", string0);
      
      String string1 = Utility.getSignature("\n     ");
      assertEquals("L;", string1);
      
      byte byte0 = Utility.typeOfSignature("*J0FGk,>3DS`3Mp");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1232, (-1315), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 197, (int) (byte)52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-47), (-192));
      try { 
        Utility.methodSignatureArgumentTypes("class  ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class  
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, 152);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[1] = (byte)62;
      try { 
        Utility.typeOfSignature("K>zEt6yHN'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K>zEt6yHN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[5] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)114, (int) (byte)114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1074, (-1620));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("g%PsheaZD", stringArray0);
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)31;
      byte byte2 = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-10);
      byte byte3 = (byte) (-16);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1934, (int) (byte) (-16));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = true;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-46), (int) (byte)86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "A}\\5v2T#Ti>";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A}\u0005v2T#Ti>");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 186);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3213, (int) (byte)90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("g%PsheaZD", stringArray0);
      assertEquals("()Lg%PsheaZD;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-2);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)117;
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, 2, (int) (byte)117);
      assertEquals("2:    lneg\n", string1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte) (-123));
      assertEquals("0:    bipush\t\t16\n2:    i2l\n", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2963), (-2963));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte) (-119);
      byteArray1[3] = (byte)87;
      byteArray1[4] = (byte)92;
      byteArray1[5] = (byte)92;
      byteArray1[6] = (byte)87;
      byteArray1[7] = (byte)92;
      byteArray1[8] = (byte)62;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, 1168);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2963), (-2963));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte) (-81);
      byteArray1[2] = (byte) (-81);
      byteArray1[3] = (byte) (-81);
      byteArray1[4] = (byte) (-122);
      byteArray1[5] = (byte) (-81);
      byteArray1[6] = (byte) (-81);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-81), 170);
      assertEquals("0:    dreturn\n1:    dreturn\n2:    dreturn\n3:    dreturn\n4:    i2f\n5:    dreturn\n6:    dreturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1209), (-459));
      assertEquals("0:    lload_3\n1:    astore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2690), (-2690));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.6881968F);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "? extends ";
      stringArray0[1] = "? extends ";
      stringArray0[2] = "? extends ";
      Utility.methodTypeToSignature("? extends ", stringArray0);
      Utility.methodSignatureToString("(L?;L?;L?;)L?;", "? extends ", "\t\t<");
      String string0 = "090(b<P}";
      // Undeclared exception!
      try { 
        Utility.signatureToString("090(b<P}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `090(b<P}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(f";
      Utility.methodTypeToSignature("(f", stringArray0);
      Utility.methodSignatureToString("(L(f;)L(f;", "(f", "(f");
      byte[] byteArray0 = new byte[0];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("57", "57");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"57\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "Khh%";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Khh%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Khh%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (-937));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.decode("!k!ef)urMUqRZHb", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-63);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2525), (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    l2i
         // 1:    lload\t\t%193
         // 3:    nop
         // 4:    fastore
         // 5:    aload_3
         // 6:    astore_2
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, 16384);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 225, 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2394), 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iaload
         // 1:    iadd
         // 2:    ineg
         // 3:    fstore_3
         // 4:    istore_2
         // 5:    lstore_1
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!k!ef)urMUqRZHb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k!ef)urMUqRZHb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T'A3#;");
      String string0 = Utility.methodSignatureReturnType("T'A3#;", false);
      assertEquals("'A3#", string0);
      
      String string1 = Utility.compactClassName("T'A3#;", "tableswitch", false);
      assertEquals("T'A3#;", string1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-61);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)110);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-82), 200);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 8, 3754, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1266, (int) (byte) (-16), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = Utility.compactClassName("j.!7vcyzC6#dK?NO)W", "", true);
      assertEquals("j.!7vcyzC6#dK?NO)W", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(fB-C=:*g.dod$}9", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 193, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.printArray((Object[]) null);
      boolean boolean0 = false;
      Utility.compactClassName("ldc", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-105);
      byte byte0 = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)27;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-79), (-992));
      constantMethodHandle0.toString();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-62), (int) (byte)27, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 38850. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-73));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-73), (int) (byte) (-73));
      assertEquals("0:    invokespecial\t-73.0 (0)\n", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(614.138032861);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1999, (int) (byte) (-76));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Fieldref' at index 0 and got CONSTANT_Double[6](bytes = 614.138032861)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      Constant[] constantArray0 = new Constant[7];
      ConstantLong constantLong0 = new ConstantLong((byte) (-116));
      constantArray0[0] = (Constant) constantLong0;
      ConstantString constantString0 = new ConstantString((byte) (-5));
      constantArray0[2] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString(183);
      constantArray0[3] = (Constant) constantString1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1254), 77);
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1368.6833F));
      constantArray0[6] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 90, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), (int) (byte) (-80));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_1
         // 1:    <illegal opcode>
         // 2:    areturn
         // 3:    freturn
         // 4:    i2c
         // 5:    iconst_0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)30;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)30);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    lload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1309, 2394);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(614.138032861);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)119;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-124), 185);
      assertEquals("0:    <illegal opcode>\n1:    ifnonnull\t\t#-17019\n4:    iconst_2\n5:    lconst_0\n6:    ireturn\n7:    caload\n8:    dneg\n", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte byte0 = ElementValue.CLASS;
      Utility.isJavaIdentifierPart('$');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)98, (-5902));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (-1862));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ifnonnull";
      stringArray0[1] = "ifnonnull";
      stringArray0[2] = "ifnonnull";
      stringArray0[3] = "byte";
      stringArray0[4] = "hp[mA<b>U]s%'";
      stringArray0[5] = "ifnonnull";
      stringArray0[6] = "ifnonnull";
      stringArray0[7] = "ifnonnull";
      Utility.methodTypeToSignature("ifnonnull", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("2o(", "C", "ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2o(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 222, 1148);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 191, 21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)51;
      String string0 = "org.apache.bcel.classfile.Utility";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility");
      byteArray0[5] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, 2411);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-121);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)45, (int) (byte) (-50));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)126;
      byteArray0[5] = (byte)44;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), 79);
      String string1 = Utility.compactClassName("0:    nop\n1:    dup\n2:    <illegal opcode>\n3:    iand\n4:    nop\n5:    aload_2\n");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 88, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-85);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (int) (byte) (-85));
      assertEquals("0:    lookupswitch\tdefault = -1454658645, npairs = 0 ()\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 183, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 197, 104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      byteArray0[1] = (byte) (-86);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86));
      assertEquals("0:    nop\n1:    tableswitch\tdefault = 1, low = 0, high = 0(1)\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n24:   nop\n25:   nop\n26:   nop\n27:   nop\n28:   nop\n29:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-108);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), (int) (byte)122);
      assertEquals("0:    ishr\n1:    fastore\n2:    fconst_2\n3:    <illegal opcode>\n4:    lcmp\n", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)19);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(8, 170);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)19, (int) (byte)19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
