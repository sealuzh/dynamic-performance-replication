/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:55:18 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.FileDescriptor;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("+njUb Os}'}340");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      JSJshopVars.apostrophe = (-1029);
      jSTerm1.makeFunction();
      jSTerm1.makeConstant();
      jSTerm0.makeVariable();
      jSTerm1.print();
      jSTerm1.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("noteual");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSPredicateForm0.add((Object) "noteual");
      jSTerm0.matches(jSTerm0);
      Object object0 = new Object();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?th");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSSubstitution1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSTerm0.makeFunction();
      jSTerm0.makeConstant();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("'");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.listIterator();
      jSTerm0.clear();
      jSTerm0.removeElement((Object) null);
      jSTerm0.isGround();
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("noteual");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "noteual");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      stringReader0.reset();
      jSPredicateForm0.add((Object) null);
      streamTokenizer0.slashStarComments(false);
      jSPredicateForm0.add((Object) jSTerm0);
      jSPredicateForm0.add((Object) "noteual");
      Object object0 = new Object();
      jSPredicateForm0.add((Object) jSTerm0);
      JSJshopVars.leftBrac = 0;
      jSTerm0.isGround();
      jSTerm0.listIterator();
      jSTerm0.isEval();
      jSTerm0.makeFunction();
      JSJshopVars.leftBrac = (-1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSTerm0.isConstant();
      jSTerm0.equals(jSTerm0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(92);
      FileSystemHandling.shouldAllThrowIOExceptions();
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      predicate0.negate();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("call");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(43);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.ordinaryChar((-3));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.ordinaryChar((-5078));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(4, stringBuffer0.length());
      
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm1 = new JSTerm();
      Predicate.isEqual((Object) jSTerm1);
      jSTerm0.toStr();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isFunction();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_@eVQ%LFiVDP8^");
      StringReader stringReader0 = new StringReader("-,Hh");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0XoWeual");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0XoWeual");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0XoWeual");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      streamTokenizer0.slashStarComments(false);
      jSTerm0.add((Object) "0XoWeual");
      Object object0 = new Object();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      Object object0 = new Object();
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.call();
      assertTrue(jSTerm1.isFunction());
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6?th)ual");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6?th)ual");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSTerm0.add((Object) "6?th)ual");
      Object object0 = new Object();
      stringReader0.markSupported();
      JSJshopVars.leftBrac = (-2);
      jSTerm0.makeFunction();
      jSTerm0.isConstant();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("6?th)ual");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6?th)ual");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSTerm0.add((Object) "6?th)ual");
      Object object0 = new Object();
      JSJshopVars.leftBrac = (-2);
      jSTerm0.makeFunction();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSTerm0.isConstant();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.spliterator();
      jSTerm0.isGround();
      Object object0 = new Object();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      jSTerm1.makeFunction();
      jSTerm0.makeConstant();
      jSTerm1.print();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      int int0 = 539;
      jSTerm1.setSize(539);
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isVariable();
      jSTerm0.makeEval(true);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.makeFunction();
      predicate0.test(jSSubstitution0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      predicate0.negate();
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("'");
      jSTerm0.isFunction();
      jSTerm0.removeAllElements();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSTerm0.remove((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "noteual";
      StringReader stringReader0 = new StringReader("noteual");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSTerm0.add((Object) "noteual");
      Object object0 = new Object();
      JSJshopVars.leftBrac = (-1);
      jSTerm0.isGround();
      jSTerm0.isEval();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      JSJshopVars.leftBrac = JSJshopVars.leftBrac;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6?th)ual");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6?th)ual");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      streamTokenizer0.pushBack();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSTerm0.add((Object) "6?th)ual");
      Object object0 = new Object();
      jSTerm0.makeVariable();
      stringReader0.markSupported();
      JSJshopVars.leftBrac = (-2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.isGround();
      predicate0.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      predicate0.negate();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSTerm0.makeFunction();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.makeVariable();
      StringReader stringReader0 = new StringReader("%h%");
      StringReader stringReader1 = new StringReader("%h%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.isFunction();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.removeAllElements();
      jSTerm0.spliterator();
      jSTerm0.isGround();
      Object object0 = new Object();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("noteual");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "noteual");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "noteual");
      jSPredicateForm0.add((Object) "noteual");
      Object object0 = new Object();
      int int0 = 0;
      JSJshopVars.leftBrac = 0;
      jSTerm0.spliterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "noteual");
      jSTerm0.isGround();
      JSJshopVars.backquote = (-1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      jSTerm0.isEval();
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm1 = jSTerm0.call();
      streamTokenizer0.wordChars((-1991), 357);
      jSTerm0.makeVariable();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      jSSubstitution1.clone();
      jSSubstitution1.add((Object) null);
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.add(5026, (Object) "noteual");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5026 > 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSTerm0.makeEval(true);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.makeFunction();
      jSTerm0.makeFunction();
      predicate0.test(jSSubstitution0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      predicate0.negate();
      predicate0.negate();
      jSTerm0.makeVariable();
      jSTerm0.call();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.addAll(2287, (Collection) jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2287
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0XoWeual");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0XoWeual");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "( ");
      StringReader stringReader0 = new StringReader("( ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6?th)ual");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6?th)ual");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      Object object0 = new Object();
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.makeConstant();
      jSTerm0.isFunction();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.matches(jSTerm2);
      JSTerm jSTerm4 = jSTerm2.call();
      boolean boolean0 = jSTerm4.isGround();
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6?th)ual");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6?th)ual");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.reset();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      streamTokenizer0.pushBack();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%%%");
      jSTerm0.add((Object) "6?th)ual");
      Object object0 = new Object();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.print();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("IBQb1X]S");
      jSTerm0.print();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = (JSTerm)jSTerm3.clone();
      jSTerm1.matches(jSTerm3);
      jSTerm1.equals(jSTerm3);
      jSTerm3.makeEval(true);
      jSTerm1.equals(jSTerm2);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm4.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6?th)ual");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("?");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSTerm0.makeEval(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6?th)ual");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6?th)ual");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.reset();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      streamTokenizer0.pushBack();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%%%");
      jSTerm0.add((Object) "6?th)ual");
      Object object0 = new Object();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.print();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("6?th)ual");
      jSTerm0.print();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm1.ensureCapacity((-1));
      jSTerm1.equals(jSTerm3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm5 = jSTerm4.parseList(streamTokenizer1);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer1);
      jSTerm1.containsAll(jSTerm4);
      JSTerm jSTerm7 = jSTerm5.cloneT();
      jSTerm7.matches(jSTerm1);
      JSTerm jSTerm8 = null;
      try {
        jSTerm8 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
