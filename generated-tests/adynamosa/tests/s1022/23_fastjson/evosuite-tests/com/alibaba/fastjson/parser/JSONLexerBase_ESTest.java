/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 10:18:35 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("^$/%2-keBY?A#-Q");
      Locale locale0 = Locale.GERMANY;
      jSONScanner0.locale = locale0;
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanNumber();
      JSONScanner jSONScanner1 = new JSONScanner("9jMLE165^z4QH", (-1));
      jSONScanner1.scanFieldInt(charArray0);
      jSONScanner1.scanDecimal('9');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader(1716);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2738);
      long long0 = jSONReaderScanner0.scanLong('E');
      assertEquals(6L, long0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", json : ");
      jSONReaderScanner1.isBlankInput();
      char[] charArray1 = new char[9];
      charArray1[0] = '6';
      charArray1[1] = 'E';
      charArray1[2] = 'E';
      charArray1[3] = '6';
      charArray1[4] = '6';
      charArray1[5] = '6';
      charArray1[6] = '6';
      charArray1[7] = 'E';
      charArray1[8] = 'V';
      SymbolTable symbolTable0 = new SymbolTable(91);
      JSONScanner jSONScanner1 = new JSONScanner(", json : ", (-1));
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '6');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      charArray0[6] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2738);
      jSONReaderScanner0.scanLong('6');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Zb");
      jSONReaderScanner1.isBlankInput();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 32);
      JSONReaderScanner jSONReaderScanner3 = null;
      try {
        jSONReaderScanner3 = new JSONReaderScanner((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0`f{1UUYC#.=lI");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanDate('5');
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithChar('R');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match R - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4o");
      float float0 = jSONReaderScanner0.scanFloat('u');
      assertEquals(4.0F, float0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 69);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      Locale.forLanguageTag("Hd-<G1j{e6 !t29e");
      jSONReaderScanner0.scanUUID('F');
      int int0 = jSONReaderScanner0.scanInt('4');
      assertEquals(4, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = 'S';
      charArray0[2] = 'W';
      charArray0[3] = 'r';
      charArray0[4] = 'W';
      charArray0[5] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDouble('V');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanLong('r');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-926), (-926));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -926
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      jSONScanner0.scanFloat('|');
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('X');
      jSONScanner0.scanFloat('d');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2698, (-2013403795));
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isEnabled((-275));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-2013403795));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0$`f{1UUYC#.J=lI");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanDate(',');
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithChar('R');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match R - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2738);
      jSONReaderScanner0.scanLong('E');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", json : ");
      jSONReaderScanner1.isBlankInput();
      char[] charArray1 = new char[9];
      charArray1[0] = '6';
      charArray1[1] = 'E';
      charArray1[2] = 'E';
      charArray1[3] = '6';
      charArray1[4] = '6';
      charArray1[5] = '6';
      charArray1[6] = '6';
      charArray1[7] = 'E';
      charArray1[8] = 'V';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray1, 4096);
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("unclosed single-quote string", 0);
      jSONReaderScanner3.scanFieldSymbol(charArray0);
      jSONReaderScanner2.nextToken();
      jSONReaderScanner2.stringVal();
      jSONReaderScanner1.isRef();
      jSONReaderScanner2.bytesValue();
      jSONReaderScanner3.scanInt('~');
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.scanDouble('u');
      jSONScanner0.scanFloat(')');
      jSONScanner0.nextIdent();
      int int0 = (-552);
      char[] charArray0 = new char[5];
      jSONScanner0.nextIdent();
      charArray0[0] = ')';
      charArray0[1] = 'u';
      charArray0[2] = ')';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-552), (-552));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'ly02zXXPuG<rAY.'");
      jSONScanner0.skipWhitespace();
      jSONScanner0.isEOF();
      jSONScanner0.scanDouble('K');
      jSONScanner0.nextToken();
      jSONScanner0.isBlankInput();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = "0X$`f{1UYC#.J=lI";
      BigDecimal bigDecimal0 = new BigDecimal(2147483626L);
      JSONScanner jSONScanner0 = new JSONScanner("nul", (-547));
      jSONScanner0.scanNumber();
      char char0 = 'd';
      jSONScanner0.scanFloat('d');
      int int0 = 2698;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2698, (-2013403795));
      Reader reader0 = null;
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((Reader) null, (-971));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.scanDouble('u');
      jSONScanner0.scanFloat('u');
      char char0 = 'g';
      jSONScanner0.scanString('g');
      jSONScanner0.isRef();
      jSONScanner0.scanNumber();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      stringReader0.skip((-9223372036854775795L));
      StringReader stringReader1 = new StringReader("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader1);
      jSONReaderScanner0.nextToken(3);
      jSONReaderScanner0.nextToken(12);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanUUID('c');
      jSONReaderScanner0.putChar('c');
      SymbolTable symbolTable0 = new SymbolTable(1531);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      Locale.forLanguageTag("D~_x");
      jSONReaderScanner0.scanUUID('c');
      jSONReaderScanner0.scanInt('j');
      JSONScanner jSONScanner0 = new JSONScanner("D~_x", (-1908));
      jSONScanner0.next();
      assertEquals((-1908), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
      JSONScanner jSONScanner0 = new JSONScanner("I)5/:+ED73\"E/", (-13));
      jSONScanner0.scanBoolean('I');
      jSONScanner0.scanFloat('L');
      JSONScanner jSONScanner1 = new JSONScanner("I)5/:+ED73\"E/");
      jSONScanner1.scanBoolean('1');
      jSONScanner0.nextIdent();
      jSONScanner1.skipWhitespace();
      jSONScanner0.nextToken();
      jSONScanner0.scanUUID('1');
      jSONScanner0.integerValue();
      assertEquals(2, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanUUID('3');
      jSONScanner0.scanLong('3');
      jSONScanner0.scanStringArray((Collection<String>) null, '<');
      jSONScanner0.close();
      assertEquals((-1), jSONScanner0.matchStat);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = '3';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 119);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanLong('G');
      assertEquals(119, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      SymbolTable symbolTable0 = new SymbolTable(84);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 3);
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = '\'';
      charArray0[2] = 'u';
      charArray0[3] = '!';
      charArray0[4] = '}';
      charArray0[5] = '.';
      charArray0[6] = 'v';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      jSONScanner0.nextToken();
      assertEquals('\'', jSONScanner0.getCurrent());
      
      jSONReaderScanner0.isEnabled(0, 48);
      int int1 = jSONReaderScanner0.intValue();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = '!';
      String string0 = "-C";
      JSONScanner jSONScanner0 = new JSONScanner("-C", 83);
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "\"$";
      JSONScanner jSONScanner0 = new JSONScanner("\"$");
      JSONScanner jSONScanner1 = new JSONScanner("n|:m(A&fTC=>.pd'.", 0);
      char char0 = 'z';
      jSONScanner0.longValue();
      jSONScanner1.scanType("");
      jSONScanner0.stringVal();
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nuyll", 1079);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xm~E|cb'K");
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. m
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 43);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 3);
      jSONReaderScanner0.nextToken(3);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.getFeatures());
      
      int int1 = JSONLexer.END;
      jSONReaderScanner0.isEnabled(4, 532);
      JSONScanner jSONScanner0 = new JSONScanner("new", 3);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(32, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = JSONLexer.VALUE_NULL;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 5);
      jSONReaderScanner0.nextToken(5);
      jSONReaderScanner0.nextIdent();
      PipedWriter pipedWriter0 = new PipedWriter();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0XM`f{1UYC#.J=lI");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanUUID('\\');
      jSONReaderScanner0.scanDouble('\\');
      jSONReaderScanner0.nextToken(2911);
      assertEquals(2, jSONReaderScanner0.token());
      
      jSONReaderScanner0.doubleValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xm~E|cb'K", 1079);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0X$`f{1UYC#.J=lI", 21);
      jSONReaderScanner0.nextToken(4);
      assertEquals('X', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 3);
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = 'y';
      charArray0[2] = '8';
      charArray0[3] = 'Q';
      charArray0[4] = '(';
      charArray0[5] = 'I';
      charArray0[6] = 'S';
      charArray0[7] = 'P';
      charArray0[8] = 'W';
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      jSONReaderScanner1.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanUUID('I');
      jSONReaderScanner1.scanLong('7');
      int int1 = JSONLexer.END;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("new", (-1));
      // Undeclared exception!
      try { 
        jSONReaderScanner2.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NonStringKeyAsString");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z:]jE&9L6O]/cr8");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-5129), "`Ek:m%K!rz");
      simpleTimeZone0.clone();
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      jSONReaderScanner0.nextToken(104);
      jSONReaderScanner0.scanDouble('B');
      jSONReaderScanner0.info();
      jSONReaderScanner0.bytesValue();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 3);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(59);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '{');
      jSONReaderScanner0.nextToken(3);
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, 3927, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NonStringKeyAsString");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z:]jE&9L6O]/cr8");
      jSONReaderScanner0.nextToken(104);
      int int0 = JSONLexer.END;
      jSONReaderScanner0.scanString('Z');
      jSONReaderScanner0.getLocale();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = "0$`f{1UUYC#.J=lI";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0$`f{1UUYC#.J=lI");
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanUUID('j');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0$`f{1UUYC#.J=lI");
      jSONReaderScanner1.scanLong('j');
      int int0 = JSONLexer.END;
      jSONReaderScanner0.scanDouble('!');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanUUID('c');
      jSONReaderScanner0.putChar('c');
      SymbolTable symbolTable0 = new SymbolTable(1531);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'j');
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('g');
      int int0 = JSONLexer.END;
      JSONScanner jSONScanner0 = new JSONScanner("0X$`f{1UYC#.J=lI");
      jSONScanner0.bytesValue();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('c');
      jSONReaderScanner0.putChar('c');
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanLong('g');
      int int0 = JSONLexer.END;
      jSONReaderScanner0.decimalValue(true);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0$`f{1UUYC#.J=lI");
      jSONReaderScanner0.scanFloat('L');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.info();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(".,y-NGF");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDecimal('f');
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(',', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ZC'B]l:ZoDy\fi,uRo!");
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '>';
      charArray0[2] = '#';
      charArray0[3] = '{';
      charArray0[4] = 'L';
      charArray0[5] = ':';
      charArray0[6] = 'x';
      charArray0[7] = 'r';
      jSONReaderScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xm~E|cb'K", 1079);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1079);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. m
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = "\"";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      char char0 = 'c';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.scanDouble('u');
      jSONScanner0.scanFloat(')');
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanDouble('y');
      jSONScanner0.nextToken();
      jSONScanner0.isBlankInput();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("'ly02zXXPuG<rAY.'");
      jSONScanner0.skipWhitespace();
      jSONScanner0.isBlankInput();
      jSONScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-552));
      jSONScanner1.scanUUID('O');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 17, json : 'ly02zXXPuG<rAY.'
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 3);
      jSONReaderScanner0.scanDate('^');
      jSONReaderScanner0.scanDouble('^');
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 20);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0$`f{1UUYC#.J=lI");
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.info();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.ch = '#';
      jSONScanner0.scanStringArray((Collection<String>) null, '\\');
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      jSONScanner0.scanFieldInt(charArray0);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray1);
      jSONScanner0.scanDouble('v');
      jSONScanner0.isBlankInput();
      jSONScanner0.scanIdent();
      jSONScanner0.scanString('#');
      jSONScanner0.stringVal();
      jSONScanner0.isEnabled(919, 84);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("InitStringFieldAsEmpty");
      stringReader0.skip((-922337203685477597L));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.setToken(100);
      jSONReaderScanner0.nextToken(989);
      jSONReaderScanner0.putChar('!');
      jSONReaderScanner0.scanString('`');
      jSONReaderScanner0.nextIdent();
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Init\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0$`f{1UUYC#.J=lI");
      jSONReaderScanner0.scanFieldDate(charArray0);
      char char0 = '\"';
      jSONReaderScanner0.scanUUID('\"');
      int int0 = 40;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 40, 40);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.putChar('8');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isEnabled(18, 0);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0$`f{1UUYC#.J=lI");
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.info();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9loBt overflow : ");
      char char0 = '_';
      jSONScanner0.scanFloat('_');
      jSONScanner0.scanBoolean('_');
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1), 40);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+rye;");
      jSONScanner0.scanFloat('*');
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
      jSONScanner0.stringVal();
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = '[';
      charArray0[2] = '&';
      charArray0[3] = 'd';
      charArray0[4] = 'x';
      charArray0[5] = 'Y';
      charArray0[6] = '!';
      charArray0[7] = 'J';
      charArray0[8] = ']';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray1);
      char[] charArray2 = new char[4];
      charArray2[0] = '0';
      charArray2[1] = 'x';
      charArray2[2] = '&';
      charArray2[3] = '&';
      jSONReaderScanner0.scanFieldString(charArray2);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
      JSONScanner jSONScanner0 = new JSONScanner("I)5/:+ED73\"E/", (-13));
      jSONScanner0.scanBoolean('I');
      jSONScanner0.scanFloat('L');
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((char[]) null, (-1), 822);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fieldName");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[6];
      charArray1[0] = 'j';
      charArray1[1] = 's';
      charArray1[2] = '5';
      charArray1[3] = 'c';
      charArray1[4] = '?';
      charArray1[5] = '+';
      jSONReaderScanner0.scanFieldLong(charArray1);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      char[] charArray2 = new char[6];
      charArray2[0] = '?';
      charArray2[1] = 'j';
      charArray2[2] = '+';
      charArray2[3] = '+';
      charArray2[4] = 'D';
      charArray2[5] = 'c';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray2, (-2656));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false");
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanUUID('c');
      jSONReaderScanner0.putChar('(');
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanLong('a');
      Locale locale0 = Locale.UK;
      jSONReaderScanner0.locale = locale0;
      int int0 = JSONLexer.END;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((long) 84);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 'Pl", 125);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.eofPos = 125;
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.isBlankInput();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ", (-1192));
      jSONScanner0.longValue();
      jSONScanner0.ch = '';
      jSONScanner0.scanType("float overflow : ");
      jSONScanner0.stringVal();
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XZy.TS?WSCU+0X.*");
      stringReader0.skip((-838L));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      jSONReaderScanner0.putChar('6');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      int int0 = (-2060);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2060));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ", (-1192));
      StringReader stringReader0 = new StringReader("\":\"");
      stringReader0.skip(0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.stringDefaultValue();
      jSONScanner0.isEOF();
      jSONScanner0.nextIdent();
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(4, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ");
      jSONScanner0.scanBoolean('_');
      jSONScanner0.scanFloat('_');
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      jSONScanner0.scanUUID('_');
      assertEquals(6, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      StringReader stringReader0 = new StringReader("7D");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '.';
      charArray0[2] = 'I';
      charArray0[3] = 'H';
      charArray0[4] = 'f';
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanUUID('f');
      jSONReaderScanner1.putChar('z');
      jSONReaderScanner1.scanFieldLong(charArray0);
      jSONReaderScanner0.scanLong('v');
      int int0 = JSONLexer.END;
      jSONReaderScanner1.floatValue();
      assertEquals((-2), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nu~ll");
      jSONScanner0.scanDouble('u');
      jSONScanner0.scanFloat('u');
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"n");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"n");
      jSONReaderScanner0.scanDouble('@');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      jSONReaderScanner1.scanIdent();
      jSONReaderScanner0.intValue();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      int int0 = JSONLexer.END;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tod");
      int int0 = (-4249);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-4249));
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanUUID('c');
      jSONReaderScanner0.putChar('c');
      jSONReaderScanner0.scanFieldLong(charArray0);
      long long0 = jSONReaderScanner0.scanLong('g');
      assertEquals(0L, long0);
      
      int int0 = JSONLexer.END;
      jSONReaderScanner0.floatValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("type not match error", (-1192));
      char char0 = 's';
      jSONScanner0.scanBoolean('s');
      jSONScanner0.scanFloat('s');
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((long) 84);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 'Pl", 125);
      jSONReaderScanner0.scanBoolean('<');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("IgnoreNonFieldGetter");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      StringReader stringReader0 = new StringReader("7D");
      stringReader0.skip(1502845958873959152L);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(4);
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = 'X';
      charArray0[2] = 'N';
      charArray0[3] = ';';
      charArray0[4] = 'M';
      charArray0[5] = 'E';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '4';
      charArray0[2] = '*';
      charArray0[3] = '0';
      charArray0[4] = 'q';
      charArray0[5] = 'V';
      charArray0[6] = '/';
      charArray0[7] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2397);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanInt('o');
      BigDecimal bigDecimal0 = new BigDecimal((long) 'o');
      assertEquals((byte)111, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = 'S';
      charArray0[2] = 'W';
      charArray0[3] = 'r';
      charArray0[4] = 'W';
      charArray0[5] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84);
      jSONReaderScanner0.scanDouble('V');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanLong('r');
      int int0 = JSONLexer.END;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("0X$`f{1UYC#.J=lI", (-1));
      jSONScanner0.scanBoolean('G');
      jSONScanner0.stringVal();
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ", (-1158));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";jk{{|lMd{n tv", (-765));
      char[] charArray0 = new char[8];
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      charArray0[6] = 'Z';
      charArray0[7] = 'Z';
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanUUID('c');
      jSONReaderScanner0.putChar('c');
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("0X$`f{1UYC#.J=lI", (-2));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 0, info : pos 0, json : 0X$`f{1UYC#.J=lI
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f1UYC#.J=lI");
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.lexError("0X$`f1UYC#.J=lI", (Object[]) null);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      jSONReaderScanner0.scanDouble('*');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.info();
      Feature feature0 = Feature.AllowComment;
      jSONReaderScanner0.isEnabled(feature0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("4o");
      JSONScanner jSONScanner1 = new JSONScanner("&oiU/Y&ZucdS8o", 0);
      jSONScanner1.scanFieldFloatArray(charArray0);
      jSONScanner1.stringDefaultValue();
      assertEquals((-2), jSONScanner1.matchStat);
      
      jSONScanner0.scanDouble('.');
      jSONScanner0.getLocale();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = JSONLexer.VALUE_NULL;
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str");
      jSONScanner0.close();
      jSONScanner0.resetStringPosition();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ", (-1192));
      jSONScanner0.scanBoolean('_');
      jSONScanner0.stringVal();
      jSONScanner0.skipWhitespace();
      assertEquals((-1192), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner0 = new JSONScanner(", name ");
      jSONScanner0.scanDate('b');
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4o");
      jSONScanner0.close();
      jSONScanner0.resetStringPosition();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
      
      jSONScanner0.decimalValue(false);
      jSONScanner0.getLocale();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = 'H';
      charArray0[2] = 'K';
      charArray0[3] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XZy.TS?WSCU+0X.*");
      stringReader0.skip((-838L));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONScanner jSONScanner0 = new JSONScanner("6B0ez%wK,~_zVc8{Xx!", 43);
      jSONScanner0.scanNumber();
      jSONScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFloat('@');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      StringReader stringReader0 = new StringReader("7D");
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'L';
      charArray0[2] = ')';
      charArray0[3] = '?';
      charArray0[4] = '5';
      charArray0[5] = '4';
      charArray0[6] = '%';
      charArray0[7] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3721, 93);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(3721);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '5');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.integerValue();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("f");
      jSONScanner0.scanFloat('Z');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanUUID('c');
      jSONReaderScanner0.putChar('c');
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      int int0 = 115;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = 'E';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('`');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(2391, (-615));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -615
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"WVy");
      jSONScanner0.scanNumber();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      JSONScanner jSONScanner1 = new JSONScanner("\"WVy");
      jSONScanner1.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 0, json : \"WVy
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/C6P");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 3);
      jSONReaderScanner0.scanDouble('^');
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = '^';
      jSONReaderScanner0.copyTo(3, 3, charArray0);
      assertEquals(3, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanDouble('\\');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanLong('N');
      int int0 = JSONLexer.END;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tod", (-2166));
      jSONScanner0.stringDefaultValue = "tod";
      jSONScanner0.charAt('1');
      jSONScanner0.scanBoolean('{');
      jSONScanner0.stringDefaultValue();
      jSONScanner0.stringDefaultValue();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "undefined";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 512);
      jSONReaderScanner0.putChar('3');
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.ch = '3';
      jSONReaderScanner0.eofPos = 512;
      jSONReaderScanner0.indexOf('7', 867);
      System.setCurrentTimeMillis((-1));
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanDecimal('3');
      char[] charArray0 = new char[4];
      jSONReaderScanner0.setToken(867);
      jSONReaderScanner0.charAt(2016);
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      charArray0[3] = '3';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = '9';
      charArray0[2] = 'J';
      charArray0[3] = 't';
      charArray0[4] = '=';
      charArray0[5] = 'Z';
      charArray0[6] = '.';
      charArray0[7] = '2';
      charArray0[8] = 'e';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.bytesValue();
      BigDecimal bigDecimal0 = new BigDecimal((long) 3);
      int int1 = (-1);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      jSONReaderScanner0.scanUUID('c');
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("0X$`f{1UYC#.J=lI");
      jSONScanner0.skipWhitespace();
      float float0 = jSONScanner0.scanFloat('c');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONScanner0.matchStat = 114;
      jSONScanner0.scanFloat('(');
      jSONScanner0.skipWhitespace();
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '!';
      charArray0[7] = '(';
      charArray0[8] = '(';
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      SymbolTable symbolTable0 = new SymbolTable(2815);
      JSONScanner jSONScanner0 = new JSONScanner(";", 2815);
      jSONScanner0.nextToken();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".lz$i");
      jSONScanner0.stringVal();
      jSONScanner0.intValue();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONScanner0.features = 0;
      SymbolTable symbolTable0 = new SymbolTable(1463);
      String[] stringArray0 = jSONScanner0.scanFieldStringArray((char[]) null, 0, symbolTable0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"n");
      char char0 = '[';
      SymbolTable symbolTable0 = new SymbolTable(1815);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ", (-1192));
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ", (-1192));
      jSONScanner0.scanNumber();
      jSONScanner0.close();
      jSONScanner0.scanString('w');
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(2, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L");
      stringReader0.skip((-63649L));
      StringReader stringReader1 = new StringReader("qhc");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader1);
      jSONReaderScanner0.nextToken(46);
      jSONReaderScanner0.putChar('Z');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("#]", 0);
      jSONReaderScanner1.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'h';
      charArray0[2] = '0';
      charArray0[3] = 'c';
      charArray0[4] = 'A';
      charArray0[5] = ')';
      charArray0[6] = '<';
      charArray0[7] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("4o");
      jSONReaderScanner1.stringVal();
      jSONReaderScanner1.isRef();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanInt('A');
      BigDecimal bigDecimal0 = new BigDecimal((-580L));
      assertEquals((byte) (-68), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('?');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("T2aT2;'7XO`");
      jSONScanner0.isRef();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.nextToken();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('\\');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.subString(0, 0);
      jSONReaderScanner0.numberString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONScanner jSONScanner1 = new JSONScanner("f0M)", 0);
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner1.scanBoolean(',');
      float float0 = jSONScanner0.scanFloat('=');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
      stringReader0.skip(518L);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.read();
      jSONReaderScanner0.nextToken(13);
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.isEnabled(4);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u6<", 14);
      jSONReaderScanner0.isRef();
      JSONScanner.charArrayCompare("u6<", 2948, charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ", (-1192));
      jSONScanner0.scanNumber();
      jSONScanner0.stringVal();
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"n");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'R';
      charArray0[2] = 'r';
      charArray0[3] = '|';
      charArray0[4] = '+';
      charArray0[5] = 'F';
      charArray0[6] = '\\';
      charArray0[7] = '.';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 51068);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONLexerBase.isWhitespace('(');
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 1943);
      jSONScanner0.scanBoolean('(');
      char char0 = '(';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('(', '(', 'f', 'b', 'U');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(18, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("6(T%");
      jSONScanner0.scanDecimal('t');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 94);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanSymbol((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5TX$.@?", 47);
      jSONScanner0.stringVal();
      char char0 = '5';
      jSONScanner0.nextTokenWithChar('5');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONScanner jSONScanner0 = new JSONScanner("H", 1564);
      jSONScanner0.scanNumber();
      jSONScanner0.stringVal();
      jSONScanner0.scanFloat('+');
      char char0 = jSONScanner0.getCurrent();
      assertEquals(2, jSONScanner0.token());
      assertEquals('H', char0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4o");
      jSONScanner0.close();
      char char0 = '(';
      jSONScanner0.resetStringPosition();
      jSONScanner0.stringVal();
      jSONScanner0.scanFloat('(');
      jSONScanner0.matchStat();
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".lzyi");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.nextToken();
      assertEquals(25, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      StringReader stringReader0 = new StringReader("\"");
      stringReader0.skip(1242L);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(68);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      StringReader stringReader0 = new StringReader("7D");
      stringReader0.skip(1502845958873959152L);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(4);
      jSONReaderScanner0.stringDefaultValue();
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1740));
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONScanner jSONScanner0 = new JSONScanner("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789", 3);
      jSONScanner0.longValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.skipWhitespace();
      jSONScanner0.stringDefaultValue();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString('(');
      jSONScanner0.tokenName();
      jSONScanner0.scanFloat('|');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal ref, ", 0);
      jSONReaderScanner0.scanUUID('G');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("todo", 620);
      char char0 = ',';
      jSONScanner0.scanBoolean(',');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nuM';ll");
      jSONScanner0.scanString('@');
      jSONScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isRef();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("yJRi&`'o/>FT&[6(/", (-1));
      jSONScanner0.scanStringArray((Collection<String>) null, 'Z');
      jSONScanner0.close();
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'c';
      charArray0[2] = '\'';
      charArray0[3] = 'p';
      charArray0[4] = 'V';
      charArray0[5] = 'I';
      charArray0[6] = ':';
      charArray0[7] = '<';
      JSONScanner.charArrayCompare("a}uy]Y_jW[[pmc@:i:", 1713, charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.ZoneId", 1713);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.putChar('[');
      jSONReaderScanner0.nextIdent();
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 38);
      JSONScanner jSONScanner0 = new JSONScanner("invalid comment");
      jSONScanner0.nextIdent();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36);
      JSONScanner jSONScanner0 = new JSONScanner("\"i)f-");
      jSONScanner0.scanStringArray((Collection<String>) null, 'A');
      jSONScanner0.close();
      jSONScanner0.skipWhitespace();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nuM';ll");
      jSONScanner0.scanUUID('f');
      jSONScanner0.scanLong('B');
      jSONScanner0.scanStringArray((Collection<String>) null, 'G');
      jSONScanner0.close();
      jSONScanner0.skipWhitespace();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("4o");
      int int0 = 45;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]b", 45);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(1317);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '$');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'R';
      charArray0[2] = 'n';
      charArray0[3] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 161);
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '4');
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = 47;
      stringReader0.mark(47);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char char0 = 'b';
      jSONReaderScanner0.putChar('b');
      char char1 = '?';
      jSONReaderScanner0.scanFloat('?');
      SymbolTable symbolTable0 = new SymbolTable(2292);
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = 'b';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 47, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("todo", 620);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n ull");
      jSONScanner0.scanUUID('f');
      jSONScanner0.scanStringArray((Collection<String>) null, 'G');
      jSONScanner0.close();
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.putChar('f');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("htkIx");
      jSONReaderScanner0.scanFloat('5');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. h
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1720);
      jSONReaderScanner0.info();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 99999);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("aAVjQ(%wr~F-Q/8.", 0);
      jSONReaderScanner2.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 88, 99999);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'Y';
      char char0 = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'D';
      charArray0[5] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("todo", 620);
      boolean boolean0 = jSONScanner0.scanBoolean(',');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$", 3186);
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      jSONScanner0.matchField2(charArray0);
      charArray0[1] = 'n';
      charArray0[2] = 'g';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.pos();
      jSONScanner0.next();
      jSONScanner0.indexOf('v', 0);
      jSONScanner0.scanNumber();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n!Yll");
      jSONScanner0.scanString('g');
      jSONScanner0.tokenName();
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'g');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONScanner jSONScanner0 = new JSONScanner(".lzyi");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.skipWhitespace();
      String string0 = jSONScanner0.stringDefaultValue();
      assertNull(string0);
      
      int int1 = jSONScanner0.token();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, int1);
      assertEquals('.', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("3oE|pjGONfQq ", 2604);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 2604, 0);
      jSONReaderScanner2.scanType("jG-{");
      SymbolTable symbolTable0 = new SymbolTable(2793);
      // Undeclared exception!
      try { 
        jSONReaderScanner2.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4o");
      jSONScanner0.scanBoolean('a');
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o");
      jSONScanner0.scanNumber();
      float float0 = jSONScanner0.scanFloat('z');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ", (-1683));
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = 'p';
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-897));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - i, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("4o");
      jSONScanner0.scanDecimal('8');
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(2, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      stringReader0.skip(3);
      stringReader0.ready();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 3);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("DEGT=58");
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("erroF");
      jSONReaderScanner0.np = 83;
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(0, number0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = 'H';
      charArray0[2] = 'c';
      charArray0[3] = '|';
      charArray0[4] = '$';
      charArray0[5] = 'H';
      charArray0[6] = 'Z';
      charArray0[7] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'Z');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":cuS8\";}");
      jSONScanner0.isRef();
      jSONScanner0.locale = null;
      jSONScanner0.nextTokenWithColon(440);
      assertEquals('u', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">gnuli", 39);
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '\\';
      charArray0[2] = '1';
      charArray0[3] = 'X';
      charArray0[4] = 'A';
      charArray0[5] = 'j';
      charArray0[6] = 'c';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.charAt(440);
      assertEquals(39, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char char0 = 'b';
      char char1 = '$';
      char char2 = '3';
      JSONScanner.checkDate('b', 'b', 'b', '$', '3', '$', 839, 839);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("H");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanDouble('3');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      StringReader stringReader0 = new StringReader("null");
      stringReader0.skip(1L);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken((-4461));
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '&';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = ';';
      stringReader0.reset();
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.scanBoolean(';');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      SymbolTable symbolTable0 = new SymbolTable(68);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      StringReader stringReader1 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      stringReader1.skip(1502845958873959152L);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(4);
      jSONReaderScanner0.stringDefaultValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      stringReader0.skip(3);
      stringReader0.markSupported();
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'M';
      charArray0[2] = '_';
      charArray0[3] = 'U';
      charArray0[4] = '|';
      charArray0[5] = '^';
      charArray0[6] = 'U';
      charArray0[7] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 769, (-214));
      jSONReaderScanner0.nextToken(38);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      assertEquals('M', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4o");
      char char0 = 'u';
      jSONReaderScanner0.scanFloat('u');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6", 58);
      jSONScanner0.scanNumber();
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6", 2274);
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      charArray0[4] = 'L';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.putChar('L');
      jSONReaderScanner0.nextIdent();
      assertEquals(2, jSONReaderScanner0.token());
      
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(6, number0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1720);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, ' ');
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("4o");
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.info();
      BigDecimal bigDecimal0 = new BigDecimal((-2));
      jSONScanner0.getLocale();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6", 58);
      jSONScanner0.scanNumber();
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@k]=Hon0", 0);
      char char0 = 'z';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match z - @, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1720);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(69);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 483);
      jSONReaderScanner1.scanEnum(class0, symbolTable0, 'M');
      int int0 = jSONReaderScanner0.pos();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1720);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner0 = new JSONScanner("nknown", (-1));
      jSONScanner0.scanFieldDecimal(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1));
      jSONScanner0.scanUUID('b');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONScanner jSONScanner0 = new JSONScanner(".lzyi");
      jSONScanner0.close();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 58);
      jSONReaderScanner0.scanFieldLong(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = '4';
      charArray1[2] = 'd';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray1, 66);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONScanner jSONScanner0 = new JSONScanner(".lzyi");
      jSONScanner0.close();
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID(',');
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = ',';
      charArray0[6] = ',';
      charArray0[7] = ',';
      jSONScanner0.sbuf = charArray0;
      SymbolTable symbolTable0 = new SymbolTable(3);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, ',');
      float float0 = jSONScanner0.scanFloat('o');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"<oWVy");
      jSONScanner0.scanNumber();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jSONScanner0.locale = locale0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      // Undeclared exception!
      try { 
        jSONScanner0.scanUUID(',');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"<oWVy");
      jSONScanner0.setToken((-3333));
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jSONScanner0.locale = locale0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-3333), jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66, (-774));
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1040));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[9];
      charArray1[0] = '/';
      charArray1[1] = '~';
      charArray1[2] = 'z';
      charArray1[3] = 'B';
      charArray1[4] = 'D';
      charArray1[5] = 'i';
      charArray1[6] = 'f';
      charArray1[7] = '6';
      charArray1[8] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 417);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}%a@B]RM+4");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0X$`f{1UYC#.J=lI");
      jSONReaderScanner1.scanFieldLong(charArray0);
      jSONReaderScanner1.scanFieldDouble(charArray0);
      char char0 = 'E';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      char char0 = '3';
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('\u001A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match \u001A - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner0.scanDate('7');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('7');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 7 - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eRrDlkO>\"/av,Y#F");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONScanner0.scanStringArray(set0, '4');
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}%a@B]RM+4");
      JSONScanner jSONScanner0 = new JSONScanner("}%a@B]RM+4");
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanDecimal('8');
      jSONScanner0.scanUUID('N');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D", 56);
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '`';
      charArray0[2] = '/';
      charArray0[3] = 'D';
      charArray0[4] = 'i';
      charArray0[5] = 'l';
      charArray0[6] = 'C';
      charArray0[7] = 'Q';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.close();
      JSONScanner jSONScanner1 = new JSONScanner("D", 56);
      jSONScanner1.skipWhitespace();
      JSONScanner jSONScanner2 = new JSONScanner("net", 0);
      assertEquals(0, jSONScanner2.matchStat);
      
      jSONScanner2.scanUUID('0');
      assertEquals(0, jSONScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      jSONReaderScanner0.scanUUID('2');
      jSONReaderScanner0.scanString('2');
      int int0 = jSONReaderScanner0.intValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONScanner jSONScanner1 = new JSONScanner("hq)B#  #8Q");
      jSONScanner0.close();
      jSONScanner0.skipWhitespace();
      jSONScanner1.scanUUID(',');
      SymbolTable symbolTable0 = new SymbolTable(14);
      JSONScanner jSONScanner2 = new JSONScanner("null", 0);
      jSONScanner2.scanSymbolWithSeperator(symbolTable0, 'G');
      assertEquals((-1), jSONScanner2.matchStat);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken(59);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("XZy.TS?WSCU+0X.*");
      stringReader0.skip((-838L));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(9);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      assertEquals('Z', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '{';
      charArray0[2] = '-';
      charArray0[3] = '@';
      charArray0[4] = 'e';
      charArray0[5] = '%';
      int int0 = 91;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91, 69);
      int int1 = 70;
      jSONReaderScanner0.nextToken(70);
      JSONScanner jSONScanner0 = new JSONScanner("<", 0);
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanLong('&');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eRrDlkO>\"/av,Y#F");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}%a@B]RM+4");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("invalid comment");
      jSONScanner0.scanInt('T');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}%a@B]RM+4");
      jSONReaderScanner0.scanDouble('a');
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      charArray0[5] = 'a';
      charArray0[6] = 'a';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 59);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = JSONLexer.VALUE;
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'A');
      jSONReaderScanner0.nextToken(42);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      assertEquals('C', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":");
      jSONScanner0.nextIdent();
      StringReader stringReader0 = new StringReader(":");
      jSONScanner0.close();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('\\');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.subString(12, 0);
      jSONReaderScanner0.numberString();
      jSONScanner0.scanDate('\\');
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldString(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("4?cY(%nsa", 0);
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8208);
      SymbolTable symbolTable0 = new SymbolTable(67);
      char[] charArray1 = new char[7];
      charArray1[0] = '&';
      charArray1[1] = '1';
      charArray1[2] = ']';
      charArray1[3] = 'B';
      jSONReaderScanner0.skipWhitespace();
      charArray1[4] = '2';
      charArray1[5] = ':';
      charArray1[6] = '';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray1, 102, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'K');
      StringReader stringReader0 = new StringReader("N6JdLizSMLVKz");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 8192);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(77, charArray0, (-1), 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("B@Uo|}");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanUUID('m');
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.stripExtensions();
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      jSONScanner0.scanFloat('|');
      jSONScanner0.scanNumber();
      jSONScanner0.scanFloat('d');
      assertEquals(2, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2698, (-2013403795));
      jSONReaderScanner0.nextToken(16);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("net.sf.json.JSONNull");
      jSONReaderScanner1.charArrayCompare(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      assertEquals((-2013403795), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONScanner jSONScanner0 = new JSONScanner(".lzyi");
      jSONScanner0.close();
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanUUID(',');
      SymbolTable symbolTable0 = new SymbolTable(3);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, ',');
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3978);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("SkipTransientField");
      jSONReaderScanner1.nextToken();
      char char0 = '\\';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 3978);
      jSONReaderScanner2.scanDouble('#');
      jSONReaderScanner1.scanIdent();
      PipedReader pipedReader0 = new PipedReader(42);
      JSONReaderScanner jSONReaderScanner3 = null;
      try {
        jSONReaderScanner3 = new JSONReaderScanner(pipedReader0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = JSONLexer.VALUE;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1860, 46);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      jSONReaderScanner0.longValue();
      String string0 = ", pmop5rty ";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}%a@B]RM+4");
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      jSONScanner0.scanNumber();
      jSONScanner0.nextIdent();
      jSONScanner0.scanDecimal('8');
      jSONScanner0.matchField(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("net.sf.json.JSONNull");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'h';
      charArray0[2] = 'N';
      charArray0[3] = 'A';
      charArray0[4] = 'k';
      charArray0[5] = '6';
      int int0 = 43;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 43);
      jSONReaderScanner0.bytesValue();
      char[] charArray1 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      stringReader0.skip(3);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextToken(3);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      assertEquals(1, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.pos();
      jSONScanner0.matchField2(charArray0);
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16);
      char[] charArray1 = new char[6];
      charArray1[0] = '3';
      charArray1[1] = '3';
      charArray1[3] = '3';
      charArray1[4] = '3';
      charArray1[5] = '3';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 650);
      jSONReaderScanner1.nextTokenWithChar('3');
      jSONReaderScanner1.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner1.scanUUID('0');
      assertEquals(2, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]44#!X&<S.");
      StringReader stringReader1 = new StringReader("]44#!X&<S.");
      stringReader1.skip(0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader1);
      jSONReaderScanner0.nextToken((-3995));
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'h';
      charArray0[2] = 'A';
      charArray0[3] = 'u';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      assertEquals(15, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[5] = 'd';
      charArray0[6] = 'd';
      charArray0[7] = 'd';
      charArray0[8] = 'd';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.ch = '?';
      jSONReaderScanner0.scanIdent();
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanString('d');
      jSONReaderScanner0.isEOF();
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.stringVal();
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'F';
      charArray0[2] = 'i';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      StringReader stringReader0 = new StringReader("null");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanInt('m');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = JSONLexer.VALUE;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41);
      JSONScanner jSONScanner0 = new JSONScanner("_L");
      jSONScanner0.scanDecimal('\'');
      jSONScanner0.scanUUID('Z');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nul");
      jSONScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1722);
      jSONReaderScanner0.scanDate('T');
      SymbolTable symbolTable0 = new SymbolTable(102);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 1722, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString('&');
      jSONScanner0.tokenName();
      char char0 = '8';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u6<", 14);
      jSONReaderScanner0.isRef();
      JSONScanner.charArrayCompare("u6<", 2948, charArray0);
      jSONReaderScanner0.putChar('{');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.integerValue();
      assertEquals('<', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("sZ}rYi@Y{eJ(:p\"2");
      jSONScanner0.scanBoolean('8');
      jSONScanner0.scanDecimal('#');
      jSONScanner0.scanUUID('5');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanSymbol((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('.');
      JSONScanner jSONScanner1 = new JSONScanner("", 115);
      boolean boolean0 = jSONScanner1.isBlankInput();
      assertEquals(20, jSONScanner1.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.TypeReference");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONReaderScanner0.isEOF();
      int int0 = (-1681);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('', (-841));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('8');
      char[] charArray0 = new char[2];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.matchField2(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('8');
      jSONScanner0.scanUUID(':');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('9');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 9 - ,, info : pos 0, json : , json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      Class<Object> class0 = Object.class;
      jSONScanner0.scanDecimal('K');
      jSONScanner0.newCollectionByType(class0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":");
      jSONScanner0.nextIdent();
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('_');
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 4509);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('E');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match E - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("07)z9q-#|<>d}cj", 3120);
      jSONScanner0.nextToken(3120);
      int int0 = jSONScanner0.scanInt('Q');
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~ %]Z@QX:amYNHeA");
      jSONScanner0.scanString('g');
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'g';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanNumber();
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[1];
      char char0 = '6';
      charArray0[0] = '6';
      int int0 = 2759;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2759);
      char char1 = 'g';
      jSONReaderScanner0.scanLong('E');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", json : ");
      jSONReaderScanner1.isBlankInput();
      char char2 = '/';
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.stringVal();
      jSONScanner0.scanIdent();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M-^Zz`7", (-1));
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = '7';
      charArray0[2] = '$';
      charArray0[3] = 'N';
      charArray0[4] = '`';
      charArray0[5] = 'F';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1432));
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"<oWVy");
      jSONScanner0.scanFloat('.');
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('g');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      char[] charArray0 = new char[0];
      char char0 = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.stringVal();
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((char[]) null, 8192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('_');
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 4509);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      jSONScanner0.scanNullOrNew();
      jSONScanner0.scanDecimal('9');
      jSONScanner0.getTimeZone();
      assertEquals(8, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.np = 0;
      jSONReaderScanner0.matchStat = 123;
      jSONReaderScanner0.scanUUID('T');
      int int0 = JSONLexer.UNKNOWN;
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('\\');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.subString(0, 0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '$';
      charArray0[2] = ';';
      charArray0[3] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1245);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Locale.forLanguageTag("Hd-<G1j{e6 !t29e");
      jSONReaderScanner0.scanUUID('*');
      int int0 = jSONReaderScanner0.scanInt('4');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24);
      JSONScanner jSONScanner0 = new JSONScanner("treeset", 0);
      BigDecimal bigDecimal0 = new BigDecimal(24);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('E');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match E - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = "net.sf.json.JSONNull";
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      jSONScanner0.scanFloat('|');
      jSONScanner0.scanNumber();
      jSONScanner0.scanFloat('d');
      jSONScanner0.scanDecimal('8');
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.tokenName();
      jSONScanner0.stringVal();
      char[] charArray0 = new char[9];
      SymbolTable symbolTable0 = new SymbolTable(1528);
      jSONScanner0.scanFieldStringArray(charArray0, 216, symbolTable0);
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = 'g';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      charArray0[8] = '1';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanDecimal('1');
      jSONScanner0.scanIdent();
      assertEquals(23, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"<oWVy");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^,e{%+7XTvTB?fY\"&");
      jSONReaderScanner0.scanUUID('5');
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '_';
      charArray0[2] = 'v';
      charArray0[3] = '';
      charArray0[4] = 'd';
      charArray0[5] = '5';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanInt('d');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("erroF parse new", 0);
      jSONScanner0.scanNumber();
      jSONScanner0.stringDefaultValue();
      jSONScanner0.nextIdent();
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = '$';
      charArray0[2] = '2';
      charArray0[3] = 'l';
      charArray0[4] = ':';
      charArray0[5] = 'G';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.tokenName();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2847));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('u');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1704);
      StringReader stringReader0 = new StringReader("illegal state. ");
      jSONReaderScanner0.nextToken(20);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"<oWVy");
      StringReader stringReader0 = new StringReader("TreeSet");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(42);
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = 'z';
      charArray0[2] = 'B';
      charArray0[3] = '9';
      charArray0[4] = '}';
      charArray0[5] = '^';
      charArray0[6] = 'u';
      charArray0[7] = '?';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.scanDecimal('=');
      jSONScanner0.scanString('=');
      jSONScanner0.stringDefaultValue();
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      Locale locale0 = Locale.forLanguageTag("<o4:c/@)");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanLong(',');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"<oWVy");
      jSONScanner0.scanNumber();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jSONScanner0.locale = locale0;
      jSONScanner0.scanDecimal('f');
      JSONScanner jSONScanner1 = new JSONScanner("true", 1313);
      String string0 = jSONScanner1.stringDefaultValue();
      assertNull(string0);
      
      boolean boolean0 = jSONScanner1.isEnabled(99999999);
      assertTrue(boolean0);
      assertEquals(1313, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"<oWVy");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('g');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      Locale locale0 = Locale.CANADA;
      jSONScanner0.locale = locale0;
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.info();
      jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.matchStat = 123;
      JSONScanner jSONScanner0 = new JSONScanner("B");
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">gNuli+hy");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('f');
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanIdent();
      jSONScanner0.getCurrent();
      assertEquals('+', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = 'f';
      charArray0[3] = '.';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4, (-1));
      jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(4096);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '1');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = JSONLexer.VALUE;
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      stringReader0.skip(3);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(3);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      Feature feature0 = Feature.SupportNonPublicField;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner0 = new JSONScanner("Set", 0);
      jSONScanner0.scanDecimal('.');
      jSONScanner0.scanIdent();
      assertEquals(21, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      char[] charArray0 = new char[18];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"<oWVy");
      JSONScanner jSONScanner1 = new JSONScanner("\"<oWVy");
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 0, json : \"<oWVy
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      
      JSONScanner.charArrayCompare("a}uy]Y_jW[[pmc@:i:", 1713, charArray0);
      jSONReaderScanner0.putChar('8');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("erroF parse new", 0);
      jSONScanner0.scanNumber();
      jSONScanner0.stringDefaultValue();
      char[] charArray0 = new char[2];
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.matchStat();
      jSONScanner0.indexOf('O', 0);
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("erroF parse new", 0);
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanUUID('\'');
      jSONReaderScanner0.setLocale((Locale) null);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.matchStat = 123;
      jSONReaderScanner0.scanUUID('T');
      jSONReaderScanner0.scanInt('T');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("q,ZE:{8c$3jH0`F1-");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = '9';
      charArray0[2] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 709);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'h';
      charArray0[0] = 'h';
      char char1 = 'D';
      charArray0[1] = 'D';
      int int0 = 29;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 29);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-1112370656), 1510);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("erroF parse new", 0);
      jSONScanner0.scanNumber();
      int int0 = JSONLexer.UNKNOWN;
      SymbolTable symbolTable0 = new SymbolTable(36);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'y');
      jSONScanner0.scanDecimal('J');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eu6<", 58);
      jSONScanner0.scanNumber();
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      jSONScanner0.scanDecimal('L');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('8');
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.TypeReference");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('8');
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      char[] charArray0 = new char[18];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      char[] charArray1 = new char[9];
      charArray1[0] = 'L';
      charArray1[1] = '{';
      charArray1[2] = 'u';
      charArray1[3] = '\\';
      charArray1[4] = 'z';
      charArray1[5] = '8';
      charArray1[6] = '8';
      charArray1[7] = '{';
      charArray1[8] = '!';
      jSONReaderScanner0.scanFieldFloat(charArray1);
      JSONLexerBase.isWhitespace('T');
      jSONReaderScanner0.scanUUID('p');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      JSONScanner jSONScanner0 = new JSONScanner("\">$_oskSYH'Z");
      jSONScanner0.scanDecimal('t');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      jSONScanner0.scanNullOrNew();
      jSONScanner0.scanDecimal('9');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('8');
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals(20, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 39);
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals(39, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      Feature feature0 = Feature.DisableASM;
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.config(feature0, true);
      boolean boolean0 = JSONScanner.charArrayCompare("rU)5_C'`2&>ke>CFnx", 17, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 58;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      Feature feature0 = Feature.DisableASM;
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2560);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanUUID('m');
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONLexerBase.isWhitespace('(');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g%", 108);
      jSONReaderScanner0.scanUUID('!');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = '5';
      charArray0[2] = 'p';
      charArray0[3] = 'v';
      charArray0[4] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      
      JSONLexerBase.isWhitespace('N');
      jSONReaderScanner0.scanUUID('5');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2560);
      char[] charArray1 = new char[7];
      charArray1[0] = ' ';
      charArray1[1] = 'm';
      charArray1[2] = 'm';
      charArray1[3] = 'm';
      charArray1[4] = 'm';
      charArray1[5] = 'm';
      charArray1[6] = 'm';
      Locale locale0 = Locale.TAIWAN;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanFieldFloat(charArray1);
      jSONReaderScanner0.isBlankInput();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('m');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      int int1 = jSONReaderScanner0.intValue();
      assertEquals(0, int1);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192, 82);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('g');
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      char[] charArray1 = new char[4];
      charArray1[0] = '@';
      charArray1[1] = '+';
      charArray1[2] = '$';
      charArray1[3] = '*';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1626);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1704);
      JSONLexerBase.isWhitespace('h');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanUUID('K');
      SymbolTable symbolTable0 = new SymbolTable(482);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 123, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONLexerBase.isWhitespace('$');
      jSONReaderScanner0.scanUUID('t');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('\\');
      jSONReaderScanner0.scanIdent();
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.subString(0, 0);
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.scanBoolean('\\');
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2560);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 't');
      JSONLexerBase.isWhitespace('t');
      jSONReaderScanner0.scanUUID('t');
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1704);
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.token = 1704;
      jSONReaderScanner1.nextToken(109);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner1.stringDefaultValue();
      jSONReaderScanner1.close();
      assertEquals('l', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 91);
      JSONLexerBase.isWhitespace('');
      jSONReaderScanner0.scanUUID('5');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1704);
      jSONReaderScanner0.isBlankInput();
      JSONScanner jSONScanner0 = new JSONScanner("W./r!^Cr4K/");
      jSONScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanString('5');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-1), 1704);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      char char0 = 't';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextIdent();
      JSONLexerBase.isWhitespace('$');
      jSONReaderScanner0.scanUUID('t');
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b4a");
      jSONScanner0.bp = (-2151);
      // Undeclared exception!
      try { 
        jSONScanner0.scanType((String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = 'k';
      charArray0[2] = 'Q';
      charArray0[3] = ',';
      charArray0[4] = '1';
      charArray0[5] = '\'';
      charArray0[6] = 'Z';
      charArray0[7] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 587);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nXIGO56y.x9");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('N');
      jSONScanner0.isRef();
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      jSONScanner0.scanFieldStringArray(charArray0, (-28), (SymbolTable) null);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      JSONScanner jSONScanner1 = new JSONScanner("4O");
      jSONScanner0.tokenName();
      jSONScanner0.stringVal();
      jSONScanner1.scanNumber();
      char[] charArray0 = new char[3];
      char char0 = 'q';
      charArray0[1] = 'q';
      charArray0[2] = '3';
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0, (-347));
      jSONScanner2.scanType(", json : ");
      jSONScanner2.scanFieldInt(charArray0);
      JSONScanner jSONScanner3 = new JSONScanner("undefined", 70);
      jSONScanner3.scanDecimal('%');
      // Undeclared exception!
      try { 
        jSONScanner3.arrayCopy(961, charArray0, 0, (-347));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('Q');
      jSONScanner0.scanIdent();
      assertEquals(9, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'i';
      charArray0[3] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2560);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.features = 2560;
      JSONLexerBase.isWhitespace('7');
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray1);
      UUID uUID0 = jSONReaderScanner0.scanUUID('-');
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("erroF parse new");
      jSONScanner0.tokenName();
      jSONScanner0.stringVal();
      jSONScanner0.longValue();
      jSONScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(2847);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'z';
      charArray0[2] = 'Y';
      charArray0[3] = 'T';
      charArray0[4] = '7';
      charArray0[5] = ' ';
      charArray0[6] = 'o';
      charArray0[7] = '(';
      charArray0[8] = 'U';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDecimal('Y');
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      char[] charArray0 = new char[18];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONLexerBase.isWhitespace('$');
      jSONReaderScanner0.scanUUID('t');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 58;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Optional");
      JSONScanner jSONScanner1 = new JSONScanner("java.util.Optional", 87);
      jSONScanner1.scanNumber();
      int int0 = JSONLexer.UNKNOWN;
      jSONScanner0.scanDecimal('a');
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'J';
      charArray0[2] = 'a';
      charArray0[3] = 'J';
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, 327);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Optional");
      jSONScanner0.stringVal();
      jSONScanner0.scanNumber();
      int int0 = JSONLexer.VALUE;
      JSONLexerBase.isWhitespace('A');
      PipedWriter pipedWriter0 = null;
      try {
        pipedWriter0 = new PipedWriter((PipedReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('d');
      jSONScanner0.skipWhitespace();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-561));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, (-1102));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2560);
      JSONScanner jSONScanner0 = new JSONScanner("I~e|TA;]jm%", 19);
      jSONScanner0.longValue();
      jSONScanner0.nextToken(90);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanDecimal('O');
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanString('x');
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('=', 'O', '=', 'O', '=', 'T');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.scanNumber();
      jSONScanner0.scanIdent();
      jSONScanner0.scanDecimal('#');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      int int0 = 41;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2374);
      int int1 = 99999;
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : )
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      jSONScanner0.scanNumber();
      int int0 = jSONScanner0.token();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = JSONLexer.VALUE;
      StringReader stringReader0 = new StringReader("ZC'B]l:ZoDy\fi,uRo!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(42);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"/oxq)d;{b{\"7#D");
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1704);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanUUID(']');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1722);
      jSONReaderScanner0.scanDate('h');
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanLong('Y');
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1722);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Optional");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      charArray0[6] = 'K';
      charArray0[7] = 'K';
      charArray0[8] = 'K';
      jSONScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.stringVal();
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = 'O';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(117, (-1190));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1190
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("erroF parse new", 0);
      jSONScanner0.scanNumber();
      int int0 = JSONLexer.UNKNOWN;
      jSONScanner0.scanDecimal('J');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      jSONScanner0.stringVal();
      jSONScanner0.longValue();
      jSONScanner0.scanNumber();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-109));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("L`qv/dA!&<Mk~");
      jSONScanner0.tokenName();
      jSONScanner0.stringVal();
      jSONScanner0.skipWhitespace();
      jSONScanner0.np = 57;
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDecimal('W');
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals('`', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Optional");
      jSONScanner0.scanNumber();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      char[] charArray1 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray1, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      jSONScanner0.stringVal();
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.nextToken((-1145));
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanDecimal('O');
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('\\');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isEOF();
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", 120);
      jSONScanner0.scanDecimal('@');
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      Feature feature0 = Feature.SupportNonPublicField;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
      
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ");
      jSONReaderScanner0.scanUUID(')');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1704);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1704);
      JSONLexerBase.isWhitespace('h');
      jSONReaderScanner0.scanUUID(']');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'e';
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.getLocale();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.stringVal();
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDecimal('K');
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.stringVal();
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[2];
      int int0 = JSONLexer.VALUE;
      jSONScanner0.scanDecimal('9');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = "j/W";
      JSONScanner jSONScanner0 = new JSONScanner("j/W");
      jSONScanner0.isBlankInput();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 58);
      jSONScanner0.matchStat();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 2739);
      jSONScanner0.scanFieldInt(charArray0);
      char char0 = ';';
      jSONScanner0.scanDecimal(';');
      int int0 = 4;
      int int1 = (-1807);
      int int2 = 5;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('\\');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.subString(0, 0);
      jSONReaderScanner0.numberString();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.stringVal();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanNumber();
      char[] charArray1 = new char[2];
      jSONScanner0.scanFieldInt(charArray1);
      jSONScanner0.scanDecimal('9');
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('9', 'T', '9', ']', ']', 's');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isEOF();
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanDecimal('^');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      jSONScanner0.stringVal();
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDecimal('O');
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("java.time.Duration");
      jSONScanner0.scanNumber();
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner1.arrayCopy(0, charArray0, 41, 451);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'c';
      charArray0[0] = 'c';
      char char1 = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      char char2 = 'U';
      char char3 = '%';
      int int0 = 11;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[2];
      jSONScanner0.nextIdent();
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, ')');
      char[] charArray1 = jSONScanner0.sub_chars(0, 0);
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanInt(')');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 0, 0);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.close();
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '.';
      charArray0[2] = 'W';
      char char0 = 'p';
      charArray0[4] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanDate('p');
      jSONReaderScanner0.isEOF();
      int int0 = 885;
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 885);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.stringVal();
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[2];
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDecimal('9');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'l';
      charArray0[3] = 'U';
      charArray0[5] = 'b';
      charArray0[6] = 'i';
      charArray0[7] = 'V';
      charArray0[8] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 107, 107);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.getFeatures();
      SymbolTable symbolTable0 = new SymbolTable(107);
      jSONReaderScanner0.scanSymbol(symbolTable0, 'U');
      jSONReaderScanner0.scanLong('7');
      jSONReaderScanner0.scanType("'+')9LG{}KdM5w@");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isEnabled(107, 107);
      jSONReaderScanner0.putChar('b');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('U', (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isEOF();
      JSONScanner.checkDate('v', '4', '4', 'v', 'B', '4', 58, (-3208));
      JSONScanner jSONScanner0 = new JSONScanner("+1w0-%@?!ZK!");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('B', '4', 'v', 'K', 'G');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("A3/kmaNXG-a;N");
      char char0 = '.';
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONScanner0.scanStringArray(set0, '.');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('.', '.', '.', '.', '.');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DisableCircularReferenceDetect", (-1815));
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'w';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.bytesValue();
      JSONScanner jSONScanner0 = new JSONScanner("DisableCircularReferenceDetect", 0);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.close();
      assertEquals('i', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'B';
      charArray0[2] = '-';
      charArray0[3] = '\"';
      charArray0[4] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 131);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanNumber();
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.nextToken((-2));
      Feature feature0 = Feature.AutoCloseSource;
      jSONReaderScanner0.isEnabled(feature0);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = 'U';
      charArray0[2] = 'n';
      charArray0[3] = '1';
      charArray0[4] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117);
      jSONReaderScanner0.getCalendar();
      char[] charArray1 = new char[4];
      charArray1[0] = 'J';
      charArray1[1] = 'y';
      charArray1[2] = 'U';
      charArray1[3] = '`';
      jSONReaderScanner0.scanFieldString(charArray1);
      JSONScanner jSONScanner0 = new JSONScanner("Xq,ocAUBe&ja3N!/");
      jSONScanner0.bytesValue();
      jSONScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-2875));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - q, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'c';
      charArray0[2] = 'l';
      charArray0[3] = 'U';
      charArray0[4] = '8';
      charArray0[5] = 'b';
      charArray0[6] = 'i';
      charArray0[7] = 'V';
      charArray0[8] = '3';
      int int0 = 2274;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2274, 2274);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[0] = 'q';
      charArray0[1] = 'U';
      charArray0[2] = 'n';
      charArray0[3] = '1';
      charArray0[5] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - q, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.Feature", 0);
      jSONReaderScanner0.setToken(91);
      jSONReaderScanner0.isRef();
      assertEquals(91, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'e';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      assertEquals(0, jSONScanner0.getFeatures());
      
      int int0 = jSONReaderScanner0.scanInt('>');
      assertEquals(91, jSONReaderScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isEnabled((-892));
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '=';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 10, 2274);
      char[] charArray1 = new char[5];
      charArray1[0] = 'O';
      charArray1[1] = '3';
      charArray1[2] = '=';
      charArray1[3] = 'V';
      charArray1[4] = 'i';
      jSONReaderScanner1.scanFieldUUID(charArray1);
      jSONReaderScanner1.getFeatures();
      assertEquals((-2), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.scanLong('3');
      jSONReaderScanner1.scanType("null");
      jSONReaderScanner1.isBlankInput();
      jSONReaderScanner0.isEnabled((-892), 2274);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      int int0 = 11;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("Set", objectArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = '!';
      charArray1[1] = '9';
      charArray1[3] = 'l';
      charArray1[4] = '%';
      charArray1[5] = 'U';
      charArray1[6] = 'C';
      charArray1[7] = '%';
      charArray1[8] = 'p';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, (-1435));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isEnabled((-892));
      char[] charArray0 = new char[8];
      charArray0[1] = '=';
      charArray0[2] = '2';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      jSONReaderScanner0.lexError("", objectArray0);
      charArray0[3] = '%';
      charArray0[4] = '/';
      charArray0[5] = 'J';
      charArray0[6] = '9';
      charArray0[7] = '?';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(0, charArray0, 0, (-957));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DisableCircularReferenceDetect", (-1815));
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'w';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.bytesValue();
      JSONScanner jSONScanner0 = new JSONScanner("DisableCircularReferenceDetect", 0);
      jSONScanner0.scanDecimal('K');
      jSONScanner0.scanISO8601DateIfMatch(false);
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(0, (-1815));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = 'd';
      int int0 = 102;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 131, 102);
      jSONReaderScanner0.next();
      jSONReaderScanner0.isRef();
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.nextToken(0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONScanner0.bytesValue();
      jSONScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 131);
      jSONReaderScanner0.next();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanNumber();
      String string0 = "I90";
      JSONScanner jSONScanner0 = new JSONScanner("I90");
      jSONScanner0.scanFieldBigInteger(charArray0);
      int int0 = (-429);
      jSONScanner0.nextToken((-429));
      jSONScanner0.scanFieldString(charArray0);
      char[] charArray1 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("z0VjWH8*<)__@%H`_V", 101);
      jSONScanner0.stringVal();
      int int0 = 102;
      jSONScanner0.isEnabled(101, 102);
      char char0 = 'c';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('c', 'c', 'c');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'h';
      charArray0[0] = 'h';
      int int0 = 1722;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1722);
      jSONReaderScanner0.scanDate('h');
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1722);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isEnabled((-892));
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '=';
      charArray0[2] = '2';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      jSONReaderScanner0.lexError("", objectArray0);
      charArray0[3] = '%';
      charArray0[4] = '/';
      charArray0[5] = 'J';
      charArray0[6] = '9';
      charArray0[7] = '?';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(0, charArray0, 0, (-957));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`Td", 0);
      jSONScanner0.token = 2682;
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = 'n';
      charArray0[2] = 'e';
      charArray0[3] = '@';
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a_<G|R*`ok$W\"Z0");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.isEOF();
      Locale locale0 = Locale.PRC;
      jSONReaderScanner0.locale = locale0;
      jSONReaderScanner0.indexOf('O', 0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 2484);
      jSONScanner0.bytesValue();
      jSONScanner0.scanISO8601DateIfMatch(true);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = 'U';
      charArray0[2] = 'n';
      charArray0[3] = '1';
      charArray0[4] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117);
      jSONReaderScanner0.getCalendar();
      Feature feature0 = Feature.SupportArrayToBean;
      jSONReaderScanner0.isEnabled(feature0);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("j/W");
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. j
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.subString(0, 0);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DisableCircularReferenceDetect", (-1815));
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'w';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.bytesValue();
      JSONScanner jSONScanner0 = new JSONScanner("DisableCircularReferenceDetect", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(0, (-1815));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Bc5t?V#LIKR.6O<n$.");
      int int0 = 0;
      jSONScanner0.token = 0;
      jSONScanner0.setToken(0);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'U';
      charArray0[4] = '8';
      charArray0[5] = 'b';
      charArray0[6] = 'i';
      charArray0[7] = 'V';
      charArray0[8] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2274, 2274);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.getFeatures();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('7');
      jSONReaderScanner0.scanType("'+')9LG{}KdM5w@");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isEnabled(2274, 2274);
      assertEquals(2274, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'B';
      charArray0[2] = '-';
      charArray0[3] = '\"';
      charArray0[4] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 131);
      jSONReaderScanner0.next();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanNumber();
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.nextToken(0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONScanner0.bytesValue();
      jSONScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(574);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }
}
