/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:17:20 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SingleIndex;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("e?5F\"J$981");
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getHandler();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "e?5F\"J$981";
      stringArray0[1] = "e?5F\"J$981";
      stringArray0[2] = "e?5F\"J$981";
      stringArray0[3] = "-not-numeric-atts";
      stringArray0[4] = "e?5F\"J$981";
      stringArray0[5] = "e?5F\"J$981";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.setFilename("Ue*,{/Ko)P ");
      findWithCapabilities0.getOptions();
      assertEquals("Ue*,{/Ko)P ", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      String[] stringArray0 = new String[6];
      findWithCapabilities0.getOptions();
      stringArray0[1] = "C)1B,]SV+x<z9ldRK=@";
      stringArray0[2] = "[";
      stringArray0[3] = "WmcvTn(R#>";
      stringArray0[4] = "-date-class";
      stringArray0[5] = "z3-<";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("C)1B,]SV+x<z9ldRK=@");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getCapabilities();
      assertEquals("C)1B,]SV+x<z9ldRK=@", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*^a7;<K2nkJ:'xn";
      stringArray0[1] = "Vem";
      stringArray0[2] = "generic";
      stringArray0[3] = "-seed <num>";
      stringArray0[4] = "b6h'befLd3J5Ly:*2";
      stringArray0[5] = "-c";
      stringArray0[6] = "4=Tc5owrz-I(y*P~";
      stringArray0[7] = ">^F j";
      stringArray0[8] = "x";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "+5SVi Amciqb}q&&c%";
      stringArray0[1] = "+5SVi Amciqb}q&&c%";
      stringArray0[2] = "-not-relational-class";
      String string0 = "(rW)m";
      stringArray0[3] = "";
      stringArray0[4] = "3";
      stringArray0[5] = "ecKpO+:6uD|h5<+0[j";
      stringArray0[6] = "";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-19);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      capabilities0.disableAllClassDependencies();
      String string0 = TechnicalInformationHandlerJavadoc.BIBTEX_STARTTAG;
      findWithCapabilities0.setCapabilities(capabilities0);
      SingleIndex singleIndex0 = new SingleIndex();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Misses = vector0;
      Vector<String> vector1 = findWithCapabilities0.find();
      findWithCapabilities0.m_Packages = vector1;
      vector1.trimToSize();
      findWithCapabilities0.enableNot(capabilities_Capability2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8034");
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setClassIndex("[Qa$){1cSNV!lG{uYW");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "last";
      stringArray0[1] = "second";
      stringArray0[2] = "e?5F\"J$981";
      stringArray0[3] = "-not-relational-atts";
      stringArray0[4] = "q7am>nH'^1;$xCG{8xe";
      stringArray0[5] = "last";
      stringArray0[6] = "\tThe dataset to base the capabilities on.\n\tThe other parameters can be used to override the ones\n\tdetermined from the handler.\n\tEither '-t' or '-W' can be used.";
      findWithCapabilities0.m_Filename = "q7am>nH'^1;$xCG{8xe";
      stringArray0[7] = "&yt";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      capabilities0.disableAllAttributes();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l");
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setCapabilities(capabilities0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Misses = vector0;
      Vector<String> vector1 = findWithCapabilities0.find();
      findWithCapabilities0.m_Packages = vector1;
      vector1.trimToSize();
      vector1.add((String) null);
      findWithCapabilities0.enableNot(capabilities_Capability2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8034");
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setClassIndex("[Qa$){1cSNV!lG{uYW");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      Enumeration enumeration0 = findWithCapabilities0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?V#LIKR.6O<n");
      SingleIndex singleIndex0 = new SingleIndex("?V#LIKR.6O<n");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("u,#Bv{");
      findWithCapabilities0.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.enable(capabilities_Capability0);
      String string0 = OptionHandlerJavadoc.OPTIONS_STARTTAG;
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T9pa&@:{X<HW");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setClassIndex("T9pa&@:{X<HW");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      findWithCapabilities0.m_NotCapabilities = capabilities1;
      testInstances1.setClassType(1496);
      findWithCapabilities0.setFilename("-not-date-atts");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      testInstances1.m_NumNominalValues = 2751;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("E7XJ-*\"hh^%v,@{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.getHandler();
      assertEquals("-not-date-atts", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      String string0 = TechnicalInformationHandlerJavadoc.BIBTEX_STARTTAG;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      SingleIndex singleIndex0 = new SingleIndex(" skipping...");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities2.enable(capabilities_Capability3);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("!");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.find();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      SingleIndex singleIndex0 = new SingleIndex("");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      Random.setNextRandom(2200);
      Enumeration enumeration0 = findWithCapabilities0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String string0 = "-1";
      findWithCapabilities0.setClassIndex("-1");
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("\tMust handle multi-instance data.", vector0, protectedProperties0);
      try { 
        capabilities0.testWithFail(attribute0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.core.FindWithCapabilities: Cannot handle multi-valued nominal class!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      capabilities0.disableAllAttributes();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l");
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.getFilename();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      SingleIndex singleIndex0 = new SingleIndex("I!'");
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      SingleIndex.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?V#LIKR.6O<n");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("?V#LIKR.6O<n");
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.disableAllClassDependencies();
      String string0 = TechnicalInformationHandlerJavadoc.BIBTEX_STARTTAG;
      findWithCapabilities0.setCapabilities(capabilities0);
      SingleIndex singleIndex0 = new SingleIndex();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "w*%[pi^Ch@@~J&iF";
      stringArray0[1] = "Ysg8fv,uoj![_lm";
      stringArray0[2] = "All class and attribute options can be prefixed with 'not',\ne.g., '-not-numeric-class'. This makes sure that the returned\nschemes 'cannot' handle numeric classes.";
      stringArray0[3] = "!";
      boolean boolean0 = ClassCache.VERBOSE;
      stringArray0[4] = "}";
      stringArray0[5] = "-date-atts";
      stringArray0[6] = "D%k)";
      stringArray0[7] = "-not-unary-atts";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Attribute attribute0 = new Attribute("All class and attribute options can be prefixed with 'not',\ne.g., '-not-numeric-class'. This makes sure that the returned\nschemes 'cannot' handle numeric classes.");
      capabilities0.test(attribute0);
      findWithCapabilities0.getRevision();
      capabilities0.createMessage("!");
      Random.setNextRandom((-1));
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Superclass = "";
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      assertNotSame(capabilities_Capability0, capabilities_Capability1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_Filename = "-not-numeric-atts";
      findWithCapabilities0.find();
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.listOptions();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Attribute attribute0 = new Attribute((String) null);
      try { 
        capabilities0.testWithFail(attribute0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.core.FindWithCapabilities: Cannot handle numeric attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.enable(capabilities_Capability0);
      String string0 = OptionHandlerJavadoc.OPTIONS_STARTTAG;
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Upper limit has not been specified";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-W");
      Range range0 = new Range("Upper limit has not been specified");
      SingleIndex singleIndex0 = new SingleIndex("T9pa&@:{X<HW");
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-W";
      stringArray0[1] = "Upper limit has not been specified";
      stringArray0[2] = "/versions.txt";
      stringArray0[3] = "Upper limit has not been specified";
      FindWithCapabilities.main(stringArray0);
      Random.setNextRandom(87);
      MockThrowable mockThrowable0 = new MockThrowable("-W");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      MockException mockException0 = new MockException("/versions.txt", mockThrowable0);
      MockException mockException1 = new MockException(mockException0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("x*Kq`-A");
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      StringReader stringReader0 = new StringReader("8034");
      stringReader0.markSupported();
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[8034], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale.getISOLanguages();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      SingleIndex singleIndex1 = new SingleIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      SingleIndex singleIndex2 = findWithCapabilities1.m_ClassIndex;
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String string0 = findWithCapabilities2.m_Superclass;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities2.enable(capabilities_Capability0);
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities4.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "?t";
      stringArray0[1] = "Cl";
      stringArray0[2] = "-1";
      stringArray0[3] = "t\u0006bt/QRcB8T)&'";
      stringArray0[4] = "x.GGiexCSC";
      stringArray0[5] = "-not-date-atts";
      stringArray0[6] = "";
      stringArray0[7] = "AFs0O~~M";
      stringArray0[8] = "\"";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "Rel";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      SingleIndex singleIndex0 = new SingleIndex("{7nDvEg+XcwP~*;i=/W");
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom((-1843980922));
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.listOptions();
      Vector<String> vector1 = findWithCapabilities2.getMatches();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Fpv(S";
      stringArray0[1] = "";
      stringArray0[2] = "]x35C6OS";
      stringArray0[3] = "-binary-class";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      Vector<String> vector2 = findWithCapabilities1.getMisses();
      assertNotSame(vector2, vector0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      Random.setNextRandom((-1843980922));
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.enable(capabilities_Capability1);
      Vector<String> vector3 = findWithCapabilities2.find();
      assertTrue(vector3.equals((Object)vector1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QMQ28P6[3R[ym";
      stringArray0[1] = "L$Ql:u*E0kOJYumY";
      stringArray0[2] = "L$Ql:u*E0kOJYumY";
      stringArray0[3] = "-numeric-atts";
      stringArray0[4] = "dTjm=UtmZR4;2";
      stringArray0[5] = "string-class";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      String string0 = OptionHandlerJavadoc.OPTIONS_STARTTAG;
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      System.setCurrentTimeMillis((-3482L));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("}FQ8*T!df_jkW J");
      findWithCapabilities0.m_Misses = vector0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}FQ8*T!df_jkW J");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("%JZyL=V7N MA`,%D3F>");
      vector0.add("Er4sp^l\"9L2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      System.setCurrentTimeMillis((-3482L));
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.disable(capabilities_Capability2);
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertEquals("%JZyL=V7N MA`,%D3F>", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.disableAllClassDependencies();
      String string0 = OptionHandlerJavadoc.OPTIONS_STARTTAG;
      findWithCapabilities0.setCapabilities(capabilities0);
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      TestInstances.listToArray("weka/core/Capabilities.props");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.disableNot(capabilities_Capability1);
      findWithCapabilities2.disableNot(capabilities_Capability1);
      findWithCapabilities0.getMisses();
      SingleIndex.main((String[]) null);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "<!-- globalinfo-start -->";
      stringArray0[3] = "";
      stringArray0[4] = "-not-nominal-atts";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getMatches();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      SingleIndex singleIndex0 = new SingleIndex("\tMust handle binary classes.");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.enable(capabilities_Capability0);
      String string0 = TechnicalInformationHandlerJavadoc.PLAINTEXT_STARTTAG;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.listOptions();
      System.setCurrentTimeMillis(0);
      findWithCapabilities0.getMisses();
      SingleIndex.main((String[]) null);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      boolean boolean0 = capabilities0.m_MissingValuesTest;
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.find();
      SingleIndex.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities3.m_Packages;
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities0.find();
      SingleIndex.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-nominal-class");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "\nDo you wish to proceed [y/n]?";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      stringArray0[5] = "-nominal-class";
      stringArray0[6] = "8034";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      String string0 = TechnicalInformationHandlerJavadoc.BIBTEX_STARTTAG;
      findWithCapabilities0.setCapabilities(capabilities0);
      SingleIndex singleIndex0 = new SingleIndex("I!'");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      String[] stringArray2 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      String string1 = TechnicalInformationHandlerJavadoc.BIBTEX_STARTTAG;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities.main((String[]) null);
      String string2 = GlobalInfoJavadoc.GLOBALINFO_STARTTAG;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      SingleIndex.main(stringArray1);
      try { 
        findWithCapabilities0.setOptions(stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities2.getCapabilities();
      findWithCapabilities2.getRevision();
      findWithCapabilities2.find();
      SingleIndex singleIndex0 = findWithCapabilities2.m_ClassIndex;
      capabilities0.disableAllAttributeDependencies();
      findWithCapabilities1.getOptions();
      String string0 = findWithCapabilities1.m_Superclass;
      capabilities0.toString();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.enable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SingleIndex singleIndex0 = new SingleIndex();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "t` L&C_+$zo@3";
      stringArray0[1] = "-missing-class-values";
      stringArray0[2] = "`GDC6q`";
      stringArray0[3] = "-missing-class-values";
      stringArray0[4] = "-missing-class-values";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.listOptions();
      findWithCapabilities1.getMisses();
      SingleIndex.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.enable(capabilities_Capability0);
      String string0 = OptionHandlerJavadoc.OPTIONS_STARTTAG;
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.setClassIndex(">Q'#zL40~JcV4iI");
      assertNotSame(findWithCapabilities1, findWithCapabilities0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.find();
      findWithCapabilities0.m_ClassIndex = null;
      SingleIndex.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getClassIndex();
      findWithCapabilities1.getRevision();
      findWithCapabilities1.getRevision();
      findWithCapabilities1.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.disable(capabilities_Capability1);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setFilename(",");
      findWithCapabilities1.getRevision();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      SingleIndex singleIndex0 = new SingleIndex((String) null);
      findWithCapabilities1.getRevision();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[1];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.listOptions();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities2.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = TechnicalInformationHandlerJavadoc.BIBTEX_STARTTAG;
      findWithCapabilities2.getNotCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities1.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "+5SVi Amciqb}q&&c%";
      stringArray0[1] = "+5SVi Amciqb}q&&c%";
      stringArray0[2] = "-not-relational-class";
      stringArray0[3] = "-not-relational-class";
      stringArray0[4] = "3";
      stringArray0[5] = "ecKpO+:6uD|h5<+0[j";
      stringArray0[6] = "";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "#isgiq4bt";
      findWithCapabilities0.m_Filename = "N&";
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.setClassIndex("N&");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setOptions(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      assertEquals("N&", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "#isgiq4bt";
      Vector<String> vector0 = findWithCapabilities0.find();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.setClassIndex("Usage: weka.core.WekaPackageManager [-offline] [option]");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      assertTrue(vector1.equals((Object)vector0));
      assertNotSame(vector1, vector0);
      
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.m_Superclass = "#isgiqbt";
      findWithCapabilities0.find();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis((-746L));
      findWithCapabilities0.setClassIndex("uo9swzB1De<0-u.");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMisses();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMisses();
      FindWithCapabilities.main(stringArray0);
      Random.setNextRandom(111);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }
}
