/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 23:37:46 GMT 2019
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      httpUrl_Builder0.username("\n not found: size=");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("\n not found: size=", httpUrl1.username());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("file:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: file:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('9');
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("(\"}|)d[,=L9Kd1n", 1, 64);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("~&CjN@+8aF%^Ad-b=", 1454, 670, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :/
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        HttpUrl.getChecked("TZzRj9P`\"th{");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for TZzRj9P`\"th{
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Z8,C|}3^>nei1bcSl8X");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Z8,C|}3^>nei1bcSl8X
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/.%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/.j>_.d=ypcd4tke'm!/\"g7;.wf0[e\"st");
      HttpUrl httpUrl1 = httpUrl0.resolve("ggYS]Se+3my");
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/.j%3E_.d=ypcd4tke'm!/ggYS]Se+3my", httpUrl1.toString());
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/.j%3E_.d=ypcd4tke'm!/%22g7;.wf0[e%22st", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("[file:/");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(65535);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setPathSegment(0, "file:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http://some/fake/but/wellformed/okio.gzipsource");
      URI uRI0 = httpUrl0.uri();
      assertEquals("http://some/fake/but/wellformed/okio.gzipsource", uRI0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/foo.bar?#");
      assertEquals("https://foo.bar/?#", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      boolean boolean0 = httpUrl0.isHttps();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/foo.bar?#");
      assertEquals("https://foo.bar/?#", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.resolve(uRI0, "B#3RWdVn(0IBHh");
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      String string0 = httpUrl0.encodedFragment();
      assertEquals("http://foo.barb/#3RWdVn(0IBHh", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("3RWdVn(0IBHh", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("F^hQ&", 3, 3, (String) null, true, false, false, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("");
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterValues((String) null);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-1943));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameter("");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("size < ", 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded((String) null, 68, 68);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("", 1868, 1868);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, (String) null, 9, (-1), false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "endIndex < beginIndex", 0, 0, false);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "", 908, 908, false);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8(":");
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "x!J7@\"]V'O#<if:ULi", (-1789), 65536, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("M*T9CXQZj45*aI!", (-1341), (-1341), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("", 0, 0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString(stringBuilder0, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("maxBufferSize <d1: ");
      StringBuilder stringBuilder0 = new StringBuilder("1v0PzX_D'%l.)7U");
      HttpUrl.pathSegmentsToString(stringBuilder0, list0);
      assertEquals("1v0PzX_D'%l.)7U/maxBufferSize <d1: /null", stringBuilder0.toString());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("!Pd~L]czMTI{9jx");
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      HttpUrl.pathSegmentsToString(stringBuilder0, list1);
      assertTrue(list0.contains("!Pd~L]czMTI{9jx"));
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/.j>_.d=ypcd4tke'm!/\"g7;.wf0[e\"st");
      List<String> list0 = httpUrl0.queryParameterValues("?#");
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/.j%3E_.d=ypcd4tke'm!/%22g7;.wf0[e%22st", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("|Y,|%`sU>UxB'b&]yqY", "|Y,|%`sU>UxB'b&]yqY", 0, "5%ll5Lj#'[v", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 2386, ")", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, "https:ftp.somefakebutwellformedurl.org/fooexample", (String) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals(443, httpUrl0.port());
      assertNotNull(httpUrl0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://ftp.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URI uRI0 = MockURI.create("okio.RealBufferedSink");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.equals((Object) null);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit(' ');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, (String) null, 243, 0, "YA\"A]>_E", false, true, false, true);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, (String) null, (-1675), (-680), " > ", false, true, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "", 2048, 2048, "", true, true, true, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.canonicalize((Buffer) null, "h", 2010, 2010, "h", false, false, true, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-1591));
      HttpUrl.canonicalize(buffer0, "u},2gg'TOj-q0", (-1591), (-1591), "u},2gg'TOj-q0", false, true, false, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, (String) null, true, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = HttpUrl.canonicalize(")YJ\"YfT7n[<dNbN", "", false, false, false, false);
      assertEquals(")YJ\"YfT7n[<dNbN", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("", " \"#<>^`{|}", false, false, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("!u;", 16, 16, "", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("data == null", 1613, 0, "http", true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("I$nB1aNBX@3+C)c3((", 0, (-178), (String) null, true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("0", (-1), (-1), "encodedName == null", true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("source == this", (-1), 1868);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((Buffer) null, "6^qH*(D~VSKeD> X", 880, 1724, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, (String) null, 11, 48, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, 128, 128, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/ftp.somefakebutwellformedurl.org/fooexample");
      // Undeclared exception!
      try { 
        httpUrl0.newBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.defaultPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, "%5e%7d0%60in%2fjx%3fnvep%5ewca", (-1), 1868, "1LA", true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, ".", 0, 128, (String) null, true, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("", 14, 14, "3OOpY?<Wq<", true, true, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, 48, 48, "EMb*@wZ8GT2Z(O", true, false, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-3778), " #%/:?@[]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNotNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:mz+jo0\n^5");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:mz+jo0
         // ^5
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("SUCCESS");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("http://foo.bar/...");
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/...", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("Ph:N;^[:q\"0");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertNull(httpUrl_Builder0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedFragment();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/.j>_.d=ypcd4tke'm!/\"g7;.wf0[e\"st");
      httpUrl0.encodedQuery();
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/.j%3E_.d=ypcd4tke'm!/%22g7;.wf0[e%22st", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/.j>_.d=ypcd4tke'm!/\"g7;.wf0[e\"st");
      List<String> list0 = httpUrl0.encodedPathSegments();
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("https");
      assertEquals(443, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("http");
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URL uRL0 = MockURL.URL("https:/some/fake/but/wellformed/url");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedPassword();
      assertEquals(4, httpUrl0.pathSize());
      assertEquals("https://some/fake/but/wellformed/url", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      String string0 = httpUrl0.encodedUsername();
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/foo.bar");
      assertNotNull(httpUrl0);
      
      httpUrl0.url();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.toString();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("I$nB1aNBX@3+C)c3((");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("\n");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("/.%2e", "?");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("\u2026]");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("HmacSHA1", "\u2026]");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("d`0");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("L!g%EY4O#,#!", ".{");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("GS=D", "size=%s offset=%s byteCount=%s");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("size < ", 0, 17);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("]HN\"mzX=1J243c0wjC", 63, (-2175));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("vUXX?k|4$XMa+o)GU");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("%2{L", false);
      assertEquals("%2{L", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("size=%s offset=%s byteCount=%s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: size=%s offset=%s byteCount=%s
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("t^%", false);
      assertEquals("t^%", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("lX+N$gwa|ai.`", true);
      assertEquals("lX N$gwa|ai.`", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::/
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[https:mz+jo0\n^5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [https:mz+jo0
         // ^5
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        HttpUrl.getChecked("PR.PAJ[{r0U.zN");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for PR.PAJ[{r0U.zN
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        HttpUrl.getChecked("UTF-32BE");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for UTF-32BE
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        HttpUrl.getChecked("id8d+vrat%3ev");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for id8d+vrat%3ev
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        HttpUrl.getChecked("aP3$LT2<VUgW)mNz'");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for aP3$LT2<VUgW)mNz'
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        HttpUrl.getChecked("A?&.W-Tw%#t+^.Hp8");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for A?&.W-Tw%#t+^.Hp8
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("z01mF");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("|r");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("sNStf-h5{0}X>=");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("..");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e%2e");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e.");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve(".");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl.parse("https:mz+jo0\n^5");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("&]3cV?");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      httpUrl_Builder0.username("\n not found: size=");
      httpUrl_Builder0.toString();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("..");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("SUCCESS", "SUCCESS");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("");
      httpUrl_Builder1.setQueryParameter("\n", "_}vl7");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setEncodedQueryParameter("", "[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("R;Py", "R;Py");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("R;Py");
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("\"u*[");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("ZRo@ed8C1@KLC2HS", "g[!INFzuZ`=xx");
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("U':,j<yImu`A}\"w,}", "'f~jX`,");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("U':,j<yImu`A}\"w,}", (String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, "okhttp3.RequestBody$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("9Q+WYrgZ\"C/S?e?", (String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, "z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      httpUrl_Builder0.encodedQuery(">Fosw_/5E/OL}N](");
      String string0 = httpUrl_Builder0.toString();
      assertEquals("http://foo.bar/?%3EFosw_/5E/OL}N](", string0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("&]3cV?");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/http:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath(".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(36, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedPathSegment(0, "3,)Gyq(q4O");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("3,)Gyq(q4O");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(2784, "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(1661, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(14, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      httpUrl_Builder0.addPathSegments("httpp:");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(16711680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 16711680
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      httpUrl_Builder0.port(3574);
      String string0 = httpUrl_Builder0.toString();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar:3574/", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("sipFI`Me&1");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("sipFI`Me&1");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("https");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("http");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("isrk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: isrk
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("$rj#IavxW2,T-S#X");
      assertNotNull(httpUrl1);
      
      boolean boolean0 = httpUrl0.equals(httpUrl1);
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://foo.bar/$rj#IavxW2,T-S#X", httpUrl1.toString());
      assertFalse(boolean0);
      assertEquals("IavxW2,T-S#X", httpUrl1.fragment());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.equals(httpUrl0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertTrue(boolean0);
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      Object object0 = new Object();
      httpUrl0.equals(object0);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https::mz+jo0\n^5");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for https::mz+jo0
         // ^5
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        HttpUrl.getChecked("httGp:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for httGp:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("https:");
      assertNull(httpUrl1);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("?#");
      assertNotNull(httpUrl1);
      
      httpUrl1.encodedFragment();
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample?#", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http://some/fake/but/wellformed/url");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.resolve(uRI0, "?#");
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.resolve(uRI0, "?#");
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 92, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve(" \"':;<=>@[]^`{}|/?#&!$(),~");
      httpUrl1.queryParameterValues("::5IL5otqK>i");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/%22':;%3C=%3E@[]%5E%60%7B%7D%7C/?#&!$(),~", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/ftp.somefakebutwellformedurl.org/fooexample");
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://ftp.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.resolve(uRI0, "?#");
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      assertEquals("http://foo.bar/?#", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameter((String) null);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.resolve(uRI0, "?#");
      URL uRL0 = MockURI.toURL(uRI1);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.querySize();
      assertEquals(80, httpUrl0.port());
      assertEquals(1, int0);
      assertEquals("http://foo.bar/?#", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.querySize();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/ftp.somefakebutwellformedurl.org/fooexample");
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://ftp.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve(" \"<>^`{}|/?#");
      assertNotNull(httpUrl1);
      
      httpUrl1.query();
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://foo.bar/%22%3C%3E%5E%60%7B%7D%7C/?#", httpUrl1.toString());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues(" \"'<>#&=");
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("G7?=");
      assertEquals(80, httpUrl1.port());
      assertNotNull(httpUrl1);
      assertEquals("http://www.somefakebutwellformedurl.org/G7?=", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("?#");
      assertNotNull(httpUrl1);
      
      String string0 = httpUrl1.encodedQuery();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("#", string0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample?#", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.resolve(uRI0, "?#");
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameter("6Bj");
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("http://foo.bar/?#", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.port();
      assertEquals(80, int0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.host();
      assertEquals("foo.bar", string0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.username();
      assertEquals("", string0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.pathSize();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      URL uRL0 = MockURL.URL("https:/some/fake/but/wellformed/url");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.password();
      assertEquals("https://some/fake/but/wellformed/url", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.scheme();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedPath();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("/", string0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/foo.bar");
      List<String> list0 = httpUrl0.pathSegments();
      assertEquals(443, httpUrl0.port());
      assertEquals(1, list0.size());
      assertEquals("https://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/foo.bar");
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.isHttps();
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertTrue(boolean0);
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.fragment();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.redact();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("http://foo.bar/...", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:}/");
      // Undeclared exception!
      try { 
        httpUrl0.uri();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in authority at index 7: http://}/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }
}
