/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:15:47 GMT 2018
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.InputStream;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.Class2HTML;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Class2HTML_ESTest extends Class2HTML_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = Class2HTML.toHTML("&nbsp;</TT>\n<UL><I><A HREF\"#cp");
      assertEquals("&nbsp;&lt;/TT&gt;\\n&lt;UL&gt;&lt;I&gt;&lt;A HREF\"#cp", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pL.7-]nun\"m>6(HD8$";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "HLagyY/8X%vcA";
      stringArray0[1] = "q/5~,'+S4>9;Z)m&";
      stringArray0[2] = "q/5~,'+S4>9;Z)m&";
      stringArray0[3] = "-zip";
      stringArray0[4] = ")L\"0";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // )L\"0 (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-zRip";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-d";
      stringArray0[1] = "-d";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/1_bcel/-d");
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      stringArray0[0] = "-d";
      stringArray0[1] = "-d";
      Class2HTML.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-d";
      stringArray0[1] = "-d";
      stringArray0[2] = "-d";
      stringArray0[3] = "GM{dST7cL]V$FP(/";
      stringArray0[4] = "-d";
      stringArray0[5] = "-d";
      stringArray0[6] = "-d";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(1057, javaClass0.getModifiers());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(javaClass0);
      
      javaClass0.setClassName("[N$_Ax$");
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("[N$_Ax$", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(1057, javaClass0.getModifiers());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "java.io.ObjectStreamClass$ClassDataSlot");
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("[N$_Ax$", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(1057, javaClass0.getModifiers());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isClass());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertNotNull(class2HTML0);
  }
}
