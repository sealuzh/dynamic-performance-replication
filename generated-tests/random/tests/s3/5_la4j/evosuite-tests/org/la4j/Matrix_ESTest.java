/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 11:15:46 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(48, 48);
      columnMajorSparseMatrix0.swapColumns(48, 48);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      columnMajorSparseMatrix0.mkString(numberFormat0);
      columnMajorSparseMatrix0.manhattanNorm();
      columnMajorSparseMatrix0.manhattanNorm();
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(2304.0);
      assertNotSame(matrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2980.141398626724;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 2980.141398626724;
      doubleArray2[1] = 2980.141398626724;
      doubleArray2[2] = 2980.141398626724;
      doubleArray2[3] = 2980.141398626724;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 2980.141398626724;
      doubleArray3[1] = 2980.141398626724;
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 4;
      rowMajorSparseMatrix0.swapRows(4, 4);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 3);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(3);
      columnMajorSparseMatrix0.removeFirstColumn();
      Vector vector0 = Vector.unit(3);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertColumn((-177), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 1;
      SparseVector sparseVector0 = SparseVector.zero(1);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int1 = 505;
      int int2 = (-1276);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) null, 505, (-1276), (-1982292597), (-1181), 505, 505);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1982292597, -1181
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(7);
      MockRandom mockRandom0 = new MockRandom(7);
      denseMatrix0.iteratorOfColumn(3171);
      DenseMatrix denseMatrix1 = DenseMatrix.random(6, 246, mockRandom0);
      Matrix matrix0 = denseMatrix0.copyOfColumns(947);
      matrix0.copy();
      matrix0.equals((Matrix) denseMatrix0, 1.0);
      denseMatrix1.iteratorOfRow(7);
      matrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3994, 3994, 3994);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.identity(3994);
      columnMajorSparseMatrix0.equals((Object) columnMajorSparseMatrix1);
      columnMajorSparseMatrix1.diagonalProduct();
      int int0 = (-2113);
      int int1 = (-1764);
      // Undeclared exception!
      try { 
        SparseMatrix.zero((-2113), (-1764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2113x-1764
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 2769;
      Matrix matrix0 = Matrix.diagonal(2769, (-1431.7280171645266));
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1431.7280171645266);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 2769;
      doubleArray2[1] = (-1431.7280171645266);
      doubleArray2[2] = (-1431.7280171645266);
      doubleArray2[3] = (-1431.7280171645266);
      doubleArray2[4] = (double) 2769;
      doubleArray2[5] = (double) 2769;
      doubleArray2[6] = (double) 2769;
      doubleArray2[7] = (double) 2769;
      doubleArray2[8] = (double) 2769;
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      matrix0.equals((Object) rowMajorSparseMatrix0);
      // Undeclared exception!
      matrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-52.0);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 2830.204198;
      doubleArray0[5] = 0.964;
      doubleArray0[6] = (-0.4375);
      doubleArray0[7] = 1114.958;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      String string0 = matrix0.mkString("2@(^G;P`=$", "2@(^G;P`=$");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 30;
      Matrix matrix0 = Matrix.unit(30, 30);
      matrix0.rowMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      DenseVector.zero(30);
      VectorVectorOperation<Integer> vectorVectorOperation0 = (VectorVectorOperation<Integer>) mock(VectorVectorOperation.class, new ViolatedAssumptionAnswer());
      matrix0.diagonalProduct();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(30, 30, 30);
      int int1 = 9;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(9);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, matrix0, sparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(16, 16);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) null, 4, 16, 4, 353, 7, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 4, 353
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(32);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      // Undeclared exception!
      try { 
        matrix0.removeRow(1833);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..31
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 3311;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3311, 3311, 3311);
      int int1 = 753;
      Matrix matrix0 = sparseMatrix0.copyOfColumns(753);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 3311 rows and 3311 cols at 0, 0 in a 3311x753 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(3, 3);
      matrix0.determinant();
      int int0 = 103;
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(103, 103);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [103..3][103..3].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 8;
      SparseVector sparseVector0 = SparseVector.zero(8, 8);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ooPlaceOuterProduct0);
      linkedList0.removeIf(predicate0);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      DenseVector.zero(8);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      matrix0.rank();
      Matrix matrix1 = matrix0.removeFirstRow();
      matrix1.iterator();
      // Undeclared exception!
      try { 
        matrix1.setRow(8, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 8. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 10;
      int int1 = 7;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(10, 7, mockRandom0);
      long long0 = 0L;
      mockRandom0.doubles(0L);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      intArray1[0] = 10;
      intArray1[1] = 7;
      intArray1[2] = 7;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(2473, 2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        matrix0.insertRow(2, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 2.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 28;
      int int1 = 2;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 28, 0.5, (double) 28);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(28, 2, 8.881784197001252E-14, (Random) mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1114.958);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 0.0;
      Matrix matrix0 = Matrix.from1DArray(28, 2, doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.equals(matrix0, 897.83024195);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(17, 17);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      matrix0.toSparseMatrix();
      Matrix matrix1 = matrix0.transpose();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix1.updateRow(489, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1137.8812030834;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-63.911623);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-83.35859464825);
      doubleArray1[5] = 4.9E-324;
      doubleArray1[6] = (-2685.70308220288);
      doubleArray1[7] = 1867.21;
      doubleArray1[8] = 1.0;
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.iterator();
      Matrix matrix1 = matrix0.multiply(1.0);
      Matrix matrix2 = matrix0.removeFirstRow();
      assertEquals(0, matrix2.rows());
      
      matrix0.toColumnVector();
      matrix0.toDenseMatrix();
      assertNotSame(matrix0, matrix1);
      assertTrue(matrix0.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1000, 1000);
      String string0 = "/S;l$";
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        denseMatrix0.setRow((-1732), vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 1000.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(55);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2209, 10, 2209);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, sparseMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.transformRow(6, vectorFunction0);
      assertEquals(0.01785123966942149, cRSMatrix0.density(), 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 2209;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 482;
      Basic1DMatrix basic1DMatrix0 = (Basic1DMatrix)Matrix.from1DArray(482, 2209, doubleArray0);
      assertEquals(2209, basic1DMatrix0.columns());
      assertEquals(482, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      int int0 = 27;
      DenseVector denseVector0 = DenseVector.unit(27);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      Matrix matrix1 = matrix0.add((double) 27);
      matrix0.setAll(0.0);
      matrix1.setColumn((-1057), 4554.24516261);
      // Undeclared exception!
      try { 
        Matrix.zero((-1057), 3254);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1111.405532477716);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-168.0);
      doubleArray0[4] = (-2990.198436);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 2043.14;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.subtract(0.0);
      assertTrue(matrix1.equals((Object)matrix0));
      
      matrix0.subtract(matrix1);
      MockRandom mockRandom0 = new MockRandom(1019);
      // Undeclared exception!
      Matrix.randomSymmetric(1019, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      ColumnMajorSparseMatrix.zero(2950, 10);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("%%MatrixMarket vector coordinate real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(5, 5);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      matrix0.apply((MatrixOperation<Matrix>) ooPlaceMatrixByItsTransposeMultiplication0);
      // Undeclared exception!
      try { 
        matrix0.power((-2054114792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2054114792.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(2, 0.0, (Random) null);
      SparseVector sparseVector0 = SparseVector.zero(37, 37);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertColumn(9, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("0.000");
      sparseMatrix0.maxInRow(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.updateColumn(55, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '55' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(6, 6);
      columnMajorSparseMatrix0.diagonalProduct();
      Matrix matrix0 = Matrix.constant(6, 6, 3438.3654422);
      matrix0.toBinary();
      matrix0.rowMajorIterator();
      Matrix matrix1 = matrix0.kroneckerProduct(columnMajorSparseMatrix0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      matrix1.fold(matrixAccumulator0);
      assertEquals(36, matrix1.rows());
      
      Matrix matrix2 = matrix0.hadamardProduct(columnMajorSparseMatrix0);
      Matrix matrix3 = columnMajorSparseMatrix0.removeLastColumn();
      Matrix matrix4 = matrix3.subtract(0.0);
      Matrix matrix5 = columnMajorSparseMatrix0.rotate();
      matrix4.multiplyByItsTranspose();
      matrix3.min();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      matrix4.toRowVector();
      assertEquals(5, matrix4.columns());
      
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix2.withInverter(linearAlgebra_InverterFactory0);
      DecimalFormat decimalFormat0 = new DecimalFormat("$so&c%\"");
      String string0 = matrix5.mkString((NumberFormat) decimalFormat0);
      assertEquals("$so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0\n$so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0\n$so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0\n$so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0\n$so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0\n$so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0 $so&c%\"0\n", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1758, 1758);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1804.5233115337105;
      doubleArray1[1] = (double) 1758;
      doubleArray1[2] = (double) 1758;
      doubleArray1[3] = (double) 1758;
      doubleArray1[4] = (double) 1758;
      doubleArray1[5] = (double) 1758;
      doubleArray1[6] = (double) 1758;
      doubleArray1[7] = (double) 1758;
      doubleArray1[8] = (double) 1758;
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      matrix0.kroneckerProduct(sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(456);
      Matrix matrix0 = denseVector0.toRowMatrix();
      int int0 = 2378;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(456, 2, 456);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, 456, 471, 37, 37, (-1547), 471);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1547x471
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 3099;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3099, 1991, 360);
      Matrix matrix0 = sparseMatrix0.copyOfRows(2368);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, 1000, (-1947));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 1000x-1947
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 1033;
      int int1 = 755;
      Matrix matrix0 = Matrix.unit(1033, 755);
      matrix0.rows();
      Matrix matrix1 = matrix0.blank();
      MatrixFunction matrixFunction0 = null;
      // Undeclared exception!
      try { 
        matrix1.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2927.622174712773;
      doubleArray1[2] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1018.3304552529);
      doubleArray2[2] = 2927.622174712773;
      doubleArray2[3] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 2.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 2927.622174712773;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = 2927.622174712773;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1018.3304552529);
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      DenseVector denseVector0 = DenseVector.constant(8, 2866.6906);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.multiply((Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 8 does not equal to 3.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 379;
      RowMajorSparseMatrix.diagonal(379, 379);
      int int1 = 2786;
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(10, 10);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      String string0 = matrix0.mkString(numberFormat0);
      assertEquals("20  0  0  0  0  0  0  0  0  0\n 0 20  0  0  0  0  0  0  0  0\n 0  0 20  0  0  0  0  0  0  0\n 0  0  0 20  0  0  0  0  0  0\n 0  0  0  0 20  0  0  0  0  0\n 0  0  0  0  0 20  0  0  0  0\n 0  0  0  0  0  0 20  0  0  0\n 0  0  0  0  0  0  0 20  0  0\n 0  0  0  0  0  0  0  0 20  0\n 0  0  0  0  0  0  0  0  0 20\n", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 32);
      byte[] byteArray0 = new byte[2];
      mockRandom0.doubles(3099.1, 4288.585288154);
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)15;
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.nextBoolean();
      DenseMatrix denseMatrix0 = DenseMatrix.random(32, 32, mockRandom0);
      denseMatrix0.toBinary();
      Matrix matrix0 = Matrix.random(757, (byte)0, mockRandom0);
      denseMatrix0.copy();
      // Undeclared exception!
      try { 
        matrix0.removeColumn((-403));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      Matrix matrix0 = Matrix.from1DArray(2, 2, doubleArray0);
      matrix0.rank();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 1, 2, 0, 0, 1, 969);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1, 2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(7);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      Locale locale0 = Locale.forLanguageTag("3=/>b*xci[o6^M)w");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("w)=:u,#", decimalFormatSymbols0);
      String string0 = matrix0.mkString((NumberFormat) decimalFormat0, "No rows or columns selected.", "Unexpected");
      assertEquals("w)=:u1Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0No rows or columns selected.w)=:u0Unexpectedw)=:u1Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0No rows or columns selected.w)=:u0Unexpectedw)=:u0Unexpectedw)=:u1Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0No rows or columns selected.w)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u1Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0No rows or columns selected.w)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u1Unexpectedw)=:u0Unexpectedw)=:u0No rows or columns selected.w)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u1Unexpectedw)=:u0No rows or columns selected.w)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u0Unexpectedw)=:u1No rows or columns selected.", string0);
      
      matrix0.equals((Matrix) columnMajorSparseMatrix0, (double) 7);
      boolean boolean0 = matrix0.equals((Matrix) columnMajorSparseMatrix0, (double) 7);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2, 2, 2);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 594, 594, 2392, 45, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2392, 45
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = rowMajorSparseMatrix0.power(951);
      matrix0.updateColumn(9, (VectorFunction) null);
      assertNotSame(matrix0, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(661);
      boolean boolean0 = rowMajorSparseMatrix0.equals((Object) rowMajorSparseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      denseMatrix0.toBinary();
      Matrix matrix0 = null;
      denseMatrix0.trace();
      denseMatrix0.determinant();
      // Undeclared exception!
      try { 
        denseMatrix0.equals((Matrix) null, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(661);
      boolean boolean0 = rowMajorSparseMatrix0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 21;
      ColumnMajorSparseMatrix.identity(21);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow(1223, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(596, 596, 596);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(sparseMatrix0, sparseMatrix0);
      MockRandom mockRandom0 = new MockRandom((-1093L));
      DenseVector denseVector0 = DenseVector.random(1495, mockRandom0);
      sparseMatrix0.equals((Object) denseVector0);
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '597' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 221;
      SparseVector sparseVector0 = SparseVector.zero(13, 221);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.transform(matrixFunction0);
      MatrixMatrixOperation<ColumnMajorSparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.get(5365, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5365' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 1000;
      Matrix matrix0 = Matrix.diagonal(1000, 4.9E-324);
      Matrix matrix1 = matrix0.copy();
      matrix0.rows();
      Matrix matrix2 = matrix1.copyOfColumns(1000);
      // Undeclared exception!
      matrix2.sliceTopLeft(2597, 6);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(4694, 4694);
      Matrix matrix0 = denseMatrix0.sliceBottomRight(4694, 8);
      Matrix.identity(4694);
      // Undeclared exception!
      try { 
        matrix0.getRow((-5471));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(37);
      int int0 = (-4285);
      int int1 = 221;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapRows((-266), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Matrix matrix0 = Matrix.from1DArray(2972, 2972, (double[]) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 2298);
      hashMap0.clone();
      hashMap0.values();
      Matrix matrix1 = denseVector0.toDiagonalMatrix();
      matrix0.equals(matrix1, (double) 2972);
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 6;
      DenseVector denseVector0 = DenseVector.unit(6);
      DenseVector.constant(6, 10000.0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.shuffle();
      int int1 = 7;
      int int2 = (-365);
      int int3 = 37;
      int[] intArray0 = new int[5];
      intArray0[0] = 37;
      intArray0[1] = 7;
      intArray0[2] = (-365);
      intArray0[3] = 37;
      intArray0[4] = 7;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(4202, 3267, 4202);
      Matrix matrix0 = denseMatrix0.copyOfRows(3267);
      matrix0.maxInRow(1402);
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 2495, 3267, 2495, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2495 rows and 10 cols at 2495, 3267 in a 4202x3267 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1274, 1274);
      matrix0.copy();
      Vector vector0 = matrix0.toColumnVector();
      Matrix matrix1 = Matrix.identity(1274);
      // Undeclared exception!
      matrix1.insertColumn(10, vector0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (-1624.8567132267212);
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double double0 = matrix0.infinityNorm();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2073432486));
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      linkedList0.pop();
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.sum();
      int int0 = (-1840700268);
      int int1 = 10;
      Matrix matrix1 = matrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        matrix1.removeRow((-1840700268));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 8;
      int int1 = 12;
      Matrix matrix0 = Matrix.unit(8, 12);
      matrix0.divide(8);
      Matrix.unit(1, 3);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-279);
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) (-279);
      doubleArray0[3] = (double) (-279);
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-279), 8, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -279x8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1298, 1298);
      // Undeclared exception!
      try { 
        matrix0.transformRow(1298, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 16;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(16, 16, 16);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = denseMatrix0.removeLastColumn();
      denseMatrix0.non(matrixPredicate0);
      matrix0.add(matrix0);
      Matrix matrix1 = denseMatrix0.hadamardProduct(denseMatrix0);
      matrix1.blankOfColumns(16);
      int int1 = (-1717986917);
      // Undeclared exception!
      try { 
        matrix1.getRow((-1717986917));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 1985;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1985);
      Matrix matrix0 = columnMajorSparseMatrix0.add((double) 1985);
      // Undeclared exception!
      matrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 927.154;
      doubleArray2[2] = (-869.5155058906968);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = 927.154;
      doubleArray4[3] = (-869.5155058906968);
      doubleArray4[4] = (-869.5155058906968);
      doubleArray4[5] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-869.5155058906968);
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (-731.7);
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = (-869.5155058906968);
      doubleArray5[5] = 927.154;
      doubleArray5[6] = (-1.0);
      doubleArray5[7] = 315.919574;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-731.7);
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = 927.154;
      doubleArray6[3] = 927.154;
      doubleArray6[4] = 315.919574;
      doubleArray6[5] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 927.154;
      doubleArray7[1] = (-869.5155058906968);
      doubleArray7[2] = 315.919574;
      doubleArray7[3] = 927.154;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 1.0;
      doubleArray8[1] = (-731.7);
      doubleArray8[2] = (-1.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      doubleArray9[0] = (-869.5155058906968);
      doubleArray9[1] = 927.154;
      doubleArray0[8] = doubleArray9;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double double0 = matrix0.minInRow((-1908874352));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1975;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = 152.0706439574018;
      Matrix matrix0 = Matrix.from1DArray(16, 1975, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.divide((-35.621));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        sparseMatrix0.setColumn((-3469), (double) (-3469));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-3469' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-7.8403428386126);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 100.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 100.0;
      doubleArray3[3] = (-7.8403428386126);
      doubleArray3[4] = 100.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 100.0;
      doubleArray5[1] = 1067.16;
      doubleArray5[2] = 100.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 100.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 1067.16;
      doubleArray0[5] = doubleArray6;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceKroneckerProduct0.applyCommon(sparseMatrix0, sparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(2735, 28);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2735..36][28..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("  ");
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 628.89343;
      doubleArray2[2] = (-2197.25546334437);
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      matrix0.toBinary();
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      
      Matrix matrix1 = Matrix.constant(1114, 1878, 0.0);
      assertEquals(1114, matrix1.rows());
      assertEquals(1878, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(0, Integer.MAX_VALUE, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 5;
      MockRandom mockRandom0 = new MockRandom((-2047L));
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(5, mockRandom0);
      int int1 = 17;
      denseMatrix0.blankOfShape(17, 939);
      denseMatrix0.toRowVector();
      denseMatrix0.trace();
      Matrix matrix0 = denseMatrix0.removeFirstColumn();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      matrix0.mkString("%", "hJDAhOa5:");
      int int2 = 6;
      // Undeclared exception!
      try { 
        mockRandom0.ints((long) 5, 6, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(308, 309);
      columnMajorSparseMatrix0.toColumnVector();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      rowMajorSparseMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 80;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(80);
      int int1 = 17;
      denseMatrix0.maxInColumn(17);
      int int2 = 6;
      // Undeclared exception!
      denseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = (double) 7;
      doubleArray0[6] = (-1527.0);
      doubleArray0[7] = (double) 7;
      doubleArray0[8] = (double) 7;
      Matrix matrix0 = Matrix.from1DArray(7, 7, doubleArray0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      // Undeclared exception!
      try { 
        matrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(259, 9);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.removeColumn(259);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 368;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(368, 368);
      // Undeclared exception!
      sparseMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      denseMatrix0.blankOfShape(8, 8);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      DenseMatrix denseMatrix1 = DenseMatrix.identity(8);
      denseMatrix1.determinant();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix1, denseMatrix1);
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = 100.0;
      doubleArray1[2] = 1116.077389358;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (double) 8;
      doubleArray1[5] = (double) 8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1116.077389358;
      doubleArray2[2] = (double) 8;
      doubleArray2[3] = 1116.077389358;
      doubleArray2[4] = 100.0;
      doubleArray2[5] = (double) 8;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = (double) 8;
      doubleArray2[8] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1116.077389358;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 100.0;
      doubleArray3[3] = 100.0;
      doubleArray3[4] = 255.0;
      doubleArray0[2] = doubleArray3;
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      matrix0.setAll(8);
      assertNotSame(matrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 17;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(17, 4.9E-324);
      double double0 = 0.0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.updateColumn(628, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(8, 8);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      intArray0[1] = 8;
      intArray0[2] = 8;
      intArray0[3] = (-2839);
      intArray0[4] = 8;
      int[] intArray1 = new int[6];
      intArray1[0] = (-2839);
      intArray1[1] = 8;
      intArray1[2] = 8;
      intArray1[3] = (-2839);
      intArray1[4] = (-2839);
      intArray1[5] = (-2839);
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 454);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.divide((-15.020110588916209));
      // Undeclared exception!
      try { 
        matrix0.insertRow((-185), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..453
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(48);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(48, mockRandom0);
      denseMatrix0.product();
      Matrix matrix0 = denseMatrix0.removeRow(6);
      // Undeclared exception!
      try { 
        matrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2376.70882991528;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 2376.70882991528;
      doubleArray2[1] = 2376.70882991528;
      doubleArray2[2] = 2376.70882991528;
      doubleArray2[3] = 2376.70882991528;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 2376.70882991528;
      doubleArray3[1] = 2376.70882991528;
      doubleArray3[2] = 2376.70882991528;
      doubleArray3[3] = 2376.70882991528;
      doubleArray3[4] = 2376.70882991528;
      doubleArray3[5] = 2376.70882991528;
      doubleArray3[6] = 2376.70882991528;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 2376.70882991528;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 2376.70882991528;
      doubleArray5[1] = 2376.70882991528;
      doubleArray5[2] = 2376.70882991528;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 2376.70882991528;
      doubleArray6[1] = (-3086.598);
      doubleArray6[2] = 2376.70882991528;
      doubleArray0[5] = doubleArray6;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        Matrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(14);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      matrix0.columnMajorIterator();
      assertEquals(14, denseMatrix0.rows());
      assertEquals(14, denseMatrix0.columns());
      assertTrue(denseMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(304, 74);
      Locale locale0 = Locale.ROOT;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      sparseMatrix0.toMatrixMarket(numberFormat0);
      Matrix matrix0 = sparseMatrix0.blankOfRows(10);
      assertEquals(10, matrix0.rows());
      assertEquals(74, matrix0.columns());
      
      Matrix matrix1 = Matrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general column-major\n304 74 0\n");
      assertEquals(74, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2846.9898935;
      doubleArray0[1] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertEquals(1, matrix0.columns());
      
      Matrix matrix1 = matrix0.removeFirstColumn();
      assertEquals(0, matrix1.columns());
      assertEquals(2, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1530.335;
      doubleArray2[5] = 2249.7;
      doubleArray2[6] = 1859.935;
      doubleArray2[7] = 833.00047303049;
      doubleArray2[8] = (-115.6772299967633);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 1859.935;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 1899.4360562582;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 1859.935;
      doubleArray6[1] = 1899.4360562582;
      doubleArray6[2] = 1.0;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = 2249.7;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (-115.6772299967633);
      doubleArray7[2] = 1.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 0.0;
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.max();
      matrix0.rank();
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      matrix0.copy();
      // Undeclared exception!
      try { 
        matrix1.is((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(649, 649);
      sparseMatrix0.diagonalProduct();
      int int0 = 5;
      // Undeclared exception!
      sparseMatrix0.removeColumn(5);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 238.705;
      doubleArray1[1] = 477.6;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-2919.168576442);
      doubleArray1[4] = 291.7083608;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 238.705;
      doubleArray2[3] = 324.1882928696564;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 238.705;
      doubleArray2[6] = (-2919.168576442);
      doubleArray2[7] = 238.705;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 238.705;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 238.705;
      doubleArray4[2] = 291.7083608;
      doubleArray4[3] = 247.077750107;
      doubleArray4[4] = 477.6;
      doubleArray4[5] = 291.7083608;
      doubleArray4[6] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 324.1882928696564;
      doubleArray5[1] = 291.7083608;
      doubleArray5[2] = 238.705;
      doubleArray5[3] = 100.0;
      doubleArray5[4] = 477.6;
      doubleArray5[5] = 1.0;
      doubleArray5[6] = 3740.0;
      doubleArray5[7] = 477.6;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.toColumnMajorSparseMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-687.2916807258738);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 2561.7230484606753;
      doubleArray0[3] = 4.9E-324;
      doubleArray0[4] = 556.42866;
      doubleArray0[5] = (-2017.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 170.158;
      doubleArray0[8] = (-347.886619);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.sum();
      matrix0.removeFirstRow();
      matrix0.rows();
      // Undeclared exception!
      try { 
        matrix0.minInColumn(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.diagonal((-3037), (-3037));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = (-1941);
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-1941), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(4336, 4336);
      // Undeclared exception!
      denseMatrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 454);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.divide(0.0);
      assertEquals(454, matrix1.columns());
      assertEquals(454, matrix1.rows());
      
      // Undeclared exception!
      try { 
        matrix1.swapColumns(1837, 2031);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1837' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(13);
      rowMajorSparseMatrix0.toCSV();
      assertEquals(13, rowMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 4563;
      Matrix matrix0 = Matrix.unit(4563, 1115);
      // Undeclared exception!
      try { 
        matrix0.blankOfColumns((-342));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(58L);
      mockRandom0.nextLong();
      mockRandom0.nextInt();
      Matrix matrix0 = Matrix.random(13, 13, mockRandom0);
      int int0 = 0;
      mockRandom0.ints(0, 630);
      mockRandom0.nextFloat();
      Matrix.identity(0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 13x13 does not equal to 1x1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 1.0;
      doubleArray3[6] = 143.6;
      doubleArray3[7] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 143.6;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 143.6;
      doubleArray4[5] = 1.1102230246251565E-13;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 1.1102230246251565E-13;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 1.1102230246251565E-13;
      doubleArray5[3] = 1.1102230246251565E-13;
      doubleArray0[4] = doubleArray5;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-777);
      intArray0[1] = 2149;
      intArray0[2] = 16;
      intArray0[3] = 1000;
      intArray0[4] = (-2140);
      intArray0[5] = 2;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-777' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 16;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(16, 16, 16);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      Matrix matrix0 = denseMatrix0.removeLastColumn();
      denseMatrix0.non(matrixPredicate0);
      Matrix matrix1 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix1.add(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 16x16 does not equal to 16x15.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 9;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(9, 9);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.add((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(448);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      int[] intArray0 = new int[8];
      intArray0[0] = 448;
      intArray0[1] = 448;
      intArray0[2] = 448;
      intArray0[3] = 448;
      intArray0[4] = 448;
      intArray0[5] = 32;
      intArray0[6] = 0;
      intArray0[7] = 448;
      int[] intArray1 = new int[9];
      intArray1[0] = 32;
      intArray1[1] = 448;
      intArray1[2] = 448;
      intArray1[3] = 448;
      intArray1[4] = 32;
      intArray1[5] = 32;
      intArray1[6] = 32;
      intArray1[7] = 0;
      intArray1[8] = 448;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '448' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 32;
      int int1 = 6;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(32, 6, 32);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      // Undeclared exception!
      try { 
        denseMatrix0.power(32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 32 does not equal to 6.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1, 1, doubleArray0);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorsAddition0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        denseMatrix0.setColumn(1, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 187;
      Matrix matrix0 = Matrix.identity(187);
      int int1 = (-2147479899);
      // Undeclared exception!
      try { 
        matrix0.blankOfRows((-2147479899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2147479899x187
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 606;
      ColumnMajorSparseMatrix.diagonal(606, 606);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9);
      DenseMatrix denseMatrix0 = DenseMatrix.random(9, 9, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.slice(9, (-1764), 259, 245);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(3);
      cRSMatrix0.norm();
      int int1 = 4;
      ((Matrix)cRSMatrix0).ensureDimensionsAreCorrect(3, 4);
      int int2 = (-447);
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceTopLeft(4, (-447));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..4][0..-447].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = (-1717986917);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1717986917);
      doubleArray0[1] = (double) 37;
      doubleArray0[2] = (double) (-1717986917);
      doubleArray0[3] = (double) 37;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-1717986917);
      doubleArray0[6] = (double) 37;
      doubleArray0[7] = (double) (-1717986917);
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray(37, (-1717986917), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 37x-1717986917
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("1Ohc[#EhHdz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 2419;
      Matrix matrix0 = Matrix.zero(988, 2419);
      Matrix matrix1 = matrix0.copyOfShape(2419, 2419);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix1.updateRow(988, vectorFunction0);
      matrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(48, 7, 48);
      columnMajorSparseMatrix0.iteratorOrNonZeroColumns();
      columnMajorSparseMatrix0.setRow(7, (double) 7);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.getColumn(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(1, 1, doubleArray0);
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInColumn(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 3146.5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 3146.5;
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 3146.5;
      doubleArray5[5] = (-1.0);
      doubleArray5[6] = 1180.4218259829;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = 3146.5;
      doubleArray6[5] = (-1.0);
      doubleArray6[6] = 3146.5;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 3146.5;
      doubleArray0[6] = doubleArray7;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.hashCode();
      assertEquals(2, rowMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Matrix.unit(2939, 2939);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) null, (SparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix0.rotate();
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      int int0 = (-1952257860);
      // Undeclared exception!
      try { 
        matrix0.copyOfRows((-1952257860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1952257860x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(32, 1000, 1000);
      int int0 = (-197);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      numberFormat0.format((long) (-197));
      // Undeclared exception!
      matrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 3;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-197), 3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -197x3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(5, 5);
      columnMajorSparseMatrix0.toRowVector();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 5;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(5, 5, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(6, 6);
      Matrix matrix0 = columnMajorSparseMatrix0.copyOfColumns(6);
      assertEquals(6, matrix0.rows());
      assertEquals(6, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (-2375.11262290334);
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3913, 0);
      ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      int int0 = (-1522);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.diagonal((-1522), (-1522));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldRow(0, vectorAccumulator0);
      Matrix.identity(0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.foldRow(0, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 896.9145;
      doubleArray1[1] = (-4250.362101923);
      doubleArray1[2] = 1675.441;
      doubleArray1[3] = 2391.82292;
      doubleArray1[4] = 297.0894336848825;
      doubleArray1[5] = 3038.10426065295;
      doubleArray1[6] = (-157.44927196481);
      doubleArray1[7] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-4250.362101923);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 3038.10426065295;
      doubleArray2[3] = (-157.44927196481);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 2391.82292;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 703.399913183;
      doubleArray3[4] = 3038.10426065295;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 896.9145;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = 703.399913183;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = 3038.10426065295;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 703.399913183;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 1675.441;
      doubleArray6[1] = 2391.82292;
      doubleArray6[2] = 1.0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        SparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("j%x(fB66}i(q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 1.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 1.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 1.0;
      doubleArray7[5] = 1.0;
      doubleArray0[6] = doubleArray7;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(7, matrix0.rows());
      assertEquals(2, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1899);
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1899;
      doubleArray1[1] = 625.9631182784879;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 625.9631182784879;
      doubleArray2[1] = 625.9631182784879;
      doubleArray2[2] = (double) 1899;
      doubleArray2[3] = 625.9631182784879;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 625.9631182784879;
      doubleArray3[1] = (double) 1899;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 625.9631182784879;
      doubleArray4[1] = (double) 1899;
      doubleArray4[2] = (double) 1899;
      doubleArray4[3] = 625.9631182784879;
      doubleArray4[4] = (double) 1899;
      doubleArray4[5] = 625.9631182784879;
      doubleArray4[6] = 2.1316282072803E-12;
      doubleArray4[7] = (double) 1899;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (double) 1899;
      doubleArray5[1] = (double) 1899;
      doubleArray5[2] = 2.1316282072803E-12;
      doubleArray5[3] = (-1753.6391);
      doubleArray5[4] = (double) 1899;
      doubleArray0[4] = doubleArray5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.power(1899);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 5 does not equal to 2.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = (-2113396604);
      // Undeclared exception!
      try { 
        DenseMatrix.unit((-2113396604), (-2113396604));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 1464;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1000, 1464);
      int int1 = (-754);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.maxInColumn((-754));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -754
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero((-2477), (-456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2477x-456
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 8;
      Matrix matrix0 = Matrix.identity(8);
      matrix0.subtract((double) 8);
      Matrix matrix1 = matrix0.removeLastRow();
      matrix0.insert(matrix1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = (-2800);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) (-2800), 477L, 504L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(5, 7);
      Matrix matrix1 = matrix0.rotate();
      matrix1.min();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 1048;
      RowMajorSparseMatrix.zero(1048, 1048);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1815.558);
      doubleArray0[1] = 565.7680379353092;
      doubleArray0[2] = (double) 1048;
      doubleArray0[3] = 3419.28584503586;
      doubleArray0[4] = (double) 1048;
      doubleArray0[5] = (double) 1048;
      Vector.fromArray(doubleArray0);
      int int1 = (-1702);
      // Undeclared exception!
      try { 
        Vector.unit((-1702));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket(" ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        DenseMatrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }
}
