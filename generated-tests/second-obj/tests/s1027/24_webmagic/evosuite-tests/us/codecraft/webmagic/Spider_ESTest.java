/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:04:15 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.ReplaceSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(2);
      assertTrue(spider1.isSpawnUrl());
      
      spider1.setSpawnUrl(false);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider is already running!", "kIp+KY~2GeAybjJi;^:");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "kIp+KY~2GeAybjJi;^:";
      stringArray0[1] = "Spider is already running!";
      stringArray0[2] = "kIp+KY~2GeAybjJi;^:";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("04f0jxIA$.+6");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider1.pipeline(jsonFilePipeline0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      String[] stringArray0 = new String[7];
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Json json0 = new Json(list0);
      Class<String> class0 = String.class;
      json0.toList(class0);
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "`5k<^nrY0d[t:Cw2";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`5k<^nrY0d[t:Cw2");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(716, 716, 716, timeUnit0, linkedBlockingDeque0);
      spider0.setUUID("QgAU/;1j-%k+");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      spider1.clearPipeline();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      Request[] requestArray0 = new Request[1];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider2);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.Running;
      spider_Status0.getValue();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = false;
      spider0.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Spider.Status.values();
      int int0 = 42;
      Spider.Status.fromValue(42);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("w");
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider2.setPipelines(linkedList1);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("/data/webmagic");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = null;
      try {
        simplePageProcessor0 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider1.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 2;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) forkJoinPool0, (-887));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("$VALUES", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.setEmptySleepTime(5);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider1.thread((-1261));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(716, 716, 716, timeUnit0, linkedBlockingDeque0);
      spider0.thread((ExecutorService) threadPoolExecutor0, 716);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      spider1.clearPipeline();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "kIp+KY~2GeAybjJi;^:";
      stringArray0[2] = "kIp+KY~2GeAybjJi;^:";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kIp+KY~2GeAybjJi;^:");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.thread(2147483645);
      spider2.setEmptySleepTime((-3260));
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("$VALUES", "$VALUES");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.setEmptySleepTime((-1));
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Request> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      spider0.startRequest(list0);
      Request request0 = new Request();
      request0.setUrl((String) null);
      spider1.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("{e_rH~R3# 7!_|v=oBx", "Spider {} started!");
      spider1.setDownloader(phantomJSDownloader0);
      spider0.setEmptySleepTime((-1));
      Spider spider2 = spider0.setExitWhenComplete(false);
      Spider spider3 = spider0.clearPipeline();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      LinkedBlockingQueue<String> linkedBlockingQueue1 = new LinkedBlockingQueue<String>();
      List<Request> list0 = new LinkedList<Request>();
      spider2.startRequest(list0);
      spider3.addRequest(requestArray0);
      assertFalse(spider0.isExitWhenComplete());
      
      Spider spider4 = Spider.create(simplePageProcessor0);
      long long0 = spider4.getPageCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("k5d*2793v>rk+xtk");
      Spider spider0 = Spider.create(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(false);
      Request request2 = request1.setMethod((String) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request3 = request2.setExtras(hashMap0);
      Request request4 = request3.addCookie("_cycle_tried_times", ", html=");
      Request request5 = request4.setCharset("z-I");
      requestArray0[0] = request5;
      Request request6 = request0.setUrl((String) null);
      requestArray0[1] = request6;
      request2.setUrl("kcxG?}b8!3H'-=42}");
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      spider0.getScheduler();
      spider2.setUUID("k5d*2793v>rk+xtk");
      Class<Request> class1 = Request.class;
      json0.toList(class1);
      Spider spider3 = spider0.startRequest((List<Request>) null);
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider1.start();
      Spider spider2 = spider1.pipeline(multiPagePipeline0);
      Spider spider3 = spider2.addPipeline(multiPagePipeline0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider3.clearPipeline();
      linkedList0.add((Pipeline) multiPagePipeline0);
      spider3.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      int int0 = spider1.getThreadAlive();
      assertEquals(0, int0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XNuk`Kl;E],yAzoWX:", "XNuk`Kl;E],yAzoWX:");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      spider2.run();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider1.setEmptySleepTime((-2111));
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider2.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider3 = spider1.clearPipeline();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "QgAU/;1j-%k+";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XNuk`Kl;E],yAzoWX:", ",'s~G&^j^");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      FilePipeline filePipeline0 = new FilePipeline();
      spider2.addPipeline(filePipeline0);
      spider0.run();
      spider1.setEmptySleepTime((-1538));
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider0.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider3 = spider0.setScheduler((Scheduler) null);
      boolean boolean0 = spider3.isSpawnUrl();
      assertEquals(0L, spider3.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("$VALUES", "$VALUES");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.setEmptySleepTime((-1));
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider0.scheduler(queueScheduler0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Request> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider3 = spider2.startRequest(list0);
      Request request0 = new Request();
      Locale locale0 = Locale.forLanguageTag("(9tKiOK$n");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider3.getAll((Collection<String>) set0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FilePipeline filePipeline0 = new FilePipeline("W_");
      spider1.addPipeline(filePipeline0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("'~.,Ea&*$^IU", "'~.,Ea&*$^IU");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.setEmptySleepTime((-540));
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      int int0 = 1550;
      Spider spider2 = spider0.thread(1550);
      List<Request> list0 = spider0.getAll((Collection<String>) linkedBlockingDeque0);
      spider1.startRequest(list0);
      Request request0 = new Request();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "_cycle_tried_times";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("push to queue {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      Page page0 = new Page();
      spider0.extractAndAddRequests(page0, false);
      page0.setRawText("push to queue {}");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("push to queue {}");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      spider1.setEmptySleepTime(5);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider1.setExitWhenComplete(false);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XNuk`Kl;E],yAzoWX:", "XNuk`Kl;E],yAzoWX:");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.run();
      Spider spider2 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("?E[Csg>veMypXQ=gA");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Request request0 = new Request("?E[Csg>veMypXQ=gA");
      Request request1 = request0.addHeader("/(8&<TM<5R", "tm!7^%&V]>c3.L?e");
      request1.addHeader("Eg{A@-A-?h'2N?dw", "_cycle_tried_times");
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", " stop fail!");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      spider1.setEmptySleepTime(0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider0.setExitWhenComplete(false);
      SpiderMonitor.instance();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("UFhJdjUQ5hQ)m7", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.setEmptySleepTime((-360));
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5);
      Spider spider2 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("UFhJdjUQ5hQ)m7");
      spider1.setScheduler(fileCacheQueueScheduler0);
      MultiPagePipeline multiPagePipeline1 = new MultiPagePipeline();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MultiPagePipeline multiPagePipeline2 = new MultiPagePipeline();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        spider2.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("charsets*=s*['\"]*([^s;'\"]*)");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      spider0.isExitWhenComplete();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", " stop fail!");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      spider1.setEmptySleepTime(0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = false;
      Spider spider2 = spider0.setExitWhenComplete(false);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      // Undeclared exception!
      spider2.getAll((Collection<String>) list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgAU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("UFhJbdajUQ5^hhQ)m7", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.setEmptySleepTime((-360));
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5, threadFactory0);
      Spider spider2 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      spider2.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider3 = spider1.setUUID("UFhJbdajUQ5^hhQ)m7");
      spider3.getAll((Collection<String>) linkedBlockingDeque0);
      spider1.thread(5);
      spider3.getCollectorPipeline();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider0.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XNuk`Kl;E],yAzoWX:", "XNuk`Kl;E],yAzoWX:");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.checkIfRunning();
      spider1.run();
      spider1.checkIfRunning();
      spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider1.setSpawnUrl(false);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "XNuk`Kl;E],yAzoWX:";
      stringArray0[1] = "XNuk`Kl;E],yAzoWX:";
      stringArray0[2] = "/<rIY";
      stringArray0[3] = "XNuk`Kl;E],yAzoWX:";
      spider0.getThreadAlive();
      stringArray0[4] = "/<rIY";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XNuk`Kl;E],yAzoWX:", "XNuk`Kl;E],yAzoWX:");
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("vj7Q0|z(DwG8&\"l");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider0.setScheduler(duplicateRemovedScheduler0);
      Page.fail();
      spider1.stop();
      spider1.getCollectorPipeline();
      MultiPagePipeline multiPagePipeline1 = new MultiPagePipeline();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "/";
      stringArray0[2] = "8X5meB^}%r";
      stringArray0[3] = "vj7Q0|z(DwG8&\"l";
      stringArray0[4] = "?E[Csg>veMypXQ=gA";
      stringArray0[5] = "/";
      stringArray0[6] = "?E[Csg>veMypXQ=gA";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      spider2.setSpawnUrl(false);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2HG'<aZFVgJ`l|\"KV6");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      spider0.pipelines = null;
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Spider spider1 = spider0.startRequest(linkedList0);
      spider0.getSite();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider1.isExitWhenComplete();
      spider1.getThreadAlive();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XNuk`Kl;E],yAzoWX:", "XNuk`Kl;E],yAzoWX:");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      spider1.setEmptySleepTime(0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("XNuk`Kl;E],yAzoWX:");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider0.startRequest(list0);
      spider2.runAsync();
      System.setCurrentTimeMillis(5);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider3 = spider0.pipeline(collectorPipeline0);
      spider3.thread(5);
      Spider spider4 = spider2.scheduler(fileCacheQueueScheduler0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider4.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      spider1.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XNuk`Kl;E],yAzoWX:", "XNuk`Kl;E],yAzoWX:");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      spider2.run();
      spider2.checkIfRunning();
      spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("?E[Csg>veMypXQ=gA");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider3 = spider0.setScheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[1];
      Page page0 = Page.fail();
      spider3.extractAndAddRequests(page0, false);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("tE~8e2J7CVb7");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("tE~8e2J7CVb7", "tE~8e2J7CVb7");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.sleep(34);
      Page page0 = Page.fail();
      spider1.destroyWhenExit = false;
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QgU/;1j-%k+");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("QgU/;1j-%k+", "QgU/;1j-%k+");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      spider1.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader((String) null, "");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader1);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5, threadPoolExecutor_DiscardPolicy0);
      Spider spider3 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      spider3.run();
      spider2.checkIfRunning();
      Spider spider4 = spider1.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider2.setScheduler(fileCacheQueueScheduler0);
      Page.fail();
      spider4.stop();
      spider1.getCollectorPipeline();
      MultiPagePipeline multiPagePipeline1 = new MultiPagePipeline();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider5 = spider2.setUUID("");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        spider5.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XNuk`Kl;E],yAzoWX:", "XNuk`Kl;E],yAzoWX:");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      spider1.setEmptySleepTime(0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("XNuk`Kl;E],yAzoWX:");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider0.startRequest(list0);
      spider2.runAsync();
      fileCacheQueueScheduler0.getTotalRequestsCount(spider1);
      System.setCurrentTimeMillis(5);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider3 = spider0.pipeline(collectorPipeline0);
      spider3.thread(priorityScheduler1.INITIAL_CAPACITY);
      // Undeclared exception!
      try { 
        spider2.scheduler(fileCacheQueueScheduler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XNuk`Kl;E],yAzoWX:");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XNuk`Kl;E],yAzoWX:", "XNuk`Kl;E],yAzoWX:");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XNuk`Kl;E],yAzoWX:");
      spider1.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("XNuk`Kl;E],yAzoWX:", " stop fail!");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider1.run();
      spider2.checkIfRunning();
      Spider spider3 = spider2.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("us.codecraft.webmagic.downloader.PhantomJSDownloader");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Request request0 = new Request("XNuk`Kl;E],yAzoWX:");
      Request request1 = request0.setUrl(" stop fail!");
      fileCacheQueueScheduler0.push(request1, spider1);
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      Page.fail();
      spider4.stop();
      spider3.getCollectorPipeline();
      MultiPagePipeline multiPagePipeline1 = new MultiPagePipeline();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>(5, comparator0);
      List<String> list0 = spider1.getAll((Collection<String>) priorityBlockingQueue0);
      List<SpiderListener> list1 = spider2.getAll((Collection<String>) list0);
      spider3.setSpiderListeners(list1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      spider1.getPageCount();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XNuk`Kl;E],yAzoWX:";
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }
}
