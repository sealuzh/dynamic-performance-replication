/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 16:17:04 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BOOLEAN");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!%o[/6pA3[5{53{R");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset.defaultCharset();
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.mark((-2230));
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.reset();
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      try { 
        jsonReader1.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.skip(1219L);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      byteArray0[0] = (byte)96;
      byteArray0[0] = (byte)96;
      StringReader stringReader0 = new StringReader("9,$&_l1/WKSI[hMq");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.doPeek();
      jsonReader0.nextDouble();
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9,$&_l1/WKSI[hMq");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      charArrayReader0.reset();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, (byte)16);
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was NUMBER at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j");
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '8';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader1.close();
      JsonReader jsonReader2 = new JsonReader(charArrayReader0);
      try { 
        jsonReader2.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      charArrayReader1.reset();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was END_DOCUMENT at line 1 column 8 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      charArrayReader0.read();
      charArrayReader0.read();
      jsonReader0.setLenient(true);
      jsonReader0.isLenient();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      StringReader stringReader0 = new StringReader("true");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertNotNull(string0);
      assertEquals("99", string0);
      assertTrue(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      charArrayReader0.reset();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      StringReader stringReader0 = new StringReader("99");
      assertNotNull(stringReader0);
      
      long long0 = jsonReader0.nextLong();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(99L, long0);
      assertTrue(jsonReader0.isLenient());
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader1, (byte)16);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(bufferedReader0);
      
      jsonReader0.close();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ru");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertEquals("Ru", string0);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'x';
      charArray0[0] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")]}'\n");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '0';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[5] = '0';
      charArray0[6] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'8', '0', '8', '8', '\u0000', '0', '0'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertTrue(jsonReader0.isLenient());
      
      long long0 = charArrayReader0.skip(0L);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was END_DOCUMENT at line 1 column 8 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(17, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)93);
      assertNotNull(pushbackInputStream0);
      assertEquals(17, byteArrayInputStream0.available());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, charset0);
      assertNotNull(inputStreamReader0);
      assertEquals(17, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertNotNull(jsonReader0);
      assertEquals(17, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(inputStreamReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertEquals(17, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(jsonReader1.isLenient());
      
      JsonReader jsonReader2 = new JsonReader(inputStreamReader0);
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertNotNull(jsonReader2);
      assertEquals(17, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(jsonReader2.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("x\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertTrue(jsonReader0.isLenient());
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = 'R';
      charArray0[5] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'R', '9', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'R', '9', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'R', '9', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'R', '9', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000R9\u0000", string0);
      assertTrue(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'R', '9', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      charArrayReader1.reset();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'R', '9', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      StringReader stringReader0 = new StringReader("\u0000\u0000\u0000\u0000R9\u0000");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was END_DOCUMENT at line 1 column 8 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PipedReader pipedReader0 = new PipedReader(101);
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertNotNull(string0);
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = 7;
      assertFalse(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.NULL, jsonToken0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was NULL at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'M';
      charArray0[3] = '{';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{', 'M', '{', 'A', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'{', '{', 'M', '{', 'A', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'{', '{', 'M', '{', 'A', 'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'F';
      charArray1[2] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertArrayEquals(new char[] {'F', '\u0000', '{'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'F', '\u0000', '{'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'F', '\u0000', '{'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'F', '\u0000', '{'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(string0);
      assertEquals("F\u0000", string0);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'F', '\u0000', '{'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      JsonReader jsonReader2 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'F', '\u0000', '{'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BEGIN_OBJECT at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[6];
      charArray0[4] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '/', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '/', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '/', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '/', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      jsonReader0.setLenient(true);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(jsonReader0, jsonReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '/', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(jsonReader0, jsonReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '/', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      StringReader stringReader0 = new StringReader("QnDO32*QFu^<aZPV");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertEquals("QnDO32*QFu^<aZPV", string0);
      assertTrue(jsonReader0.isLenient());
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader1 = new StringReader("QnDO32*QFu^<aZPV");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = jsonReader0.doPeek();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(17, int0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was END_DOCUMENT at line 1 column 17 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader(",|Kx+U%U");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N_DOCUMENT");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = true;
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertEquals("N_DOCUMENT", string0);
      assertTrue(jsonReader0.isLenient());
      
      stringReader0.reset();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      
      JsonReader jsonReader3 = new JsonReader(stringReader0);
      assertFalse(jsonReader3.equals((Object)jsonReader2));
      assertFalse(jsonReader3.equals((Object)jsonReader0));
      assertFalse(jsonReader3.equals((Object)jsonReader1));
      assertNotNull(jsonReader3);
      assertFalse(jsonReader3.isLenient());
      
      try { 
        jsonReader2.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertEquals("$", string0);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      
      try { 
        jsonReader2.nextNull();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 10 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PipedReader pipedReader0 = new PipedReader(102);
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertNotNull(string0);
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = 102;
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.peek();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      jsonReader0.setLenient(false);
      assertNotSame(jsonReader0, jsonReader1);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotSame(jsonReader0, jsonReader1);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotNull(string0);
      assertEquals("99", string0);
      assertFalse(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 2113);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(bufferedReader0);
      
      jsonReader1.close();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(jsonReader1, jsonReader0);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '{';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '{', '\'', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark((-2230));
      assertArrayEquals(new char[] {'\'', '{', '\'', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '{', '\'', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', '{', '\'', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000", string0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was END_DOCUMENT at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'T', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'T', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertArrayEquals(new char[] {'T', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertArrayEquals(new char[] {'T', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)93;
      byteArray0[0] = (byte)93;
      StringReader stringReader0 = new StringReader("8}*Q)#");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'-', '-', '-', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'-', '-', '-', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '{';
      charArray0[2] = 'M';
      charArray0[3] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '{', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark((-2230));
      assertArrayEquals(new char[] {'\'', '{', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '{', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', '{', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'v';
      charArray0[2] = '}';
      charArray0[3] = 'T';
      charArray0[4] = '7';
      charArray0[5] = 'v';
      charArray0[6] = 'j';
      charArray0[7] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'g', 'v', '}', 'T', '7', 'v', 'j', 'T'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'g', 'v', '}', 'T', '7', 'v', 'j', 'T'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'g', 'v', '}', 'T', '7', 'v', 'j', 'T'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new char[] {'g', 'v', '}', 'T', '7', 'v', 'j', 'T'}, charArray0);
      assertNotNull(string0);
      assertEquals("gv", string0);
      assertTrue(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'g', 'v', '}', 'T', '7', 'v', 'j', 'T'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      charArrayReader1.reset();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertArrayEquals(new char[] {'g', 'v', '}', 'T', '7', 'v', 'j', 'T'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      StringReader stringReader0 = new StringReader("cz1{");
      assertNotNull(stringReader0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'M';
      charArray0[3] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{', 'M', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark((-2230));
      assertArrayEquals(new char[] {'{', '{', 'M', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'{', '{', 'M', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'{', '{', 'M', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected name at line 1 column 2 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'M';
      charArray0[3] = '{';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      charArray0[6] = '{';
      charArray0[7] = 'A';
      charArray0[8] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{', 'M', '{', 'A', 'A', '{', 'A', '3'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'{', '{', 'M', '{', 'A', 'A', '{', 'A', '3'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'{', '{', 'M', '{', 'A', 'A', '{', 'A', '3'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.beginObject();
      assertArrayEquals(new char[] {'{', '{', 'M', '{', 'A', 'A', '{', 'A', '3'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected name at line 1 column 2 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[6];
      charArray0[4] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '/', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '/', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '/', '\u0000'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      StringReader stringReader0 = new StringReader("n3@S8Tc)\"&q@QT\"y*Rg");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      byteArray0[0] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)93}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 6);
      assertArrayEquals(new byte[] {(byte)93}, byteArray0);
      assertNotNull(pushbackInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '-';
      charArray0[3] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'-', '#', '-', '-'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'-', '#', '-', '-'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'-', '#', '-', '-'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'-', '#', '-', '-'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[2] = 'M';
      charArray0[3] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\u0000', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\u0000', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', '\u0000', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\u0000', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      jsonReader0.setLenient(true);
      assertNotSame(jsonReader0, jsonReader1);
      assertArrayEquals(new char[] {'\'', '\u0000', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotSame(jsonReader0, jsonReader1);
      assertArrayEquals(new char[] {'\'', '\u0000', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotNull(string0);
      assertEquals("\u0000M", string0);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'\'', '\u0000', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      String string1 = jsonReader0.nextString();
      assertNotSame(jsonReader0, jsonReader1);
      assertArrayEquals(new char[] {'\'', '\u0000', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000", string1);
      assertTrue(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertNotSame(jsonReader0, jsonReader1);
      assertArrayEquals(new char[] {'\'', '\u0000', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertEquals(17, int0);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader2 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\u0000', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      
      jsonReader2.setLenient(true);
      assertNotSame(jsonReader2, jsonReader1);
      assertNotSame(jsonReader2, jsonReader0);
      assertArrayEquals(new char[] {'\'', '\u0000', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertTrue(jsonReader2.isLenient());
      
      JsonReader jsonReader3 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\u0000', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader3.equals((Object)jsonReader0));
      assertFalse(jsonReader3.equals((Object)jsonReader1));
      assertFalse(jsonReader3.equals((Object)jsonReader2));
      assertNotNull(jsonReader3);
      assertFalse(jsonReader3.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was END_DOCUMENT at line 1 column 10 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=ijfI");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 4607);
      assertNotNull(bufferedReader0);
      
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\"', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'\"', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\"', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\"', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      int int0 = jsonReader0.peeked;
      assertArrayEquals(new char[] {'\"', '\u0000'}, charArray0);
      assertEquals(0, int0);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'\"', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(JsonToken.STRING, jsonToken0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark(4);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '{';
      charArray0[2] = 'M';
      charArray0[3] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '{', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark((-2230));
      assertArrayEquals(new char[] {'\'', '{', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '{', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', '{', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertArrayEquals(new char[] {'\'', '{', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(JsonToken.STRING, jsonToken0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9,$&_l1/WKSI[hMq");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertEquals(15, int0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'9', '9', ' '}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'9', '9', ' '}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      double double0 = jsonReader0.nextDouble();
      assertArrayEquals(new char[] {'9', '9', ' '}, charArray0);
      assertEquals(99.0, double0, 0.01);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was END_DOCUMENT at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = '!';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'~', '!', '.', '.', '`', '`', '/'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'~', '!', '.', '.', '`', '`', '/'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'~', '!', '.', '.', '`', '`', '/'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new char[] {'~', '!', '.', '.', '`', '`', '/'}, charArray0);
      assertNotNull(string0);
      assertEquals("~!..``", string0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = '!';
      charArray0[2] = '.';
      charArray0[3] = '1';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'~', '!', '.', '1', '`', '`', '/'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'~', '!', '.', '1', '`', '`', '/'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'~', '!', '.', '1', '`', '`', '/'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new char[] {'~', '!', '.', '1', '`', '`', '/'}, charArray0);
      assertNotNull(string0);
      assertEquals("~!.1``", string0);
      assertTrue(jsonReader0.isLenient());
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'~', '!', '.', '1', '`', '`', '/'}, charArray0);
      
      StringReader stringReader0 = new StringReader("~!.1``");
      assertNotNull(stringReader0);
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = 'L';
      charArray0[3] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', 'L', '\u0000', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', 'L', '\u0000', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', 'L', '\u0000', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new char[] {'\'', 'L', '\u0000', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("L\u0000", string0);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', 'L', '\u0000', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      charArrayReader0.reset();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'\'', 'L', '\u0000', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '/', '\u0000', '/', '/'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'/', '/', '\u0000', '/', '/'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'/', '/', '\u0000', '/', '/'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PipedReader pipedReader0 = new PipedReader(101);
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = 7;
      assertFalse(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.NULL, jsonToken0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was NULL at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[2] = ']';
      charArray0[3] = '{';
      charArray0[5] = '\u001B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'|', '\u0000', ']', '{', '\u0000', '\u001B'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'|', '\u0000', ']', '{', '\u0000', '\u001B'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'|', '\u0000', ']', '{', '\u0000', '\u001B'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new char[] {'|', '\u0000', ']', '{', '\u0000', '\u001B'}, charArray0);
      assertNotNull(string0);
      assertEquals("|\u0000", string0);
      assertTrue(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'|', '\u0000', ']', '{', '\u0000', '\u001B'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '{';
      charArray0[2] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '{', 'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '{', 'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', '{', 'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 10 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = (-1093);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals(10, int0);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 101;
      PipedReader pipedReader0 = new PipedReader(101);
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("eGW]EUE8a3V)R");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertNotNull(string0);
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '9'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '9'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = true;
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '9'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '9'}, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u00009", string0);
      assertTrue(jsonReader0.isLenient());
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '9'}, charArray0);
      
      StringReader stringReader0 = new StringReader("\u0000\u0000\u0000\u0000\u00009");
      assertNotNull(stringReader0);
      
      long long0 = jsonReader0.nextLong();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '9'}, charArray0);
      assertEquals(9L, long0);
      assertTrue(jsonReader0.isLenient());
      
      StringReader stringReader1 = new StringReader("\u0000\u0000\u0000\u0000\u00009");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '9'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '9'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '9'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '9'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      double double0 = jsonReader0.nextDouble();
      assertNotSame(jsonReader0, jsonReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '9'}, charArray0);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertEquals(9.0, double0, 0.01);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was END_DOCUMENT at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\"';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[3] = 'N';
      charArray0[4] = '\'';
      charArray0[5] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\'', '\"', 'N', '\'', 'N'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\'', '\"', 'N', '\'', 'N'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', '\'', '\"', 'N', '\'', 'N'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertArrayEquals(new char[] {'\'', '\'', '\"', 'N', '\'', 'N'}, charArray0);
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      
      StringReader stringReader0 = new StringReader("END_OBJECT");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '{';
      charArray0[2] = '_';
      charArray0[3] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '{', '_', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '{', '_', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', '{', '_', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertArrayEquals(new char[] {'\'', '{', '_', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\"';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[3] = 'N';
      charArray0[4] = '\'';
      charArray0[5] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\'', '\"', 'N', '\'', 'N'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\'', '\"', 'N', '\'', 'N'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', '\'', '\"', 'N', '\'', 'N'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertArrayEquals(new char[] {'\'', '\'', '\"', 'N', '\'', 'N'}, charArray0);
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', '\'', '\"', 'N', '\'', 'N'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertArrayEquals(new char[] {'\'', '\'', '\"', 'N', '\'', 'N'}, charArray0);
      assertNotNull(string0);
      assertEquals("JsonReader at line 1 column 2 path $", string0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertArrayEquals(new char[] {'\'', '\'', '\"', 'N', '\'', 'N'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)93;
      byteArray0[1] = (byte)93;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\"', 'N'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'\"', 'N'}, charArray0);
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\"', 'N'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\"', 'N'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertArrayEquals(new char[] {'\"', 'N'}, charArray0);
      assertEquals(9, int0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\"', 'N'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      
      char[] charArray0 = new char[8];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      charArray0[0] = 'g';
      charArray0[1] = 'v';
      charArray0[2] = '\u0087';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'g', 'v', '\u0087', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'g', 'v', '\u0087', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.close();
      assertArrayEquals(new char[] {'g', 'v', '\u0087', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertArrayEquals(new char[] {'g', 'v', '\u0087', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertArrayEquals(new char[] {'g', 'v', '\u0087', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '{';
      charArray0[2] = 'M';
      charArray0[3] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '{', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)24, (byte)62, (byte)2, (byte)10, (byte)9, (byte)101}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 807);
      assertArrayEquals(new byte[] {(byte)91, (byte)24, (byte)62, (byte)2, (byte)10, (byte)9, (byte)101}, byteArray0);
      assertNotNull(pushbackInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, charset0);
      assertArrayEquals(new byte[] {(byte)91, (byte)24, (byte)62, (byte)2, (byte)10, (byte)9, (byte)101}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(7, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)91, (byte)24, (byte)62, (byte)2, (byte)10, (byte)9, (byte)101}, byteArray0);
      assertNotNull(jsonReader0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(jsonReader0.isLenient());
      assertEquals(7, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)2, 341);
      assertArrayEquals(new byte[] {(byte)91, (byte)24, (byte)62, (byte)2, (byte)10, (byte)9, (byte)101}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(5, byteArrayInputStream1.available());
      
      InputStreamReader inputStreamReader1 = new InputStreamReader(byteArrayInputStream1, charset0);
      assertArrayEquals(new byte[] {(byte)91, (byte)24, (byte)62, (byte)2, (byte)10, (byte)9, (byte)101}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(inputStreamReader1.equals((Object)inputStreamReader0));
      assertNotNull(inputStreamReader1);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(5, byteArrayInputStream1.available());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertNotSame(inputStreamReader0, inputStreamReader1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)91, (byte)24, (byte)62, (byte)2, (byte)10, (byte)9, (byte)101}, byteArray0);
      assertFalse(inputStreamReader0.equals((Object)inputStreamReader1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(JsonToken.BEGIN_ARRAY, jsonToken0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(jsonReader0.isLenient());
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '{';
      charArray0[2] = 'M';
      charArray0[3] = '\'';
      StringReader stringReader0 = new StringReader("X,pm");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertEquals("X", string0);
      assertTrue(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '{', 'M', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }
}
