/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:30:04 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1411L));
      assertEquals((-1411.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483628869E9);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(2.147483629E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals("2147483629", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1625.2);
      String string0 = rationalNumber0.toString();
      assertEquals("8126/5 (1,625.2)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(860L, 0L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(0.40000000000009095);
      rationalNumber0.floatValue();
      rationalNumber1.longValue();
      // Undeclared exception!
      try { 
        rationalNumber0.intValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      String string0 = rationalNumber0.toString();
      assertEquals("2,147,483,647", string0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(2.147483647E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(20, 1537);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0.013", string0);
      
      String string1 = rationalNumber0.toString();
      assertEquals("20/1537 (0.013)", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      String string0 = rationalNumber0.toString();
      assertEquals("-2,147,483,647", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals((-2.14748365E9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      RationalNumber rationalNumber0 = new RationalNumber((-471), 0);
      rationalNumber0.toString();
      // Undeclared exception!
      try { 
        rationalNumber0.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3.455443220445886E-8);
      int int0 = rationalNumber0.intValue();
      assertEquals(28939848, rationalNumber0.divisor);
      assertEquals(3.455443166114763E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483673L), (-2147483673L));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2147483673L));
      assertEquals(1, rationalNumber1.numerator);
      
      rationalNumber0.doubleValue();
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf((-231.007));
      assertEquals((-231.0099F), rationalNumber2.floatValue(), 0.01F);
      
      rationalNumber0.floatValue();
      float float0 = rationalNumber0.floatValue();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      assertEquals(100000000, rationalNumber0.divisor);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2147483673L));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2147483673L));
      assertEquals(4.656612927287502E-10, rationalNumber1.doubleValue(), 0.01);
      assertEquals(1, rationalNumber1.numerator);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals((-2.147483647E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-2147483656L);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483656L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483656, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.834230093022524);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber1.toDisplayString();
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0.834", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(12L, 2147483661L);
      RationalNumber.factoryMethod(12L, 100L);
      RationalNumber rationalNumber3 = rationalNumber2.negate();
      assertEquals((-5.5879354164678485E-9), rationalNumber3.doubleValue(), 0.01);
      
      rationalNumber0.floatValue();
      RationalNumber rationalNumber4 = rationalNumber0.negate();
      RationalNumber rationalNumber5 = RationalNumber.valueOf(12L);
      float float0 = rationalNumber4.floatValue();
      assertEquals((-0.8342301F), float0, 0.01F);
      
      rationalNumber2.toDisplayString();
      String string1 = rationalNumber5.toString();
      assertEquals("12", string1);
  }
}
