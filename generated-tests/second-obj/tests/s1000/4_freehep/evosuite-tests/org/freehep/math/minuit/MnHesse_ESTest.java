/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:20:36 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnFcn;
import org.freehep.math.minuit.MnHesse;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnHesse_ESTest extends MnHesse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(194);
      double double0 = mnHesse0.tolerg2();
      assertEquals(0.02, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-496.37121449404856), (-496.37121449404856), 0.2, 0.2, 0.2).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals((-496.37121449404856), mnUserParameterState0.fval(), 0.01);
      assertEquals(60, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, 204390354);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      mnHesse0.tolerg2();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1089.408;
      doubleArray0[1] = (-2215.844);
      doubleArray0[2] = 253.088901;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals(22, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-329));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-329), (double)(-329)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(3400);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(1100);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4.0596718857547156E-30;
      doubleArray0[1] = (double) 1100;
      doubleArray0[2] = (double) 1100;
      doubleArray0[3] = (double) 1100;
      doubleArray0[4] = (double) 1100;
      doubleArray0[5] = (double) 1100;
      doubleArray0[6] = (double) 1100;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 1100);
      assertEquals(40, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setHessianNCycles(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(1113);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1113, 690.6082, (double)1113, 1704.02397156255, 1704.02397156255).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4.0596718857547156E-30;
      doubleArray0[1] = (double) 1113;
      doubleArray0[2] = (double) 1113;
      doubleArray0[3] = (double) 1113;
      doubleArray0[4] = (double) 1113;
      doubleArray0[5] = (double) 1113;
      doubleArray0[6] = (double) 1113;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 1113);
      assertEquals(1113.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(42, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setHessianNCycles(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.clone();
      mnUserParameters0.clone();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.38581601704576E-9, (double)0, 0.06680000000000001, 0.06680000000000001, 0.06680000000000001).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 2.38581601704576E-9;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (-799.0617113384097);
      doubleArray0[7] = 2.38581601704576E-9;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 7);
      MnHesse mnHesse1 = new MnHesse(176);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.1, 1253.5968756168145, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (-3236.9087);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 1743.1);
      MinimumParameters minimumParameters0 = new MinimumParameters(1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1, (-345));
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3236.9087);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MinimumParameters minimumParameters0 = new MinimumParameters(1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 4456.0, (-345));
      mnUserParameters0.add((String) null, (double) (-345));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, (-3236.9087), 3409.9479431251).when(fCNBase1).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase1, 2.822746077322791);
      MinimumState minimumState1 = new MinimumState(1324);
      MinimumState minimumState2 = new MinimumState(minimumParameters0, 3409.9479431251, (-108));
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState2, mnUserTransformation0, 1324);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parameters are invalid
         //
         verifyException("org.freehep.math.minuit.HessianGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MinimumParameters minimumParameters0 = new MinimumParameters(1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 4456.0, (-345));
      mnUserParameters0.add((String) null, (double) (-345));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, 0.1, 3409.9479431251, 2.1103763833883535, 0.1).when(fCNBase1).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase1, 2.1000801054368887);
      MinimumState minimumState1 = new MinimumState(1324);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      MinimumParameters minimumParameters1 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-3629.9287424914064));
      MinimumState minimumState2 = new MinimumState(minimumParameters1, 3409.9479431251, (-108));
      MinimumState minimumState3 = mnHesse0.calculate(mnFcn0, minimumState2, mnUserTransformation0, 1324);
      assertNotSame(minimumState2, minimumState3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setHessianNCycles(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      // Undeclared exception!
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2717.55494664116), (-2717.55494664116), (-2717.55494664116), 0.03236908700000001, 0.03236908700000001).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3236.9087);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnStrategy0.setHessianNCycles(1);
      mnUserParameters0.add((String) null, (double) (-345));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.5);
      MinimumState minimumState0 = new MinimumState(5);
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1);
      assertNotSame(minimumState1, minimumState0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3.340000000000002E-8, 0.1, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3236.9087);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MinimumParameters minimumParameters0 = new MinimumParameters(1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 4456.0, (-345));
      mnUserParameters0.add((String) null, (double) (-345));
      MinimumState minimumState1 = new MinimumState(1324);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      MinimumParameters minimumParameters1 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-3629.9287424914064));
      MinimumState minimumState2 = new MinimumState(minimumParameters1, 3409.9479431251, (-108));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 470.62557093);
      MinimumState minimumState3 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 6);
      assertNotSame(minimumState3, minimumState0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 0.1;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MinimumParameters minimumParameters0 = new MinimumParameters(2830);
      mnUserParameters0.add("SVW;\"Dl&^o)!2", 0.0, (-2085.47), 10000.0, (-1.0));
      MinimumState minimumState0 = new MinimumState(2830);
      mnUserParameters0.add((String) null, (double) (-345));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2830, (-20119.254981006034), 3409.9479431251, 2.1103763833883535, (-0.07347205698419239)).when(fCNBase1).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase1, (-3751.30029));
      minimumState0.vec();
      Double double0 = new Double(0.1);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, 0.1, 119);
      mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation0, (-2147441169));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserTransformation mnUserTransformation1 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(119);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(879.9, 879.9, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3236.9087);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MinimumParameters minimumParameters0 = new MinimumParameters(2830);
      mnUserParameters0.add("SVW;\"Dl&^o)!2", (-3236.9087), (-2085.47), 10000.0, (-1.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 4456.0, (-345));
      mnUserParameters0.add((String) null, (double) (-345));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2830, (-3236.9087), 3409.9479431251, 2.1103763833883535, 0.1).when(fCNBase1).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase1, (-3236.9087));
      MinimumState minimumState1 = new MinimumState(minimumParameters0, 0.1, 100);
      mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation0, (-2147441169));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0);
      mnHesse0.tolerstp();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameterState0, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFcn", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3.340000000000002E-8, 0.1, 484.4133).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3237.0897265251083);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MinimumParameters minimumParameters0 = new MinimumParameters(1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 4456.0, (-345));
      mnUserParameters0.add((String) null, (double) (-345));
      mnUserTransformation0.setUpperLimit((String) null, (-1325.0953950139));
      MinimumState minimumState1 = new MinimumState(1324);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      MinimumParameters minimumParameters1 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-3629.9287424914064));
      MinimumState minimumState2 = new MinimumState(minimumParameters1, 3409.9479431251, (-108));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 470.62557093);
      MinimumState minimumState3 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 6);
      assertNotSame(minimumState3, minimumState0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3236.9087);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MinimumParameters minimumParameters0 = new MinimumParameters(1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 4456.0, (-345));
      mnUserParameters0.add((String) null, (double) (-345));
      double double0 = 3409.9479431251;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, (-3236.9087), 3409.9479431251).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray1 = mnUserTransformation0.errors();
      MnFcn mnFcn0 = new MnFcn(fCNBase1, (-1085.99));
      mnStrategy0.setHessianG2Tolerance(2.1173632735362832E29);
      mnFcn0.theNumCall = 1;
      MinimumState minimumState1 = new MinimumState(minimumParameters0, (-345), 100);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-2147441169));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase2, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.1;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MinimumParameters minimumParameters0 = new MinimumParameters(1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 4456.0, (-345));
      mnUserParameters0.add((String) null, (double) (-345));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, 0.1, 3410.7721906382303, 2.1103763833883535, 0.1).when(fCNBase1).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase1, 2.822746077322791);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, 1324, 1324);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState1.vec();
      MinimumParameters minimumParameters1 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-3629.9287424914064));
      mnUserParameters0.setPrecision(2.822746077322791);
      mnAlgebraicVector0.toString();
      MinimumState minimumState2 = new MinimumState(minimumParameters1, 3410.7721906382303, (-108));
      mnHesse0.calculate(mnFcn0, minimumState2, mnUserTransformation0, 1324);
      MinimumParameters minimumParameters2 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.1);
      MinimumState minimumState3 = new MinimumState(minimumParameters0, 3410.7721906382303, (-108));
      mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation0, 2981677);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = null;
      try {
        mnUserCovariance0 = new MnUserCovariance(doubleArray0, 1324);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistent arguments
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(9);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 2.0);
      MinimumParameters minimumParameters0 = new MinimumParameters(200);
      MinimumError minimumError0 = new MinimumError(9);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(9);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      int int0 = (-160);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 200, (-160));
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-1042));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters are invalid
         //
         verifyException("org.freehep.math.minuit.InitialGradientCalculator", e);
      }
  }
}
