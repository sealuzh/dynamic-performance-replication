/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 13:29:57 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<HashMap<Object, Object>, Integer>> hashMap0 = new HashMap<Map<Object, Object>, Map<HashMap<Object, Object>, Integer>>();
      Class<Map> class0 = Map.class;
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      DoubleKeyMap<Object, Map<HashMap<Object, Object>, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<HashMap<Object, Object>, Integer>, Object>();
      Map<HashMap<Object, Object>, Integer> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, Integer>(hashMap0, class0);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      doubleKeyMap1.remove((Map<Object, Object>) hashMap1, hashMap2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Map<Object, Object>, Map<HashMap<Object, Object>, Integer>> hashMap0 = new HashMap<Map<Object, Object>, Map<HashMap<Object, Object>, Integer>>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      DoubleKeyMap<Object, Map<HashMap<Object, Object>, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<HashMap<Object, Object>, Integer>, Object>(class0);
      Map<HashMap<Object, Object>, Integer> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, Integer>(hashMap0, class1);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      Integer integer0 = doubleKeyMap1.get((Map<Object, Object>) hashMap1, hashMap2);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Map<Object, Object>, Map<HashMap<Object, Object>, Integer>> hashMap0 = new HashMap<Map<Object, Object>, Map<HashMap<Object, Object>, Integer>>();
      Class<Map> class1 = Map.class;
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      DoubleKeyMap<Object, Map<HashMap<Object, Object>, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<HashMap<Object, Object>, Integer>, Object>(class0);
      Map<HashMap<Object, Object>, Integer> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, Integer>(hashMap0, class1);
      Map<HashMap<Object, Object>, Integer> map1 = doubleKeyMap1.remove((Map<Object, Object>) hashMap1);
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Map<Integer, HashMap<Object, Object>>, Object>, Map<Integer, HashMap<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Map<Integer, HashMap<Object, Object>>, Object>, Map<Integer, HashMap<Object, Object>>>();
      HashMap<Map<Integer, HashMap<Object, Object>>, Object> hashMap0 = new HashMap<Map<Integer, HashMap<Object, Object>>, Object>();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>((Map<Integer, Map<Integer, String>>) null);
      Map<Integer, HashMap<Object, Object>> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put("Rk.$s>=6}8pZc&B.H", hashMap0, map0);
      Map<HashMap<Map<Integer, HashMap<Object, Object>>, Object>, Map<Integer, HashMap<Object, Object>>> map1 = doubleKeyMap0.get("Rk.$s>=6}8pZc&B.H");
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<Integer, String>> hashMap0 = new HashMap<String, Map<Integer, String>>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(hashMap0);
      DoubleKeyMap<HashMap<Object, Integer>, Object, HashMap<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Integer>, Object, HashMap<Integer, String>>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap<Integer, String> hashMap2 = doubleKeyMap1.remove(hashMap1, (Object) doubleKeyMap0);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Integer, HashMap<Object, Object>>, Object>, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Integer, HashMap<Object, Object>>, Object>, String, HashMap<Object, String>>();
      Map<Object, Map<HashMap<Integer, String>, HashMap<String, Object>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Integer, String>, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Integer, String>, HashMap<String, Object>>(map0, class0);
      Object object0 = new Object();
      Map<HashMap<Integer, String>, HashMap<String, Object>> map1 = doubleKeyMap1.remove(object0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Object, Map<Integer, HashMap<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Integer, HashMap<Object, Object>>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap1.put("W?~2Ad18(C{S}Dc", "W?~2Ad18(C{S}Dc", (Object) doubleKeyMap0);
      Map<String, Object> map0 = doubleKeyMap1.remove("W?~2Ad18(C{S}Dc");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
      Integer integer0 = doubleKeyMap0.remove((String) null, (Integer) null);
      Integer integer1 = doubleKeyMap0.put("wrong proto type map ", (Integer) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Map<Integer, String>> hashMap0 = new HashMap<String, Map<Integer, String>>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(hashMap0);
      DoubleKeyMap<HashMap<Object, Integer>, Object, HashMap<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Integer>, Object, HashMap<Integer, String>>();
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      HashMap<Integer, String> hashMap3 = doubleKeyMap1.put(hashMap2, (Object) doubleKeyMap0, hashMap1);
      assertNull(hashMap3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<String, Map<HashMap<Object, String>, HashMap<Integer, Object>>> hashMap0 = new HashMap<String, Map<HashMap<Object, String>, HashMap<Integer, Object>>>();
      DoubleKeyMap<String, HashMap<Object, String>, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, String>, HashMap<Integer, Object>>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<Integer, Object> hashMap2 = doubleKeyMap0.get((String) null, hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Map<Integer, HashMap<Object, Object>>, Object>, Map<Integer, HashMap<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Map<Integer, HashMap<Object, Object>>, Object>, Map<Integer, HashMap<Object, Object>>>();
      Map<HashMap<Map<Integer, HashMap<Object, Object>>, Object>, Map<Integer, HashMap<Object, Object>>> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      HashMap<Integer, HashMap<Object, Object>> hashMap1 = new HashMap<Integer, HashMap<Object, Object>>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(",6K.TMzEF.yT6T", "us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<Integer, HashMap<Object, Object>>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, HashMap<Object, Object>>, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
      Integer integer0 = new Integer(2380);
      doubleKeyMap0.put((String) null, integer0, integer0);
      Integer integer1 = doubleKeyMap0.remove((String) null, (Integer) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Map<String, Object>, Map<Object, String>> hashMap0 = new HashMap<Map<String, Object>, Map<Object, String>>();
      DoubleKeyMap<HashMap<Object, Integer>, Object, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Object, HashMap<Integer, String>>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>(2605);
      HashMap<Integer, String> hashMap3 = doubleKeyMap0.put(hashMap1, (Object) hashMap0, hashMap2);
      HashMap<Integer, String> hashMap4 = doubleKeyMap0.put(hashMap1, (Object) hashMap0, hashMap3);
      assertNotNull(hashMap4);
      assertSame(hashMap4, hashMap2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Map<HashMap<Object, Object>, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<HashMap<Object, Object>, Integer>, Object>(class0);
      Object object0 = new Object();
      HashMap<HashMap<Object, Object>, Integer> hashMap0 = new HashMap<HashMap<Object, Object>, Integer>();
      HashMap<Integer, HashMap<Object, Object>> hashMap1 = new HashMap<Integer, HashMap<Object, Object>>();
      Object object1 = doubleKeyMap0.put(object0, (Map<HashMap<Object, Object>, Integer>) hashMap0, (Object) hashMap1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.get("", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<HashMap<Object, Object>, Integer>> hashMap0 = new HashMap<Map<Object, Object>, Map<HashMap<Object, Object>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, HashMap<Object, Object>, Integer>(hashMap0, class0);
      HashMap<Object, Map<Integer, Map<Object, Integer>>> hashMap1 = new HashMap<Object, Map<Integer, Map<Object, Integer>>>();
      DoubleKeyMap<Object, Integer, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<Object, Integer>>(hashMap1);
      Map<Integer, Map<Object, Integer>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Map<Integer, HashMap<Object, Object>>, Object>, Map<Integer, HashMap<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Map<Integer, HashMap<Object, Object>>, Object>, Map<Integer, HashMap<Object, Object>>>();
      Map<HashMap<Map<Integer, HashMap<Object, Object>>, Object>, Map<Integer, HashMap<Object, Object>>> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }
}
