/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:39:24 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.AfterFilter;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.File;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.Instant;
import java.time.chrono.MinguoDate;
import java.util.Calendar;
import java.util.Date;
import java.util.IdentityHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ca{_");
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) "@type");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.serializer.DateCodec", parserConfig0, 6);
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) parserConfig0, (Object) serializerFeature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      dateCodec0.write(jSONSerializer0, (Object) null, jSONSerializer0, (Type) null, 8);
      assertNull(jSONSerializer0.getDateFormatPattern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      dateCodec0.getFastMatchToken();
      SerializeWriter serializeWriter0 = new SerializeWriter(2);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Long long0 = new Long(3547627781654598988L);
      Class<Byte> class0 = Byte.TYPE;
      dateCodec0.write(jSONSerializer0, long0, serializeWriter0, class0, 2);
      assertEquals(19, serializeWriter0.size());
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      dateCodec0.cast((DefaultJSONParser) null, (Type) null, (Object) null, (Object) null);
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("m(m%");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MinguoDate minguoDate0 = MockMinguoDate.now();
      defaultJSONParser0.handleResovleTask(minguoDate0);
      JSON.DEFFAULT_DATE_FORMAT = "json-path annot be null or empty";
      Class<Method> class0 = Method.class;
      System.setCurrentTimeMillis(2);
      System.setCurrentTimeMillis(0);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Instant instant0 = MockInstant.ofEpochMilli(1);
      Date date0 = Date.from(instant0);
      dateCodec0.write(jSONSerializer0, date0, "/Date(00010101t00Rr?)0", class0, 0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      dateCodec0.getFastMatchToken();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("create", parserConfig0);
      Class<Method> class0 = Method.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      FieldInfo[] fieldInfoArray0 = new FieldInfo[0];
      SerializeBeanInfo serializeBeanInfo0 = new SerializeBeanInfo(class0, jSONType0, "", "", 67, fieldInfoArray0, fieldInfoArray0);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      Class<?> class1 = javaBeanSerializer0.getType();
      dateCodec0.cast(defaultJSONParser0, (Type) class1, (Object) class0, (Object) "");
      TimeZone.getTimeZone("create");
      // Undeclared exception!
      try { 
        javaBeanSerializer0.getBeanContext(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(4680L);
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0001-01-01T00:00:00+08:00");
      Class<Calendar> class0 = Calendar.class;
      Class<Float> class1 = Float.class;
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("%bID8]<eKe_^=r]=f", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("0001-01-01T00:00:00+08:00", class1, class2, class2, (Field) null, 2, (-402524981), Integer.MIN_VALUE);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class3 = beanContext0.getFieldClass();
      MockJapaneseDate mockJapaneseDate0 = dateCodec0.cast(defaultJSONParser0, (Type) class3, (Object) defaultJSONParser0, (Object) "0001-01-01T00:00:00+08:00");
      assertNull(mockJapaneseDate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.serializer.DateCodec");
      defaultJSONParser0.setDateFormat("com.alibaba.fastjson.serializer.DateCodec");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) defaultJSONParser0, (Object) "com.alibaba.fastjson.serializer.DateCodec");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'c'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSON.DEFAULT_TYPE_KEY = "/Date(00010101t0006)8:00";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ca{_");
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) "/Date(00010101t0006)8:00");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(00010101t0006)8:00\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Double> class0 = Double.TYPE;
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("gOXi5kcdv;");
      System.setCurrentTimeMillis(0);
      Class<Double> class1 = Double.TYPE;
      Object object1 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class1, (Object) "0000-00-00");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("DVte(00010101t000+0800");
      Class<Method> class0 = Method.class;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSON.DEFAULT_TYPE_KEY = "`!";
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockMinguoDate0, (Object) "DVte(00010101t000+0800");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"DVte(00010101t000+0800\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("00");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature1;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0, 39, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Class<Integer> class0 = Integer.TYPE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      int int0 = Float.BYTES;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("00");
      dateCodec0.write(jSONSerializer0, "00", class0, class0, (-5254));
      int int1 = Calendar.NARROW_FORMAT;
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockFile mockFile0 = new MockFile("00", "`yj");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[5] = serializerFeature4;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0, 131072, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      MockDate mockDate0 = new MockDate();
      Class<Integer> class0 = Integer.TYPE;
      jSONSerializer0.writeKeyValue('&', "(Z)V", serializerFeature0);
      dateCodec0.write(jSONSerializer0, mockDate0, (Object) null, class0, (-1917767038));
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@] U+*L~)=rw#GOy", "00");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0, 31, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      MockDate mockDate0 = new MockDate(31, 31, 36, 36, 36, 31);
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = new Object();
      jSONSerializer0.writeKeyValue('&', "A<(Z)V", object0);
      SerializeWriter serializeWriter1 = new SerializeWriter(36);
      long long0 = serializeWriter1.sepcialBits;
      DateCodec dateCodec0 = DateCodec.instance;
      Byte byte0 = new Byte((byte)5);
      dateCodec0.write(jSONSerializer0, byte0, object0, class0, 36);
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockFile mockFile0 = new MockFile("00", "00");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[4] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[5] = serializerFeature4;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0, 31, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      MockDate mockDate0 = new MockDate(31, 31, 31, 31, 31, 31);
      Class<Integer> class0 = Integer.TYPE;
      long long0 = serializeWriter0.sepcialBits;
      dateCodec0.write(jSONSerializer0, mockDate0, (Object) null, class0, (-1917767038));
      int int0 = SerializerFeature.WRITE_MAP_NULL_FEATURES;
      int int1 = dateCodec0.getFastMatchToken();
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockFile mockFile0 = new MockFile("r^");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      mockFile0.toURL();
      mockFile0.delete();
      serializerFeatureArray0[3] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[5] = serializerFeature3;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0, 49, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      jSONSerializer0.getContextValueFilters();
      MockDate mockDate0 = new MockDate(49, 49, 49, 49, 49);
      LinkedList<AfterFilter> linkedList0 = new LinkedList<AfterFilter>();
      jSONSerializer0.afterFilters = (List<AfterFilter>) linkedList0;
      Class<Integer> class0 = Integer.TYPE;
      dateCodec0.write(jSONSerializer0, mockDate0, "r^", class0, 49);
      StringReader stringReader0 = new StringReader("r^");
      JSON.setDefaultTypeKey("r^");
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, "r^", class0, class0, (-5254));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"r^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1H4a96l d.nbP4N96W2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1H4a96l d.nbP4N96W2");
      Class<Method> class0 = Method.class;
      DateCodec dateCodec0 = new DateCodec();
      byte[] byteArray0 = new byte[8];
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[7] = (byte) (-2);
      Integer integer0 = new Integer(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((byte) (-2), 0, (byte)0, (byte)0, (byte)0, (-1271496738));
      JSON.DEFAULT_TYPE_KEY = "1H4a96l d.nbP4N96W2";
      MockDate mockDate0 = new MockDate(1, 0, (-1271496738));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis((-1271496738));
      MockFile mockFile0 = new MockFile((File) null, "@type");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[2] = serializerFeature2;
      MockDate mockDate1 = new MockDate();
      SerializerFeature serializerFeature3 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockFileWriter0, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, mockDate0, serializerFeature0, class0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1H4a96l d.nbP4N96W2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Method> class0 = Method.class;
      DateCodec dateCodec0 = new DateCodec();
      byte[] byteArray0 = new byte[8];
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      byteArray0[7] = (byte) (-2);
      Integer integer0 = new Integer(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((byte) (-2), 0, (byte)0, (byte)0, (byte)0, (-1271496738));
      JSON.DEFAULT_TYPE_KEY = "1H4a96l d.nbP4N96W2";
      MockDate mockDate0 = new MockDate(1, 0, (-1271496738));
      System.setCurrentTimeMillis((-1271496738));
      MockFile mockFile0 = new MockFile((File) null, "@type");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[2] = serializerFeature2;
      MockDate mockDate1 = new MockDate();
      serializerFeatureArray0[3] = serializerFeature1;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature3;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockFileWriter0, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      dateCodec0.write(jSONSerializer0, mockDate0, serializerFeature0, class0, 1);
      assertEquals(92, serializeWriter0.size());
  }
}
