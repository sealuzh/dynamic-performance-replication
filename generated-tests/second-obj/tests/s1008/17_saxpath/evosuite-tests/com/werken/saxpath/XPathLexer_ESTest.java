/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:57:05 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KVynn/8V4g;}F");
      xPathLexer0.rightParen();
      xPathLexer0.at();
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.getPreviousToken();
      xPathLexer0.number();
      xPathLexer1.or();
      String string0 = "";
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$]S(");
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.literal();
      xPathLexer0.currentPosition();
      String string0 = xPathLexer0.getXPath();
      assertEquals("$]S(", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("B)hqF(F/P");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.div();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals(")", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("h", token3.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("B", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">#_I(MFI");
      Token token0 = xPathLexer0.not();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (>)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals("#_I(MFI", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-2Q]BcQ2`]km5(q!u!O");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("-2", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Q", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(3, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".)(1-81\"k=~");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      Token token0 = xPathLexer1.leftBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("v", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Af#.CdO~");
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("&r.b_L22SO )!W'g");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(14, token1.getTokenType());
      assertEquals("r.", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("b_", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@Af8ua{}Q");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("Af", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("8", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("puGw{");
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.consume((-1373));
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("P><)");
      xPathLexer0.or();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z|wt");
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.whitespace();
      xPathLexer0.plus();
      Token token0 = xPathLexer1.number();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.consume();
      XPathLexer xPathLexer3 = new XPathLexer("{CNL=-y");
      xPathLexer3.div();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("7ra6O`");
      String string0 = "";
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.setXPath("4 T.XN");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("S^=35lKn7a&;");
      Token token1 = xPathLexer1.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("S", token1.getTokenText());
      
      xPathLexer1.div();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("^=35lKn7a&;", token2.getTokenText());
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer1.rightBracket();
      assertEquals("^", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("B)hqF(F/P");
      xPathLexer1.div();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.isIdentifierChar('|');
      XPathLexer xPathLexer2 = new XPathLexer("B)hqF(F/P");
      xPathLexer1.setXPath("=");
      Token token6 = xPathLexer1.nextToken();
      assertEquals("=", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      xPathLexer1.div();
      Token token7 = xPathLexer2.comma();
      assertEquals("B", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s@Af8ua{}Q");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Af8ua", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("{", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KVynn/8V4g;}F");
      Token token0 = xPathLexer0.not();
      assertEquals("K", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("Vy", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("nn", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("/", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">2_I(MFI");
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(">", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer(">2_I(MFI");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("_I(MFI", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("(", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=;&!G?(kZs");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("#dl*vv!`v");
      xPathLexer1.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(";&!G?(kZs", token1.getTokenText());
      
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("#", token2.getTokenText());
      
      Token token3 = xPathLexer1.plus();
      assertEquals("d", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals(";&", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "[ (";
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      xPathLexer0.consume((-3018));
      xPathLexer0.endPosition();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Af#.CdO~");
      Token token0 = xPathLexer0.comma();
      assertEquals("2", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.setXPath("&r.b_L22SO )!W'g");
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("r", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals(".b", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(" ", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals(")", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@Af8ua{}Q");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.pipe();
      assertEquals("A", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("f8ua", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("{", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer1.mod();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      assertFalse(xPathLexer0.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAOJ~U#");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("o", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("x", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("U", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("A", token4.getTokenText());
      
      xPathLexer0.consume(0);
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.slashes();
      assertEquals("A", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.isIdentifierChar('$');
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("O", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("J", token7.getTokenText());
      
      xPathLexer0.mod();
      Token token8 = xPathLexer0.dots();
      assertEquals("~", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KVynn/8V4g;}F");
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("m\"");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("j}N<4M?3Y0Nnc@P>rc");
      XPathLexer xPathLexer2 = new XPathLexer("j}N<4M?3Y0Nnc@P>rc");
      xPathLexer2.plus();
      xPathLexer0.not();
      xPathLexer1.LA(150);
      Token token0 = xPathLexer2.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&r.bL22SO )!W'g");
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("^(lRNSWQ[v'gV!let");
      xPathLexer1.or();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer1.getXPath();
      boolean boolean0 = xPathLexer1.isIdentifierChar('*');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KVynn/8V4g;}F");
      Token token0 = xPathLexer0.not();
      assertEquals("K", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("V", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("y", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.setXPath("<1c");
      Token token4 = xPathLexer0.relationalOperator();
      assertEquals(7, token4.getTokenType());
      assertEquals("<", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals("1", token5.getTokenText());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer0.getPreviousToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("c", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("j}N<4M?3Y0Nnc@P>rc");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      char char0 = xPathLexer1.LA(150);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.colon();
      assertEquals("I", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("xUAAO", token3.getTokenText());
      
      xPathLexer0.identifier();
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("&~", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&r.bL22SO )!W'g");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer1.getXPath();
      xPathLexer1.setPreviousToken(token0);
      assertEquals("&r.bL22SO )!W'g", token0.getTokenText());
      
      xPathLexer1.isIdentifierChar('*');
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6Jo\"{eb&G");
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("\"", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@Af7ua{}?");
      xPathLexer0.setXPath("F6Cf}ie|y5=.u");
      Token token0 = xPathLexer0.comma();
      assertEquals("F", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("6", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7Mwl}L`)\"");
      XPathLexer xPathLexer1 = new XPathLexer("F6Cf}ie|y5=.u");
      xPathLexer1.or();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!OZ;4Z.pQ]O.B.I");
      Token token0 = xPathLexer0.colon();
      assertEquals("!", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("OZ", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("v");
      Token token3 = xPathLexer2.not();
      assertEquals("v", token3.getTokenText());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals(";", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6Jo\"{eb&G");
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.minus();
      assertEquals("J", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("", token2.getTokenText());
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAOJ~U#");
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.consume(0);
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.isIdentifierChar('$');
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.dots();
      String string0 = xPathLexer0.getXPath();
      assertEquals("IoxUAAOJ~U#", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7Mwl}L`)\"");
      xPathLexer0.setXPath("F6Cf}ie|y5=.u");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("6", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("Cf", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KVynn/8V4g;}F");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VcCiX7");
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.div();
      int int0 = 1431;
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7Mwl}L`)\"");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("7Mwl}L`)\"");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("7", token0.getTokenText());
      
      xPathLexer1.mod();
      Token token1 = xPathLexer1.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("M", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@Af7ua{}?");
      XPathLexer xPathLexer1 = new XPathLexer("7Mwl}L`)\"");
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("7Mwl}L`)\"");
      Token token0 = xPathLexer1.star();
      assertEquals("7", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer1.minus();
      assertEquals("M", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      xPathLexer2.setPreviousToken(token2);
      assertEquals("wl", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&r.bL22SO )!W'g");
      XPathLexer xPathLexer1 = new XPathLexer("&r.bL22SO )!W'g");
      Token token0 = xPathLexer1.star();
      assertEquals("&", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("^(lRNSWQ[v'gV!let");
      XPathLexer xPathLexer3 = new XPathLexer("&s");
      XPathLexer xPathLexer4 = new XPathLexer("^(lRNSWQ[v'gV!let");
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("r", token1.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("?Lu6l>J/Sun");
      Token token2 = xPathLexer5.nextToken();
      assertEquals("?Lu6l>J/Sun", token2.getTokenText());
      
      xPathLexer2.mod();
      Token token3 = xPathLexer2.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("^", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.setXPath("B)hq(FV/P");
      XPathLexer xPathLexer1 = new XPathLexer("W/wjJg9?aR$\"044];9");
      Token token0 = xPathLexer1.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("W", token0.getTokenText());
      
      xPathLexer1.div();
      Token token1 = xPathLexer1.nextToken();
      assertEquals(11, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("B", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      xPathLexer0.or();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("#", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("dl", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%!~e/Cx|EW%n8[9");
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("&r.bL22SO )!W'g");
      Token token0 = xPathLexer0.minus();
      assertEquals("&", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals("r", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      xPathLexer1.setXPath("&r.bL22SO )!W'g");
      xPathLexer1.or();
      xPathLexer0.setXPath("%!~e/Cx|EW%n8[9");
      Token token3 = xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("");
      String string0 = token3.toString();
      assertEquals("[ (-1) (%!~e/Cx|EW%n8[9)", string0);
      
      xPathLexer1.nextToken();
      Token token4 = xPathLexer2.nextToken();
      String string1 = token4.toString();
      assertEquals("[ (-1) ()", string1);
      
      xPathLexer2.setPreviousToken(token3);
      xPathLexer0.setPreviousToken(token4);
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("IoxUAAOJ~U#");
      xPathLexer1.rightParen();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.star();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      char char0 = xPathLexer0.LA(895);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.isIdentifierChar('\uFFFF');
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("{+6^Cbt|Im8?M]?1");
      Token token2 = xPathLexer2.star();
      assertEquals("{", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Gm*");
      Token token3 = xPathLexer3.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Gm", token3.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("r}");
      Token token4 = xPathLexer2.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("+6", token4.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer5.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer2.minus();
      assertEquals("^", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("6ealUM5");
      xPathLexer1.at();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@Af7ua{}?");
      XPathLexer xPathLexer1 = new XPathLexer("7Mwl}L`)\"");
      Token token0 = xPathLexer0.star();
      assertEquals("@", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("7Mwl}L`)\"");
      xPathLexer2.or();
      Token token1 = xPathLexer2.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("7", token1.getTokenText());
      
      Token token2 = xPathLexer1.minus();
      assertEquals("7", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      xPathLexer2.setPreviousToken(token3);
      assertEquals("Mwl", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".)(1-81\"k=~");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jdjO");
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("jdjO");
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("EHhw~?P");
      Token token0 = xPathLexer0.minus();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.hasMoreChars();
      int int0 = (-1103);
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1103));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("S^=35lKn7a&;");
      xPathLexer1.div();
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("S", token1.getTokenText());
      
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KVynn/8V4g;}F");
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      xPathLexer0.mod();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.at();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!OZ;4Z.pQ]O.B.I");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(23, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("v");
      Token token1 = xPathLexer2.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("v", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(",Ir<1NL");
      Token token4 = xPathLexer1.nextToken();
      assertEquals(",", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer2.or();
      Token token5 = xPathLexer1.nextToken();
      assertEquals("Ir", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer1.rightParen();
      xPathLexer2.operatorName();
      Token token6 = xPathLexer1.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("1", token6.getTokenText());
      
      Token token7 = xPathLexer1.doubleColon();
      assertEquals("NL", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.mod();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer4.slashes();
      assertEquals(11, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@Af7ua{}?");
      xPathLexer0.setXPath("'>:93e-;2#}C.#");
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-587));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-2Q]BcQ2`]km5(q!u!O");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("-", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("2Q", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(4, token2.getTokenType());
      assertEquals("]", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E");
      XPathLexer xPathLexer1 = new XPathLexer("y");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("E", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('h');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3Ntok6");
      xPathLexer0.number();
      xPathLexer0.slashes();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      xPathLexer0.or();
      xPathLexer0.hasMoreChars();
      xPathLexer0.hasMoreChars();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "#dl*vv!`v";
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      xPathLexer0.not();
      xPathLexer0.minus();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume((-799));
      token0.toString();
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("S^=35lKn7a&;");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("S", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("^", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals("35", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("<1.");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("<", token0.getTokenText());
      assertEquals(7, token0.getTokenType());
      
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("1", token1.getTokenText());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("i(d&UI");
      XPathLexer xPathLexer3 = new XPathLexer("<1.");
      xPathLexer1.setXPath("<1.");
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer2.nextToken();
      xPathLexer2.number();
      Token token5 = xPathLexer2.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("(", token5.getTokenText());
      
      xPathLexer1.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer("i(d&UI");
      xPathLexer1.or();
      Token token6 = xPathLexer4.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("i", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("i(d&UI");
      xPathLexer3.endPosition();
      Token token7 = xPathLexer3.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer4.setPreviousToken(token4);
      assertEquals("i", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".9_6W");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.div();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.div();
      Token token0 = xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mmmw\"LhZ{0z!&/o");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("mm", token0.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token1 = xPathLexer0.pipe();
      assertEquals("L", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("F-!kr$UR$wN");
      xPathLexer2.relationalOperator();
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("hZ", token2.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token3 = xPathLexer6.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer4.getPreviousToken();
      xPathLexer3.whitespace();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token4 = xPathLexer4.whitespace();
      assertEquals((-2), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@Af7ua{}?");
      xPathLexer0.setXPath("'>:93e-;2#}C.#");
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-587));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@Af7ua{}?");
      xPathLexer0.setXPath("'>:93e-;2#}C.#");
      xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.colon();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-587));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A.:+M]#3sJg");
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.whitespace();
      xPathLexer0.not();
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer2.div();
      xPathLexer1.div();
      token0.toString();
      Token token1 = xPathLexer1.doubleColon();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(ag6T%q");
      xPathLexer0.at();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.at();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("J_C40rw&(`',");
      xPathLexer0.not();
      token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer("6/cXH8Kh-u#4Ae");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.star();
      token1.toString();
      Token token2 = xPathLexer3.minus();
      token1.toString();
      xPathLexer0.nextToken();
      xPathLexer1.getXPath();
      xPathLexer2.setPreviousToken((Token) null);
      XPathLexer xPathLexer6 = new XPathLexer("[ (13) (a)");
      xPathLexer2.getXPath();
      xPathLexer3.setPreviousToken(token2);
      Token token3 = xPathLexer3.leftParen();
      assertFalse(token3.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.setXPath("yD4eoh< |{?3r0V");
      xPathLexer0.comma();
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.endPosition();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-1));
      assertEquals("yD4eoh< |{?3r0V", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@!DC6/XRE$<xjj`8=W");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      xPathLexer0.not();
      Token token3 = xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("@!DC6/XRE$<xjj`8=W");
      String string0 = token3.toString();
      assertEquals("[ (3) (C)", string0);
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("6/", token4.getTokenText());
      assertEquals(12, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("X", token5.getTokenText());
      
      xPathLexer0.and();
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("@", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("[ (3) (C)");
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals("!D", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      String string1 = token1.toString();
      assertEquals("[ (23) (!)", string1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("P>a0`)");
      xPathLexer0.setXPath("au|{+ <o,0<");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (22) (a)");
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("P>a0`)");
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D[D(");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("D", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".)(1-81\"k=~");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      Token token1 = xPathLexer0.not();
      xPathLexer0.div();
      Token token2 = xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.leftBracket();
      token2.toString();
      token0.toString();
      token1.toString();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertNull(xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Mtv1O(PQX40cPKQ");
      xPathLexer0.dots();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("sz\"^x1>\"r`lo|U");
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("Mtv1O(PQX40cPKQ");
      xPathLexer5.leftParen();
      xPathLexer1.endPosition();
      xPathLexer5.notEquals();
      XPathLexer xPathLexer6 = new XPathLexer("sz\"^x1>\"r`lo|U");
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.plus();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer("Z'Z}");
      xPathLexer3.or();
      xPathLexer3.getPreviousToken();
      xPathLexer8.or();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer10.or();
      xPathLexer10.mod();
      XPathLexer xPathLexer11 = new XPathLexer();
      xPathLexer11.or();
      xPathLexer11.number();
      xPathLexer2.star();
      // Undeclared exception!
      try { 
        xPathLexer5.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Af#.CdO~");
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("2Af#.CdO~");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("2A", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      xPathLexer0.setXPath("");
      xPathLexer0.setXPath("2Af#.CdO~");
      xPathLexer0.nextToken();
      xPathLexer0.not();
      Token token2 = xPathLexer0.not();
      assertEquals("f", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.number();
      Token token4 = xPathLexer0.getPreviousToken();
      assertEquals("2", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      String string0 = token3.toString();
      assertEquals("[ (22) (#.)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("C", token5.getTokenText());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("dO", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("~", token7.getTokenText());
      
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (22) (#.)");
      xPathLexer1.and();
      Token token9 = xPathLexer1.minus();
      assertEquals(6, token9.getTokenType());
      assertEquals("[", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<X{y6g");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("X", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("y6", token3.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals("g", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.or();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("<1.");
      Token token0 = xPathLexer1.nextToken();
      xPathLexer1.plus();
      xPathLexer1.identifierOrOperatorName();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.doubleColon();
      String string0 = "ml(";
      XPathLexer xPathLexer2 = new XPathLexer("ml(");
      xPathLexer2.operatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";}");
      Token token0 = xPathLexer0.identifier();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      token1.toString();
      token1.toString();
      token1.toString();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("}", token2.getTokenText());
      
      token1.toString();
      token1.toString();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      xPathLexer0.div();
      String string0 = token1.toString();
      assertEquals("[ (17) (;)", string0);
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.currentPosition();
      xPathLexer0.currentPosition();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(';');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
      
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.div();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer1.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer1.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("$yjo_");
      xPathLexer3.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("$yjo_");
      Token token9 = xPathLexer0.equals();
      xPathLexer5.setPreviousToken(token9);
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer3.pipe();
      assertEquals("$", token10.getTokenText());
      
      xPathLexer0.div();
      Token token11 = xPathLexer5.identifierOrOperatorName();
      assertEquals("", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("-+ULdC?xS_xq!x");
      Token token12 = xPathLexer1.pipe();
      assertEquals(17, token12.getTokenType());
      
      xPathLexer3.or();
      xPathLexer6.getPreviousToken();
      xPathLexer6.or();
      boolean boolean0 = xPathLexer2.isIdentifierStartChar('t');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("@!DC6/XRE$<xjj`8=W");
      xPathLexer1.leftBracket();
      xPathLexer1.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer1.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.equals();
      xPathLexer1.nextToken();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer1.whitespace();
      xPathLexer1.plus();
      xPathLexer1.nextToken();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.werken.saxpath.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("jdjO");
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer4.literal();
      xPathLexer4.whitespace();
      xPathLexer1.whitespace();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.number();
      xPathLexer0.dots();
      xPathLexer4.leftBracket();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer("jdjO");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer3.minus();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer9 = new XPathLexer();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer7.nextToken();
      xPathLexer9.nextToken();
      XPathLexer xPathLexer11 = new XPathLexer();
      Token token1 = xPathLexer0.div();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("'>:93e-;2#}C.#");
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("'>:93e-;2#}C.#");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.literal();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.consume();
      xPathLexer0.setXPath("<1.");
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.getPreviousToken();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("<1.");
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("Y*w_");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.nextToken();
      xPathLexer3.nextToken();
      xPathLexer3.rightBracket();
      XPathLexer xPathLexer5 = new XPathLexer();
      assertFalse(xPathLexer5.equals((Object)xPathLexer4));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer2.identifier();
      xPathLexer0.whitespace();
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer("'>:93e-;2#}C.#");
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.relationalOperator();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer1.rightParen();
      assertEquals(2, token6.getTokenType());
      
      xPathLexer2.currentPosition();
      Token token7 = xPathLexer2.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      Token token8 = xPathLexer4.equals();
      assertEquals(21, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer7.plus();
      Token token9 = xPathLexer6.slashes();
      assertEquals(11, token9.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer6.div();
      Token token10 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token11 = xPathLexer7.plus();
      assertEquals(5, token11.getTokenType());
  }
}
