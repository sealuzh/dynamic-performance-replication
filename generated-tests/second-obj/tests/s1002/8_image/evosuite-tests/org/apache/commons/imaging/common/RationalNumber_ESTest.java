/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:10:10 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-452), (-452));
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(785L, 0L);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (1/0)", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(4.829553290619515E-8);
      assertEquals(20705849, rationalNumber0.divisor);
      assertEquals(4.829553233967851E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(5.6651663889379E-16);
      String string0 = rationalNumber0.toString();
      assertEquals(4.656612875245797E-10, rationalNumber0.doubleValue(), 0.01);
      assertEquals("1/2147483647 (0)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836285717947E9);
      rationalNumber0.toString();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-899L), 0L);
      // Undeclared exception!
      try { 
        rationalNumber1.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(109.25);
      assertEquals(437, rationalNumber0.numerator);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(0.0);
      assertEquals(0, rationalNumber1.numerator);
      
      RationalNumber rationalNumber2 = new RationalNumber(4, 0);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(625, 36);
      String string0 = rationalNumber0.toString();
      assertEquals("625/36 (17.361)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), (-1));
      String string0 = rationalNumber0.toString();
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber1 = RationalNumber.valueOf(23.006360952556236);
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      assertEquals((short) (-23), rationalNumber2.shortValue());
      assertEquals((-23.009901F), rationalNumber2.floatValue(), 0.01F);
      
      String string1 = rationalNumber0.toDisplayString();
      assertTrue(string1.equals((Object)string0));
      
      rationalNumber0.floatValue();
      rationalNumber0.floatValue();
      RationalNumber rationalNumber3 = new RationalNumber((-1), 101);
      RationalNumber rationalNumber4 = new RationalNumber(101, (-1));
      int int0 = rationalNumber3.intValue();
      assertEquals((-0.009900990099009901), rationalNumber3.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483671L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483671, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-5849L), 2147483666L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals((-2.724118507916977E-6), rationalNumber0.doubleValue(), 0.01);
      assertEquals("-0", string0);
      assertEquals((-1073741833), rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483665L), (-2147483665L));
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-2147483665L));
      rationalNumber1.intValue();
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      String string0 = rationalNumber0.toString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("1", string0);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1);
      assertEquals(1, rationalNumber3.intValue());
      
      RationalNumber rationalNumber4 = new RationalNumber(1, (-2147483647));
      String string1 = rationalNumber2.toDisplayString();
      assertEquals("2147483647", string1);
      
      String string2 = rationalNumber1.toString();
      assertEquals("-2,147,483,647", string2);
      
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod((-2147483647), 1);
      assertEquals((-2.147483647E9), rationalNumber5.doubleValue(), 0.01);
      
      rationalNumber1.toDisplayString();
      rationalNumber1.negate();
      String string3 = rationalNumber4.toDisplayString();
      assertEquals("-0", string3);
      assertEquals((byte)0, rationalNumber4.byteValue());
      assertEquals((-4.656612875245797E-10), rationalNumber4.doubleValue(), 0.01);
      
      String string4 = rationalNumber1.toDisplayString();
      assertEquals("-2147483647", string4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-899L), (-2147483708L));
      rationalNumber0.toString();
      RationalNumber rationalNumber1 = new RationalNumber(225, 0);
      // Undeclared exception!
      try { 
        rationalNumber1.intValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483671L, 1L);
      int int0 = rationalNumber0.intValue();
      assertEquals((-2147483625), int0);
      
      String string0 = rationalNumber0.toString();
      assertEquals("-2,147,483,625", string0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string1 = rationalNumber1.toDisplayString();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals("2147483625", string1);
      
      rationalNumber0.doubleValue();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1L, 2147483671L);
      assertEquals((-4.656612922950694E-10), rationalNumber2.doubleValue(), 0.01);
      assertEquals(1, rationalNumber2.numerator);
      
      rationalNumber0.negate();
      assertEquals(1, rationalNumber0.divisor);
  }
}
