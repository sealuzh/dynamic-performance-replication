/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:22:41 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff.write;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.common.ImageBuilder;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffImageWriterBase_ESTest extends TiffImageWriterBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImageFileHeader((BinaryOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ImageBuilder imageBuilder0 = new ImageBuilder(5, 5, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("kU.cw", (Object) null);
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, (OutputStream) null, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: kU.cw
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream2 = null;
      try {
        byteArrayOutputStream2 = new ByteArrayOutputStream((-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -4
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.setGPSInDegrees((-559.3249669739944), (-559.3249669739944));
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream2 = new ByteArrayOutputStream(0);
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotSame(tiffOutputSummary1, tiffOutputSummary0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(".");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteOrder byteOrder0 = charBuffer0.order();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".");
      mockFileOutputStream0.close();
      ImageBuilder imageBuilder0 = new ImageBuilder(2122, 2122, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy1);
      assertFalse(tiffImageWriterLossy1.equals((Object)tiffImageWriterLossy0));
      
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      assertNotNull(tiffOutputSet0);
      
      MockFile mockFile0 = new MockFile((String) null, "lk");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("lk", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("lk", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals("lk", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("lk", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockFileOutputStream0, tiffOutputSet0.byteOrder);
      assertNotNull(binaryOutputStream0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals("lk", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("lk", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0, binaryOutputStream0.getByteCount());
      assertFalse(binaryOutputStream0.getDebug());
      
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0);
      assertNotSame(tiffImageWriterLossy0, tiffImageWriterLossy1);
      assertFalse(tiffImageWriterLossy0.equals((Object)tiffImageWriterLossy1));
      assertFalse(mockFile0.isAbsolute());
      assertEquals("lk", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(8L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("lk", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(8, binaryOutputStream0.getByteCount());
      assertFalse(binaryOutputStream0.getDebug());
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("5Lv+m)H");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Object object0 = hashMap0.put("EXIF", tiffImageWriterLossy0);
      assertNull(object0);
      assertNotSame(tiffImageWriterLossy0, tiffImageWriterLossy1);
      assertFalse(tiffImageWriterLossy0.equals((Object)tiffImageWriterLossy1));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      mockFileOutputStream0.close();
      assertNotSame(mockFileOutputStream0, mockFileOutputStream1);
      assertFalse(mockFileOutputStream0.equals((Object)mockFileOutputStream1));
      assertFalse(mockFile0.isAbsolute());
      assertEquals("lk", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(8L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("lk", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      
      ImageBuilder imageBuilder0 = new ImageBuilder(336, 336, false);
      assertNotNull(imageBuilder0);
      assertEquals(336, imageBuilder0.getWidth());
      assertEquals(336, imageBuilder0.getHeight());
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage0);
      assertEquals(336, imageBuilder0.getWidth());
      assertEquals(336, imageBuilder0.getHeight());
      assertEquals(336, bufferedImage0.getTileWidth());
      assertEquals(336, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(336, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(336, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      
      // Undeclared exception!
      try { 
        tiffImageWriterLossy1.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy cannot be cast to org.apache.commons.imaging.formats.tiff.write.TiffOutputSet
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      ImageBuilder imageBuilder0 = new ImageBuilder(5, 5, true);
      assertNotNull(imageBuilder0);
      assertEquals(5, imageBuilder0.getWidth());
      assertEquals(5, imageBuilder0.getHeight());
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage0);
      assertEquals(5, imageBuilder0.getWidth());
      assertEquals(5, imageBuilder0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, (OutputStream) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet((ByteOrder) null);
      assertNotNull(tiffOutputSet0);
      
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addExifDirectory();
      assertNotNull(tiffOutputDirectory0);
      assertEquals(6, tiffOutputDirectory0.getItemLength());
      assertEquals((-2), tiffOutputDirectory0.type);
      
      Hashtable<Integer, TiffOutputDirectory> hashtable0 = new Hashtable<Integer, TiffOutputDirectory>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      TiffOutputSummary tiffOutputSummary0 = new TiffOutputSummary((ByteOrder) null, tiffOutputDirectory0, hashtable0);
      assertNotNull(tiffOutputSummary0);
      assertEquals(6, tiffOutputDirectory0.getItemLength());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals((-2), tiffOutputDirectory0.type);
      
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing root directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      ImageBuilder imageBuilder0 = new ImageBuilder(5, 5, true);
      assertNotNull(imageBuilder0);
      assertEquals(5, imageBuilder0.getHeight());
      assertEquals(5, imageBuilder0.getWidth());
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage0);
      assertEquals(5, imageBuilder0.getHeight());
      assertEquals(5, imageBuilder0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(5, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Object object0 = hashMap0.put("XMP_XML", bufferedImage0);
      assertNull(object0);
      assertEquals(5, imageBuilder0.getHeight());
      assertEquals(5, imageBuilder0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(5, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, (OutputStream) null, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.image.BufferedImage cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      assertNotNull(tiffImageWriterLossy0);
      
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      assertNotNull(tiffOutputSet0);
      
      tiffOutputSet0.setGPSInDegrees((-559.3249669739944), (-559.3249669739944));
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateGPSDirectory();
      assertNotNull(tiffOutputDirectory0);
      assertEquals(66, tiffOutputDirectory0.getItemLength());
      assertEquals((-3), tiffOutputDirectory0.type);
      
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary0);
      
      ImageBuilder imageBuilder0 = new ImageBuilder(5, 5, false);
      assertNotNull(imageBuilder0);
      assertEquals(5, imageBuilder0.getHeight());
      assertEquals(5, imageBuilder0.getWidth());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage0);
      assertEquals(5, imageBuilder0.getHeight());
      assertEquals(5, imageBuilder0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream1);
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertEquals(0, byteArrayOutputStream1.size());
      assertEquals("", byteArrayOutputStream1.toString());
      
      BufferedImage bufferedImage1 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage1);
      assertNotSame(bufferedImage1, bufferedImage0);
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertEquals(5, imageBuilder0.getHeight());
      assertEquals(5, imageBuilder0.getWidth());
      assertEquals(5, bufferedImage1.getTileHeight());
      assertEquals(5, bufferedImage1.getTileWidth());
      assertEquals(5, bufferedImage1.getHeight());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(1, bufferedImage1.getTransparency());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(5, bufferedImage1.getWidth());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(1, bufferedImage1.getType());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(0, bufferedImage1.getMinY());
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BufferedImage bufferedImage2 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage2);
      assertNotSame(bufferedImage2, bufferedImage0);
      assertNotSame(bufferedImage2, bufferedImage1);
      assertFalse(bufferedImage2.equals((Object)bufferedImage0));
      assertFalse(bufferedImage2.equals((Object)bufferedImage1));
      assertEquals(5, imageBuilder0.getHeight());
      assertEquals(5, imageBuilder0.getWidth());
      assertEquals(0.5F, bufferedImage2.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage2.getTileGridXOffset());
      assertEquals(0, bufferedImage2.getMinX());
      assertEquals(1, bufferedImage2.getType());
      assertTrue(bufferedImage2.hasTileWriters());
      assertEquals(0, bufferedImage2.getMinY());
      assertEquals(5, bufferedImage2.getWidth());
      assertEquals(1, bufferedImage2.getNumYTiles());
      assertEquals(5, bufferedImage2.getTileWidth());
      assertEquals(5, bufferedImage2.getHeight());
      assertEquals(1, bufferedImage2.getNumXTiles());
      assertEquals(0, bufferedImage2.getMinTileX());
      assertEquals(0, bufferedImage2.getMinTileY());
      assertFalse(bufferedImage2.isAlphaPremultiplied());
      assertEquals(1, bufferedImage2.getTransparency());
      assertEquals(0, bufferedImage2.getTileGridYOffset());
      assertEquals(5, bufferedImage2.getTileHeight());
      
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-5);
      byteArrayOutputStream0.write(byteArray0);
      assertNotSame(byteArrayOutputStream0, byteArrayOutputStream1);
      assertFalse(byteArrayOutputStream0.equals((Object)byteArrayOutputStream1));
      assertEquals(13, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary1);
      assertNotSame(tiffOutputSummary1, tiffOutputSummary0);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      BiFunction<Object, Object, TiffField> biFunction0 = (BiFunction<Object, Object, TiffField>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = hashMap0.put("FORMAT", bufferedImage1);
      assertNull(object0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(bufferedImage1, bufferedImage2);
      assertNotSame(bufferedImage1, bufferedImage0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(bufferedImage1.equals((Object)bufferedImage2));
      assertFalse(bufferedImage1.equals((Object)bufferedImage0));
      assertEquals(5, imageBuilder0.getHeight());
      assertEquals(5, imageBuilder0.getWidth());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(5, bufferedImage1.getTileHeight());
      assertEquals(5, bufferedImage1.getTileWidth());
      assertEquals(5, bufferedImage1.getHeight());
      assertEquals(0, bufferedImage1.getMinTileX());
      assertEquals(0, bufferedImage1.getMinTileY());
      assertEquals(1, bufferedImage1.getNumXTiles());
      assertEquals(1, bufferedImage1.getTransparency());
      assertEquals(0, bufferedImage1.getTileGridXOffset());
      assertEquals(5, bufferedImage1.getWidth());
      assertEquals(1, bufferedImage1.getNumYTiles());
      assertEquals(1, bufferedImage1.getType());
      assertEquals(0, bufferedImage1.getTileGridYOffset());
      assertEquals(0, bufferedImage1.getMinX());
      assertEquals(0, bufferedImage1.getMinY());
      assertTrue(bufferedImage1.hasTileWriters());
      assertEquals(0.5F, bufferedImage1.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage1.isAlphaPremultiplied());
      
      hashMap1.replaceAll(biFunction0);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      BufferedImage bufferedImage3 = imageBuilder0.getBufferedImage();
      assertNotNull(bufferedImage3);
      assertNotSame(bufferedImage3, bufferedImage0);
      assertNotSame(bufferedImage3, bufferedImage1);
      assertNotSame(bufferedImage3, bufferedImage2);
      assertFalse(bufferedImage3.equals((Object)bufferedImage0));
      assertFalse(bufferedImage3.equals((Object)bufferedImage1));
      assertFalse(bufferedImage3.equals((Object)bufferedImage2));
      assertEquals(5, imageBuilder0.getHeight());
      assertEquals(5, imageBuilder0.getWidth());
      assertEquals(0, bufferedImage3.getMinTileX());
      assertEquals(5, bufferedImage3.getTileHeight());
      assertEquals(1, bufferedImage3.getTransparency());
      assertEquals(0, bufferedImage3.getMinTileY());
      assertEquals(0, bufferedImage3.getMinY());
      assertFalse(bufferedImage3.isAlphaPremultiplied());
      assertEquals(0, bufferedImage3.getMinX());
      assertTrue(bufferedImage3.hasTileWriters());
      assertEquals(0.5F, bufferedImage3.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage3.getType());
      assertEquals(1, bufferedImage3.getNumXTiles());
      assertEquals(0, bufferedImage3.getTileGridYOffset());
      assertEquals(5, bufferedImage3.getWidth());
      assertEquals(5, bufferedImage3.getHeight());
      assertEquals(1, bufferedImage3.getNumYTiles());
      assertEquals(5, bufferedImage3.getTileWidth());
      assertEquals(0, bufferedImage3.getTileGridXOffset());
      
      tiffImageWriterLossy0.writeImage(bufferedImage3, byteArrayOutputStream0, hashMap0);
      assertNotSame(bufferedImage3, bufferedImage0);
      assertNotSame(bufferedImage3, bufferedImage1);
      assertNotSame(bufferedImage3, bufferedImage2);
      assertNotSame(byteArrayOutputStream0, byteArrayOutputStream1);
      assertNotSame(hashMap0, hashMap1);
      assertFalse(bufferedImage3.equals((Object)bufferedImage0));
      assertFalse(bufferedImage3.equals((Object)bufferedImage1));
      assertFalse(bufferedImage3.equals((Object)bufferedImage2));
      assertFalse(byteArrayOutputStream0.equals((Object)byteArrayOutputStream1));
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertEquals(5, imageBuilder0.getHeight());
      assertEquals(5, imageBuilder0.getWidth());
      assertEquals(0, bufferedImage3.getMinTileX());
      assertEquals(5, bufferedImage3.getTileHeight());
      assertEquals(1, bufferedImage3.getTransparency());
      assertEquals(0, bufferedImage3.getMinTileY());
      assertEquals(0, bufferedImage3.getMinY());
      assertFalse(bufferedImage3.isAlphaPremultiplied());
      assertEquals(0, bufferedImage3.getMinX());
      assertTrue(bufferedImage3.hasTileWriters());
      assertEquals(0.5F, bufferedImage3.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage3.getType());
      assertEquals(1, bufferedImage3.getNumXTiles());
      assertEquals(0, bufferedImage3.getTileGridYOffset());
      assertEquals(5, bufferedImage3.getWidth());
      assertEquals(5, bufferedImage3.getHeight());
      assertEquals(1, bufferedImage3.getNumYTiles());
      assertEquals(5, bufferedImage3.getTileWidth());
      assertEquals(0, bufferedImage3.getTileGridXOffset());
      assertEquals(213, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000II*\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0002\u0001\u0003\u0000\u0003\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0003\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0006\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0011\u0001\u0004\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0015\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0016\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0015\u0002\u0000\u0000\u0017\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001A\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u001B\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000(\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\b\u0000\b\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000 P8$\u0016\r\u0007\uFFFDBaP\uFFFDL\u0004", byteArrayOutputStream0.toString());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      TiffOutputSummary tiffOutputSummary2 = new TiffOutputSummary(tiffOutputSummary0.byteOrder, tiffOutputSummary1.rootDirectory, tiffOutputSummary1.directoryTypeMap);
      assertNotNull(tiffOutputSummary2);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
      assertFalse(tiffOutputSummary0.equals((Object)tiffOutputSummary1));
      assertFalse(tiffOutputSummary2.equals((Object)tiffOutputSummary1));
      assertFalse(tiffOutputSummary2.equals((Object)tiffOutputSummary0));
      
      TiffOutputSummary tiffOutputSummary3 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary3);
      assertNotSame(tiffOutputSummary3, tiffOutputSummary1);
      assertNotSame(tiffOutputSummary3, tiffOutputSummary2);
      assertNotSame(tiffOutputSummary3, tiffOutputSummary0);
      assertFalse(tiffOutputSummary3.equals((Object)tiffOutputSummary1));
      assertFalse(tiffOutputSummary3.equals((Object)tiffOutputSummary2));
      assertFalse(tiffOutputSummary3.equals((Object)tiffOutputSummary0));
      
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(byteArrayOutputStream0);
      assertNotNull(binaryOutputStream0);
      assertFalse(byteArrayOutputStream0.equals((Object)byteArrayOutputStream1));
      assertEquals(213, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000II*\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0002\u0001\u0003\u0000\u0003\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0003\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0006\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0011\u0001\u0004\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0015\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0016\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0015\u0002\u0000\u0000\u0017\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001A\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u001B\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000(\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\b\u0000\b\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000 P8$\u0016\r\u0007\uFFFDBaP\uFFFDL\u0004", byteArrayOutputStream0.toString());
      assertEquals(0, binaryOutputStream0.getByteCount());
      assertFalse(binaryOutputStream0.getDebug());
      
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0);
      assertNotSame(byteArrayOutputStream0, byteArrayOutputStream1);
      assertFalse(byteArrayOutputStream0.equals((Object)byteArrayOutputStream1));
      assertEquals(221, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000II*\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0002\u0001\u0003\u0000\u0003\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0003\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0006\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0011\u0001\u0004\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0015\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0016\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0015\u0002\u0000\u0000\u0017\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001A\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u001B\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000(\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\b\u0000\b\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000 P8$\u0016\r\u0007\uFFFDBaP\uFFFDL\u0004II\u0000*\u0000\u0000\u0000\b", byteArrayOutputStream0.toString());
      assertFalse(binaryOutputStream0.getDebug());
      assertEquals(8, binaryOutputStream0.getByteCount());
      
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      assertNotNull(tiffImageWriterLossy1);
      assertFalse(tiffImageWriterLossy1.equals((Object)tiffImageWriterLossy0));
      
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0);
      assertNotSame(tiffImageWriterLossy0, tiffImageWriterLossy1);
      assertNotSame(byteArrayOutputStream0, byteArrayOutputStream1);
      assertFalse(tiffImageWriterLossy0.equals((Object)tiffImageWriterLossy1));
      assertFalse(byteArrayOutputStream0.equals((Object)byteArrayOutputStream1));
      assertEquals("\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000II*\u0000\b\u0000\u0000\u0000\f\u0000\u0000\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0001\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0002\u0001\u0003\u0000\u0003\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0003\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0006\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0011\u0001\u0004\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0015\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0016\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0015\u0002\u0000\u0000\u0017\u0001\u0004\u0000\u0001\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u001A\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u001B\u0001\u0005\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000(\u0001\u0003\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\b\u0000\b\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000H\u0000\u0000\u0000\u0001\u0000\u0000\u0000\uFFFD\u0000 P8$\u0016\r\u0007\uFFFDBaP\uFFFDL\u0004II\u0000*\u0000\u0000\u0000\bII\u0000*\u0000\u0000\u0000\b", byteArrayOutputStream0.toString());
      assertEquals(229, byteArrayOutputStream0.size());
      assertEquals(16, binaryOutputStream0.getByteCount());
      assertFalse(binaryOutputStream0.getDebug());
      
      TiffOutputSummary tiffOutputSummary4 = tiffImageWriterLossy1.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary4);
      assertNotSame(tiffImageWriterLossy1, tiffImageWriterLossy0);
      assertNotSame(tiffOutputSummary4, tiffOutputSummary0);
      assertNotSame(tiffOutputSummary4, tiffOutputSummary1);
      assertNotSame(tiffOutputSummary4, tiffOutputSummary2);
      assertNotSame(tiffOutputSummary4, tiffOutputSummary3);
      assertFalse(tiffImageWriterLossy1.equals((Object)tiffImageWriterLossy0));
      assertFalse(tiffOutputSummary4.equals((Object)tiffOutputSummary0));
      assertFalse(tiffOutputSummary4.equals((Object)tiffOutputSummary1));
      assertFalse(tiffOutputSummary4.equals((Object)tiffOutputSummary2));
      assertFalse(tiffOutputSummary4.equals((Object)tiffOutputSummary3));
      
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet();
      assertNotNull(tiffOutputSet1);
      assertFalse(tiffOutputSet1.equals((Object)tiffOutputSet0));
      
      TiffOutputSet tiffOutputSet2 = new TiffOutputSet(tiffOutputSummary2.byteOrder);
      assertNotNull(tiffOutputSet2);
      assertFalse(tiffOutputSet2.equals((Object)tiffOutputSet0));
      assertFalse(tiffOutputSet2.equals((Object)tiffOutputSet1));
      assertFalse(tiffImageWriterLossy0.equals((Object)tiffImageWriterLossy1));
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary2));
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary3));
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary4));
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
      assertFalse(tiffOutputSet0.equals((Object)tiffOutputSet1));
      assertFalse(tiffOutputSummary0.equals((Object)tiffOutputSummary1));
      assertFalse(tiffOutputSummary0.equals((Object)tiffOutputSummary4));
      assertFalse(tiffOutputSummary0.equals((Object)tiffOutputSummary2));
      assertFalse(tiffOutputSummary0.equals((Object)tiffOutputSummary3));
      assertFalse(tiffOutputSummary2.equals((Object)tiffOutputSummary1));
      assertFalse(tiffOutputSummary2.equals((Object)tiffOutputSummary0));
      assertFalse(tiffOutputSummary2.equals((Object)tiffOutputSummary4));
      assertFalse(tiffOutputSummary2.equals((Object)tiffOutputSummary3));
      
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      assertNotNull(tiffImageWriterLossy0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("a'C*u5B", false);
      assertNotNull(mockFileOutputStream0);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder3);
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.printf("a'C*u5B", (Object[]) null);
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      PrintStream printStream1 = mockPrintStream0.append((CharSequence) "a'C*u5B");
      assertNotNull(printStream1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, printStream1);
      assertSame(printStream1, mockPrintStream0);
      assertSame(printStream1, printStream0);
      
      char[] charArray0 = new char[0];
      mockPrintStream0.println(charArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(mockPrintStream0, printStream1);
      assertArrayEquals(new char[] {}, charArray0);
      
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      assertNotNull(tiffOutputSet0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      int int0 = 278;
      TiffOutputDirectory tiffOutputDirectory0 = new TiffOutputDirectory(278, byteOrder0);
      assertNotNull(tiffOutputDirectory0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(6, tiffOutputDirectory0.getItemLength());
      assertEquals(278, tiffOutputDirectory0.type);
      
      tiffOutputSet0.addDirectory(tiffOutputDirectory0);
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder3);
      assertSame(byteOrder0, byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(6, tiffOutputDirectory0.getItemLength());
      assertEquals(278, tiffOutputDirectory0.type);
      
      ByteOrder byteOrder4 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder4);
      assertSame(byteOrder4, byteOrder3);
      assertSame(byteOrder4, byteOrder1);
      assertSame(byteOrder4, byteOrder2);
      assertSame(byteOrder4, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder4.toString());
      
      try { 
        tiffImageWriterLossy0.write(printStream1, tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing directory: 0.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }
}
