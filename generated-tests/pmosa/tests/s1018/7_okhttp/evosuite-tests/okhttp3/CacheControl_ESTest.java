/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:43:32 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.noTransform();
      cacheControl0.noTransform();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.putAll(hashMap1);
      cacheControl0.FORCE_NETWORK.headerValue = "dU*cu";
      cacheControl0.noCache();
      cacheControl0.onlyIfCached();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      cacheControl_Builder0.build();
      cacheControl_Builder1.noStore();
      hashMap0.put("dU*cu", "name is empty");
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      cacheControl_Builder1.minFresh(0, timeUnit1);
      cacheControl_Builder1.maxStale(0, timeUnit0);
      cacheControl_Builder0.noTransform();
      cacheControl0.maxAgeSeconds();
      cacheControl_Builder1.noCache();
      cacheControl0.minFreshSeconds();
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(0, timeUnit2);
      assertSame(cacheControl_Builder1, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(3561, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      cacheControl_Builder1.minFresh(3561, timeUnit1);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder0.onlyIfCached();
      assertSame(cacheControl_Builder2, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.FORCE_NETWORK.headerValue = "\n";
      cacheControl0.toString();
      cacheControl0.maxStaleSeconds();
      CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-2139), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -2139
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("g", "#P1y\u0000Fbv`f6l8");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      int int0 = MockThread.MAX_PRIORITY;
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("TSbzXgXkv]{]", "}Gp");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      
      cacheControl0.FORCE_NETWORK.headerValue = "";
      String string1 = cacheControl0.FORCE_NETWORK.toString();
      assertEquals("", string1);
      
      cacheControl0.noStore();
      cacheControl0.noTransform();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.noCache());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noTransform());
      
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(127, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxAge(44, timeUnit1);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.onlyIfCached();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.minFresh(127, timeUnit1);
      CacheControl cacheControl2 = cacheControl_Builder5.build();
      assertEquals(457200, cacheControl2.minFreshSeconds());
      assertEquals(457200, cacheControl2.maxStaleSeconds());
      assertEquals(158400, cacheControl2.maxAgeSeconds());
      assertFalse(cacheControl2.isPrivate());
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.noCache();
      cacheControl0.noTransform();
      cacheControl0.toString();
      cacheControl0.toString();
      cacheControl0.toString();
      cacheControl0.FORCE_CACHE.headerValue = null;
      cacheControl0.toString();
      cacheControl0.FORCE_CACHE.headerValue = "maxStale < 0: ";
      cacheControl0.toString();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.FORCE_NETWORK.toString();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      cacheControl_Builder1.noStore();
      cacheControl_Builder1.onlyIfCached();
      cacheControl_Builder1.noTransform();
      cacheControl0.onlyIfCached();
      cacheControl0.minFreshSeconds();
      cacheControl0.toString();
      cacheControl1.noTransform();
      cacheControl0.isPrivate();
      cacheControl1.mustRevalidate();
      CacheControl.parse(headers0);
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      cacheControl2.FORCE_NETWORK.toString();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.putAll(hashMap1);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder2.minFresh((-139), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -139
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.FORCE_NETWORK.headerValue = "Expected alternating header names and values";
      cacheControl0.noTransform();
      cacheControl0.sMaxAgeSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("namesAndValues == null");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("");
      headers_Builder1.set("pragma", "");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.isPrivate();
      cacheControl0.toString();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      headers0.getDate("");
      headers_Builder0.set("ps-zcf@k", "G&%!}JMht!Oh:M/RkZ");
      cacheControl0.FORCE_NETWORK.toString();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.minFresh((-155), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -155
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("cache-control", "f'lZBCgfS9");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("namesAndValues == null");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("{");
      headers_Builder1.set("pragma", "must-revalidate");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.isPrivate();
      cacheControl0.toString();
      headers0.getDate("pragma");
      String string0 = "ps-zcf@k";
      // Undeclared exception!
      try { 
        headers_Builder0.set("namesAndValues == null", "pragma");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected char 0x20 at 14 in header name: namesAndValues == null
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("namesAndValues == nufl");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("");
      headers_Builder1.set("pragma", "#28h3MU-");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.isPrivate();
      cacheControl0.toString();
      headers0.getDate("pragma");
      String string0 = "ps-zcf@k";
      // Undeclared exception!
      try { 
        headers_Builder0.set("namesAndValues == nufl", "pragma");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected char 0x20 at 14 in header name: namesAndValues == nufl
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("pragma", "d-0T7=8$");
      Headers.Builder headers_Builder2 = headers_Builder1.removeAll("d-0T7=8$");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.isPublic();
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(boolean0);
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("namesAndValues == nul");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("namesAndValues == nul");
      headers_Builder1.set("pragma", "namesAndValues == nul");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.isPrivate();
      cacheControl0.toString();
      headers0.getDate("pragma");
      String string0 = "ps-zcf@k";
      // Undeclared exception!
      try { 
        headers_Builder0.set("namesAndValues == nul", "pragma");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected char 0x20 at 14 in header name: namesAndValues == nul
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("namesAndValues == nul");
      Headers.Builder headers_Builder1 = headers_Builder0.set("pragma", "namesAndValues == nul");
      headers_Builder1.build();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pragma";
      stringArray0[1] = "pragma";
      stringArray0[2] = "pragma";
      stringArray0[3] = "fV{_7G'}p,B/U@o";
      stringArray0[4] = "pragma";
      stringArray0[5] = "pragma";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.noCache();
      cacheControl0.noTransform();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("max-age=");
      headers_Builder0.add("pragma", "max-age=");
      headers_Builder1.build();
      Headers.Builder headers_Builder2 = headers_Builder0.addLenient("pragma", "pragma");
      headers_Builder0.build();
      Headers headers0 = headers_Builder2.build();
      CacheControl.parse(headers0);
      int int0 = MockThread.MAX_PRIORITY;
      assertEquals(10, int0);
  }
}
