/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:32:27 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.nio.charset.Charset;
import java.sql.JDBCType;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.sql.execute.DeleteConstantAction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBBlob;
import org.h2.jdbc.JdbcSQLException;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Illegal column type format: ";
      stringArray0[1] = "Illegal column type format: ";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Illegal column type format: ");
      SQLUtil.addRequiredCondition("M[R)&7f{=u1R8:lvLG", stringBuilder0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("constraint");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select into");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "select into");
      String string0 = SQLUtil.removeComments("select into");
      assertEquals("select into", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materiaized view");
      assertNull(boolean0);
      
      String string0 = SQLUtil.normalize("/[Rk):h", true);
      assertEquals("/ [ Rk) : h", string0);
      
      TableContainer tableContainer0 = new TableContainer("Qi:hpvIZ\".R1td", (CompositeDBObject<? extends DBObject>) null);
      String string1 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.renderColumnListWithTableName("INVALID", stringArray0);
      assertEquals("INVALID.null", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "select into1k.a*@pl";
      stringArray0[1] = "select into1k.a*@pl";
      stringArray0[2] = "!X'K`>'j?'$s)VW";
      stringArray0[3] = "select into1k.a*@pl";
      stringArray0[4] = "select into1k.a*@pl";
      stringArray0[5] = "select into1k.a*@pl";
      String string0 = SQLUtil.leftJoin("select into1k.a*@pl", stringArray0, "EZ6#v@$_6#8g1", "alter table1k.a*@pl", stringArray0);
      assertEquals("left join EZ6#v@$_6#8g1 as alter table1k.a*@pl on select into1k.a*@pl.select into1k.a*@pl = alter table1k.a*@pl.select into1k.a*@pl and select into1k.a*@pl.select into1k.a*@pl = alter table1k.a*@pl.select into1k.a*@pl and select into1k.a*@pl.!X'K`>'j?'$s)VW = alter table1k.a*@pl.!X'K`>'j?'$s)VW and select into1k.a*@pl.select into1k.a*@pl = alter table1k.a*@pl.select into1k.a*@pl and select into1k.a*@pl.select into1k.a*@pl = alter table1k.a*@pl.select into1k.a*@pl and select into1k.a*@pl.select into1k.a*@pl = alter table1k.a*@pl.select into1k.a*@pl", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = SQLUtil.normalize("c7elxJ}$-<p", false);
      assertEquals("c7elxJ } $ - < p", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "m[;_gaz#_$F";
      stringArray0[1] = "m[;_gaz#_$F";
      String string0 = SQLUtil.innerJoin("m[;_gaz#_$F", stringArray0, (String) null, "org.databene.commons.AssertionError", stringArray0);
      assertEquals("null as org.databene.commons.AssertionError on m[;_gaz#_$F.m[;_gaz#_$F = org.databene.commons.AssertionError.m[;_gaz#_$F and m[;_gaz#_$F.m[;_gaz#_$F = org.databene.commons.AssertionError.m[;_gaz#_$F", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.substituteMarkers("d'4=}wawr", "_ejq{6Z`OFB", "_ejq{6Z`OFB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer(236);
      DBDataType.getInstance(95, "d'4=}wawr");
      SQLUtil.typeAndName(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_ejq{6Z`OFB", defaultDBTable0, 95, "_ejq{6Z`OFB");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cX";
      stringArray0[1] = "deleteya&0?+but7yr";
      stringArray0[2] = "create materialized view";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("cX = 'cX' AND deleteya&0?+but7yr = 'deleteya&0?+but7yr' AND create materialized view = 'create materialized view'", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("WucbUwP+$ltI^n '");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-2299), "WucbUwP+$ltI^n '");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("WUCBUWP+$LTI^N '", false, defaultDBTable0, "select into");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      mockPrintWriter0.checkError();
      mockPrintWriter0.println();
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("WucbUwP+$ltI^n '");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-2299), "WucbUwP+$ltI^n '");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBSchema0.getTables(true);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "WUCBUWP+$LTI^N '", objectArray0);
      printWriter0.println();
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Illegal column type format: ";
      stringArray0[1] = "Illegal column type format: ";
      stringArray0[2] = "";
      stringArray0[3] = "Illegal column type format: ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Illegal column type format: ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (Illegal column type format: , Illegal column type format: , , Illegal column type format: )", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " '\"0)SQ";
      stringArray0[1] = " '\"0)SQ";
      stringArray0[2] = " '\"0)SQ";
      stringArray0[3] = " '\"0)SQ";
      stringArray0[4] = " '\"0)SQ";
      stringArray0[5] = " '\"0)SQ";
      stringArray0[6] = " '\"0)SQ";
      String string0 = SQLUtil.renderColumnListWithTableName(" '\"0)SQ", stringArray0);
      assertEquals(" '\"0)SQ. '\"0)SQ,  '\"0)SQ. '\"0)SQ,  '\"0)SQ. '\"0)SQ,  '\"0)SQ. '\"0)SQ,  '\"0)SQ. '\"0)SQ,  '\"0)SQ. '\"0)SQ,  '\"0)SQ. '\"0)SQ", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      SQLUtil.addOptionalCondition("+y", stringBuilder0);
      assertEquals("+y", stringBuilder0.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("table null", true, defaultDBTable0, "update");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"table null\" ", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Illegal column type format: ";
      stringArray0[1] = "Illegal column type format: ";
      stringArray0[2] = "";
      stringArray0[3] = "Illegal column type format: ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Illegal column type format: ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"Illegal column type format: \" PRIMARY KEY (Illegal column type format: , Illegal column type format: , , Illegal column type format: )", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(" )", stringBuilder0);
      SQLUtil.addOptionalCondition(" )", stringBuilder1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("sS3A[FD", false, defaultDBTable0, "\"z {pBZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("", dBSchema0);
      dBSchema0.getTriggers();
      Locale.getISOLanguages();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", false, defaultDBTable1, "c2r*MT");
      dBCheckConstraint0.equals("");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT  ", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      dBSchema0.getTables(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLB}%.=9X", true, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CLB}%.=9X");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter materialized view");
      Integer integer0 = RawTransaction.COMMIT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("updateNClob(int, Reader)");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      mockPrintWriter0.checkError();
      mockPrintWriter0.println();
      mockPrintWriter0.print("q%ctJ@AfQQ~.G\"Wcc");
      String string0 = SQLUtil.normalize("q%ctJ@AfQQ~.G\"Wcc", true);
      assertEquals("q % ctJ @ A  fQQ ~.G \"Wcc\"", string0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      mockFileReader0.markSupported();
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
      
      boolean boolean0 = SQLUtil.isProcedureCall("q%ctJ@AfQQ~.G\"Wcc");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.substituteMarkers("d'4=}wawr", "d'4=}wawr", (Object) null);
      SQLUtil.normalize("Underlying ResultSet is not updatable.", true);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      try { 
        simpleResultSet0.getCharacterStream("alter materialized viewbmb + jb_ * ? * 4 * ll");
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // Feature not supported: null [50100-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[6] = "";
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(string0, defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      defaultDBTable0.removeForeignKeyConstraint((DBForeignKeyConstraint) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(string0, false, defaultDBTable0, "session_");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.removeComments("R+*X$$Z?)5pDP}5");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R+*X$$Z?)5pDP}5");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("R+*X$$Z?)5pDP}5", false);
      assertEquals("R + * X $ $ Z ?) 5pDP } 5", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-Hq";
      stringArray0[1] = "drop tablestack trace";
      stringArray0[2] = "loread";
      stringArray0[3] = "\"$5eeKzCWJ/";
      stringArray0[4] = "b/";
      stringArray0[5] = ", module ignored.";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      defaultDBTable0.removeForeignKeyConstraint((DBForeignKeyConstraint) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", false, defaultDBTable0, "session_");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("0Dw^K1um1 !yF 'V{", true);
      TableContainer tableContainer0 = new TableContainer("7MLiGY^l'ue");
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCatalog dBCatalog0 = new DBCatalog("M9#w8_CAztpb=L\"K");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DeleteConstantAction deleteConstantAction0 = new DeleteConstantAction();
      deleteConstantAction0.getTargetProperties();
      String string0 = SQLUtil.normalize("create table[$/u-=!9pc?2", true);
      assertEquals("create table [ $ / u - = ! 9pc ? 2", string0);
      
      SQLUtil.parseColumnTypeAndSize("rename");
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      mockPrintWriter0.checkError();
      mockPrintWriter0.println();
      mockPrintWriter0.print("9P2=g<Sm:>o6eHLz");
      String string0 = SQLUtil.normalize("9M0W09^j,{y(fPnAc", true);
      assertEquals("9M0W09 ^ j, { y (fP  nAc", string0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
      
      boolean boolean0 = SQLUtil.isProcedureCall("- 0");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[15];
      stringArray0[0] = "c;cBtos";
      stringArray0[1] = "c;cBtos";
      stringArray0[2] = "c;cBtos";
      stringArray0[3] = "c;cBtos";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "c;cBtos", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (c;cBtos, c;cBtos, c;cBtos, c;cBtos, , , , , , , , , , , )", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals(".c;cBtos", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(" )", stringBuilder0);
      stringBuilder1.reverse();
      SQLUtil.addOptionalCondition(" )", stringBuilder1);
      assertEquals(")  or  )", stringBuilder1.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SchemaDescriptor.IBM_SYSTEM_NULLID_SCHEMA_NAME;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NULLID";
      stringArray0[1] = "\"z {pBZ";
      stringArray0[2] = "NULLID";
      stringArray0[3] = " )";
      stringArray0[4] = "NULLID";
      stringArray0[5] = "\"z {pBZ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " )", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (NULLID, \"z {pBZ, NULLID,  ), NULLID, \"z {pBZ)", string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[0] = "COLUMNS";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(COLUMNS, , , , , , , , , , , , , )", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog("8`");
      String string1 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("8`", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("y_f*p");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      dBSchema0.getTables(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLB}%.=9X", false, (String[]) null);
      dBPrimaryKeyConstraint0.isIdentical(dBSchema0);
      defaultDBTable0.getForeignKeyConstraints();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      mockPrintWriter0.println();
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      SQLUtil.normalize("PRIMARY KEY ", false);
      System.setCurrentTimeMillis(985162418487298L);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "PRIMARY KEY ");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("PRIMARY KEY", stringBuilder0);
      assertEquals("PRIMARY KEY  and PRIMARY KEY", stringBuilder0.toString());
      assertEquals("PRIMARY KEY  and PRIMARY KEY", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBDataType.getInstance(0, "");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[5] = "";
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema(stringArray0[4]);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(stringArray0[4], dBSchema0);
      defaultDBTable1.getColumnNames();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(stringArray0[4], false, defaultDBTable1, "c2r*MT");
      SQLUtil.constraintName(dBCheckConstraint0);
      System.setCurrentTimeMillis(0);
      SQLUtil.isProcedureCall("");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        SQLUtil.join("", "#l*", (String[]) null, "create unique indexalter tablestack trace", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DBDataType.getInstance(0, "");
      String[] stringArray0 = new String[7];
      stringArray0[5] = "";
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema(stringArray0[4]);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(stringArray0[4], dBSchema0);
      dBSchema0.getTriggers();
      dBSchema0.getTable("c2r*MT");
      defaultDBTable1.getColumnNames();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(stringArray0[4], false, defaultDBTable1, "c2r*MT");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
      
      System.setCurrentTimeMillis(0);
      SQLUtil.isProcedureCall("");
      boolean boolean1 = SQLUtil.isProcedureCall("create unique indexalter materialized view");
      assertFalse(boolean1);
      
      String string1 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema null", string1);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK c2r*MT", string2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer(5170);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("s`*", defaultDBTable0, 13, "d%@1g(@~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: d%@1g(@~
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(30);
      String string0 = "qpCb|g(BC:ba/Fd-";
      StringBuilder stringBuilder0 = new StringBuilder("qpCb|g(BC:ba/Fd-");
      stringBuilder0.reverse();
      stringBuilder0.codePoints();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "qpCb|g(BC:ba/Fd-");
      SQLUtil.mutatesDataOrStructure("exec");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W\"b;x");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "/|kg.bN4/KnYaI/P=],");
      stringBuilder0.append((-615.29916158117));
      SQLUtil.addRequiredCondition("/|kg.bN4/KnYaI/P=],", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/|kg.bN4/KnYaI/P=],";
      stringArray0[1] = "/|kg.bN4/KnYaI/P=],";
      stringArray0[2] = "/|kg.bN4/KnYaI/P=],";
      stringArray0[3] = "/|kg.bN4/KnYaI/P=],";
      stringArray0[4] = "/|kg.bN4/KnYaI/P=],";
      stringArray0[5] = "/|kg.bN4/KnYaI/P=],";
      stringArray0[6] = "/|kg.bN4/KnYaI/P=],";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "/|kg.bN4/KnYaI/P=],", false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/|kg.bN4/KnYaI/P=],", defaultDBTable0, 26, ",");
      defaultDBColumn0.getForeignKeyConstraint();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop table");
      PrintWriter printWriter0 = mockPrintWriter0.format("/|kg.bN4/KnYaI/P=],", (Object[]) stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("WucbUwP+$ltI^n '");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-2299), "WucbUwP+$ltI^n '");
      String string0 = TypeId.DATALINK_NAME;
      NameSpec nameSpec0 = NameSpec.NEVER;
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      mockPrintWriter0.checkError();
      dBSchema0.isIdentical(defaultDBTable0);
      mockPrintWriter0.println();
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "--";
      stringArray0[1] = "?SZpx-`A";
      stringArray0[2] = "left";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("left", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec2);
      String string1 = "6Yz";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("6Yz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '6Yz' not found in table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.substituteMarkers("d'4=}wawr", "d'4=}wawr", (Object) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer.remainderUnsigned(5170, 5170);
      DBDataType.getInstance("null");
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = " REFERENCES ";
      stringArray0[4] = "null";
      stringArray0[5] = "null";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("d'4=}wawr", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      LinkedList<DBTable> linkedList0 = new LinkedList<DBTable>();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("rEn6tv_kM|0Sl", (DBTable) null, 5170, "Bd%@1g(@~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Bd%@1g(@~
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "select");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Random.setNextRandom(1872);
      Character character0 = Character.valueOf('c');
      SQLUtil.renderValue(character0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'c'");
      Character.isAlphabetic(2147483645);
      String string0 = "@]aoc)";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("@]aoc)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '@]aoc)' not found in table ''c''
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("d'4=}wawr", "d'4=}wawr", (Object) null);
      assertEquals("null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      Integer.remainderUnsigned(5170, 5170);
      DBDataType dBDataType0 = DBDataType.getInstance("null");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("null", defaultDBTable0, dBDataType0, integer0);
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      Integer integer1 = RawTransaction.ABORT;
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.canonicalize();
      fBManagedConnectionFactory0.getTransactionIsolation();
      Integer integer2 = RawTransaction.COMMIT;
      JDBCType jDBCType0 = JDBCType.VARBINARY;
      jDBCType0.getVendorTypeNumber();
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("null, null", string1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SchemaDescriptor.SYSIBM_SCHEMA_UUID;
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      mockPrintWriter0.checkError();
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("--! Fr29{{-l}c", false);
      TableContainer tableContainer0 = new TableContainer("c013800d-00f8-5b53-28a9-00000019ed88");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("COLUMN_SPEC");
      String string1 = "RP1]H$4wv'xu`qXTUvU";
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "d'4=}wawr";
      SQLUtil.substituteMarkers("d'4=}wawr", "d'4=}wawr", (Object) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~aV;{*_6@e*|;_T7");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("<XY_#d");
      mockPrintWriter1.checkError();
      String string1 = "/*";
      MockFile mockFile0 = new MockFile("~els", "/*");
      mockFile0.getParentFile();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print("~aV;{*_6@e*|;_T7");
      SQLUtil.normalize("/*", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      mockFileInputStream0.read();
      mockFileInputStream0.getFD();
      boolean boolean0 = FBBlob.SEGMENTED;
      SQLUtil.isDML("d'4=}wawr");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
