/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:55:43 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 650.377361582);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 650.377361582, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 32, mnStrategy0, 32);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1951.13900851, 32);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-183563.70309625647), mnStrategy0, (-183563.70309625647));
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-896.522282769308), 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.5398182152240599, 0.5398182152240599, (-581.008), (-581.008), 1.059235257624001E22).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5398182152240599, mnStrategy0, 1.059235257624001E22);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.1, mnStrategy0, 2.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-387.10771766), 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-322.670866503415), mnStrategy0, 3.0);
      int[] intArray0 = new int[1];
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3.0, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2624.5971183471875, mnStrategy0, (-183563.70309625647));
      int[] intArray0 = new int[0];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2624.5971183471875, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHighStrategy();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.059235257624001E22), 0.5398182152240599, (-581.008), (-581.008), 1.059235257624001E22).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.5398182152240599, mnStrategy0, 1.059235257624001E22);
      int[] intArray0 = new int[1];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 2625.4, mnStrategy0, 1951.13900851);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2624.5971183471875, 2624.5971183471875, (-183563.70309625647), (-183563.70309625647), (-183563.70309625647)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 2624.5971183471875, mnStrategy0, 1951.13900851);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      double double0 = 2619.334085579955;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(794.678, 2619.334085579955, 2619.334085579955, 794.678, 2619.334085579955).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 794.678, mnStrategy0, 1.0E-6);
      int[] intArray0 = new int[1];
      int int0 = 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0E-6, 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5.0, 5.0, 3629.58882644829, 58.0196194184491, 3629.58882644829).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2624.5971183471875, mnStrategy0, (-183563.70309625647));
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2624.5971183471875, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(12.0, 0.3, 12.0, (-12.61909456119565), 0.3).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 794.6779409941904, mnStrategy0, (-5753.667651487431));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 794.6779409941904, 0);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2665.93), (-2665.93), (-2665.93), (-2665.93), 14.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[7];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-906.19832230174), mnStrategy0, 10.0);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(7, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      int[] intArray0 = new int[1];
      mnUserParameterState0.setUpperLimit(0, (double) 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      intArray0[0] = 0;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross((FCNBase) null, mnUserParameterState0, 0, mnStrategy0, 0);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-906.19832230174);
      doubleArray1[1] = (-906.19832230174);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFcn", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.059235257624001E22), 2625.4, (-581.008), (-581.008), 1.059235257624001E22).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 2625.4, mnStrategy0, 1951.13900851);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-581.008), 120);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      
      int[] intArray0 = new int[20];
      mnUserParameterState0.setUpperLimit(0, (double) 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      
      intArray0[0] = 0;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross((FCNBase) null, mnUserParameterState0, 0, mnStrategy0, 0);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 2.0;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(453.66586449871, 453.66586449871, (-2941.0), 453.66586449871, 1867.4376310811342).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-821.9354493181562), mnStrategy0, 453.66586449871);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      mnUserParameterState0.setUpperLimit(0, (-2941.0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1867.4376310811342;
      doubleArray1[2] = (double) 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0, (-1073741824));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {1867.4376310811342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-1073741824), 0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(453.66586449871, 453.66586449871, (-2941.0), 453.66586449871, 1885.3955990000002).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1196.5), mnStrategy0, 453.66586449871);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      mnUserParameterState0.setUpperLimit(0, (-33.976542262));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1885.3955990000002;
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.5, (-1891.7267), (-2941.0), 0.5, 1885.3955990000002).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1196.5), mnStrategy0, 0.5);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1885.3955990000002;
      mnUserParameterState0.setLowerLimit(0, (-1196.5));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      int[] intArray0 = new int[1];
      mnUserParameterState0.setUpperLimit(0, (double) 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1165.9452158), mnStrategy0, 0);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      mnUserParameterState0.setPrecision(0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-352.30879680722643), mnStrategy0, 0.3);
      assertNotNull(mnFunctionCross1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnCross mnCross0 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 0, 2628);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2624.5971183471875, mnStrategy0, 0.0);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-5753.055941063902), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2665.93), (-2665.93), (-2665.93), (-2665.93), 14.0).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertNotNull(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertNotNull(mnUserParameterState0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 14.0, mnStrategy0, 100.0);
      assertNotNull(mnFunctionCross0);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 794.6779409941904;
      doubleArray0[1] = 14.0;
      doubleArray0[2] = 2817.686;
      String string0 = mnUserParameters0.toString();
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n", string0);
      assertNotNull(string0);
      assertEquals(0, mnUserParameters0.variableParameters());
      
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 14.0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 794.6779409941904, 0);
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {794.6779409941904, 14.0, 2817.686, 100.0, 14.0}, doubleArray0, 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.1, 16);
      assertNotSame(mnCross1, mnCross0);
      assertNotNull(mnCross1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {794.6779409941904, 14.0, 2817.686, 100.0, 14.0}, doubleArray0, 0.01);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.059235257624001E22), 2625.4, (-581.008), (-581.008), 1.059235257624001E22).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 2625.4, mnStrategy0, 1951.13900851);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      int[] intArray0 = new int[1];
      mnUserParameterState0.setUpperLimit(0, (double) 0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (-1294.51323), 1093.431, (double)0, 2761.0811215949925).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-906.19832230174), mnStrategy0, 2761.0811215949925);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-906.19832230174);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 0, (-2146383581));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnCross1, mnCross0);
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {(-906.19832230174), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-967.3264), mnStrategy0, (-2146383581));
      assertNotNull(mnFunctionCross1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      MnCross mnCross2 = mnFunctionCross1.cross(intArray0, doubleArray1, doubleArray0, 1619.78739, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(mnCross2, mnCross1);
      assertNotNull(mnCross2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {(-906.19832230174), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(794.6779409941904, 2625.4, 2817.686, 794.6779409941904, 2817.686).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 930.9709978026993, mnStrategy0, 1.0E-6);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      int[] intArray0 = new int[1];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 170);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      mnStrategy0.setHessianG2Tolerance(0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.0, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      int[] intArray0 = new int[1];
      mnUserParameterState0.setUpperLimit(0, (double) 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1165.9452158), mnStrategy0, 0);
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.0, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      mnUserParameterState0.setPrecision(0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, (double)0, 932.2904000999999, 1009.105518306).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 158.1767390656, mnStrategy0, 932.2904000999999);
      assertNotNull(mnFunctionCross1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.0, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      MnCross mnCross0 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 0.1, 2657);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.0, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      double[] doubleArray1 = new double[26];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1009.105518306;
      mnStrategy0.setHighStrategy();
      assertFalse(mnStrategy0.isLow());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      
      doubleArray1[1] = (double) 2347;
      doubleArray1[2] = 932.2904000999999;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-1165.9452158);
      MnCross mnCross1 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 2347, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnCross1, mnCross0);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnStrategy0.isLow());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      
      doubleArray1[6] = (double) 2347;
      MnCross mnCross2 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray1, 0, 2347);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnCross2, mnCross1);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(mnCross2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnStrategy0.isLow());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
      
      MnCross mnCross3 = mnFunctionCross1.cross(intArray0, doubleArray1, doubleArray1, 932.2904000999999, 573);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnCross3, mnCross0);
      assertNotSame(mnCross3, mnCross2);
      assertNotSame(mnCross3, mnCross1);
      assertNotSame(mnFunctionCross1, mnFunctionCross0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(mnCross3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnCross3.equals((Object)mnCross0));
      assertFalse(mnCross3.equals((Object)mnCross2));
      assertFalse(mnCross3.equals((Object)mnCross1));
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnStrategy0.isLow());
      assertEquals(6, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.02, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(7, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.strategy());
      assertEquals(0.02, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isHigh());
  }
}
