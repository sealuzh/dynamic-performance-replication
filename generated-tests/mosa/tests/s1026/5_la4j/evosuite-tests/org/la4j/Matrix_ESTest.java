/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:18:07 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      Matrix matrix0 = cCSMatrix0.transpose();
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight((-4705), (-4705));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-4705' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      // Undeclared exception!
      try { 
        cCSMatrix0.setRow(3342, (double) 3342);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3342' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(14, 14, 14);
      assertEquals(14, sparseMatrix0.rows());
      
      Matrix matrix0 = sparseMatrix0.removeFirstColumn();
      assertEquals(13, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.zero((-26), (-26), (-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -26x-26
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 32;
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-408), 32, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -408x32
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(5, 872);
      columnMajorSparseMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("%%MatrixMarket matrix array real general\n0 0\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("0");
      // Undeclared exception!
      try { 
        cCSMatrix0.blankOfColumns((-935));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-935
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rank();
      Matrix.constant(0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = Matrix.zero(1, 1);
      matrix0.power(1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      basic2DMatrix0.determinant();
      basic2DMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(4);
      Matrix matrix1 = matrix0.kroneckerProduct(matrix0);
      matrix1.iterator();
      matrix0.equals(matrix1, (double) 48);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      basic2DMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.toColumnVector();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(5, 5);
      matrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.subtract((-3346.88548744));
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        matrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CCSMatrix.fromCSV("0");
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      Matrix matrix0 = cCSMatrix0.blankOfColumns(2261);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 17;
      Matrix matrix0 = Matrix.diagonal(17, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformColumn(17, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.minInColumn(17);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(14, 14, 14);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      sparseMatrix0.shuffle();
      Matrix matrix0 = sparseMatrix0.removeLastColumn();
      sparseMatrix0.trace();
      sparseMatrix0.equals(matrix0, 1.0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      // Undeclared exception!
      try { 
        basic2DMatrix0.minInColumn(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceBottomRight(496, 496);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [496..0][496..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      cCSMatrix0.slice((-935), (-935), (-935), (-935));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 14;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(14, 14, 14);
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.updateColumn((-1431655764), (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1431655764' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      cRSMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        basic2DMatrix0.copyOfColumns(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2094, 2094, 2094);
      Matrix matrix0 = Matrix.zero(2094, 2094);
      matrix0.hadamardProduct(sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      Matrix matrix0 = cCSMatrix0.transpose();
      matrix0.divide(1248.083578);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.minInRow((-1352));
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2094, 2094);
      matrix0.equals((Object) null);
      Matrix matrix1 = matrix0.copyOfShape(2094, 2094);
      matrix1.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      cCSMatrix0.transpose();
      cCSMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1957, 1957);
      // Undeclared exception!
      basic2DMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Basic2DMatrix.zero(7, 7);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      // Undeclared exception!
      try { 
        cRSMatrix0.power((-2666));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2666.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      basic2DMatrix0.toMatrixMarket();
      Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n7 7\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n");
      basic2DMatrix0.equals((Object) "%%MatrixMarket matrix array real general\n7 7\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(basic2DMatrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
      rowMajorSparseMatrix0.equals((Object) basic2DMatrix0);
      int int0 = 2090;
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).copyOfShape(2090, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(18);
      cRSMatrix0.equals((Matrix) basic2DMatrix0, (double) 18);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      basic2DMatrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transformColumn(63, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.get(5, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(3154, 3154);
      // Undeclared exception!
      basic2DMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(16, 7);
      Basic2DMatrix.zero(7, 16);
      basic2DMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.power(1388);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      // Undeclared exception!
      try { 
        sparseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = DenseVector.zero(1);
      SparseVector sparseVector0 = SparseVector.zero(1);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      columnMajorSparseMatrix0.multiply(vector0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(1845);
      DenseVector denseVector0 = DenseVector.zero(1845);
      sparseVector0.equals((Vector) denseVector0, (-1.0));
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(5, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(14, 14, 14);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      sparseMatrix0.is(matrixPredicate0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      sparseMatrix0.iterator();
      sparseMatrix0.equals((Matrix) sparseMatrix0, (double) 14);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      sparseMatrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3739);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(3739);
      cRSMatrix0.subtract((Matrix) basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.setRow((-709), Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32);
      cCSMatrix0.multiplyByItsTranspose();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      Matrix matrix0 = cCSMatrix0.transpose();
      matrix0.columns();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix1.insert((Matrix) cRSMatrix0, 727, (-39));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 727x-39
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-1073741823), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      // Undeclared exception!
      try { 
        SparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(27);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeRow(27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..26
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      cRSMatrix0.insert((Matrix) basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(4, 4);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      basic2DMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(4, 4);
      basic2DMatrix0.rank();
      Matrix matrix0 = basic2DMatrix0.subtract(7.771561172376096E-14);
      matrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      basic2DMatrix0.blankOfRows(108);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[1] = (-764.9813124297785);
      doubleArray2[2] = (-764.9813124297785);
      doubleArray0[2] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.equals((Matrix) columnMajorSparseMatrix0, (-3804.7999727165866));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      basic2DMatrix0.withSolver(linearAlgebra_SolverFactory0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceTopLeft(5, (-1293));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..5][0..-1293].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.transformRow((-835), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -835
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.fold((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      basic2DMatrix0.copyOfRows(4);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) basic2DMatrix0, (-2806), (-2806));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2806x-2806
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(14, 14, 14);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix0 = sparseMatrix0.removeLastRow();
      matrix0.iterator();
      sparseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toDenseMatrix();
      basic2DMatrix0.toMatrixMarket();
      basic2DMatrix0.determinant();
      basic2DMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(10, 10);
      Matrix matrix0 = basic2DMatrix0.divide(10);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) basic2DMatrix0, 13, (-433), 7, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 13, -433
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(2094, 2094);
      matrix0.equals((Object) matrix0);
      Matrix matrix1 = matrix0.copyOfShape(2094, 2094);
      int int0 = 1191;
      Matrix matrix2 = matrix0.insert(matrix1, 2094, 1191);
      matrix2.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 9, 0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldRows(vectorAccumulator0);
      Object object0 = new Object();
      sparseMatrix0.equals((Object) matrixAccumulator0);
      Matrix matrix0 = ((CRSMatrix) sparseMatrix0).copyOfShape(9, 0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0, 0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 0 rows and 9 cols at 0, 0 from a 9x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(basic2DMatrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
      int int0 = 1033;
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0, 0, 1033);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 1033 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.random(467, 467, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      basic2DMatrix0.product();
      basic2DMatrix0.toMatrixMarket();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      cRSMatrix0.equals((Matrix) basic2DMatrix0, (double) 7);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix1.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.trace();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3);
      cCSMatrix0.blank();
      cCSMatrix0.trace();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2083, 2083, 2083);
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      basic2DMatrix0.toMatrixMarket();
      CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n7 7\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n1.000\n");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.non(matrixPredicate0);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      basic2DMatrix0.removeLastColumn();
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      double[][] doubleArray0 = new double[0][1];
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      basic2DMatrix0.transpose();
      CCSMatrix.fromCSV("-2,040");
      cCSMatrix0.transpose();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateColumn((-1932735282), vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toMatrixMarket();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
      // Undeclared exception!
      try { 
        cRSMatrix1.non((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      // Undeclared exception!
      try { 
        cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      basic2DMatrix0.determinant();
      basic2DMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.determinant();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      basic2DMatrix0.equals((Matrix) cRSMatrix0, 0.0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(10, 10);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.is(matrixPredicate0);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      int int0 = 1115;
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        cCSMatrix0.setRow(1115, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 2.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      basic2DMatrix0.diagonalProduct();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 2087;
      Matrix matrix0 = Matrix.diagonal(2087, 2087);
      Object object0 = null;
      Matrix matrix1 = Matrix.unit(1, 1);
      matrix0.insert(matrix1, 32, 32, 2087, 2087, 3, 3);
      matrix0.equals(object0);
      Matrix matrix2 = matrix0.copyOfShape(int0, int0);
      int int1 = 1191;
      Matrix matrix3 = matrix0.insert(matrix2, int0, int1);
      matrix3.getColumn(int1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      cCSMatrix0.mkString("{/he\"wdF1Bzl[f", "{/he\"wdF1Bzl[f");
      cCSMatrix0.blankOfColumns(37);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("-2,040");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(9, 9, mockRandom0);
      denseMatrix0.toMatrixMarket();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix0 = denseMatrix0.copyOfColumns(7);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      matrix0.apply(matrixOperation0);
      SparseVector sparseVector0 = SparseVector.zero(2094, 8);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(2094, 2717);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow((-2472), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2093
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SparseMatrix.zero(2, 36, 2);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(36, 2, mockRandom0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 6;
      intArray0[4] = 36;
      intArray0[3] = 36;
      intArray0[4] = 36;
      Matrix.identity(2);
      denseMatrix0.toMatrixMarket();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      matrix0.copyOfColumns(6);
      SparseVector sparseVector0 = SparseVector.zero(2, 0);
      matrix0.insertRow(0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 911;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(911, 911);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      matrix0.rowMajorIterator();
      int int1 = (-559);
      Matrix matrix1 = matrix0.insert((Matrix) columnMajorSparseMatrix0, 911, (-559), 911, 911, 911, 995);
      int int2 = 8;
      int int3 = 0;
      Matrix matrix2 = matrix0.slice(int0, int2, int3, int2);
      int int4 = (-814);
      matrix2.maxInRow(int4);
      matrix1.minInColumn(int1);
      matrix2.equals(matrix0, (double) int2);
      int int5 = 4402;
      matrix1.ensureIndexesAreInBounds(int5, int4);
      matrix0.iterator();
      Matrix matrix3 = columnMajorSparseMatrix0.multiply(matrix2);
      int int6 = 1725;
      int int7 = (-244);
      int int8 = 397;
      Matrix matrix4 = columnMajorSparseMatrix0.insert(matrix3, int2, int6, int7, int8);
      int int9 = 6;
      int int10 = (-2232);
      matrix4.ensureIndexesAreInBounds(int9, int10);
      columnMajorSparseMatrix0.norm();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateColumn(7, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      basic2DMatrix0.add((Matrix) basic2DMatrix1);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) basic2DMatrix1, (-1914480633), (-1914480633));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1914480633x-1914480633
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 36, 2);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(15, 2, mockRandom0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 6;
      intArray0[4] = 36;
      intArray0[3] = 15;
      intArray0[4] = 15;
      Matrix.identity(15);
      denseMatrix0.toMatrixMarket();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix0 = Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n15 2\n0.000\n0.100\n0.200\n0.300\n0.400\n0.500\n0.600\n0.700\n0.800\n0.900\n0.000\n0.100\n0.200\n0.300\n0.400\n0.500\n0.600\n0.700\n0.800\n0.900\n0.000\n0.100\n0.200\n0.300\n0.400\n0.500\n0.600\n0.700\n0.800\n0.900\n");
      matrix0.copyOfColumns(6);
      SparseVector sparseVector0 = SparseVector.zero(2, 15);
      matrix0.insertRow(2, sparseVector0);
      MatrixVectorOperation<RowMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<RowMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((VectorOperation) null).when(matrixVectorOperation0).partiallyApply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      // Undeclared exception!
      try { 
        sparseMatrix0.apply(matrixVectorOperation0, (Vector) sparseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SparseMatrix.zero(14, 14, 14);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      SparseVector sparseVector0 = SparseVector.zero(14, 1208);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(37, 1208);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(1482, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..36
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(basic2DMatrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1033, 1033);
      int[] intArray0 = new int[1];
      basic2DMatrix0.hashCode();
      rowMajorSparseMatrix0.equals((Matrix) sparseMatrix0, (double) 1033);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        basic2DMatrix0.maxInRow(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cRSMatrix0.mkString(numberFormat0);
      cRSMatrix0.equals((Matrix) basic2DMatrix0, (double) 7);
      double double0 = new Integer(7);
      basic2DMatrix0.copy();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      basic2DMatrix0.norm();
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        basic2DMatrix0.minInRow(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      NumberFormat.getPercentInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.toMatrixMarket(numberFormat0);
      double[] doubleArray0 = new double[0];
      Vector.fromArray(doubleArray0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(10, 1903);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket vector array real\n0\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.random(0, 0, mockRandom0);
      Basic2DMatrix.zero(0, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      sparseMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("7");
      Matrix matrix0 = cCSMatrix0.transpose();
      matrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      cCSMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(Integer.MAX_VALUE, 1903, 1903, (double[]) null, (int[]) null, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Basic2DMatrix.unit(7, 7);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      cRSMatrix0.toMatrixMarket();
      CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n7 7 7\n1 1 1.000\n2 2 1.000\n3 3 1.000\n4 4 1.000\n5 5 1.000\n6 6 1.000\n7 7 1.000\n");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toMatrixMarket();
      CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general column-major\n0 0 0\n");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SparseMatrix.zero(2, 36, 2);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(15, 2, mockRandom0);
      int[] intArray0 = new int[5];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(36, 2, 36);
      columnMajorSparseMatrix0.toMatrixMarket();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general column-major\n36 2 0\n");
      ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      Matrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general column-major\n36 2 0\n");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(4, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.iteratorOfRow((-723));
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.random(15, 15, mockRandom0);
      int[] intArray0 = new int[3];
      intArray0[0] = 15;
      intArray0[1] = 6;
      intArray0[2] = 15;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(15, 0, mockRandom0);
      denseMatrix0.rank();
      FieldPosition fieldPosition0 = new FieldPosition(15);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("+1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(97, 97);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(4, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 97.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn((-3468), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(32);
      SparseVector sparseVector0 = SparseVector.zero(32, 32);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, 32, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 32 rows and 32 cols at 0, 0 from a 1x32 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      cRSMatrix0.equals((Matrix) basic2DMatrix0, (double) 7);
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(7, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      basic2DMatrix0.foldColumns(vectorAccumulator0);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      MockRandom mockRandom0 = new MockRandom(3);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(3, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) sparseMatrix0, 1440, (-2087831323), 37, 3, 3555, 1440);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 37, 3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Matrix.diagonal(2094, 2094);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      Format.Field format_Field1 = fieldPosition0.getFieldAttribute();
      fieldPosition0.setEndIndex(10);
      fieldPosition0.getFieldAttribute();
      FieldPosition fieldPosition1 = new FieldPosition(format_Field1);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      decimalFormat0.format((-2040L));
      CCSMatrix.fromCSV("2");
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-455L);
      doubleArray1[3] = 3445.9270363841;
      doubleArray1[4] = (double) (-455L);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 10;
      doubleArray2[1] = (double) (-455L);
      doubleArray2[2] = (double) (-2040L);
      doubleArray2[3] = (double) (-455L);
      decimalFormat0.setNegativePrefix("\"Z]ST#Aq#wtW}<");
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (double) 2094;
      doubleArray0[1] = doubleArray2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.multiplyByItsTranspose();
      cCSMatrix0.mkString((NumberFormat) decimalFormat0);
      DecimalFormat decimalFormat1 = new DecimalFormat("h+D=_R/J9)Rk;Y@-");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.maxInColumn(16);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) basic2DMatrix0, 235, 235);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 235 rows and 235 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      NumberFormat.getPercentInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.toMatrixMarket(numberFormat0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(17);
      basic2DMatrix0.determinant();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      basic2DMatrix0.setColumn(0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(14, 14, 14);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(277, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '277' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      Matrix matrix0 = ooPlaceKroneckerProduct0.applyCommon(basic2DMatrix0, basic2DMatrix0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.non(advancedMatrixPredicate0);
      cRSMatrix0.kroneckerProduct(matrix0);
      int int0 = 48;
      cRSMatrix0.iterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(48, 2441.2);
      // Undeclared exception!
      try { 
        ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      Matrix matrix0 = ooPlaceKroneckerProduct0.applyCommon(basic2DMatrix0, basic2DMatrix0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.non(advancedMatrixPredicate0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix1.insert(matrix0, 3, (-2391));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 3x-2391
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(14, 14, 14);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      cRSMatrix0.swapColumns(2609, 2609);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toMatrixMarket();
      CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
      cRSMatrix0.swapRows(261, 261);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(basic2DMatrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapRows(261, (-4279));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      cRSMatrix0.equals((Matrix) basic2DMatrix0, 0.0);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      basic2DMatrix0.product();
      // Undeclared exception!
      try { 
        basic2DMatrix1.insert((Matrix) basic2DMatrix0, 231, 231);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 231 rows and 231 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toMatrixMarket();
      CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      basic2DMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("-2,040");
      cCSMatrix0.blankOfColumns(37);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateRow(37, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      int int0 = 231;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CCSMatrix.fromCSV("-2,040");
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("-2,040");
      // Undeclared exception!
      try { 
        basic2DMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("0");
      cCSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn((-1745));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1745
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("      ");
      cCSMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Basic2DMatrix.identity(10);
      Basic2DMatrix.identity(10);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(10, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateRow(0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(10, 10);
      basic2DMatrix0.rotate();
      // Undeclared exception!
      try { 
        basic2DMatrix0.minInColumn(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(37, 37);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      basic2DMatrix0.updateRow(27, vectorFunction0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(14, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 37.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      basic2DMatrix0.toMatrixMarket();
      basic2DMatrix0.max();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
