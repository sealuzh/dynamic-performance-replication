/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:32:03 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("H");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOUtils.decodeBase64(">d&GC'Y'@ZH-X3");
      IOUtils.isValidJsonpQueryParam("encodeUTF8 error");
      IOUtils.decodeBase64("4LX<b=F\"lyzQ");
      MockFile mockFile0 = new MockFile("fastjson.properties", ">d&GC'Y'@ZH-X3");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isIdent('}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils.getStringProperty("d_><`");
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("fx #_$s*Fo<E174z");
      boolean boolean1 = IOUtils.firstIdentifier('4');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-50), 2, iOUtils0.CA);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = IOUtils.stringSize((-58L));
      IOUtils iOUtils0 = new IOUtils();
      int int1 = IOUtils.encodeUTF8(iOUtils0.CA, 9, 1, iOUtils0.specicalFlags_doubleQuotes);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.firstIdentifier('f');
      // Undeclared exception!
      try { 
        IOUtils.getChars(33, (-371), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isIdent('\\');
      assertFalse(boolean0);
      
      int int0 = IOUtils.stringSize(1L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = IOUtils.stringSize(0L);
      assertEquals(1, int0);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      boolean boolean1 = IOUtils.isIdent('w');
      assertFalse(boolean1 == boolean0);
      
      IOUtils.firstIdentifier('w');
      byte[] byteArray0 = IOUtils.decodeBase64("!\"JK6gFJe8{<NeC@");
      assertArrayEquals(new byte[] {(byte)36, (byte) (-82), (byte) (-96), (byte)20, (byte) (-105), (byte) (-68), (byte) (-1), (byte) (-13), (byte)94}, byteArray0);
      
      IOUtils iOUtils0 = new IOUtils();
      boolean boolean2 = IOUtils.firstIdentifier('w');
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "~AS`x\"n";
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("~AS`x\"n", 0, 1017);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 799, 209);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 799
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char char0 = 'a';
      IOUtils.isIdent('a');
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("i7&g=i4/ZZmmC", (-1433), (-1433));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2686L), 256, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      IOUtils.isValidJsonpQueryParam("");
      IOUtils.firstIdentifier(')');
      byte byte0 = (byte)72;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)72, 17, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = IOUtils.stringSize((-2572));
      assertEquals(1, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = '0';
      charArray0[2] = ':';
      charArray0[3] = '8';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      int int1 = IOUtils.encodeUTF8(charArray0, 0, 0, byteArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils.getStringProperty("6p{w:Ulpe}@TH");
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.mark(110);
      String string0 = IOUtils.readAll(charArrayReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.DIGITS);
      IOUtils.loadPropertiesFromFile();
      charArrayReader0.markSupported();
      IOUtils.readAll(charArrayReader0);
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("com.alibaba.fastjson.JSONException", 31, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.replaceChars, 70, 24, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      String string0 = IOUtils.getStringProperty("utf8 decode error, ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, (-3657), (-2147483645), iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3657
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'R';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-1);
      IOUtils.encodeUTF8(charArray0, 0, (-1244), byteArray0);
      IOUtils.decodeUTF8(byteArray0, 30, 0, charArray0);
      IOUtils.loadPropertiesFromFile();
      IOUtils.firstIdentifier(',');
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) (byte) (-1), (int) (byte) (-128), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -129
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 2090;
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'N';
      charArray0[2] = '1';
      charArray0[3] = 'f';
      charArray0[4] = 'c';
      // Undeclared exception!
      try { 
        IOUtils.getChars(2090, 2090, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2089
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils.stringSize(105L);
      int int0 = (-742);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((String) null, (-742), (-742));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOUtils.stringSize((-1338L));
      IOUtils.isValidJsonpQueryParam("fastjson.compatibleWithFieldName");
      IOUtils.isValidJsonpQueryParam("fastjson.compatibleWithFieldName");
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[1] = '6';
      charArray0[2] = 'w';
      charArray0[3] = 'q';
      charArray0[4] = '8';
      charArray0[5] = '2';
      charArray0[6] = ';';
      charArray0[7] = '1';
      charArray0[8] = '?';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, 4988, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IOUtils.decodeBase64(">d&GC'Y'@ZH-X3");
      String string0 = "encodeUTF8 error";
      IOUtils.isValidJsonpQueryParam("encodeUTF8 error");
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = 'v';
      charArray0[2] = '[';
      charArray0[3] = '$';
      charArray0[4] = '[';
      charArray0[5] = 'L';
      charArray0[6] = '^';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (-368), (-368));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -737
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IOUtils.decodeBase64("~AS`x\"n");
      String string0 = IOUtils.getStringProperty("~AS`x\"n");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset.defaultCharset();
      String string0 = "#AJ6?5f><|";
      IOUtils.firstIdentifier('X');
      IOUtils.decodeBase64("Wi}))");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      IOUtils.firstIdentifier('X');
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader(pushbackInputStream0, "WHsp");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IOUtils.stringSize(0L);
      IOUtils.isValidJsonpQueryParam("");
      Charset charset0 = Charset.defaultCharset();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer1);
      ByteBuffer byteBuffer2 = charset0.encode(charBuffer1);
      charset0.aliases();
      uTF8Decoder0.decode(byteBuffer2);
      IOUtils.decode(uTF8Decoder0, byteBuffer1, charBuffer1);
      int int0 = (-72);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("", 3678080, 0);
      IOUtils.getStringProperty("%yP3");
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'H';
      charArray0[2] = ' ';
      charArray0[3] = 'u';
      charArray0[4] = 'D';
      charArray0[5] = 'Z';
      charArray0[6] = 'A';
      charArray0[7] = 'O';
      charArray0[8] = 'b';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOUtils.getChars((byte) (-73), 7, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, 2121, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = IOUtils.stringSize(3968);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(36, 36, iOUtils0.CA);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars(18, 1, iOUtils0.replaceChars);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeBase64("8o");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((-2487), 36, iOUtils0.CA);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = '6';
      charArray0[2] = 'f';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 0, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 254
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = IOUtils.stringSize((-1338L));
      assertEquals(1, int0);
      
      char[] charArray0 = new char[9];
      charArray0[6] = 'C';
      charArray0[1] = '6';
      charArray0[2] = 'w';
      charArray0[3] = 'q';
      charArray0[4] = '8';
      charArray0[5] = '2';
      charArray0[6] = ';';
      charArray0[7] = '1';
      charArray0[8] = ';';
      byte[] byteArray0 = IOUtils.decodeBase64("UTF-8");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      byte[] byteArray1 = IOUtils.decodeBase64(charArray0, 1, 1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int int1 = IOUtils.stringSize(2645);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = IOUtils.stringSize((-1338L));
      char[] charArray0 = new char[9];
      boolean boolean0 = IOUtils.firstIdentifier('6');
      assertFalse(boolean0);
      
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 1, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = IOUtils.stringSize(1);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOUtils.stringSize(1481L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = '[';
      charArray0[2] = ' ';
      char char0 = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'y';
      charArray0[5] = '?';
      charArray0[6] = '>';
      charArray0[7] = 'H';
      char char1 = 'V';
      charArray0[8] = 'V';
      IOUtils.getChars((byte)124, 4, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars(45, (-3245), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3246
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[3] = 'f';
      IOUtils.firstIdentifier('f');
      IOUtils.decodeBase64("");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(352L, 15, iOUtils0.replaceChars);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((long) 5, 5, iOUtils0.ASCII_CHARS);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.compatibleWithJavaBean", 2147064790, (-2321));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.stringSize(1L);
      int int1 = IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, 1, 1, iOUtils0.specicalFlags_doubleQuotes);
      assertTrue(int1 == int0);
      
      int int2 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 1, 1, iOUtils0.replaceChars);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)93, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IOUtils.stringSize((-1338L));
      char[] charArray0 = new char[9];
      charArray0[6] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'w';
      charArray0[4] = '8';
      charArray0[5] = 'C';
      IOUtils.decodeBase64(charArray0, 1, 1);
      IOUtils.stringSize(1);
      IOUtils.firstIdentifier('X');
      IOUtils.getChars(1, 7, charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = 'X';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray1, 271, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = IOUtils.stringSize((-1338L));
      assertEquals(1, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("utf8 decode error, ", 1, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = IOUtils.firstIdentifier('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IOUtils.stringSize((-1338L));
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[2] = 'w';
      charArray0[3] = 'q';
      charArray0[5] = 'C';
      charArray0[6] = ';';
      charArray0[7] = '1';
      charArray0[8] = 'w';
      byte[] byteArray0 = IOUtils.decodeBase64("utf8 decode error, ", 1, 1);
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray1 = IOUtils.decodeBase64(")9];TBHY>${NDfWK3A");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.CA, 6, 6);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.DIGITS, 5, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean", 6, 6);
      byte[] byteArray1 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64("fastjson.compatibleWithJavaBean", 6, 6);
      IOUtils.getStringProperty("fastjson.compatibleWithJavaBean");
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("read string from reader error", 1, 5);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-64);
      char[] charArray0 = new char[0];
      IOUtils.decodeUTF8(byteArray0, 1, 1, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars(2423, (-3717), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3718
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[2] = (byte) (-27);
      char[] charArray0 = new char[10];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)11, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-32);
      char[] charArray0 = new char[5];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)93, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = IOUtils.firstIdentifier('\u0000');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64(",&Ul4k_<Q?Aj7UA");
      IOUtils.stringSize((-1185L));
      char[] charArray0 = new char[9];
      charArray0[1] = '{';
      charArray0[2] = 'W';
      charArray0[3] = 'z';
      charArray0[4] = '`';
      charArray0[5] = '8';
      IOUtils.decodeUTF8(byteArray0, 1, 588, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-39), 115, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 114
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-32);
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[3] = '!';
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)66, charArray0);
      int int0 = IOUtils.stringSize(100L);
      assertEquals(3, int0);
      
      int int1 = IOUtils.decodeUTF8(byteArray0, (byte)0, 3, charArray0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', 'B', '\u0000', '!', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)0;
      byteArray0[22] = (byte)93;
      byteArray0[2] = (byte) (-25);
      char[] charArray0 = new char[5];
      charArray0[3] = '!';
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)93, charArray0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[2] = (byte) (-51);
      char[] charArray0 = new char[11];
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)10, charArray0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.encodeUTF8(iOUtils0.DIGITS, (-813), (-813), iOUtils0.specicalFlags_doubleQuotes);
      boolean boolean0 = IOUtils.firstIdentifier('P');
      assertTrue(boolean0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("1=");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("ctW=");
      assertArrayEquals(new byte[] {(byte)114, (byte) (-43)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IOUtils.firstIdentifier('\u00D0');
      MockFile mockFile0 = new MockFile("'7iIgRbU'v\"ZF#0]", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      IOUtils.close(mockPrintWriter0);
      IOUtils.stringSize(0L);
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = '\u00D0';
      charArray0[2] = 'P';
      charArray0[3] = '\u00D0';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      charArray0[6] = '\u00D0';
      charArray0[7] = '\u00D0';
      charArray0[8] = 'P';
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[5];
      charArray0[3] = '\u00D3';
      byte[] byteArray0 = new byte[3];
      int int1 = IOUtils.encodeUTF8(charArray0, 2, 2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-61), (byte) (-109)}, byteArray0);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IOUtils.stringSize((-1409L));
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = '\u00D0';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '\u00D0';
      charArray0[5] = '\u00D0';
      charArray0[6] = '\u00D0';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('\u0105');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u0104');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.encodeUTF8(iOUtils0.DIGITS, (-813), (-813), iOUtils0.specicalFlags_doubleQuotes);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 0, 87);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.encodeUTF8(iOUtils0.DIGITS, (-813), (-813), iOUtils0.specicalFlags_doubleQuotes);
      IOUtils.firstIdentifier('P');
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 0, 87);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-10);
      char[] charArray0 = new char[11];
      charArray0[2] = '\u0000';
      charArray0[1] = '';
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)20, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 18, (byte)20, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-10);
      char[] charArray0 = new char[2];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)11, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = 'V';
      charArray0[2] = 'i';
      charArray0[3] = 'M';
      charArray0[4] = 'T';
      charArray0[5] = '=';
      charArray0[6] = '}';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[7] = 'c';
      IOUtils.decodeBase64(charArray0, 3, 3);
      MockFile mockFile0 = new MockFile("utf8 decode error, ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = '(';
      charArray0[2] = '=';
      charArray0[3] = '';
      charArray0[4] = '*';
      charArray0[5] = '(';
      charArray0[6] = '!';
      charArray0[7] = 'i';
      charArray0[8] = 'H';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 3, 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[2] = (byte) (-15);
      char[] charArray0 = new char[11];
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)5, charArray0);
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)5, (-857), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -858
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
