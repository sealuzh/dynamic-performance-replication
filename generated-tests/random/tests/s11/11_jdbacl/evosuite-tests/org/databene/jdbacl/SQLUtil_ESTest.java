/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 19:55:50 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.leftJoin("Bp5AXTH3}`z*:<", stringArray0, "deletecx?r3", "Bp5AXTH3}`z*:<", stringArray0);
      assertEquals("left join deletecx?r3 as Bp5AXTH3}`z*:< on Bp5AXTH3}`z*:<.null = Bp5AXTH3}`z*:<.null and Bp5AXTH3}`z*:<.null = Bp5AXTH3}`z*:<.null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(32, "create table ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]MX(a=6{hu", defaultDBTable0, dBDataType0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("]MX(a=6{hu", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("CV$", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CV$", dBSchema0);
      String[] stringArray0 = new String[8];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("selectq%wi,wbzl9kbg.", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT selectq%wi,wbzl9kbg. ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "eF5//}n$18&<?3'*DZ1", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT eF5//}n$18&<?3'*DZ1 UNIQUE (, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[6];
      DBSchema dBSchema0 = new DBSchema("coYG}WCC");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4N#%\"7 as 4N#%\"7 on ", dBSchema0);
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray1);
      assertEquals("SELECT * FROM 4N#%\"7 as 4N#%\"7 on  WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join("inner", "call", stringArray0, "inner", "alter table", stringArray0);
      assertEquals("inner as alter table on call.null = alter table.null and call.null = alter table.null and call.null = alter table.null and call.null = alter table.null and call.null = alter table.null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.innerJoin(stringArray0[0], stringArray0, "b0w'y9r", "!>", stringArray0);
      assertEquals("b0w'y9r as !> on null.null = !>.null and null.null = !>.null and null.null = !>.null and null.null = !>.null", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("-=$.O$");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-=$.O$", dBSchema0);
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-=$.O$", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT -=$.O$ FOREIGN KEY (, , , , ) REFERENCES -=$.O$(, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", true, defaultDBTable0, " WHERE ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("|(?t");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|(?t", dBSchema0);
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Server is running", false, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT \"Server is running\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create materialized viewcheckdefinition");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("u\"my]4m0jG*");
      SQLUtil.isQuery("u\"my]4m0jG*");
      String[] stringArray0 = new String[0];
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.isProcedureCall("<N(FkV;");
      SQLUtil.isDDL("<N(FkV;");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index3i<{");
      SQLUtil.mutatesStructure("alter index3i<{");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = defaultDBTable0.getPrimaryKeyConstraint();
      assertNull(dBPrimaryKeyConstraint0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("bDD2H@i'AUVLg)|", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(6, "Bp5AXTH3}`z*:<");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("h'q7z>ia !k`Y", defaultDBTable0, dBDataType0, integer0);
      stringBuilder0.append((Object) defaultDBColumn0);
      assertEquals("h'q7z>ia !k`Y : BP5AXTH3}`Z*:<(1)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(YCa]kR#rGxX]Kg");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create tablemw", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create tablemw\" PRIMARY KEY (, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("6FAxy");
      String[] stringArray0 = new String[4];
      stringArray0[3] = "6FAxy";
      SQLUtil.renderColumnListWithTableName("6FAxy", stringArray0);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("left join NCLOB as _ L+5Rd%S*'eCZbMyFO on R1K_u`PHxv0n.at  = _ L+5Rd%S*'eCZbMyFO.at  and R1K_u`PHxv0n..N+yE7e9-`:X = _ L+5Rd%S*'eCZbMyFO..N+yE7e9-`:X");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = "BJZ++zEd%l1*19Ws,+F";
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("f<T\"#;!", false);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.normalize("&*/Zu^QWKesu6", false);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize("u*'(@]NF2", true);
      Integer integer0 = RawTransaction.COMMIT;
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "-- pageSize: ";
      SQLUtil.normalize("-- pageSize: ", false);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      assertEquals("Activation", constantActionActivation0.getClassType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.renderValue("starting transaction xid = ");
      SQLUtil.normalize("@nkI-cG", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select intoa");
      SQLUtil.normalize("EI,", true);
      String string0 = "\u0001v";
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " expecting ");
      SQLUtil.normalize("`uP(=s5dQ1A&s})", true);
      long long0 = 5000L;
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("-=$.O$");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema -=$.O$", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "CHECK ";
      SQLUtil.typeAndName(defaultDBTable0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[6];
      stringArray0[5] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(90037);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.UserTypeConstantNode");
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("v+hPKa@4", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, ) REFERENCES org.apache.derby.impl.sql.compile.UserTypeConstantNode(, )", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBColumn dBColumn0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = null;
      String[] stringArray0 = new String[7];
      stringArray0[6] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      String string1 = SQLUtil.typeAndName(dBColumn0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(1494, "lv7r]C{A>[m");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("TRIGGER_TYPE", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.TRIGGER_TYPE", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("drop mater", "connecting #", versionNumber0);
      SQLUtil.ownerDotComponent(defaultDatabase0);
      DBConstraint dBConstraint0 = null;
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((long) 6);
      SQLUtil.addOptionalCondition("Bp5AXTH3}`z*:<", stringBuilder1);
      assertEquals("6 or Bp5AXTH3}`z*:<", stringBuilder1.toString());
      assertEquals("6 or Bp5AXTH3}`z*:<", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("renameexecnul", stringBuilder0);
      assertEquals("renameexecnul", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "'");
      SQLUtil.addRequiredCondition("42Y39", stringBuilder0);
      String string0 = "Q1+L5u";
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("Paa'{(,", stringBuilder0);
      char[] charArray0 = new char[6];
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("create tablet0q14");
      String[] stringArray0 = new String[5];
      String string0 = null;
      SQLUtil.innerJoin("43Y50.U", stringArray0, "(8l>Viy:nu)T", (String) null, stringArray0);
      String string1 = "j_";
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, "4N#%\"7", stringArray0, "4N#%\"7", "4N#%\"7", stringArray0);
      assertEquals("4N#%\"7 as 4N#%\"7 on ", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("QF|s~*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("-=$.O$");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-=$.O$", dBSchema0);
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-=$.O$", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT -=$.O$ FOREIGN KEY (, , , , ) REFERENCES -=$.O$(, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "%Gt=");
      DBSchema dBSchema0 = new DBSchema("create materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("calltruncate", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[6] = "create materialized view";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "calltruncate", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "select into";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("select into");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("execnull ^8%f=t=~(3) null");
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLUtil.substituteMarkers("truncate", "truncate", "truncate");
      SQLUtil.mutatesDataOrStructure("truncate");
      int int0 = 846;
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLUtil.removeComments("gM]");
      SQLUtil.mutatesDataOrStructure("select intoa");
      String string0 = "\u0001v";
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLUtil.isProcedureCall("alter session");
      SQLUtil.mutatesDataOrStructure("alter session");
      String string0 = "insert";
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("more than one node as root (TODO: make exception hierarchy)");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("zoy1,6tE&.^F7DB&(bG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: zoy1,6tE&.^F7DB&(bG
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("3{-4~C p");
      Character character0 = new Character('(');
      String string0 = SQLUtil.substituteMarkers("3{-4~C p", "3{-4~C p", character0);
      assertEquals("'('", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("-=$.O$");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-=$.O$", dBSchema0);
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance(2133, "-=$.O$");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      stringBuilder0.insert(0, (Object) defaultDBColumn0);
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "CLOB", 41, 41);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 41, end 41, s.length() 4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1622810695), "CLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = "Q1+L5u";
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(90, "-&gA@H");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("<w}?Mr|=|X2'bu5@Pd", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jseEb[h9\"z", (DBTable) null, (-2), "jseEb[h9\"z");
      defaultDBColumn0.setDefaultValue("alter index");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("jseEb[h9\"z JSEEB[H9\"Z DEFAULT alter index NULL", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("MSSQLServer", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", (short) ", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1626880833), "select");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select", defaultDBTable0, dBDataType0, integer0, integer0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      arrayList0.add((DBColumn) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("bDD2H@i'AUVLg)|", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(6, "Bp5AXTH3}`z*:<");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("h'q7z>ia !k`Y", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("h'q7z>ia !k`Y, h'q7z>ia !k`Y, h'q7z>ia !k`Y, h'q7z>ia !k`Y, h'q7z>ia !k`Y", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("l}TB'vIm]");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("at ", dBSchema0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DAY");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = "BJZ++zEd%l1*19Ws,+F";
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.UserTypeConstantNode");
      String[] stringArray0 = new String[2];
      stringArray0[1] = "org.apache.derby.impl.sql.compile.UserTypeConstantNode";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.impl.sql.compile.UserTypeConstantNode", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = FileUtil.canonicalFile("v+hPKa@4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = null;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("truncatetruncateexecute", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      int int0 = 61;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncatetruncateexecute", defaultDBTable0, 61, "truncatetruncateexecute");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("truncatetruncateexecute", "truncatetruncateexecute");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      PrintWriter printWriter0 = mockPrintWriter0.format("PRIMARY KEY ", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      String string1 = "delete";
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SQLUtil.isDML("org.apache.derby.impl.sql.compile.UserTypeConstantNode");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.UserTypeConstantNode");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = FileUtil.canonicalFile("v+hPKa@4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[0];
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("]*cb/:FN[", defaultDBTable0, 501, "(7_~1F, 9AX7zbGn['~U, ), 7DY~/oumjS}'6':, ]*cb/:FN[, intoselect)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7_~1F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "C";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("renameavt]'jqk", true, "C", "C");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      String string1 = " not found in result set.";
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("create table3i<{buif~r");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table3i<{buif~r", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table3i<{buif~r", defaultDBTable0, 6, "create table3i<{buif~r");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CREATE TABLE3I<{BUIF~R", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("create table3i<{buif~r");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table3i<{buif~r", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[6] = "create table3i<{buif~r";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table3i<{buif~r", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("left", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.substituteMarkers("SQL type for this field is not yet supported.", "SQL type for this field is not yet supported.", integer0);
      String string0 = "select intoh";
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CHECK ";
      SQLUtil.leftJoin("CHECK ", stringArray0, "CHECK ", (String) null, stringArray0);
      String string0 = "select intoh";
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index3i<{");
      String[] stringArray0 = new String[7];
      stringArray0[6] = "alter index3i<{";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = defaultDBTable0.getPrimaryKeyConstraint();
      assertNull(dBPrimaryKeyConstraint0);
  }
}
