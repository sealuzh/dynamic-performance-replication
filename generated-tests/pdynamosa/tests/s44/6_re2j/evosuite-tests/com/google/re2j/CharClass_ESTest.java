/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 09:00:44 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 237);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2582;
      intArray0[2] = (-5027);
      intArray0[3] = (-2544);
      intArray0[4] = 1942;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 66640;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 2582, (-5027), (-2544), 1942, 0, 0, 66640}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals("[]", string0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 2582, (-5027), (-2544), 1942, 0, 0, 66640}, intArray0);
      
      String string1 = CharClass.charClassToString(intArray0, 0);
      assertEquals("[]", string1);
      assertEquals(8, intArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new int[] {0, 2582, (-5027), (-2544), 1942, 0, 0, 66640}, intArray0);
      
      int[] intArray1 = charClass1.toArray();
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 2582, (-5027), (-2544), 1942, 0, 0, 66640}, intArray0);
      assertArrayEquals(new int[] {0, 66640, (-5027), (-2544)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1217;
      intArray0[1] = 128318;
      intArray0[2] = 2;
      intArray0[3] = (-2594);
      intArray0[4] = (-1868);
      intArray0[5] = (-113);
      intArray0[6] = 2504;
      intArray0[7] = 8602;
      intArray0[8] = 1037;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int1 = (-110);
      CharClass charClass1 = charClass0.appendFoldedRange(0, (-110));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass2.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(7019, 506);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-251);
      intArray0[1] = 2004;
      intArray0[2] = 279;
      intArray0[3] = 1878;
      int int0 = 754;
      intArray0[4] = 754;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-251), 2004, 279, 1878, 754}, intArray0);
      
      // Undeclared exception!
      charClass0.appendFoldedRange(1878, 43698);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1930, 1930);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[8][4];
      int[] intArray1 = new int[6];
      intArray1[0] = 1930;
      intArray1[1] = 1930;
      intArray1[2] = 1930;
      intArray1[3] = 1930;
      intArray1[4] = 1930;
      intArray1[5] = 1930;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1930;
      intArray2[1] = 1930;
      intArray2[2] = 1930;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 1930;
      intArray3[1] = 1930;
      intArray3[2] = 1930;
      intArray3[3] = 1930;
      intArray3[4] = 1930;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 1930;
      intArray4[1] = 1930;
      intArray4[2] = 1930;
      intArray4[3] = 1930;
      intArray4[4] = 1930;
      intArray4[5] = 1930;
      intArray4[6] = 1930;
      intArray4[7] = 1930;
      intArray4[8] = 1930;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 1930;
      intArray5[1] = 1930;
      intArray5[2] = 1930;
      intArray5[3] = 1930;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = 1930;
      intArray6[1] = 1930;
      intArray6[2] = 1930;
      intArray6[3] = 1930;
      intArray6[4] = 1930;
      intArray6[5] = 1930;
      intArray6[6] = 1930;
      intArray6[7] = 1930;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[0];
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray6));
      
      intArray0[6] = intArray7;
      int[] intArray8 = new int[5];
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray7));
      
      intArray8[0] = 1930;
      intArray8[1] = 1930;
      intArray8[2] = 1930;
      intArray8[3] = 1930;
      intArray8[4] = 1930;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, 163);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 35;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {35}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[0][7];
      int int0 = 11516;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 11516);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray2 = new int[3][9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2224;
      intArray0[1] = 66640;
      intArray0[2] = (-2);
      intArray0[3] = (-243);
      intArray0[4] = 1918;
      intArray0[5] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2224, 66640, (-2), (-243), 1918, 32}, intArray0);
      
      CharClass charClass1 = charClass0.appendRange(128317, 4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {2224, 66640, (-2), (-243), 1918, 32}, intArray0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {2224, 66640, (-2), (-243), 1918, 32}, intArray0);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {2224, 66640, (-2), (-243), 1918, 32}, intArray0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1918;
      intArray1[1] = (-243);
      intArray1[2] = 32;
      intArray1[3] = 128317;
      intArray1[4] = 1918;
      intArray1[5] = (-243);
      intArray1[6] = (-2);
      intArray1[7] = 66640;
      CharClass charClass4 = charClass2.appendFoldedClass(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {2224, 66640, (-2), (-243), 1918, 32}, intArray0);
      assertArrayEquals(new int[] {1918, (-243), 32, 128317, 1918, (-243), (-2), 66640}, intArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1200), 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[4][8];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1200);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-1200);
      intArray3[1] = (-1200);
      intArray3[2] = (-1200);
      intArray3[3] = 0;
      intArray3[4] = (-1200);
      intArray3[5] = (-1200);
      intArray3[6] = (-1200);
      intArray3[7] = 0;
      intArray3[8] = 2036;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 0;
      intArray4[1] = (-1200);
      intArray4[2] = 0;
      intArray4[3] = (-1200);
      intArray4[4] = (-1200);
      intArray4[5] = 0;
      intArray4[6] = 0;
      intArray4[7] = 2036;
      intArray4[8] = 0;
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-3512);
      intArray0[1] = (-3006);
      intArray0[2] = 1137;
      intArray0[3] = 4;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-3512), (-3006), 1137, 4, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[9][8];
      int[] intArray1 = new int[4];
      intArray1[0] = (-912);
      intArray1[1] = 0;
      intArray1[2] = (-20);
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      intArray0[2] = intArray1;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-1);
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = (-912);
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray3[7] = 0;
      intArray3[8] = (-20);
      intArray0[3] = intArray3;
      int[] intArray4 = new int[7];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = (-20);
      intArray4[1] = (-20);
      intArray4[2] = 0;
      intArray4[3] = (-20);
      intArray4[4] = (-912);
      intArray4[5] = 0;
      intArray4[6] = 0;
      intArray0[4] = intArray4;
      int[] intArray5 = new int[6];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 0;
      intArray5[1] = (-20);
      intArray5[2] = 0;
      intArray5[3] = (-20);
      intArray5[4] = 0;
      intArray5[5] = (-912);
      intArray0[5] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = (-20);
      intArray6[1] = (-912);
      intArray6[2] = 0;
      intArray6[3] = 0;
      intArray6[4] = (-20);
      intArray6[5] = (-1);
      intArray6[6] = (-1);
      intArray0[6] = intArray6;
      int[] intArray7 = new int[2];
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray1));
      
      intArray7[0] = (-20);
      intArray7[1] = 0;
      intArray0[7] = intArray7;
      int[] intArray8 = new int[3];
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray3));
      
      intArray8[0] = (-1);
      intArray8[1] = (-912);
      intArray8[2] = 0;
      intArray0[8] = intArray8;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 1260);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass2.cleanClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass3.appendClass(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass6 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-2478);
      int int1 = (-1962);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 2, (-2478), 0, 0, 0, 0}, intArray0);
      
      int int2 = 65;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-33), (-33));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-33);
      intArray0[1] = (-33);
      intArray0[2] = (-33);
      intArray0[3] = (-33);
      intArray0[4] = (-33);
      intArray0[5] = (-33);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 120661);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-33), (-33), (-33), (-33), (-33), (-33)}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral((-33), (-33));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-33), (-33), (-33), (-33), (-33), (-33)}, intArray0);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-33), (-33), (-33), (-33), (-33), (-33)}, intArray0);
      
      int[][] intArray1 = new int[7][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      charClass4.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2459;
      intArray0[1] = (-66);
      intArray0[2] = 0;
      intArray0[3] = 25;
      intArray0[4] = 0;
      intArray0[5] = (-2148);
      intArray0[6] = 1250;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2459, (-66), 0, 25, 0, (-2148), 1250, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {2459, (-66), 0, 25, 0, (-2148), 1250, 0}, intArray0);
      
      CharClass charClass2 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {2459, (-66), 0, 25, 0, (-2148), 1250, 0}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 25, 1250, 0, 2459, (-66), 2459, (-66)}, intArray0);
      
      CharClass charClass4 = charClass2.negateClass();
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass1);
      assertEquals(8, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {26, 1249, 1, 2458, (-65), 1114111, 2459, (-66)}, intArray0);
      
      CharClass charClass5 = charClass3.appendClassWithSign(intArray0, (-65));
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass1);
      assertEquals(8, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {26, 1249, 1, 2458, (-65), 1114111, 2459, (-66)}, intArray0);
      
      int[][] intArray1 = new int[7][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass6 = charClass5.appendTableWithSign(intArray1, 1249);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {26, 1249, 1, 2458, (-65), 1114111, 2459, (-66)}, intArray0);
      
      CharClass charClass7 = charClass3.negateClass();
      assertNotSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {0, 25, 1, 2458, (-65), 1114111, 2459, (-66)}, intArray0);
      
      CharClass charClass8 = charClass7.appendFoldedRange((-2148), (-879));
      assertNotSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass8);
      assertSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass0);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass0);
      assertEquals(8, intArray0.length);
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {0, 25, (-2148), (-879), (-65), 1114111, 2459, (-66)}, intArray0);
      
      CharClass charClass9 = charClass0.appendNegatedClass(intArray0);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass8);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertNotSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass4);
      assertSame(charClass9, charClass0);
      assertNotSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass6);
      assertNotSame(charClass9, charClass2);
      assertEquals(8, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass2));
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {0, 25, (-2148), (-879), (-65), 1114111, 2459, (-66)}, intArray0);
      
      CharClass charClass10 = charClass9.appendFoldedRange((-65), (-66));
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass8);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass9);
      assertNotSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass4);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass10);
      assertNotSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass6);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass10, charClass6);
      assertNotSame(charClass10, charClass7);
      assertNotSame(charClass10, charClass5);
      assertSame(charClass10, charClass1);
      assertNotSame(charClass10, charClass3);
      assertNotSame(charClass10, charClass4);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass0);
      assertNotSame(charClass10, charClass8);
      assertNotSame(charClass10, charClass2);
      assertEquals(8, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass10.equals((Object)charClass6));
      assertFalse(charClass10.equals((Object)charClass7));
      assertFalse(charClass10.equals((Object)charClass5));
      assertFalse(charClass10.equals((Object)charClass3));
      assertFalse(charClass10.equals((Object)charClass4));
      assertFalse(charClass10.equals((Object)charClass8));
      assertFalse(charClass10.equals((Object)charClass2));
      assertNotNull(charClass10);
      assertArrayEquals(new int[] {0, 25, (-2148), (-879), (-65), 1114111, 2459, (-66)}, intArray0);
      
      int[] intArray2 = charClass10.toArray();
      assertNotSame(intArray0, intArray2);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass8);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass9);
      assertNotSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass4);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass10);
      assertNotSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass6);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass10, charClass6);
      assertNotSame(charClass10, charClass7);
      assertNotSame(charClass10, charClass5);
      assertSame(charClass10, charClass1);
      assertNotSame(charClass10, charClass3);
      assertNotSame(charClass10, charClass4);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass0);
      assertNotSame(charClass10, charClass8);
      assertNotSame(charClass10, charClass2);
      assertNotSame(intArray2, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(18, intArray2.length);
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass10.equals((Object)charClass6));
      assertFalse(charClass10.equals((Object)charClass7));
      assertFalse(charClass10.equals((Object)charClass5));
      assertFalse(charClass10.equals((Object)charClass3));
      assertFalse(charClass10.equals((Object)charClass4));
      assertFalse(charClass10.equals((Object)charClass8));
      assertFalse(charClass10.equals((Object)charClass2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 25, (-2148), (-879), (-65), 1114111, 2459, (-66)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 1260);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-498));
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass0.cleanClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass6 = charClass0.negateClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass7 = charClass6.appendFoldedRange((-498), (-1235));
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = charClass5.toArray();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-498), (-1235)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 66639;
      intArray0[1] = 633;
      intArray0[2] = 359;
      intArray0[3] = (-372);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {66639, 633, 359, (-372)}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(633, 65115);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {66639, 633, 359, (-372)}, intArray0);
      
      int[][] intArray1 = new int[7][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {66639, 633, 359, (-372)}, intArray0);
      
      CharClass charClass3 = charClass2.appendRange((-3405), 700);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {66639, 633, 359, (-372)}, intArray0);
      
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 920);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {66639, 633, 359, (-372)}, intArray0);
      
      CharClass charClass5 = charClass4.appendTableWithSign(intArray1, 0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {66639, 633, 359, (-372)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2214);
      intArray0[2] = (-1622);
      intArray0[3] = 3128;
      intArray0[4] = (-117);
      CharClass charClass1 = new CharClass(intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, (-2214), (-1622), 3128, (-117), 0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral((-1670), (-2111));
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertEquals(9, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, (-2214), (-1622), 3128, (-117), 0, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass2.appendRange(1449, 741);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(9, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, (-2214), (-1622), 3128, (-117), 0, 0, 0, 0}, intArray0);
      
      CharClass charClass4 = charClass2.appendRange((-2214), (-3393));
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass0);
      assertEquals(9, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, (-2214), (-1622), 3128, (-117), 0, 0, 0, 0}, intArray0);
      
      CharClass charClass5 = charClass2.negateClass();
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertEquals(9, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0, (-2214), (-1622), 3128, (-117), 0, 0, 0, 0}, intArray0);
      
      CharClass charClass6 = charClass0.appendFoldedRange(3086, (-5513));
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass4);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass5));
      assertNotNull(charClass6);
      
      int[][] intArray1 = new int[2][6];
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 8609;
      intArray2[1] = 0;
      intArray2[2] = 596;
      intArray2[3] = (-2214);
      intArray2[4] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      CharClass charClass7 = charClass0.appendTableWithSign(intArray1, (-5513));
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass7, charClass4);
      assertNotSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertEquals(2, intArray1.length);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass5));
      assertNotNull(charClass7);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-33), (-33));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-33);
      intArray0[1] = (-33);
      intArray0[2] = (-33);
      intArray0[3] = (-33);
      intArray0[4] = (-33);
      intArray0[5] = (-33);
      int int0 = 120661;
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 120661);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-33), (-33), (-33), (-33), (-33), (-33)}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral((-33), (-33));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-33), (-33), (-33), (-33), (-33), (-33)}, intArray0);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-33), (-33), (-33), (-33), (-33), (-33)}, intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 120771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 32;
      intArray0[2] = 0;
      intArray0[3] = 899;
      intArray0[4] = 1317;
      intArray0[5] = 0;
      intArray0[6] = 3025;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1317);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][8];
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.appendRange((-1628), (-1628));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendLiteral(3774, 3774);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass6);
      
      int[] intArray1 = new int[4];
      intArray1[0] = 3774;
      intArray1[1] = 328;
      CharClass charClass7 = charClass1.appendClass(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {3774, 328, 0, 0}, intArray1);
      
      intArray1[2] = 3774;
      intArray1[3] = 3774;
      CharClass charClass8 = charClass6.appendNegatedClass(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass8);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {3774, 328, 3774, 3774}, intArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[24];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = 120771;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(24, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(24, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(24, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(24, intArray0.length);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[7][8];
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 120771;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 120771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArrayArray0 = null;
      int int0 = 119947;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 119947);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.appendLiteral(42, 1357);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 2459);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      
      CharClass charClass4 = charClass2.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 66640;
      int int0 = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3337);
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 899;
      intArray0[4] = 1317;
      intArray0[5] = 0;
      intArray0[6] = (-3337);
      CharClass charClass2 = charClass1.appendRange(32, (-3337));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendLiteral((-3337), 32);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-642);
      // Undeclared exception!
      try { 
        charClass3.appendFoldedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 32}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 32, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass2 = charClass0.appendRange(0, 66639);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 66639, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass3 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 66639, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass4 = charClass3.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 66639, 120771, 0, 120771, 0}, intArray0);
      
      int[][] intArray1 = new int[7][8];
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray1, 120771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-1327), (-1327));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2459;
      intArray0[1] = (-66);
      intArray0[2] = 0;
      intArray0[3] = 25;
      intArray0[4] = 0;
      intArray0[5] = (-2148);
      intArray0[6] = 1250;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2459, (-66), 0, 25, 0, (-2148), 1250, 0}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 25, 1250, 0, 2459, (-66), 2459, (-66)}, intArray0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-66);
      intArray1[1] = 0;
      intArray1[2] = 1250;
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 8140;
      intArray0[1] = 2096;
      intArray0[2] = (-2411);
      intArray0[3] = (-2021);
      intArray0[4] = (-3232);
      intArray0[5] = 66640;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {8140, 2096, (-2411), (-2021), (-3232), 66640}, intArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1475;
      intArray0[1] = 1775;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = 32;
      intArray0[5] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 32}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 32, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 32, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 32, 120771, 0, 120771, 0}, intArray0);
      
      int int1 = 363;
      int[][] intArray1 = new int[7][8];
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 120771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1431;
      intArray0[1] = 1024;
      intArray0[2] = 1643;
      intArray0[3] = 2004;
      intArray0[4] = 43520;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass1);
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 64;
      intArray0[1] = 173;
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {64, 173}, intArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 3475;
      intArray0[1] = (-2);
      intArray0[2] = (-52);
      intArray0[3] = 786431;
      intArray0[4] = 1114111;
      intArray0[5] = 93;
      intArray0[6] = 1092;
      intArray0[7] = 237;
      intArray0[8] = 28;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-2478);
      intArray0[3] = (-1977);
      intArray0[4] = 8609;
      intArray0[5] = 0;
      int int0 = 0;
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 2, (-2478), (-1977), 8609, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(2, (-5513));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 2, (-2478), (-1977), 8609, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 1260);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass2.cleanClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass3.appendClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[0][4];
      CharClass charClass6 = charClass4.appendTableWithSign(intArray1, 1260);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][8];
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][8];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 595;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1593;
      intArray0[6] = 1674;
      String string0 = CharClass.charClassToString(intArray0, (-1417));
      assertEquals("[]", string0);
      assertEquals(7, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {595, 0, 0, 0, 0, 1593, 1674}, intArray0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendRange(0, 0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendRange(0, 0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 595;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1593;
      intArray0[6] = 1674;
      String string0 = CharClass.charClassToString(intArray0, (-1417));
      assertEquals("[]", string0);
      assertEquals(7, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {595, 0, 0, 0, 0, 1593, 1674}, intArray0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-1874);
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, (-1874));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      CharClass charClass1 = charClass0.appendFoldedRange(201, 201);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int int0 = (-1434);
      intArray0[0] = (-1434);
      intArray0[1] = (-605);
      intArray0[2] = 64;
      intArray0[3] = 0;
      int[][] intArray1 = new int[4][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass2 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = null;
      try {
        charClass3 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[4];
      intArray1[0] = (-3510);
      intArray1[1] = 391;
      intArray1[2] = 1174;
      intArray1[3] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 391;
      intArray2[1] = 1;
      intArray2[2] = 391;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-3510);
      intArray3[1] = 391;
      intArray3[2] = 391;
      intArray3[3] = 1;
      intArray3[4] = (-3510);
      intArray3[5] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 1174;
      intArray4[1] = 1174;
      intArray4[2] = 1;
      intArray4[3] = 1174;
      intArray4[4] = 1174;
      intArray4[5] = 1;
      intArray4[6] = 1174;
      intArray0[3] = intArray4;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 1260);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = new CharClass();
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 120771;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[6][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 120771;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 1;
      CharClass charClass1 = charClass0.negateClass();
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {1, 120770, 1, 1114111, 0, 0}, intArray0);
      
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = 120771;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 595;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1593;
      intArray0[6] = 1674;
      String string0 = CharClass.charClassToString(intArray0, (-1417));
      assertEquals("[]", string0);
      assertEquals(7, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {595, 0, 0, 0, 0, 1593, 1674}, intArray0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendRange(0, 0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass4);
      
      String string1 = CharClass.charClassToString(intArray0, 0);
      assertEquals("[]", string1);
      assertEquals(7, intArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new int[] {595, 0, 0, 0, 0, 1593, 1674}, intArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1475;
      intArray0[1] = 1775;
      int[][] intArray1 = new int[3][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 1475;
      intArray2[3] = 1475;
      intArray2[4] = 0;
      intArray1[2] = intArray2;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 65}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      int[][] intArray1 = new int[7][8];
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass4 = charClass2.negateClass();
      assertNotSame(intArray0, intArray2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertEquals(6, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      intArray1[3] = intArray0;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = (-1977);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 2, 0, (-1977), 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = (-33);
      CharClass charClass1 = charClass0.appendFoldedRange((-33), (-33));
      int[] intArray0 = new int[6];
      intArray0[0] = (-33);
      intArray0[2] = (-33);
      intArray0[4] = (-33);
      intArray0[5] = (-33);
      int int1 = 120661;
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 120661);
      CharClass charClass3 = charClass2.appendLiteral(0, 0);
      charClass3.appendClass(intArray0);
      int[][] intArray1 = new int[7][7];
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray1, (-200853));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange((-2183), 66639);
      CharClass charClass2 = charClass1.cleanClass();
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[9];
      intArray1[0] = 66639;
      intArray1[1] = 66639;
      intArray1[2] = 1617;
      intArray1[3] = 66639;
      intArray1[4] = 66639;
      intArray1[5] = 4505;
      intArray1[6] = (-2183);
      intArray1[7] = 0;
      intArray1[8] = (-2183);
      intArray0[0] = intArray1;
      CharClass charClass3 = charClass2.appendTable(intArray0);
      // Undeclared exception!
      try { 
        charClass3.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 120771;
      intArray0[0] = 0;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      charClass0.cleanClass();
      CharClass charClass2 = new CharClass();
      charClass2.negateClass();
      CharClass charClass3 = charClass2.appendLiteral(120771, 0);
      assertNotSame(charClass3, charClass1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(2236, 2236);
      charClass0.negateClass();
      int[] intArray0 = new int[5];
      intArray0[0] = 2236;
      intArray0[1] = 2236;
      intArray0[2] = 2236;
      intArray0[3] = 2236;
      intArray0[4] = 2236;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 1632);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 68415;
      intArray0[2] = (-2540354);
      intArray0[3] = (-3513);
      intArray0[4] = 119143;
      intArray0[5] = 361;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral((-492), (-3513));
      int[][] intArray1 = new int[1][1];
      intArray1[0] = intArray0;
      CharClass charClass2 = charClass0.appendFoldedRange(1446, 405);
      int[] intArray2 = new int[0];
      charClass2.appendClass(intArray2);
      CharClass charClass3 = charClass1.appendTable(intArray1);
      CharClass charClass4 = charClass1.appendFoldedClass(intArray0);
      charClass4.appendClass(intArray0);
      CharClass charClass5 = charClass3.negateClass();
      charClass5.appendNegatedTable(intArray1);
      CharClass charClass6 = charClass5.cleanClass();
      charClass6.appendRange(410, 119143);
      CharClass charClass7 = charClass6.appendFoldedClass(intArray0);
      charClass7.appendClass(intArray2);
      int[][] intArray3 = new int[2][0];
      intArray3[0] = intArray0;
      intArray3[1] = intArray0;
      charClass2.appendTable(intArray3);
      charClass3.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {1, 68415, (-2540354), (-3513), 119143, 361}, intArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 3735);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.cleanClass();
      int[] intArray0 = new int[7];
      intArray0[0] = (-3337);
      intArray0[1] = 32;
      intArray0[2] = 0;
      intArray0[3] = 899;
      intArray0[4] = 1317;
      intArray0[5] = 0;
      intArray0[6] = 3025;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1317);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2214);
      int int0 = (-1622);
      intArray0[2] = (-1622);
      intArray0[3] = 3128;
      intArray0[4] = (-117);
      intArray0[5] = (-1962);
      int int1 = 0;
      intArray0[6] = 0;
      int int2 = 1712;
      intArray0[7] = 1712;
      intArray0[8] = 3714;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[7];
      charClass0.appendFoldedRange(201, 201);
      intArray0[0] = (-1434);
      intArray0[1] = (-605);
      intArray0[2] = 64;
      intArray0[3] = 0;
      intArray0[4] = 65792;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][2];
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[5];
      int int0 = 1708;
      intArray0[0] = 1708;
      int int1 = (-3290);
      intArray0[1] = (-3290);
      int int2 = 66639;
      intArray0[2] = 66639;
      int int3 = 66639;
      intArray0[3] = 66639;
      int int4 = 66640;
      intArray0[4] = 66640;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(0, 0);
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass2.negateClass();
      charClass3.appendRange(32, 0);
      int[][] intArray1 = new int[7][8];
      int[] intArray2 = new int[1];
      intArray2[0] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[0];
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 120771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
