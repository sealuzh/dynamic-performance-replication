/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 21:26:44 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace(")740v %ffF5Ezc", ")740v %ffF5Ezc", ")740v %ffF5Ezc");
      String string0 = Utility.signatureToString("Z(>/xeInoV/", true);
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2493, (int) (byte) (-85), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = " p5JG+TI\\_";
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (-3200));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.replace("W4", "W4", "ivokeinterface");
      assertEquals("ivokeinterface", string0);
      
      Utility.isSet(3027, 3027);
      byte[] byteArray0 = Utility.decode("ivokeinterface", false);
      String string1 = Utility.getSignature("invokeinterface");
      assertEquals("Linvokeinterface;", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.isSet(3027, 3027);
      assertFalse(boolean0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lmul", string2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.convertString("+,}");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "Invalid signature: ";
      String string1 = ":\"8]}aB";
      try { 
        Utility.typeOfSignature("XlK?2.L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XlK?2.L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, 3929);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" sipped");
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_acmpne\t\t#-14682", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = ", low = ";
      byte[] byteArray0 = Utility.decode(", low = ", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 159, 179);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte)59;
      byteArray0[0] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "E0z5Cjgl\\Jn[6k";
      try { 
        Utility.typeOfSignature("E0z5CjglJn[6k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E0z5CjglJn[6k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.compactClassName("(S=uLOa0iZa", "ltv>e}lyxr4uN", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-77), (int) (byte) (-77));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[XgS~xiTZeQx5p");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      Utility.decode("z", false);
      String string0 = "U70m3T";
      Utility.getSignature("U70m3T");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString("U70m3T", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U70m3T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = (-169);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid type: void[]");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.methodSignatureReturnType("CM-Oz1HTR8");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.getSignature("char");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("char", "CM-Oz1HTR8", "C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.InnerClasses";
      Utility.convertString("org.apache.bcel.classfile.InnerClasses");
      Utility.clearBit(166, (-3002));
      Utility.accessToString(166);
      String string1 = "org.apache.bcel.classfile.Utility";
      Utility.compactClassName("org.apache.bcel.classfile.InnerClasses", "org.apache.bcel.classfile.Utility", true);
      char char0 = '8';
      Utility.isJavaIdentifierPart('8');
      MockFile mockFile0 = new MockFile("java.lang.String");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "java.lang.String");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // java.lang.String
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.clearBit(64, 1996);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.convertString("GEa|1?");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(169, (byte) (-99));
      constantArray0[0] = (Constant) constantMethodHandle0;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.compactClassName("W4");
      Utility.isSet(569, 569);
      String string0 = Utility.getSignature("\t\t<");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte) (-109);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.readBoolean();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F>x*xySH ?' 9");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Utility.getSignature("\t6");
      assertEquals("L6;", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("~o=%RY@Y7:K?kJ", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$7eo$3d$rRY$40Y7$3aK$3fk$7fJ", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("A3H@~7fI_gwH");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("A3H@~7fI_gwH");
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dastore", string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Object object0 = new Object();
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto_w");
      Utility.compactClassName("$t6(bHY~zSCOTu");
      String string0 = "";
      try { 
        Utility.methodSignatureToString("goto_w", "apxKpt_L", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readBoolean();
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.convertString("TT f$W02c_a");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("NM6ym");
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[6] = (Constant) constantFloat0;
      try { 
        Utility.typeOfSignature("NM6ym");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NM6ym
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      Utility.compactClassName("org.apache.bcel.classfile.ConstantUtf8$1", "o#", false);
      try { 
        Utility.typeOfSignature("=`v4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =`v4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.compactClassName(" methods:\n");
      try { 
        Utility.methodSignatureReturnType("G8s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G8s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("+}v_otsHj*i", false);
      String string0 = Utility.getSignature("+}v_otsHj*i");
      assertEquals("L+}v_otsHj*i;", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_1", string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureToString("Unreachable default case reached!", "Unreachable default case reached!", "rwZ/dO!eq,*", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iinc\t\t%59\t29", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.getSignature("iinc\t\t%59\t29");
      assertEquals("Liinc;", string1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)43;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("E$t$x", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("45 27 2b", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(1996, 1996);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byte byte0 = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)41;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)35;
      Utility.equals(byteArray0, byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("P#z<&");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.compactClassName("\t", "p2Oq`c", false);
      Utility.printArray((Object[]) constantArray0);
      try { 
        Utility.methodSignatureArgumentTypes("{CONSTANT_Utf8[1](\"P#z<&\"), CONSTANT_Utf8[1](\"P#z<&\")}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {CONSTANT_Utf8[1](\"P#z<&\"), CONSTANT_Utf8[1](\"P#z<&\")}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
      
      String string0 = Utility.signatureToString("FjBgWw)b9IMAEu(Q");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      Utility.isJavaIdentifierPart('~');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)125;
      String string0 = Utility.encode(byteArray1, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      Constant constant0 = constantUtf8_0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("\t\t%");
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = constant0;
      constantArray0[1] = constant0;
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.PMGClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.PMGClass'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.replace("B'o4(Pc", "B'o4(Pc", "B'o4(Pc");
      assertEquals("B'o4(Pc", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.methodTypeToSignature("dup_x2", (String[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)54;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.compactClassName("W4");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet(569, 569);
      byte[] byteArray0 = Utility.decode("W4", false);
      Utility.getSignature("W4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("<5/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<5/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byte[] byteArray1 = Utility.decode("[EG_&<", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup_x2", string0);
      
      int int0 = Utility.setBit((byte) (-124), 36);
      assertEquals((-108), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.convertString("TT f$W02c_a");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-19);
      Utility.fillup("'Rk0l+Uqt", (byte)0, false, '0');
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.compactClassName("<illegal type>", false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) fileSystemHandling1;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-1458), 3219, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-96);
      byteArray1[1] = (byte) (-57);
      Utility.encode(byteArray0, true);
      Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "pVR");
      String string0 = Utility.format((byte)0, 2010, true, 't');
      Utility.equals(byteArray1, byteArray0);
      Utility.searchOpcode(string0);
      String string1 = Utility.compactClassName("Exceptions", ", ", false);
      assertEquals("Exceptions", string1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "\"2l|dj\\:j6v?a*OI";
      try { 
        Utility.typeOfSignature("\"2l|dj:j6v?a*OI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"2l|dj:j6v?a*OI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("areturn");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("return");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantUtf8_0.clone();
      constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = Utility.classOrInterface(163);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = Utility.getSignature("char");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6$e99.gH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6$e99.gH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.getSignature(" methods:\n");
      try { 
        Utility.typeOfSignature("9_E(y]E|o6[aHSYx9'G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9_E(y]E|o6[aHSYx9'G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Utility.signatureToString("SENSITVE");
      assertEquals("short", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2i", string1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("UF?8[@d(g3");
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.compactClassName("", "", true);
      try { 
        Utility.methodSignatureArgumentTypes("dup2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("i2l", "i2l", " p5JG+TI_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.convertString("+,}");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("XlK?2.L", "XlK?2.L", true);
      Utility.compactClassName("XlK?2.L", "", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      int int0 = Utility.clearBit(112, 1996);
      assertEquals(112, int0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance(" p5JG+TI_");
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantUtf8_0.clone();
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dstore_0", string0);
      
      String string1 = Utility.classOrInterface(112);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.convertString("+,}");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.getSignature("fmul");
      try { 
        Utility.typeOfSignature("+QNg/YqW3.@x8ANJ0U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QNg/YqW3.@x8ANJ0U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)0;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)114;
      byteArray1[6] = (byte)18;
      byteArray1[7] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$A$A$A$A$Sr$A", "$A$A$A$A$Sr$A", "$A$A$A$A$Sr$A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$A$A$A$Sr$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("~o=%RY@Y7:K?kJ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n1]Fzu$&|}})30*[";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[4] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[5] = (Object) mockFileWriter0;
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[7] = (Object) "n1]Fzu$&|}})30*[";
      Utility.accessToString((int) (byte)33);
      Utility.classOrInterface(92);
      try { 
        Utility.typeOfSignature("QhS:`\".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QhS:`\".
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-109), 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.compactClassName("W4");
      Utility.isSet(569, 569);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "z";
      stringArray0[1] = "z";
      stringArray0[2] = "z";
      stringArray0[3] = "z";
      String string0 = Utility.methodTypeToSignature("z", stringArray0);
      assertEquals("(Lz;Lz;Lz;Lz;)Lz;", string0);
      
      String string1 = Utility.methodSignatureToString("(Lz;Lz;Lz;Lz;)Lz;", "daload", "3MWs.!'GQ");
      assertEquals("3MWs.!'GQ z daload(z arg1, z arg2, z arg3, z arg4)", string1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("2%|\">d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2%|\">d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Utility.accessToString((-2676));
      assertEquals("protected static transient native abstract synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("/Wr2|4#w");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("freturn");
      // Undeclared exception!
      try { 
        Utility.signatureToString("G\"^n5{walD9iIxjn,?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G\"^n5{walD9iIxjn,?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Utility.compactClassName("H#,6", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-38);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.convertString("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string0 = Utility.classOrInterface((byte)121);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isSet((byte)63, (-1397));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char char0 = 'x';
      Utility.isJavaIdentifierPart('x');
      Utility.isJavaIdentifierPart('~');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)125;
      Utility.isJavaIdentifierPart('g');
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.fillup("invokeStatic", (-3144), true, 'o');
      assertEquals("invokeStatic", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Utility.getSignature("Z{bkec{kPMFb,S");
      assertEquals("LZ{bkec{kPMFb,S;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)35;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-17);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.signatureToString("LZ{bkec{kPMFb,S;");
      assertEquals("Z{bkec{kPMFb,S", string1);
      
      int int0 = Utility.setBit(243, (byte)35);
      assertEquals(251, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.setBit(39, 2);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{";
      stringArray0[1] = "~aS";
      stringArray0[2] = "{";
      Utility.methodTypeToSignature("{", stringArray0);
      Utility.setBit(49, (-89));
      Utility.searchOpcode("~aS");
      Utility.convertString("Warning: Padding byte != 0 in ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = "A1)5 ]vxT\";]\\ Mja";
      try { 
        Utility.methodSignatureReturnType("A1)5 ]vxT\";] Mja");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5 ]vxT\";] Mja'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.InnerClasses";
      Utility.convertString("org.apache.bcel.classfile.InnerClasses");
      Utility.clearBit((-3002), (-3002));
      Utility.accessToString((-3066));
      String string1 = "org.apache.bcel.classfile.Utility";
      Utility.compactClassName("org.apache.bcel.classfile.InnerClasses", "org.apache.bcel.classfile.Utility", false);
      char char0 = '8';
      Utility.isJavaIdentifierPart('8');
      MockFile mockFile0 = new MockFile("java.lang.String");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "java.lang.String");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // java.lang.String
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 18. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)9;
      byteArray0[1] = (byte)0;
      Utility.isJavaIdentifierPart('^');
      Utility.getSignature(" arg");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 167, 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        Utility.typeOfSignature("=ve7]v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =ve7]v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "cGkA[FB1lXg+A|OPg\\";
      String[] stringArray0 = new String[12];
      stringArray0[0] = "cGkA[FB1lXg+A|OPg";
      stringArray0[1] = "cGkA[FB1lXg+A|OPg";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)7;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("NUY; S#iJi+y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NUY; S#iJi+y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      Utility.clearBit(112, 1996);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " p5JG+TI_";
      objectArray0[1] = (Object) " p5JG+TI_";
      objectArray0[2] = (Object) " p5JG+TI_";
      objectArray0[3] = (Object) " p5JG+TI_";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" p5JG+TI_");
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.accessToString(467);
      try { 
        Utility.methodSignatureReturnType("? extends ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `? extends '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = Utility.clearBit((-213), (-213));
      assertEquals((-2261), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[4] = null;
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = null;
      stringArray0[6] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Utility.compactClassName("float", "float", false);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.classOrInterface(2);
      Utility.format((-5281), (-5281), false, ':');
      Utility.decode("h?T@TJv]&k#Q'", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 215, 2123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "cG-kA[FBqlXg+A|OPg";
      Utility.isSet(2353, 2353);
      byte[] byteArray0 = Utility.decode("cG-kA[FBqlXg+A|OPg", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2353, 62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      Utility.signatureToString("SENSITIVE");
      try { 
        Utility.typeOfSignature("astore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = Utility.replace("invokeinterface", "+A&@c3Nl}Y,6+-", "java.lan.W4");
      assertEquals("invokeinterface", string0);
      
      boolean boolean0 = Utility.isSet(3027, 187);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("java.lan.W4", false);
      String string1 = Utility.getSignature("?");
      assertEquals("L?;", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ladd", string2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W4");
      Utility.compactClassName("W4");
      Utility.isSet(569, 569);
      byte[] byteArray0 = Utility.decode("(string_index = ", false);
      Utility.getSignature("W4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic('\u2873', '\u2873');
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.accessToString(569);
      try { 
        Utility.methodSignatureReturnType("W4", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 10;
      Utility.classOrInterface(10);
      boolean boolean0 = false;
      Utility.decode("h?T@TJv]&k#Q'", false);
      Utility.compactClassName("h?T@TJv]&k#Q'");
      LocalVariableTable localVariableTable0 = null;
      String string0 = "VT>9X3hYaApt(\\uZ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, string0, (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("iaload", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iaload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "}:If:JA@O", "}:If:JA@O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("areturn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[1] = (Object) "n1]Fzu$&|}})30*[";
      mockFileWriter0.getEncoding();
      mockPrintWriter0.print(true);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[4] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[5] = (Object) mockFileWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      mockPrintWriter0.flush();
      objectArray0[7] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("n1]Fzu$&|}})30*[", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      String string0 = Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)33);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Object object0 = new Object();
      Utility.encode(byteArray0, true);
      Utility.isSet(96, 670);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("6 e~Mp.gH", false);
      Utility.getSignature("6 e~Mp.gH");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 199, 199, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool2, false);
      try { 
        Utility.typeOfMethodSignature("lload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "W4";
      // Undeclared exception!
      try { 
        Utility.signatureToString("W4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureReturnType("java.lang.Object@17fabcf0, java.lang.Object@6ba4c3ea", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Object@17fabcf0, java.lang.Object@6ba4c3ea'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1078));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Invalid signature: ";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{Invalid signature: }", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("~o=%RY@Y7:K?kJ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n1]Fzu$&|}})30*[";
      mockPrintWriter0.print(true);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[4] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[5] = (Object) mockFileWriter0;
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[7] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("n1]Fzu$&|}})30*[", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[14];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.convertString("]p\"F");
      assertEquals("]p\\\"F", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray1, constantPool1, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = Utility.replace("boolean", "6$e99.gH", "boolean");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("qQnr,/q?4YJL", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `qQnr,/q?4YJL'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("areturn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[1] = (Object) "n1]Fzu$&|}})30*[";
      mockFileWriter0.getEncoding();
      mockPrintWriter0.print(true);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[4] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[5] = (Object) mockFileWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("n1]Fzu$&|}})30*[", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)33;
      byteArray0[0] = (byte)33;
      // Undeclared exception!
      try { 
        Utility.getSignature("n1]Fzu$&|}})30*[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      Utility.convertString(",HCC=a\"");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("newarray");
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Utility.classOrInterface((byte)0);
      try { 
        Utility.methodSignatureReturnType("m,I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `m,I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.decode("6$.e99.gH", false);
      try { 
        Utility.typeOfSignature("k&+%2~r`Dw\"|r9fn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k&+%2~r`Dw\"|r9fn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      try { 
        Utility.typeOfSignature("?'Vh4A*^sB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?'Vh4A*^sB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[0] = (byte) (-66);
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "";
      Utility.getSignature("");
      Utility.accessToString(0, true);
      Utility.accessToString(0, true);
      String string1 = "8[(>ORh4i~";
      Utility.compactClassName("8[(>ORh4i~", ")3X u", true);
      Utility.getSignature(")3X u");
      try { 
        Utility.typeOfMethodSignature("Rd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.signatureToString("SENSITIVE");
      try { 
        Utility.typeOfSignature("O#D{}u)R$Fw1k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O#D{}u)R$Fw1k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)76;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)94;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (-443));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-109);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.getSignature(" methods:\n");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-94));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("pop2");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-72);
      byteArray0[4] = (byte)81;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("P#z<&");
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "W4";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W4");
      Utility.compactClassName("W4");
      try { 
        Utility.typeOfSignature("(string_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (string_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.clearBit(64, 1996);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.clearBit(64, 1996);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ifnonnull");
      Utility.typeOfSignature("LTT;V");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.accessToString(324, true);
      try { 
        Utility.typeOfMethodSignature("protected volatile native");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected volatile native
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lreturn";
      stringArray0[1] = "lreturn";
      stringArray0[2] = "lreturn";
      String string0 = Utility.methodTypeToSignature("lreturn", stringArray0);
      Utility.replace("lreturn", "(Llreturn;Llreturn;Llreturn;)Llreturn;", "lreturn");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = "impdep1";
      String string1 = "']*hqqE";
      try { 
        Utility.typeOfSignature("']*hqqE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ']*hqqE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (int) (byte)53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)37, (int) (byte)37, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S-Ol:I");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("YW4");
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      try { 
        Utility.typeOfSignature(":*'p,P!|I2[doo3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :*'p,P!|I2[doo3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)48;
      byteArray0[1] = (byte)48;
      Utility.getSignature("return");
      String string0 = "A?_~=dI$w(mV^~+";
      try { 
        Utility.typeOfSignature("A?_~=dI$w(mV^~+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A?_~=dI$w(mV^~+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "\n     ";
      Utility.convertString("\n     ");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = "htKze50G(GU'6\\7g/";
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(364, 364, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantString constantString0 = new ConstantString((byte)65);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantPool constantPool3 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool3, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[Xg~xiTZeQx5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xg~xiTZeQx5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('V');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-31);
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-86);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-19), (-572), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    lneg
         // 2:    <illegal opcode>
         // 3:    fdiv
         // 4:    <illegal opcode>
         // 5:    iconst_5
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)92;
      byteArray0[1] = (byte)21;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("iload\t\t%92", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "float";
          EvoSuiteFile evoSuiteFile0 = null;
          String string1 = "(tu5AG9kh~.Mi~Bb";
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(tu5AG9kh~.Mi~Bb");
          Utility.compactClassName("float");
          Utility.isSet(569, 569);
          byte[] byteArray0 = Utility.decode("float", false);
          Utility.getSignature("float");
          ByteSequence byteSequence0 = new ByteSequence(byteArray0);
          Utility.codeToString(byteSequence0, (ConstantPool) null, false);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor118.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = "!}TU>*vw";
      try { 
        Utility.typeOfSignature("!}TU>*vw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }TU>*vw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.signatureToString("SENSITIVE");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "short";
      stringArray0[2] = "SENSITIVE";
      stringArray0[3] = "SENSITIVE";
      Utility.isSet(1267, 512);
      byte[] byteArray0 = Utility.decode("SENSITIVE", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("ireturn", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      Utility.signatureToString("SENSITIVE");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "short";
      stringArray0[1] = "r:YvxdA.SSKpQo|~AD(";
      stringArray0[2] = "SENSITIVE";
      stringArray0[3] = "SENSITIVE";
      boolean boolean1 = Utility.isSet(1267, 512);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = Utility.decode("SENSITIVE", false);
      String string0 = Utility.getSignature("r:YvxdA.SSKpQo|~AD(");
      assertEquals("Lr:YvxdA/SSKpQo|~AD(;", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_2", string1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      constantPool0.setConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1124), 36);
      assertEquals("0:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)65;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Object object0 = new Object();
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("t$qA$A$A$A", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("74 24 41 00 00 00", string2);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byte byte1 = (byte)17;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1374), 84, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    nop\n1:    nop\n2:    nop\n", "0:    nop\n1:    nop\n2:    nop\n", "isub", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    nop
         // 2:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getInstance("P#z<&");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.getSignature("<illegal opcode>");
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<illegal;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.decode("KeQR V1{7b]PxCP2nL(", false);
      try { 
        Utility.typeOfSignature("KeQR V1{7b]PxCP2nL(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KeQR V1{7b]PxCP2nL(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\tdefault = ";
      stringArray0[1] = "\tdefault = ";
      stringArray0[2] = "\tdefault = ";
      stringArray0[3] = "\tdefault = ";
      stringArray0[4] = "\tdefault = ";
      stringArray0[5] = "\tdefault = ";
      stringArray0[6] = "\tdefault = ";
      stringArray0[7] = ")\t";
      Utility.methodTypeToSignature("\tdefault = ", stringArray0);
      try { 
        Utility.typeOfSignature("1voh-8VD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1voh-8VD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("P7H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P7H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object object0 = new Object();
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "6$e99.gH";
      byte[] byteArray0 = Utility.decode("6$e99.gH", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 44, 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.signatureToString("P#z<&", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P#z<&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.getSignature("impdep1");
      assertEquals("Limpdep1;", string0);
      
      Utility.signatureToString("Limpdep1;", false);
      String string1 = Utility.compactClassName("lreturn", true);
      assertEquals("lreturn", string1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "W4";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = "*,zs*(}{v~m";
      try { 
        Utility.typeOfSignature("W4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = Utility.convertString(")\t");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(")\t");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("areturn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[1] = (Object) "n1]Fzu$&|}})30*[";
      mockFileWriter0.getEncoding();
      mockPrintWriter0.print(true);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[4] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[5] = (Object) mockFileWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      mockPrintWriter0.flush();
      objectArray0[7] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("n1]Fzu$&|}})30*[", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.methodTypeToSignature("double", (String[]) null);
      assertEquals("()D", string1);
      
      String string2 = Utility.getSignature("-GJpN9QqpU1$l$8b$I$A$A$A$A$A$A$A");
      assertEquals("L-GJpN9QqpU1$l$8b$I$A$A$A$A$A$A$A;", string2);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Byte code error: ");
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" methods:\n", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3200), (-3200));
      assertArrayEquals(new byte[] {(byte)32, (byte)109, (byte)101, (byte)116, (byte)104, (byte)111, (byte)100, (byte)115, (byte)58, (byte)10}, byteArray0);
      assertEquals("0:    lload_2\n1:    ldiv\n2:    lsub\n3:    ineg\n4:    imul\n5:    ddiv\n6:    isub\n7:    drem\n8:    astore\t\t%10\n", string0);
      
      String string1 = Utility.getSignature(" methods:\n");
      assertEquals("Lmethods:;", string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = "S";
      String string1 = "']*hqqE";
      boolean boolean0 = false;
      Utility.fillup("new", 39, false, 'A');
      try { 
        Utility.methodSignatureReturnType("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnew");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnew'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = Utility.replace("W4", "W4", "invokeinterface");
      assertEquals("invokeinterface", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-68));
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("newarray\t\t<<illegal type>>", string1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(R3N0bs", "ifnonnull", "(R3N0bs", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R3N0bs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      int int0 = 112;
      Utility.clearBit(112, 1996);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " p5JG+TI_";
      objectArray0[1] = (Object) " p5JG+TI_";
      objectArray0[2] = (Object) " p5JG+TI_";
      objectArray0[3] = (Object) " p5JG+TI_";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",!/Iwpv>");
      Object object0 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[4] = object0;
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName(" p5JG+TI_,  p5JG+TI_,  p5JG+TI_,  p5JG+TI_, java.lang.Object@7f48baca");
      Utility.printArray(objectArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getInstance("invokeinterface");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("bipush\t\t-115", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.typeOfSignature("VrWH96T{<IF?Q2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "ifnonnull";
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "ifnonnull", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.compactClassName("W4");
      Utility.isSet(569, 569);
      byte[] byteArray0 = Utility.decode("(string_index = ", false);
      Utility.getSignature("W4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(29810, constantInvokeDynamic0.getNameAndTypeIndex());
      
      constantInvokeDynamic0.setNameAndTypeIndex(569);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("LW4;");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("LW4;");
      byteSequence0.read();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte) (-57);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.format((byte)24, 62, false, 'Q');
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ24", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)90;
      byteArray0[2] = (byte)90;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 922, (int) (byte)90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "freturn");
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.lang.W4");
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.setBit((-724), (-724));
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.convertString("TT f$W02c_a");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[va89]jVc");
      Utility.encode(byteArray0, true);
      Utility.replace("TT f$W02c_a", "JDrX|lwJ)%e645cl", "$l$8b$I$A$A$A$A$A$A$A");
      Utility.format((byte)0, (byte)0, true, 'z');
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("multianewarray");
      Utility.compactClassName("", ", name_and_type_index = ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-56);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) constantArray0);
      Utility.convertString("N$db_$ed$a9$c8");
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("|@>HA|3:cx3M-");
      constantUtf8_0.toString();
      constantUtf8_0.copy();
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("'aksZ,MHu.F[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `'aksZ,MHu.F['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        Utility.decode("7_mr|~*", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)39;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)39, 42, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("TT f$W02c_a");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.compactClassName("TT f$W02c_a", "TT f$W02c_a", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload\t\t%14", string1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Yb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-69);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$W$99$93$bb", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      Utility.compactClassName("SENSITIVE", "org.apache.bcel.classfile.ConstantUtf8$1", false);
      Utility.typeOfSignature("SENSITIVE");
      Utility.getSignature(" methods:\n");
      try { 
        Utility.methodSignatureArgumentTypes(" methods:\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  methods:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("goto_w", "", "z2$3Y#b==dsJTd^Kk", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("{P1KL8o3YUN", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
      String string1 = Utility.format((byte)0, (byte)0, false, '2');
      assertEquals("0", string1);
      
      Utility.isSet(91, 57);
      boolean boolean0 = Utility.isSet((byte)0, (-888));
      Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(O@dc`F!uk|O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (O@dc`F!uk|O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.impdep2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" skipped");
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)71;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[7] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("egA$%p%!e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `egA$%p%!e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-74), (int) (byte) (-74), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      Utility.signatureToString("SENSITIVE");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object object0 = new Object();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 182, (int) (byte) (-33));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "[2T";
      Utility.compactClassName("[2T", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)3;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, 1, 2959);
      try { 
        Utility.methodSignatureReturnType("ldc_w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ldc_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)125;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.convertString("+}");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)125;
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.convertString("TT f$W02c_a");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-102);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte byte0 = (byte)85;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)85;
      byte byte1 = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("areturn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      mockPrintWriter0.print((String) null);
      Utility.isJavaIdentifierPart(':');
      // Undeclared exception!
      try { 
        Utility.signatureToString("L&ZB(6!'aB|J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L&ZB(6!'aB|J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(12, byteSequence0.getIndex());
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L8<CCf'qBIFr\";V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L8<CCf'qBIFr\";V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("fdY_tIX@Q", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "09^hg^p");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("lreturn");
      constantUtf8_0.copy();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      int int0 = 112;
      Utility.clearBit(112, 112);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(" p5JG+TI_");
      constantUtf8_0.copy();
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      try { 
        Utility.typeOfSignature("791b)Onbx%:K`L[->");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 791b)Onbx%:K`L[->
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char char0 = 'h';
      Utility.isJavaIdentifierPart('h');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.classOrInterface((-1239));
      int int0 = (-4681);
      Utility.format((-1239), (-4681), false, 'h');
      Utility.compactClassName("boolean", true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)125;
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-33), (int) (byte) (-33), false);
      // Undeclared exception!
      Utility.replace("putfield", "", "");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*3iD!rorzvyS$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3iD!rorzvyS$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",s?A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,s?A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)104;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("?;U{LB%izZC[^qvo=[$");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte) (-64);
      byteArray1[3] = (byte)90;
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("?;U{LB%izZC[^qvo=[$");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.signatureToString("FjBgWw)b9IMAEu(Q");
      assertEquals("float", string0);
      
      short short1 = Utility.searchOpcode("faload");
      assertEquals((short)48, short1);
      
      String string1 = Utility.getSignature("float");
      assertEquals("F", string1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-110);
      byteArray0[9] = (byte)0;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-110);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      Utility.toHexString(byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("00 00 f4 00 00 92 00 00", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `00 00 f4 00 00 92 00 00'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.convertString("Unreachable default case reached!");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" no ident, reaching EOF");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("RvP|*'zS+bcHM?K5k^|", false);
      String string0 = Utility.getSignature("a%vcIsOP!q>\u0005mjuQ");
      assertEquals("La%vcIsOP!q>\u0005mjuQ;", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dastore", string1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lreturn", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("%ibWD$q#d", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%ibWD$q#d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, 159);
      assertEquals("", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[6] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = ")740v %ffF5Ezc";
      String string1 = "putfield";
      Utility.replace("putfield", ")740v %ffF5Ezc", ")740v %ffF5Ezc");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.getSignature("[;=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [;=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-12);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("V$3b$y$$d$f4", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Utility.convertString("l2i");
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W4");
      Utility.compactClassName("W4");
      Utility.isSet(569, 569);
      byte[] byteArray0 = Utility.decode("(string_index = ", false);
      Utility.getSignature("W4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.clearBit(1415, (-32768));
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.convertString("java.lang.Object@109abc6e, java.lang.Object@253addff, java.lang.Object@4c9fb304, java.lang.Object@4823b968");
      try { 
        Utility.typeOfSignature("java.lang.Object@109abc6e, java.lang.Object@253addff, java.lang.Object@4c9fb304, java.lang.Object@4823b968");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@109abc6e, java.lang.Object@253addff, java.lang.Object@4c9fb304, java.lang.Object@4823b968
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.fillup("O#D{}u)R$Fw1k", (-974), false, 'd');
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "newarray");
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      Utility.getSignature("S^}");
      Utility.toHexString(byteArray0);
      Utility.methodSignatureReturnType("LS^};", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LS^};", "1|Y`&{pNv:Biw>cX", "S^}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LS^};
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, 32, 102, false);
      try { 
        Utility.typeOfSignature("~}+l1\"{[j[%:8vh6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~}+l1\"{[j[%:8vh6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("areturn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("P#z<&");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantUtf8_0.clone();
      constantPool1.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("6$e99.gH", false);
      Utility.getSignature("6$e99.gH");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("P#z<&");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[2] = (Constant) constantUtf8_0;
      Utility.getSignature("P#z<&");
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)0, true, '#');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";RKb@M&>$%E)m,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;RKb@M&>$%E)m,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      ConstantFloat constantFloat0 = new ConstantFloat(343.9061F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat1;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[0] = (byte)67;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      short short0 = Utility.searchOpcode("float");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)1;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)1, (int) (byte) (-115));
      assertEquals("2:    nop\n3:    nop\n4:    aconst_null\n5:    aconst_null\n6:    nop\n7:    aconst_null\n", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      String string0 = Utility.signatureToString("SENSITIVE");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("if_icmpge\t\t#30851", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Utility.classOrInterface((-1984));
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.readBoolean();
      Integer integer0 = new Integer(973);
      try { 
        Utility.methodSignatureReturnType("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W4");
      Utility.compactClassName("W4");
      String string0 = "(string_index = ";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getInstance("W4");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.getSignature("(string_index = ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokedynamic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokedynamic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      String string0 = "4<damHAQNiNE]]I7d5,";
      try { 
        Utility.typeOfSignature("4<damHAQNiNE]]I7d5,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4<damHAQNiNE]]I7d5,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      try { 
        Utility.typeOfSignature("1h_h4!T?gm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1h_h4!T?gm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      Utility.signatureToString("SENSITVE");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "short";
      stringArray0[2] = "SENSITVE";
      stringArray0[3] = "SENSITVE";
      stringArray0[4] = "SENSITVE";
      stringArray0[5] = "SENSITVE";
      stringArray0[6] = "SENSITVE";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("SENSITVE");
      Constant constant0 = constantUtf8_0.copy();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.convertString("SENSITVE");
      assertEquals("SENSITVE", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte byte0 = (byte)65;
      String string0 = "W4";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-85), true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore\t\t%1", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.compactClassName(";;Q}q[]Z}8Z{J6", "if_acmpeq", true);
      try { 
        Utility.typeOfSignature(";;Q}q[]Z}8Z{J6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;;Q}q[]Z}8Z{J6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      try { 
        Utility.typeOfSignature(">FIi[6`,YFy~C\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >FIi[6`,YFy~C\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Utility.clearBit(1415, (-32768));
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-84);
      byteArray0[3] = (byte)0;
      byteArray1[2] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      String string0 = "SENSITIVE";
      int int0 = 9;
      int int1 = (-1432);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-1432), (-1432));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Utility.convertString("N@$*#SUil1q'';");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0HIr'=-8v+-6k(Qs$k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0HIr'=-8v+-6k(Qs$k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature(">x*xyH ?' 9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >x*xyH ?' 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.W4", false);
      Utility.clearBit(64, 1996);
      ConstantFloat constantFloat0 = new ConstantFloat((byte)121);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.classOrInterface((byte)121);
      try { 
        Utility.methodSignatureReturnType("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Utility.decode("6$e99.gH", false);
      Utility.compactClassName("6$e99.gH", "int", false);
      String string0 = Utility.signatureToString("J%&`^Uz>\" G|D", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "int";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "int";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)62;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-19), (-572), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    lneg
         // 2:    <illegal opcode>
         // 3:    fdiv
         // 4:    <illegal opcode>
         // 5:    iconst_5
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.signatureToString("D", false);
      assertEquals("double", string0);
      
      String string1 = Utility.compactClassName(", npairs = ");
      assertEquals(", npairs = ", string1);
      
      Utility.typeOfSignature("D");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)7;
      Constant[] constantArray0 = new Constant[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        ConstantUtf8.getInstance((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("i2c", "P6}b:r2g[{_J8n+K)$1", "P6}b:r2g[{_J8n+K)$1", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('x');
      boolean boolean1 = Utility.isJavaIdentifierPart('~');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)125;
      boolean boolean2 = Utility.isSet(1534, 36);
      assertTrue(boolean2);
      
      boolean boolean3 = Utility.isSet((byte)13, 1534);
      assertTrue(boolean3 == boolean1);
      
      Utility.equals(byteArray0, byteArray0);
      boolean boolean4 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = "float";
      boolean boolean0 = false;
      Utility.decode("freturn", false);
      Utility.compactClassName("IIcrOC3}c;V9r>", "if_icmplt", false);
      try { 
        Utility.typeOfSignature("Yt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Utility.convertString(")\t");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(")\t");
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      byte byte0 = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-56), (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)48;
      Utility.decode(":", false);
      Utility.getSignature("^T4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("dup_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dup_x1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" skipped");
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-75);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("9Y< X,:1H;l_5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9Y< X,:1H;l_5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)9;
      byteArray0[4] = (byte)9;
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Invalid StackMap offset: ");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-2438), (int) (byte)9);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    lconst_0\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" methods:\n", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)32, (byte)109, (byte)101, (byte)116, (byte)104, (byte)111, (byte)100, (byte)115, (byte)58, (byte)10}, byteArray0);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Utility.clearBit(52, 75);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 199, 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-I>+4]i2oLF4c]8k%&");
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-I>+4]i2oLF4c]8k%&");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      byte[] byteArray0 = Utility.decode("H',Ri8)]u}ytF6\"IM", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(18, byteArray0.length);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 ab 00 ab", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "cGkA[FB1lXg+A|OPg";
      Utility.isSet(2353, 2353);
      Utility.decode("cGkA[FB1lXg+A|OPg", false);
      Utility.getSignature("getfield");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)114, (-1013), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      Utility.isJavaIdentifierPart('~');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "5d";
      stringArray0[1] = "5d";
      Utility.methodTypeToSignature("5d", stringArray0);
      Utility.compactClassName("5d", "?>...", true);
      Utility.getSignature("_`");
      Utility.searchOpcode("aVtVhm!");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.signatureToString("D", true);
      assertEquals("double", string0);
      
      String string1 = Utility.convertString("org.apache.bcel.classfile.ConstantString");
      assertEquals("org.apache.bcel.classfile.ConstantString", string1);
      
      byte[] byteArray0 = Utility.decode("D", false);
      assertArrayEquals(new byte[] {(byte)68}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Utility.signatureToString("Byte code error: ", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.methodSignatureReturnType("Byte code error: ");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = Utility.compactClassName("W4");
      Utility.isSet(569, 569);
      byte[] byteArray0 = Utility.decode("(string_index = ", false);
      Utility.getSignature("W4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantInvokeDynamic0.setNameAndTypeIndex(569);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("LW4;");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("LW4;");
      byteSequence0.read();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte)102;
      byteArray1[3] = (byte) (-57);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "z";
      stringArray0[1] = "z";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Utility.getSignature("");
      String string0 = "";
      URI uRI0 = MockURI.URI("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("areturn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n1]Fzu$&|}})30*[";
      mockFileWriter0.getEncoding();
      mockPrintWriter0.print(true);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[4] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[5] = (Object) mockFileWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("n1]Fzu$&|}})30*[", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$n", string0);
      
      boolean boolean0 = Utility.isSet((-2317), (byte)33);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Utility.decode("$n", false);
      assertArrayEquals(new byte[] {(byte)33}, byteArray1);
      
      String string1 = Utility.getSignature("athrow");
      assertEquals("Lathrow;", string1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      Utility.signatureToString("SENSITIVE");
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      byte byte1 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte1);
      
      String string0 = Utility.compactClassName("jt}", true);
      assertEquals("jt}", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byte byte0 = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-104);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2485, 2263);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">x*xyH ?' 9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >x*xyH ?' 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lreturn";
      stringArray0[1] = "lreturn";
      stringArray0[2] = "lreturn";
      String string0 = Utility.methodTypeToSignature("lreturn", stringArray0);
      assertEquals("(Llreturn;Llreturn;Llreturn;)Llreturn;", string0);
      
      String string1 = Utility.compactClassName("lreturn", "lreturn", false);
      assertEquals("lreturn", string1);
      
      Utility.getSignature("char");
      short short0 = Utility.searchOpcode("lreturn");
      assertEquals((short)173, short0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = ">";
      try { 
        Utility.decode(">", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[0] = (byte) (-86);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)17;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, (-2), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45746. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = Utility.convertString("+");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-31);
      Utility.fillup("Invalid byte tag in constant pool: ", (byte) (-31), true, '8');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("ifnull");
      // Undeclared exception!
      try { 
        Utility.signatureToString("O#D{}u)R$Fw1k", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O#D{}u)R$Fw1k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-1467), (int) (byte) (-77));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.compactClassName("[2T", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)7;
      String string0 = "wide";
      Utility.compactClassName("wide", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.methodSignatureReturnType("[2T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("if_icmple");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[3] = (Constant) constantMethodType0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-96));
      constantArray0[7] = (Constant) constantLong0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.getSignature(" p5JG+TI_");
      // Undeclared exception!
      try { 
        Utility.signatureToString("if_icmple", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmple'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Utility.typeOfSignature("[0):c9E!=WRlMQ");
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.decode("W4", false);
      String string0 = Utility.getSignature("W4");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      ConstantFloat constantFloat0 = new ConstantFloat(343.9061F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Utility.convertString(")\t");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(")\t");
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      try { 
        Utility.typeOfSignature(",|>:]?nfME");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,|>:]?nfME
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" skipped");
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "[XNg~xiTZeQx5";
      // Undeclared exception!
      try { 
        Utility.getSignature("[XNg~xiTZeQx5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [XNg~xiTZeQx5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("T* f$W02c_a", stringArray0);
      Utility.searchOpcode("");
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "T* f$W02c_a", "T* f$W02c_a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-36);
      byteArray2[3] = (byte) (-36);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)3;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, 17, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = Utility.compactClassName("o%BLTrEHZ^~]");
      assertEquals("o%BLTrEHZ^~]", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.W4", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = Utility.getSignature(" methods:\n");
      assertEquals("Lmethods:;", string0);
      
      byte byte0 = Utility.typeOfSignature("Lmethods:;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = "-70-b<CD FLHB";
      int int0 = 582;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 582, true, 's');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "cGkA[FB1lXg+A|OPg";
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("z", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[FB1lXg+A|OPg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("cG-kA[FBqlXg+A|OPg");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool2, false);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)0;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("$A$A$A$A$Sr$A");
      constantUtf8_0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature(".|p9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .|p9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Utility.clearBit((-1442516040), 204);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)110;
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("W4");
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1374), (-1374), true);
      try { 
        Utility.methodSignatureToString("2>7,]]8rP*o'qNPHo", "", "putstatic", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2>7,]]8rP*o'qNPHo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload\t\t%0", string0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)25;
      byteArray1[1] = (byte)25;
      byteArray1[2] = (byte)25;
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte)25;
      byteArray1[5] = (byte)25;
      byteArray1[6] = (byte)25;
      byteArray1[7] = (byte) (-29);
      byteArray1[8] = (byte)25;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W4");
      String string0 = Utility.compactClassName("W4");
      Utility.isSet(569, 569);
      byte[] byteArray0 = Utility.decode("(string_index = ", false);
      Utility.getSignature("W4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte)36;
      byteArray1[2] = (byte) (-91);
      byteArray1[3] = (byte) (-35);
      byteArray1[4] = (byte) (-65);
      byteArray1[5] = (byte) (-28);
      byteArray1[6] = (byte)73;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("W4");
      Constant[] constantArray0 = new Constant[6];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Utility.compactClassName("W4");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet(569, 569);
      byte[] byteArray0 = Utility.decode("W4", false);
      Utility.getSignature("W4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 822, 822, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "float";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 31, 31, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Utility.compactClassName("W4");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet(569, 569);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)46;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)32;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, 186, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.decode("ter`K4.Lu?vjRg'#WGN", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)48;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, 4385, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Utility.convertString("TT f$W02c_a");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-3);
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)8;
      byte byte1 = (byte) (-19);
      byteArray0[2] = (byte) (-19);
      byte byte2 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[1] = (byte)44;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("TT f$W02c_a");
      constantUtf8_0.copy();
      Utility.typeOfSignature("TT f$W02c_a");
      Utility.accessToString(97);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)14;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)100;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("s'^pv", "s'^pv", "h\"<-cpI)2@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s'^pv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = ";CN9Pgia3[Xh?81b ";
      // Undeclared exception!
      try { 
        Utility.getSignature(";CN9Pgia3[Xh?81b ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Xh?81b 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifne\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Utility.getSignature(" methods:\n");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte) (-74);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)31;
      byteArray0[2] = (byte) (-91);
      byteArray1[3] = (byte) (-91);
      byteArray1[4] = (byte)10;
      Utility.equals(byteArray0, byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Object object0 = new Object();
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hu\"xn=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hu\"xn='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Utility.convertString("/Ea|1?");
      try { 
        Utility.typeOfSignature("/Ea|1?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /Ea|1?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1, (int) (byte)22, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 1:    iflt\t\t#-25739
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-83);
      byteArray1[1] = (byte) (-57);
      byteArray1[2] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("P#z<&");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantUtf8_0.clone();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.classOrInterface((byte) (-83));
      Utility.classOrInterface(40);
      String[] stringArray0 = Constants.OPCODE_NAMES;
      assertEquals(256, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("z", stringArray0);
      assertEquals("()Lz;", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore\t\t%124", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("s{G6YW7@#=pw?", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-I>+4]i2oLF4c]8k%&");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-I>+4]i2oLF4c]8k%&");
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-I>+4]i2oLF4c]8k%&");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("sipush\t\t0", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = "<illegal opcode>";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("Dont call getValueByte() on a non BYTE ElementValue");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-99);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifgt\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = "1sw'd";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1sw'd");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      byteSequence0.reset();
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("$3&UH+L%", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)9;
      byteArray0[1] = (byte)0;
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature(" arg");
      assertEquals("Larg;", string0);
      
      String string1 = Utility.fillup("Larg;", 27, true, '^');
      assertEquals("Larg;^^^^^^^^^^^^^^^^^^^^^^", string1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W4");
      Utility.compactClassName("W4");
      Utility.compactClassName("VG|kmdlZBY^)", "int", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W4");
      try { 
        Utility.methodSignatureToString("UY),", "char", "putstatic", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UY),
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("W4");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("T:Ihc~");
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.Utility$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility$1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lreturn", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("idiv", string0);
      
      int int0 = Utility.setBit((-1438522480), (-1795));
      assertEquals((-1438522480), int0);
      
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1438522480), (-1438522480));
      assertEquals("0:    nop\n1:    aload_2\n2:    fstore_1\n3:    nop\n4:    fstore_3\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = Utility.signatureToString("L8yCCf2'qBIFr\";V", true);
      assertEquals("8yCCf2'qBIFr\"", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = Utility.convertString("RUnW");
      assertEquals("RUnW", string0);
      
      short short0 = Utility.searchOpcode("#XRMy+\"Gq");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.compactClassName("TT f$W02c_a", "#XRMy+\"Gq", true);
      assertEquals("TT f$W02c_a", string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "TT f$W02c_a";
      objectArray0[1] = (Object) "TT f$W02c_a";
      objectArray0[2] = (Object) "RUnW";
      objectArray0[3] = (Object) "RUnW";
      objectArray0[4] = (Object) "TT f$W02c_a";
      objectArray0[5] = (Object) "TT f$W02c_a";
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{TT f$W02c_a, TT f$W02c_a, RUnW, RUnW, TT f$W02c_a, TT f$W02c_a}", string2);
      
      int int0 = Utility.clearBit((short) (-1), (short) (-1));
      assertEquals(Integer.MAX_VALUE, int0);
      
      String string3 = Utility.classOrInterface((-12));
      assertEquals("interface", string3);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = Utility.format(911, 911, false, 'l');
      assertEquals("llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll911", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.convertString("+}");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.compactClassName("+}", "T'", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = "SENSITIVE";
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte) (-36);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.compactClassName("&$Y", "if_impgt", false);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName("fstore_3", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = "";
      byte byte0 = (byte)65;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 57, 275);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Utility.isSet(569, 1893);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.accessToString(0);
      Utility.accessToString(0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "";
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)0;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lreturn", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("lreturn");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence1);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Utility.convertString("TT f$W02c_a");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)8;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("/!\n<<!3(i)0QMG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /!
         // <<!3(i)0QMG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-I>+4]i2oLF4c]8k%&");
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-I>+4]i2oLF4c]8k%&");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("|X+vZ^,|Wo%8PjMo?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |X+vZ^,|Wo%8PjMo?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("}C't+:9~mh", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W4");
      Utility.compactClassName("W4");
      boolean boolean0 = Utility.isSet(569, 569);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("(string_index = ", false);
      String string0 = Utility.getSignature("W4");
      assertEquals("LW4;", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ishl", string1);
      assertEquals(16, byteArray0.length);
      
      String string2 = Utility.compactClassName("instanceof", false);
      assertEquals("instanceof", string2);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-75), 81, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      String string0 = "GUMj5F8sR7h";
      // Undeclared exception!
      try { 
        Utility.signatureToString("GUMj5F8sR7h", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GUMj5F8sR7h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("Exceptions: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exceptions: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Utility.isJavaIdentifierPart('%');
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte)116;
      byteArray1[2] = (byte)116;
      byteArray1[3] = (byte)116;
      byteArray1[4] = (byte)116;
      byteArray1[5] = (byte)116;
      byteArray1[6] = (byte)116;
      Utility.encode(byteArray1, false);
      Object object0 = new Object();
      Utility.encode(byteArray0, true);
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)116;
      Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(225, 230, byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("interface", (String) null, "interface", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 164, 164, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Utility.typeOfSignature("B'o4(Pc");
      Utility.compactClassName("B'o4(Pc", "B'o4(Pc", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("QZ:hphav9{5k8eMi\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QZ:hphav9{5k8eMi\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)59;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$z$f0$80$7f$3b", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      Constant constant0 = constantUtf8_0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("\t\t%");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = constant0;
      constantArray0[3] = (Constant) constantUtf8_1;
      constantArray0[4] = constant0;
      constantArray0[5] = constant0;
      byteSequence0.readChar();
      constantArray0[6] = constant0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.convertString("if_icmpeq");
      assertEquals("if_icmpeq", string1);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = Utility.fillup("", 1981, true, '8');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature(")740v %ffF5Ezc");
      String string1 = Utility.signatureToString("Z(>/xeInoV/", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-31);
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)117;
      byte byte1 = (byte)7;
      boolean boolean0 = false;
      Utility.compactClassName("#%L,yK*+", "arraylength", false);
      ConstantFloat constantFloat0 = new ConstantFloat(1394.0F);
      try { 
        Utility.typeOfSignature("#%L,yK*+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #%L,yK*+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("7mqb`89f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7mqb`89f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifge\t\t#-31599", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ifge\t\t#-31599";
      stringArray0[1] = "ifge\t\t#-31599";
      String string1 = Utility.methodTypeToSignature("ifge\t\t#-31599", stringArray0);
      assertEquals("(Lifge;Lifge;)Lifge;", string1);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = Utility.compactClassName("[2T", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)3;
      String string1 = Utility.compactClassName("[2T", "[2T", false);
      assertTrue(string1.equals((Object)string0));
      
      ConstantFloat constantFloat0 = new ConstantFloat((-1000.846F));
      byte byte0 = Utility.typeOfSignature("[2T");
      assertEquals((byte)13, byte0);
      
      String string2 = Utility.getSignature("#%L,yK*+");
      assertEquals("L#%L,yK*+;", string2);
      
      String string3 = Utility.fillup("L#%L,yK*+;", 176, false, 'e');
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeL#%L,yK*+;", string3);
      
      String string4 = Utility.accessToString(547);
      assertEquals("public private synchronized interface", string4);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[2] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmpne\t\t#233", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      int int0 = Utility.clearBit(112, 112);
      assertEquals(112, int0);
      
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " p5JG+TI_";
      objectArray0[1] = (Object) " p5JG+TI_";
      objectArray0[2] = (Object) " p5JG+TI_";
      objectArray0[3] = (Object) " p5JG+TI_";
      Object object0 = new Object();
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$mp5JG$xTI_", string0);
      
      String string1 = Utility.format(112, (-449), false, '9');
      assertEquals("112", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = "W4";
      Utility.replace("W4", "W4", "invokeinterface");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte) (-69);
      byteArray0[8] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      String string0 = "org.apache.bcel.classfile.Utility$JavaWriter";
      Utility.convertString("org.apache.bcel.classfile.Utility$JavaWriter");
      Utility.searchOpcode("org.apache.bcel.classfile.Utility$JavaWriter");
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.Utility$JavaWriter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility$JavaWriter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-94);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("$a7$d4$I$95$f9$a2", false);
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.methodSignatureReturnType("$a7$d4$I$95$f9$a2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$a7$d4$I$95$f9$a2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "@OF";
      try { 
        Utility.typeOfSignature("@OF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @OF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.classOrInterface(174);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-127);
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)85;
      try { 
        Utility.typeOfSignature("*3iD!rorzvyS$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3iD!rorzvyS$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hoo.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hoo.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "h\"<-cpI)2@", "h\"<-cpI)2@", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("int", "", "u\"!;*N:C,MFua");
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = Utility.getSignature("ACC_SUPER flag\t\t");
      assertEquals("LACC_SUPER;", string0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.W4", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("java$$lang$$W4", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fneg", string1);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" skipped");
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " skipped");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      String string0 = ".zKH";
      try { 
        Utility.typeOfSignature(".zKH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .zKH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      ConstantFloat constantFloat0 = new ConstantFloat(343.9061F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat1;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[0] = (byte)67;
      byteArray0[2] = (byte) (-95);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 0, (int) (byte)67);
      assertEquals("0:    fstore_0\n1:    nop\n2:    if_icmplt\t\t#2\n5:    nop\n6:    nop\n", string0);
      
      String string1 = Utility.format(0, (byte)67, false, ':');
      assertEquals("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::0", string1);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#220", string0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("z", (String[]) null);
      assertEquals("()Lz;", string0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" skipped");
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" skipped");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-126);
      mockPrintWriter0.printf(" skipped", objectArray0);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantPool constantPool3 = constantPool0.copy();
      constantPool3.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = "~V";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("~V");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)13;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("$l$8b$I$A$A$A$A$A$A$A");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("~V");
      try { 
        Utility.methodSignatureReturnType("+7`6G_V;yLiGZTFOt", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+7`6G_V;yLiGZTFOt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      String string0 = "(\"R3N0bs";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(\"R3N0bs", "ifnonnull", "(\"R3N0bs", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"R3N0bs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2176, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (int) (byte)7, false);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.getSignature("long");
      assertEquals("J", string0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 200, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byteArray1[2] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.getSignature("9}]5} ");
      assertEquals("L9}]5};", string0);
      
      String string1 = Utility.accessToString((int) (byte)0);
      assertEquals("", string1);
      
      String string2 = Utility.classOrInterface((byte)0);
      assertEquals("class", string2);
      
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = Utility.replace("W4", "W4", "invokeinterface");
      assertEquals("invokeinterface", string0);
      
      boolean boolean0 = Utility.isSet(3027, 3027);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("invokeinterface", false);
      String string1 = Utility.getSignature("invokeinterface");
      assertEquals("Linvokeinterface;", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fdiv", string2);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-31);
      Utility.isJavaIdentifierPart('u');
      Utility.isJavaIdentifierPart('u');
      boolean boolean0 = false;
      Utility.convertString("");
      try { 
        Utility.typeOfSignature("fload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Utility.replace("[0):c9E!=WRlMQ", "-70-b<CD FLHB", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-1545), true);
      try { 
        Utility.typeOfSignature("6$e99.gH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6$e99.gH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("'G0/aa&mZddDzW");
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("'G0/aa&mZddDzW");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Utility.isSet(56, 910);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Utility.convertString("+}");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 404, (-44), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("return");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool2, false);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lreturn";
      stringArray0[1] = "lreturn";
      stringArray0[2] = "lreturn";
      Utility.methodTypeToSignature("lreturn", stringArray0);
      Utility.replace("lreturn", "lreturn", "lreturn");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid method signature: ", (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      Utility.signatureToString("SENSITIVE");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "short";
      stringArray0[1] = "r:YvxdA.SSKpQo|~AD(";
      stringArray0[2] = "SENSITIVE";
      stringArray0[3] = "SENSITIVE";
      stringArray0[4] = "SENSITIVE";
      stringArray0[5] = "SENSITIVE";
      stringArray0[6] = "SENSITIVE";
      stringArray0[7] = "SENSITIVE";
      stringArray0[8] = "ifnull";
      String string0 = Utility.methodTypeToSignature("SENSITIVE", stringArray0);
      assertEquals("(SLr:YvxdA/SSKpQo|~AD(;LSENSITIVE;LSENSITIVE;LSENSITIVE;LSENSITIVE;LSENSITIVE;LSENSITIVE;Lifnull;)LSENSITIVE;", string0);
      
      String string1 = Utility.replace("invokestatic", "Kz$&+K3'W?X!", "r:YvxdA.SSKpQo|~AD(");
      assertEquals("invokestatic", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("goto_w\t\t#-926392120", string2);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[3] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("MEY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MEY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (int) (byte)25, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-I>+4]i2oLF4c]8k%&");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("N/XB}A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N/XB}A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      Utility.signatureToString("SENSITIVE");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      Object object0 = new Object();
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("7f 10 7d aa 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-31);
      Utility.isJavaIdentifierPart('t');
      Utility.isJavaIdentifierPart('t');
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      Utility.fillup("O#D{}u)R$Fw1k", (-952), false, '7');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Utility.methodTypeToSignature("CONSTANT_Float", (String[]) null);
      Utility.compactClassName("Jj4@AG0bn/8lrg:T", "CONSTANT_Float", false);
      Utility.format(2272, 0, true, '$');
      Utility.classOrInterface(2185);
      Utility.setBit(0, 2272);
      Utility.fillup("2272", 2185, false, '$');
      Utility.format(2185, 1, false, '$');
      Utility.printArray((Object[]) null);
      String string0 = Utility.printArray((Object[]) null, true, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1374), 199, true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('g');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte) (-48);
      Utility.encode(byteArray0, true);
      char char0 = 'y';
      Utility.format(34, 101, true, 'y');
      Utility.clearBit((-2720), (byte) (-83));
      try { 
        Utility.methodSignatureArgumentTypes("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String[] stringArray0 = new String[0];
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.printArray((Object[]) stringArray0);
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("()L;", string1);
      
      String string2 = Utility.compactClassName("{}", "{}", false);
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = Utility.isSet((short) (-1), (short) (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Utility.convertString("N;=M5dy{^R)D");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("N;=M5dy{^R)D");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ifnull", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ifnull");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence1);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence1, constantPool1, true);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool1.copy();
      try { 
        Utility.typeOfSignature("82<|}X'b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 82<|}X'b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Utility.isJavaIdentifierPart('~');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "caload");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Utility.encode(byteArray0, true);
      Utility.replace("jsr", "caload", (String) null);
      Utility.classOrInterface((byte)0);
      // Undeclared exception!
      try { 
        Utility.signatureToString(" skipped");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` skipped'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = Utility.accessToString(47, true);
      assertEquals("public private protected static", string0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("SENSITIVE", "SENSITIVE", true);
      assertEquals("", string0);
      
      byte byte0 = Utility.typeOfSignature("SENSITIVE");
      assertEquals((byte)9, byte0);
      
      String string1 = Utility.getSignature("invokedynamic");
      assertEquals("Linvokedynamic;", string1);
      
      String string2 = Utility.accessToString(70);
      assertEquals("private protected volatile", string2);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Utility.searchOpcode("$t6(bHY~zS");
      int int0 = 10;
      boolean boolean0 = false;
      Utility.fillup("$t6(bHY~zS", 10, false, '[');
      try { 
        Utility.methodSignatureArgumentTypes("monitorenter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      ConstantFloat constantFloat0 = new ConstantFloat(343.9061F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat1;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 17313. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" skipped");
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantFloat0;
      constantArray0[6] = (Constant) constantFloat0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Utility.typeOfSignature("Z!:_;p-pY");
      Utility.getSignature("^T4");
      try { 
        Utility.methodSignatureArgumentTypes("{Rmd30(\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {Rmd30(\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      Utility.clearBit(112, 1996);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " p5JG+TI_";
      objectArray0[1] = (Object) " p5JG+TI_";
      objectArray0[2] = (Object) " p5JG+TI_";
      objectArray0[3] = (Object) " p5JG+TI_";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" p5JG+TI_");
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 77, (-2871), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)0;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$Sr$A", string0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)18;
      byteArray1[5] = (byte)114;
      byteArray1[6] = (byte)18;
      byteArray1[7] = (byte)18;
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("00 00 f4 00 12 72 12 12", string1);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("goto_w", "goto_w", "goto_w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.methodSignatureReturnType("CM-O`1HT!8");
      assertEquals("char", string0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string1 = Utility.getSignature("char");
      assertEquals("C", string1);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "char");
      String string2 = Utility.classOrInterface((byte)8);
      assertEquals("class", string2);
      
      String string3 = Utility.signatureToString("CM-O`1HT!8", true);
      assertEquals("char", string3);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String string0 = Utility.compactClassName("XlK?2.L", "XlK?2.L", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      int int0 = (-171);
      Utility.accessToString((-171), true);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)116;
      byteArray0[3] = (byte)116;
      byteArray0[6] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "%Y#G)x\"duD-YQ&6Y";
      try { 
        Utility.typeOfSignature("%Y#G)x\"duD-YQ&6Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %Y#G)x\"duD-YQ&6Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("We[FS`m^DW?");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("Yodx");
      // Undeclared exception!
      try { 
        Utility.signatureToString("R8.cx%Hnbo3[.$q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R8.cx%Hnbo3[.$q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      Object object0 = new Object();
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean0 = Utility.isSet(62, 96);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      String string1 = Utility.getSignature("athrow");
      assertEquals("Lathrow;", string1);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Utility.convertString("+}");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("P#z<&");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantUtf8.getCachedInstance("Yg ciD!k");
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)118;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-36);
      byteArray2[4] = (byte) (-11);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      Utility.equals(byteArray2, byteArray0);
      try { 
        Utility.typeOfSignature("tOB5F0~ebBS,fYt(z5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tOB5F0~ebBS,fYt(z5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte) (-71);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("SENSITIVE", false);
      assertArrayEquals(new byte[] {(byte)83, (byte)69, (byte)78, (byte)83, (byte)73, (byte)84, (byte)73, (byte)86, (byte)69}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "idiv";
      Utility.methodTypeToSignature("idiv", stringArray0);
      Utility.fillup("idiv", (byte)108, true, 'M');
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lidiv;)Lidiv;", true);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = "dload_3";
      try { 
        Utility.methodSignatureReturnType("dload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[0] = (byte) (-86);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 944, (int) (byte)17, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)119;
      byteArray0[1] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmplt\t\t#1536", string0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(13, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte) (-70), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Utility.getSignature("XlK?2.L");
      try { 
        Utility.typeOfSignature("XlK?2.L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XlK?2.L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("");
      String string0 = "(string_index = ";
      try { 
        Utility.methodSignatureToString("", "apxKpt_L", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-104);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.isSet(88, (byte)58);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Utility.accessToString(71);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "ireturn", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("6$e99.gH", false);
      Utility.getSignature("6$e99.gH");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readBoolean();
      byteSequence2.readByte();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals(4, byteSequence2.getIndex());
      
      String string0 = Utility.accessToString(197);
      assertEquals("public protected volatile transient", string0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Utility.getSignature("nZcED))PBy'");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), (int) (byte) (-57), false);
      Utility.getSignature("LO3z");
      Utility.compactClassName("impdep1", "XxlWquc(hdH$+!K.sD", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n";
      objectArray0[3] = (Object) "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n";
      objectArray0[4] = (Object) "impdep1";
      PrintStream printStream0 = mockPrintStream0.format("LnZcED))PBy';", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(275, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      try { 
        Utility.typeOfSignature("_PU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _PU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(730CmUpR41`4)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `730CmUpR41`4)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifle\t\t#21592", string0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$JavaWriter", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "cGkA[FB1lXg+A|OPg";
      stringArray0[1] = "cGkA[FB1lXg+A|OPg";
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantUtf8.getInstance("cGkA[FB1lXg+A|OPg");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.getSignature("cGkA[FB1lXg+A|OPg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[FB1lXg+A|OPg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1182, 189);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Utility.compactClassName("W4");
      Utility.isSet(569, 569);
      byte[] byteArray0 = Utility.decode("W4", false);
      Utility.getSignature("W4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte) (-47);
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte)97;
      byteArray1[4] = (byte) (-15);
      byteArray1[5] = (byte)82;
      byteArray1[6] = (byte)58;
      byteArray1[7] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 87, (int) (byte) (-76));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = "[2T";
      boolean boolean0 = false;
      Utility.compactClassName("[2T", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)5;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte) (-102);
      byteArray0[3] = (byte)5;
      byteArray0[5] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1, (int) (byte)89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Utility.getSignature("constant pool\t\t");
      String string0 = "!H?e}kZ^e";
      try { 
        Utility.typeOfSignature("!H?e}kZ^e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H?e}kZ^e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String string0 = Utility.classOrInterface((-910));
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("MUhx'sL}n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MUhx'sL}n'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("aload_0", true);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("newarray");
      Utility.methodSignatureReturnType("Lnewarray;", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("S^}", "S^}", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Utility.convertString("GEa|1?");
      try { 
        Utility.typeOfSignature("GEa|1?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GEa|1?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-80);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("YeB\"-CSKY{WR", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YeB\"-CSKY{WR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(1996, 1996);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byte byte0 = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)41;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)35;
      Utility.equals(byteArray0, byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("P#z<&");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.compactClassName("\t", "p2Oq`c", false);
      Utility.printArray((Object[]) constantArray0);
      try { 
        Utility.methodSignatureArgumentTypes("{CONSTANT_Utf8[1](\"P#z<&\"), CONSTANT_Utf8[1](\"P#z<&\")}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {CONSTANT_Utf8[1](\"P#z<&\"), CONSTANT_Utf8[1](\"P#z<&\")}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-61);
      byteArray0[3] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
      
      Utility.isJavaIdentifierPart('~');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantUtf8_0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("\t\t%");
      String string1 = Utility.compactClassName("", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Utility.convertString("\"4yiD=u{EPFmZ\">L`");
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"4yiD=u{EPFmZ\">L`", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"4yiD=u{EPFmZ\">L`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("(U=I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U=I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Utility.replace("W4", "W4", "invokeinterface");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-64);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte) (-69);
      byteArray0[8] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("6$e99.gH", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-23), (byte)57, (byte)46, (byte)103, (byte)72}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("istore\t\t%233", string0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('h');
      boolean boolean1 = Utility.isJavaIdentifierPart('~');
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)61;
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)104;
      String string0 = Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("float");
      Constant constant0 = constantUtf8_0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("\t\t%");
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Rh7m9dlu?o,w#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rh7m9dlu?o,w#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      Utility.isJavaIdentifierPart('2');
      Utility.isJavaIdentifierPart('A');
      Utility.encode(byteArray0, true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      Utility.signatureToString("SENSITIVE");
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)127;
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)16;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("bG6o)_*z\"N");
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      Utility.fillup("java.lang.Object@29af36bf, java.lang.Object@20005e85, java.lang.Object@4a843d6, java.lang.Object@42bb6d78, java.lang.Object@1271a15e, java.lang.Object@302721e3", 256, false, '{');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.printArray(objectArray0, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 2
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('B');
      byte[] byteArray0 = new byte[2];
      Utility.accessToString(2119);
      Utility.clearBit((byte)0, 1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("public private protected volatile strictfp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public private protected volatile strictfp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      Utility.decode("", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" skipped");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      String string1 = Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.format((byte)0, (byte)0, false, '2');
      assertEquals("0", string2);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string3 = Utility.printArray(objectArray0, true, false);
      assertEquals("{}", string3);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Utility.replace("[0):c9E!=WRlMQ", "-70-b<CD FLHB", "");
      Utility.isSet(1783, (-1545));
      Utility.accessToString((-1545), false);
      try { 
        Utility.typeOfSignature("6$e99.gH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6$e99.gH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto_w");
      Utility.compactClassName("$t6(bHY~zSCOTu");
      String string0 = "(string_index = ";
      try { 
        Utility.methodSignatureToString("goto_w", "apxKpt_L", "(string_index = ", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("LVVA+gb#kf6*ysy=Jb", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LVVA+gb#kf6*ysy=Jb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("T* f$W02c_a", stringArray0);
      Utility.searchOpcode("");
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("~o=%RY@Y7:K?kJ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n1]Fzu$&|}})30*[";
      boolean boolean0 = true;
      int int0 = 569;
      Utility.isSet(569, (-1964));
      Utility.decode("n1]Fzu$&|}})30*[", false);
      // Undeclared exception!
      try { 
        Utility.getSignature("n1]Fzu$&|}})30*[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("goto\t\t#1026", string0);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      String string0 = Utility.compactClassName("H#,6", false);
      assertEquals("H#,6", string0);
      
      byte[] byteArray0 = Utility.decode("org.apache.bcel.util.ClassPath$1", false);
      assertEquals(30, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L8<CCf'qBIFr\";V";
      String string0 = Utility.methodTypeToSignature("L8<CCf'qBIFr\";V", stringArray0);
      assertEquals("(LL8<CCf'qBIFr\";V;)LL8<CCf'qBIFr\";V;", string0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Utility.accessToString(103);
      String string0 = "RJSD7D%+LJsGwUdE`";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public private protected synchronized volatile", "RJSD7D%+LJsGwUdE`", "`NyN(lnyJdAc2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected synchronized volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      Utility.setBit(34, (byte)0);
      Utility.searchOpcode("\"");
      Utility.convertString("'&$/F!#");
      String string0 = "oWi$,1#J";
      String string1 = "a^:(";
      // Undeclared exception!
      try { 
        Utility.signatureToString("a^:(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `a^:('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("|@>HA|3:cx3M-");
      ConstantUtf8.getInstance("|@>HA|3:cx3M-");
      constantUtf8_0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("P#z<&");
      Constant[] constantArray0 = new Constant[13];
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("if_icmpeq\t\t#243", string0);
      
      int int0 = Utility.clearBit(78, (byte)0);
      assertEquals(78, int0);
      
      String string1 = Utility.convertString("invokeinterface");
      assertEquals("invokeinterface", string1);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("$C$C$A$A");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ky~,2u2u_", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ky~,2u2u_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      String string0 = "6(nDWCX$";
      try { 
        Utility.decode("6(nDWCX$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Utility.compactClassName("W4");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet(569, 569);
      Utility.accessToString(569, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W4");
      Utility.replace("WP!cC}0~G0e", "public static final synchronized interface", "SAME");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 569, (int) (byte) (-48));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      Utility.replace("{\"java.lang.Object@51777f0\"}", "I", "Total of ");
      Utility.setBit((-2080587598), 171);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 978, 184, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = Utility.isSet(153, 1040);
      byte[] byteArray0 = Utility.decode("byte", false);
      String string0 = Utility.compactClassName("byte", false);
      assertEquals("byte", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean1 = Utility.isSet((-281), 69);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fadd", string1);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Utility.clearBit(1415, (-32768));
      Object object0 = new Object();
      byte byte0 = (byte)17;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      boolean boolean0 = false;
      try { 
        Utility.typeOfSignature("&37Z9h`I9eJ E~^l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &37Z9h`I9eJ E~^l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = Utility.decode("2PT0PAe+", false);
      String string0 = Utility.getSignature("T8+18KH'E^i?y_(P");
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isJavaIdentifierPart('+');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Utility.getSignature("invokeinterface");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-38);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-93);
      byteArray1[1] = (byte) (-38);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokeinterface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apeche.bcel.classfVle.Utility", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ddiv", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " skipped");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " skipped");
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-13);
      try { 
        Utility.typeOfSignature("34f\"L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 34f\"L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("", false);
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)110;
      Utility.equals(byteArray0, byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("+}");
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("areturn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[1] = (Object) "n1]Fzu$&|}})30*[";
      mockFileWriter0.getEncoding();
      Utility.searchOpcode("invokedynamic");
      Utility.printArray(objectArray0);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      String string0 = "'^{[0oqXw(:[NFRh6";
      // Undeclared exception!
      try { 
        Utility.getSignature("'^{[0oqXw(:[NFRh6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[0oqXw(:[NFRh6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)80;
      Utility.toHexString(byteArray0);
      int int0 = (-189);
      Utility.format((-189), (byte)80, true, 'A');
      Utility.classOrInterface((-241));
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("V0JRe", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      String string0 = Utility.getSignature(" methods:\n");
      String string1 = Utility.compactClassName("Lmethods:;");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Utility.convertString("GEa|1?");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(">ZE\u0004{yakGqW*B,kR.");
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      byte byte0 = (byte)18;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet(212, 81);
      String string0 = "S$4EIj0ap9wFC";
      // Undeclared exception!
      try { 
        Utility.decode("S$4EIj0ap9wFC", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-25);
      Utility.getSignature("<illegal opcode>");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Utility.classOrInterface((-1984));
      // Undeclared exception!
      try { 
        Utility.getSignature("@[[-Ok5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[-Ok5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Utility.compactClassName("W4");
      Utility.isSet(569, 569);
      byte[] byteArray0 = Utility.decode("(string_index = ", false);
      Utility.getSignature("W4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantInvokeDynamic0.setNameAndTypeIndex(569);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("LW4;");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("LW4;");
      ConstantPool constantPool0 = null;
      byteSequence0.read();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte) (-57);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Utility.convertString("TT f$W02c_a");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.searchOpcode("TT f$W02c_a");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.W4", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = Utility.typeOfSignature("C=ve7v");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[4] = (byte)96;
      byteArray0[6] = (byte)96;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 11);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    iinc\t\t%132\t0\n3:    nop\n4:    iadd\n5:    nop\n6:    iadd\n", "0:    iinc\t\t%132\t0\n3:    nop\n4:    iadd\n5:    nop\n6:    iadd\n", "0:    iinc\t\t%132\t0\n3:    nop\n4:    iadd\n5:    nop\n6:    iadd\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    iinc\t\t%132\t0
         // 3:    nop
         // 4:    iadd
         // 5:    nop
         // 6:    iadd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-78), (int) (byte) (-78), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)5;
      try { 
        Utility.typeOfSignature("Unreachabl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachabl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Object object0 = new Object();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 182, (int) (byte) (-33));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = Utility.compactClassName("cG-kA[FBqlXg+A|OPg", "cG-kA[FBqlXg+A|OPg", false);
      assertEquals("cG-kA[FBqlXg+A|OPg", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?9|X5");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte) (-61);
      byteArray0[8] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.classOrInterface((byte) (-104));
      assertEquals("interface", string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-104);
      String string2 = Utility.printArray(objectArray0, false, false);
      assertEquals("-104", string2);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H9es}(2W; ~Ij3F(XW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H9es}(2W; ~Ij3F(XW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Utility.convertString("TT f$W02c_a");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      String string1 = Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.format((byte)0, (byte)0, true, 'u');
      assertEquals("0", string2);
      
      Utility.isSet((byte)0, 0);
      boolean boolean0 = Utility.isSet((-888), 0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      Utility.equals(byteArray1, byteArray0);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "cG-kA[FBqlXg+A|OPg";
      Utility.isSet(2353, 2353);
      byte[] byteArray0 = Utility.decode("cG-kA[FBqlXg+A|OPg", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.readBoolean();
      Utility.setBit((-1438522480), 14);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 110, (-1438522480));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      String string0 = Utility.convertString("TT f$W02c_a");
      assertEquals("TT f$W02c_a", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)8;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-19);
      String string1 = Utility.fillup("'Rk0l+Uqt", (byte)8, false, '0');
      assertEquals("'Rk0l+Uqt", string1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string2 = Utility.getSignature("*S0G");
      assertEquals("L*S0G;", string2);
      
      String string3 = Utility.signatureToString("L*S0G;", false);
      assertEquals("*S0G", string3);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "XlK?2.L", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      try { 
        Utility.methodSignatureReturnType("Muw.Yz\"f@,eGbx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Muw.Yz\"f@,eGbx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.signatureToString("FT:B`az", false);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("T* f$W02c_a", stringArray0);
      Utility.searchOpcode("");
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-56);
      ConstantFloat constantFloat0 = new ConstantFloat((byte)0);
      Utility.typeOfSignature("L;Qw/~{`5_");
      Utility.getSignature(" skipped");
      Utility.accessToString((int) (byte)14);
      Utility.clearBit((byte) (-56), (byte) (-56));
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      String string0 = "Invalid byte tag in constant pool: ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("O#D{}u)R$Fw1k", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O#D{}u)R$Fw1k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("SENSITIVE", "SENSITIVE", true);
      Utility.typeOfSignature("SENSITIVE");
      Utility.getSignature("invokedynamic");
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Utility.accessToString(185);
      Utility.convertString("char");
      Utility.compactClassName("public static final synchronized transient", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("if_icmplt", "(xi'}R^T7vVZ 1", "C%rRy(Vcf/?d(xp%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmplt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("2Kf9H#3>hxhnF<X8Mp", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2Kf9H#3>hxhnF<X8Mp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 682, 682, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "ZWe5mf$m:u";
      String string1 = "0";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ZWe5mf$m:u", "0", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("6$e99.gH", false);
      Utility.getSignature("6$e99.gH");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.W4", false);
      int int0 = Utility.clearBit(64, 1996);
      assertEquals(64, int0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ifnonnull");
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)40;
      byteArray1[1] = (byte)67;
      byteArray1[2] = (byte) (-76);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dsub", string0);
      
      String string1 = Utility.compactClassName("{!\"!_]jID/7Z[q", "ireturn", true);
      assertEquals("{!\"!_]jID.7Z[q", string1);
      
      String string2 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_Utf8[1](\"ifnonnull\")}", string2);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" skipped");
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)119;
      byteArray0[8] = (byte)82;
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantFloat0;
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (int) (byte)11, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 182, (-1728));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("h\"0Q,");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1268, 65);
      Constant constant0 = constantFieldref0.copy();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("h\"0Q,");
      byteSequence0.close();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)116, (byte)116);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = constant0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(65, (byte)116, byteSequence0, constantPool1);
      LocalVariableTypeTable localVariableTypeTable1 = new LocalVariableTypeTable(localVariableTypeTable0);
      localVariableTypeTable1.getLocalVariable(69);
      localVariableArray0[0] = null;
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2747), (-2747), localVariableArray0, constantPool1);
      try { 
        Utility.methodSignatureToString("h\"0Q,", "ineg", "ineg", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: h\"0Q,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)3;
      byteArray0[6] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W4");
      Utility.compactClassName("W4");
      Utility.isSet(569, 569);
      byte[] byteArray0 = Utility.decode("(string_index = ", false);
      Utility.getSignature("W4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.accessToString(569);
      try { 
        Utility.methodSignatureReturnType("W4", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)45;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1537), 876, false);
      assertEquals("0:    ishr\n1:    aload_3\n2:    lstore_0\n3:    <illegal opcode>\n4:    aload_2\n5:    aload_3\n", string0);
      
      String string1 = Utility.compactClassName("W4", false);
      assertEquals("W4", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("z$z$3f$d1$y$z", string2);
      
      String string3 = Utility.convertString("Le5");
      assertEquals("Le5", string3);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "cGkA[FB1lXg+A|OPg";
      stringArray0[1] = "cGkA[FB1lXg+A|OPg";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string0 = Utility.accessToString(4664);
      assertEquals("static final synchronized interface synthetic", string0);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "cG-kA[FBqlXg+A|OPg";
      boolean boolean0 = Utility.isSet(2353, 2353);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("cG-kA[FBqlXg+A|OPg", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("cG-kA[FBqlXg+A|OPg");
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantDouble0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool2, true);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      boolean boolean0 = Utility.isSet(54, 54);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName(">\t", false);
      assertEquals(">\t", string0);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Utility.decode("JO", false);
      try { 
        Utility.typeOfSignature("Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.W4", false);
      int int0 = Utility.clearBit(62, 1996);
      assertEquals(62, int0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object object0 = new Object();
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("java$$lang$$W4", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("6a 61 76 61 2e 6c 61 6e 67 2e 57 34", string1);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Utility.classOrInterface(2);
      boolean boolean0 = false;
      Utility.format((-5281), (-5281), false, ':');
      Utility.decode("h?T@TJv]&k#Q'", false);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 215, 2123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      short short0 = Utility.searchOpcode("goto_w");
      assertEquals((short)200, short0);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      Utility.compactClassName("$)/[w[u", "$)/[w[u", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("R2?K[F#|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R2?K[F#|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      String string0 = "TT f$W02c_a";
      // Undeclared exception!
      try { 
        Utility.signatureToString("TT f$W02c_a", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TT f$W02c_a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2493, 4718, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-108);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte) (-108));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[2] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("P#z<&");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantUtf8_0.clone();
      try { 
        Utility.typeOfSignature("@@<F\"<;Lq=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @@<F\"<;Lq=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3858, (int) (byte)123, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      char char0 = 'h';
      Utility.isJavaIdentifierPart('h');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.classOrInterface((-1239));
      int int0 = (-4681);
      Utility.format((-1239), (-4681), false, 'h');
      Utility.clearBit((-1239), (-1239));
      Utility.compactClassName("boolean", true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "09^hg^p");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("lreturn");
      constantUtf8_0.copy();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-118), (int) (byte) (-118), false);
      assertEquals("0:    l2d\n1:    lload_0\n2:    nop\n3:    nop\n", string0);
      
      String string1 = Utility.compactClassName("dreturn");
      assertEquals("dreturn", string1);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.clearBit((-3176), (-3176));
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-10);
      byte byte0 = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-9);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-10);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.printArray((Object[]) stringArray0, true, true);
      Utility.compactClassName("ifgt");
      Utility.printArray((Object[]) stringArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Utility.accessToString((-1412));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("protected static final synchronized volatile interface strictfp synthetic annotation enum", "protected static final synchronized volatile interface strictfp synthetic annotation enum", "protected static final synchronized volatile interface strictfp synthetic annotation enum", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected static final synchronized volatile interface strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      String string0 = Utility.convertString("\n     ");
      assertEquals("\\n     ", string0);
      
      String string1 = Utility.accessToString(848, true);
      assertEquals("final volatile native", string1);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      int int0 = Utility.setBit(141, 141);
      assertEquals(8333, int0);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte)123;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1241), (int) (byte)55, true);
      assertEquals("0:    lstore\t\t%190\n2:    lsub\n3:    ixor\n4:    dsub\n5:    laload\n6:    impdep2\n7:    iload_2\n8:    lshr\n", string0);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("SENSITVE", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      String string0 = Utility.convertString("cGkA[FB1lXg+A|OPg");
      assertEquals("cGkA[FB1lXg+A|OPg", string0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&@QbKT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &@QbKT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      String string0 = Utility.convertString("+,}");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      Object object0 = new Object();
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      String string1 = Utility.signatureToString("SourceFile: ", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("B'o4(Pc");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-25);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 69, (-1378), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W4");
      Utility.compactClassName("W4");
      boolean boolean0 = Utility.isSet(569, 569);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("(string_index = ", false);
      String string0 = Utility.getSignature("W4");
      assertEquals("LW4;", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_2", string1);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[6] = (byte)17;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("-&hQ]ib5`-c6SD;/Qv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -&hQ]ib5`-c6SD;/Qv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      Utility.fillup("java.lang.Object@1542925d, java.lang.Object@381791fd, java.lang.Object@3148d04, java.lang.Object@63e1992c, java.lang.Object@62303f77, java.lang.Object@662cd2b5", 256, false, '{');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)92;
      byte byte0 = (byte) (-5);
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 2
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 182, (int) (byte) (-33));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("S3b77i", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S3b77i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Utility.encode(byteArray0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.decode("9;d$", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.isSet(207, 207);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      String string0 = "U.3h";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U.3h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U.3h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dmul", string0);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "Unreachable default case reached!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      String string0 = "E4";
      try { 
        Utility.typeOfSignature("E4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      String string0 = Utility.compactClassName("H#,6");
      assertEquals("H#,6", string0);
      
      boolean boolean0 = Utility.isSet(569, 569);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("org.apache.bcel.util.ClassPath$1", false);
      String string1 = Utility.getSignature("{^NR;H4b\"");
      assertEquals("L{^NR;H4b\";", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(30, byteArray0.length);
      assertEquals("ddiv", string2);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      Utility.decode("fcmpl", false);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      String string0 = "cG-kA[FBqlXg+AOg";
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (int) (byte)3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      assertArrayEquals(new byte[] {(byte)32, (byte)112, (byte)53, (byte)74, (byte)71, (byte)43, (byte)84, (byte)73, (byte)95}, byteArray0);
      
      int int0 = Utility.clearBit(112, 2040);
      assertEquals(112, int0);
      
      String string0 = Utility.convertString(" p5JG+TI_");
      assertEquals(" p5JG+TI_", string0);
      
      short short0 = Utility.searchOpcode("G *4(e*B+kl\"UM/#}");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.compactClassName("s<Ln,|1-?!#B~hbn}", "", false);
      assertEquals("s<Ln,|1-?!#B~hbn}", string1);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      int int0 = Utility.setBit(39, 2);
      assertEquals(39, int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{";
      stringArray0[1] = "~aS";
      stringArray0[2] = "{";
      String string0 = Utility.methodTypeToSignature("{", stringArray0);
      assertEquals("(L{;L~aS;L{;)L{;", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.replace("HRunY!!zI{", "wide", "float");
      assertEquals("HRunY!!zI{", string2);
      
      String string3 = Utility.format(39, 49, false, '2');
      assertEquals("2222222222222222222222222222222222222222222222239", string3);
      
      Utility.equals(byteArray0, byteArray0);
      int int1 = Utility.clearBit(2042, 8192);
      assertEquals(2042, int1);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" sipped");
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-126);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)88;
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte) (-126);
      byteArray1[3] = (byte) (-58);
      byteArray1[4] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.searchOpcode(" sipped");
      try { 
        Utility.typeOfMethodSignature("-iC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -iC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      String string0 = Utility.convertString("TT f$W02c_a");
      assertEquals("TT f$W02c_a", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("P#z<&");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[6] = (Constant) constantFloat0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool2, false);
      String string1 = Utility.classOrInterface((byte)84);
      assertEquals("class", string1);
      
      boolean boolean0 = Utility.isSet((byte)84, (-618));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lreturn";
      stringArray0[1] = "lreturn";
      stringArray0[2] = "lreturn";
      Utility.getSignature("lreturn");
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 173, 173, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "float";
      stringArray0[2] = "float";
      stringArray0[3] = "float";
      stringArray0[8] = "float";
      ConstantLong constantLong0 = new ConstantLong((-990L));
      Constant constant0 = constantLong0.copy();
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = constant0;
      constantArray0[1] = constant0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = constant0;
      constantArray0[4] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-96);
      byteArray1[1] = (byte) (-57);
      byteArray1[2] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("P#z<&");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantUtf8_0.clone();
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("if_icmpne\t\t#-14372", string0);
      
      String string1 = Utility.classOrInterface((byte) (-96));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("|@>HA|3:cx3M-");
      constantUtf8_0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("P#z<&");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("if_icmpeq\t\t#220", string0);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      try { 
        Utility.typeOfSignature("MXA$FV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MXA$FV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      short short0 = Utility.searchOpcode("ebOYN9i");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      Utility.isJavaIdentifierPart('h');
      char char0 = '~';
      Utility.isJavaIdentifierPart('~');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)61;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType(">\t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.typeOfSignature("Z`1/Ig_G{'&$EV,?x|v");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Z`1/Ig_G{'&$EV,?x|v", "Z`1/Ig_G{'&$EV,?x|v", "Z`1/Ig_G{'&$EV,?x|v", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z`1/Ig_G{'&$EV,?x|v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 182, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      Utility.clearBit(112, 1996);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " p5JG+TI_";
      objectArray0[1] = (Object) " p5JG+TI_";
      objectArray0[2] = (Object) " p5JG+TI_";
      objectArray0[3] = (Object) " p5JG+TI_";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" p5JG+TI_");
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)48;
      Utility.encode(byteArray0, true);
      String string0 = Utility.format(1530, 5075, true, '+');
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode(string0);
      Utility.compactClassName("b ", ", name_and_type_index = ", false);
      Utility.searchOpcode("b ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b ");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-I>+4]i2oLF4c]8k%&");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      String string0 = Utility.accessToString((-991), false);
      assertEquals("public synchronized abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.compactClassName("|QHQ", "public synchronized abstract strictfp synthetic annotation enum", false);
      assertEquals("|QHQ", string1);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      try { 
        Utility.typeOfSignature("']hq\u0001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ']hq\u0001
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("T* f$W02c_a", stringArray0);
      Utility.searchOpcode("");
      Utility.printArray((Object[]) stringArray0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      String string0 = Utility.convertString("GEa|1?");
      assertEquals("GEa|1?", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(169, (byte) (-99));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte)119;
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte)74;
      byteArray1[4] = (byte)119;
      byteArray1[5] = (byte) (-99);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("ifgt\t\t#30540", string1);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      String string0 = " p5JG+TI\\_";
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      Utility.clearBit(112, 112);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " p5JG+TI_";
      objectArray0[1] = (Object) " p5JG+TI_";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      objectArray0[2] = (Object) " p5JG+TI_";
      objectArray0[3] = (Object) " p5JG+TI_";
      Utility.classOrInterface(112);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      ConstantFloat constantFloat0 = new ConstantFloat(343.9061F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat1;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[0] = (byte)67;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)97;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)126;
      byteArray1[1] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "cGkA[FB1lXg+A|OPg";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wf|o|]_zh", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wf|o|]_zh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), 91);
      assertEquals("0:    <illegal opcode>\n1:    breakpoint\n2:    iinc\t\t%96\t76\n", string0);
      
      String string1 = Utility.getSignature("0:    <illegal opcode>\n1:    breakpoint\n2:    iinc\t\t%96\t76\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      Utility.compactClassName(">Y:2[", "multianewarray", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      try { 
        Utility.methodSignatureToString("(", "OUM", ">Y:2[", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      Utility.decode("6(nDWCX$", false);
      byte[] byteArray0 = Utility.decode("6(nDWCX$", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("6$unDWCX", string0);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Js");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      Utility.convertString("TT f$W02c_a");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)84;
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("P#z<&");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[6] = (Constant) constantFloat0;
      try { 
        Utility.typeOfSignature("P#z<&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P#z<&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      Utility.typeOfSignature("SENSITIVE");
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)9);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)9, 248);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantPool constantPool3 = constantPool1.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool3, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.bcel.classfile.ConstantUtf8$1");
      mockPrintStream0.print(true);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) constantArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" ", "Mb{<`5N?P2lth^]+[G", "ret", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      byte byte0 = (byte)48;
      byte byte1 = (byte)104;
      byte[] byteArray0 = Utility.decode(")\t", false);
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 670, 1745);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      Utility.accessToString(174);
      try { 
        Utility.methodSignatureReturnType("QeMgynSPJeK?Xwpd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QeMgynSPJeK?Xwpd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)104;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9971, (int) (byte)90, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "multianewarray");
      Utility.searchOpcode("multianewarray");
      Utility.convertString("multianewarray");
      Utility.isJavaIdentifierPart('&');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("double");
      try { 
        Utility.methodSignatureReturnType("invokevirtual");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokevirtual'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      Utility.encode(byteArray0, true);
      Utility.replace("", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
      Utility.format((byte)39, (byte)69, true, '~');
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("invokestatic");
      Utility.compactClassName("7OZXJ$", "breakpoint", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-78);
      String string0 = Utility.fillup("isub", (-974), true, 'c');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = Utility.compactClassName("isub");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("Invalid signature: ", false);
      assertEquals("int", string2);
      
      String string3 = Utility.format((byte) (-78), 69, false, 'c');
      assertEquals("cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc-78", string3);
      
      String string4 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 b2 00 00", string4);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)0;
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("{\"0\", null, \"0\", \"0\", \"0\"}");
      Utility.printArray(objectArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("anewarray", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (-3200));
      String string1 = Utility.getSignature("anewarray");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("?;U{LB%izZC[^qvo=[$");
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iastore", string0);
      
      short short0 = Utility.searchOpcode("iastore");
      assertEquals((short)79, short0);
      
      String string1 = Utility.signatureToString("FjBgWw)b9IMAEu(Q");
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("5J1");
      constantUtf8_0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("};");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)59, (-5130));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantMethodref0.accept(descendingVisitor0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      Utility.fillup("getstatic", 183, false, '8');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("getstatic");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y`!B M>*", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y`!B M>*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", "boolean");
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = " p5JG+TI\\_";
      byte[] byteArray0 = Utility.decode("n{y ", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (-2827));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-69);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-514), (int) (byte) (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fcmpl
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("astore_0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~aS";
      stringArray0[1] = ", ";
      stringArray0[2] = "~aS";
      Utility.methodTypeToSignature(", ", stringArray0);
      Utility.setBit(49, 49);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("iinc\t\t%0\t0", string0);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      Utility.clearBit(112, 1996);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " p5JG+TI_";
      objectArray0[1] = (Object) " p5JG+TI_";
      objectArray0[2] = (Object) " p5JG+TI_";
      objectArray0[3] = (Object) " p5JG+TI_";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" p5JG+TI_");
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("getfield", stringArray0);
      Utility.replace("@Kq", "athrow", "\t\t%");
      Utility.printArray((Object[]) stringArray0, false, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getfield", "", "\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[3] = object0;
      Object object1 = new Object();
      ConstantFloat constantFloat0 = new ConstantFloat(343.9061F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat1;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantFloat constantFloat2 = new ConstantFloat(343.9061F);
      Utility.typeOfSignature("[]");
      // Undeclared exception!
      try { 
        Utility.signatureToString("EF~dj'* ~?Ia", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EF~dj'* ~?Ia'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("uhA'^' D");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      Utility.convertString("TT f$W02c_a");
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("P#z<&");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      byte byte0 = (byte) (-80);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("TT f$W02c_a", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TT f$W02c_a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      Utility.clearBit(64, 1996);
      String string0 = "ifnonnull";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ifnonnull");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("A%}jp", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `A%}jp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" p5JG+TI_", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " p5JG+TI_");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      int int0 = Utility.setBit((-1795), (-1795));
      assertEquals((-1795), int0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3342), 87);
      assertEquals("0:    lload_2\n1:    irem\n2:    saload\n3:    dstore_3\n4:    dstore_0\n5:    aload_1\n6:    bastore\n7:    dstore_2\n8:    swap\n", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)32, (byte)112, (byte)53, (byte)74, (byte)71, (byte)43, (byte)84, (byte)73, (byte)95}, byteArray0);
      assertEquals("irem", string1);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("6$e99.gH", false);
      Utility.getSignature("6$e99.gH");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("istore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.signatureToString("TT f$W02c_a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TT f$W02c_a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      Utility.convertString("+,}");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)70;
      byteArray2[1] = (byte) (-120);
      byteArray2[2] = (byte) (-120);
      byteArray2[3] = (byte) (-120);
      byteArray2[4] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "cG-kA[FBqlXg+A|OPg";
      Utility.isSet(2353, 2353);
      Utility.decode("cG-kA[FBqlXg+A|OPg", false);
      Utility.getSignature("getfield");
      Utility.signatureToString("V", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-127);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("$e4$dcx$b3$x$81", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[FBqlXg+A|OPg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      Utility.signatureToString("VdW,E?m|1b ; HG$rH1", true);
      String string0 = Utility.getSignature("VdW,E?m|1b ; HG$rH1");
      assertEquals("LVdW,E?m|1b;", string0);
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('Z');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.signatureToString("D", true);
      Utility.convertString("double");
      Utility.decode("D", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      Utility.methodSignatureReturnType("CLASSPATH component ");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      String string0 = "\n .   ";
      String string1 = "Ut-v<";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ut-v<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ut-v<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.getSignature("P/*fFV%vmk,m-");
      try { 
        Utility.typeOfSignature("P/*fFV%vmk,m-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P/*fFV%vmk,m-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[3] = object0;
      Object object1 = new Object();
      ConstantFloat constantFloat0 = new ConstantFloat(343.9061F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)59;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$z$f0$80$7f$3b", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      Constant constant0 = constantUtf8_0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("\t\t%");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = constant0;
      constantArray0[2] = constant0;
      constantArray0[3] = (Constant) constantUtf8_1;
      constantArray0[4] = constant0;
      constantArray0[5] = constant0;
      constantArray0[6] = constant0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_3", string1);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('X');
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature(" arg");
      assertEquals("Larg;", string0);
      
      String string1 = Utility.fillup("new", (-3100), true, '+');
      assertEquals("new", string1);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 30019. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(33, byteArray0.length);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("putfield", ")740v %ffF5Ezc", ")740v %ffF5Ezc");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[;=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      Utility.fillup("O#D{}u)R$Fw1k", (byte)116, true, '8');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("ky^;v@3 o\"hu&");
      // Undeclared exception!
      try { 
        Utility.signatureToString("XlK?2.L", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XlK?2.L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      Utility.clearBit(64, 1996);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)94;
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("P#z<&");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|9,{Z`n#&PY*1l=fJD");
      MockPrintStream mockPrintStream0 = new MockPrintStream("16u[%Z!P>D=,/ Hu}L");
      PrintStream printStream0 = mockPrintStream0.append('?');
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      Utility.isJavaIdentifierPart('`');
      Utility.printArray(printStream0, (Object[]) null);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore_3", string0);
  }
}
