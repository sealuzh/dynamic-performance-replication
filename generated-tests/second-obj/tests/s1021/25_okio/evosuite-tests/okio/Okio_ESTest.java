/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:55:39 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.net.SocketException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.ResourceBundle;
import okio.Buffer;
import okio.BufferedSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.Okio;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Okio_ESTest extends Okio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        Okio.sink(path0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("d7Rdry");
      Sink sink0 = Okio.appendingSink(mockFile0);
      assertNotNull(sink0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Okio.blackhole();
      try { 
        Okio.source((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      try { 
        Okio.sink((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        Okio.source((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        Okio.sink((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("D", "D");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        Okio.source(path0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError(false);
      AssertionError assertionError1 = new AssertionError("timeout", assertionError0);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Okio.blackhole();
      OpenOption[] openOptionArray0 = new OpenOption[4];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      openOptionArray0[1] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.DELETE_ON_CLOSE;
      openOptionArray0[2] = (OpenOption) standardOpenOption1;
      StandardOpenOption.values();
      openOptionArray0[3] = (OpenOption) standardOpenOption0;
      // Undeclared exception!
      try { 
        Okio.source((Path) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.appendingSink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("endIndex < beginIdex");
      MockFile mockFile0 = new MockFile("endIndex < beginIdex", "endIndex < beginIdex");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(8177L);
      mockFile0.toPath();
      Source source0 = Okio.source((File) mockFile0);
      realBufferedSink0.toString();
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.timeout();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(((RealBufferedSink) bufferedSink0).buffer);
      try { 
        realBufferedSink2.write(source0, (long) 9);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Okio.blackhole();
      // Undeclared exception!
      try { 
        Okio.sink((Path) null, (OpenOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.sink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockFile mockFile0 = new MockFile("enIndex < beginIde");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      MockFile mockFile1 = new MockFile("enIndex < beginIde", "");
      Okio.blackhole();
      HashingSink hashingSink0 = HashingSink.sha512(sink0);
      hashingSink0.close();
      hashingSink0.flush();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockFile mockFile0 = new MockFile("endIndex < beginIndex");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = (RealBufferedSink)Okio.buffer(sink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      mockFile0.getCanonicalPath();
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSink0);
      hashingSink0.timeout();
      hashingSink0.flush();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(sink0);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      HashingSink hashingSink0 = HashingSink.sha512(sink0);
      hashingSink0.close();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockFile mockFile0 = new MockFile("endIndex < beginIndex", "endIndex < beginIndex");
      Sink sink0 = Okio.sink((File) mockFile0);
      BufferedSink bufferedSink0 = Okio.buffer(sink0);
      bufferedSink0.writeLongLe(8192L);
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      hashingSink0.flush();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      BufferedSink bufferedSink0 = Okio.buffer(sink0);
      BufferedSink bufferedSink1 = bufferedSink0.writeLongLe(8192L);
      HashingSink hashingSink0 = HashingSink.sha1(bufferedSink1);
      hashingSink0.flush();
      AssertionError assertionError0 = new AssertionError(false);
      Okio.isAndroidGetsocknameError(assertionError0);
      HashingSink.sha1(hashingSink0);
      // Undeclared exception!
      try { 
        Okio.sink((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      Okio.blackhole();
      MockException mockException0 = new MockException("H#hc$(>Kf~+^");
      AssertionError assertionError0 = new AssertionError("getsockname failed", mockException0);
      Okio.isAndroidGetsocknameError(assertionError0);
      System.setCurrentTimeMillis((-1134L));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      HashingSink hashingSink0 = HashingSink.md5(sink0);
      hashingSink0.timeout();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink1 = HashingSink.sha512(sink0);
      assertNotSame(hashingSink1, hashingSink0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/endIndex  beginIdex");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("endIndex  beginIdex", "endIndex  beginIdex");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Source source0 = Okio.source((File) mockFile0);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      HashingSink.sha512(sink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      String string0 = realBufferedSource0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      Okio.sink((OutputStream) byteArrayOutputStream0);
      MockException mockException0 = new MockException();
      AssertionError assertionError0 = new AssertionError((String) null, mockException0);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("endIndex < beginIndex", "endIndex < beginIndex");
      Sink sink0 = Okio.sink((File) mockFile0);
      BufferedSink bufferedSink0 = Okio.buffer(sink0);
      Source source0 = Okio.source((File) mockFile0);
      GzipSource gzipSource0 = new GzipSource(source0);
      gzipSource0.close();
      Pipe pipe0 = new Pipe(8222L);
      ((RealBufferedSink) bufferedSink0).buffer.readUnsafe();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readByteString(8222L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=8222
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockFile mockFile0 = new MockFile("endIndex < beginIndex", "endIndex < beginIndex");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(8192L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSink hashingSink0 = HashingSink.sha512(sink0);
      hashingSink0.write(realBufferedSink0.buffer, 1L);
      hashingSink0.flush();
      realBufferedSink0.writeShortLe(1939);
      HashingSink.sha512(bufferedSink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(sink0);
      realBufferedSink1.write((Source) buffer1, (long) 9);
      AssertionError assertionError0 = new AssertionError(8192L);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockFile mockFile0 = new MockFile("endIndex < beginIndex");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(8192L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFile0.toPath();
      Source source0 = Okio.source((File) mockFile0);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink0);
      realBufferedSink0.flush();
      HashingSink hashingSink1 = HashingSink.md5(bufferedSink0);
      Sink sink1 = hashingSink0.delegate();
      HashingSink.md5(sink1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      HashingSource hashingSource0 = HashingSource.sha1(source0);
      hashingSource0.timeout();
      hashingSource0.hash();
      long long0 = ResourceBundle.Control.TTL_DONT_CACHE;
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(hashingSink1);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink0);
      try { 
        realBufferedSink1.write(source0, 330L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }
}
