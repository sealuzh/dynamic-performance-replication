/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 16:56:05 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.CharArrayReader;
import java.io.File;
import java.io.LineNumberReader;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kaPYJSW'=)c~", 68);
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'G';
      charArray0[2] = '%';
      charArray0[3] = '';
      charArray0[4] = '.';
      charArray0[5] = 'x';
      charArray0[6] = 'Q';
      charArray0[7] = 'V';
      charArray0[8] = ';';
      SymbolTable symbolTable0 = new SymbolTable(102);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-1257), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^!$+!s~QS_[a3,!ZT");
      jSONScanner0.info();
      jSONScanner0.hasSpecial = false;
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.isRef();
      jSONScanner0.indexOf('t', 0);
      jSONScanner0.putChar('t');
      jSONScanner0.next();
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0nk9coC'j");
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFloat('%');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0nk9coc");
      jSONScanner0.putChar('n');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9A1^]+,");
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONLexerBase.readString((char[]) null, 0);
      jSONScanner0.scanFloat('F');
      int int0 = jSONScanner0.token();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "M(KiP'_Jq$";
      int int0 = (-3732);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M(KiP'_Jq$", (-3732));
      jSONReaderScanner0.scanBoolean('o');
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      charArray0[5] = 'o';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanLong('o');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanTrue();
      jSONScanner0.scanBoolean('7');
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(300, 300);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = (-1937);
      JSONScanner jSONScanner0 = new JSONScanner("Y&", (-1937));
      HashSet<String> hashSet0 = new HashSet<String>();
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      hashSet0.toArray(integerArray0);
      char char0 = '6';
      jSONScanner0.scanStringArray(hashSet0, '6');
      jSONScanner0.scanISO8601DateIfMatch();
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2686));
      jSONScanner0.info();
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanStringArray((Collection<String>) null, '1');
      jSONScanner0.scanDecimal('\'');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g!5`");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("R\"\"/@lWSG;:+&._?");
      jSONScanner0.next();
      jSONScanner0.nextToken(11);
      assertEquals('/', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanTrue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.nextToken(7);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7)", 108);
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.scanBoolean('}');
      jSONReaderScanner0.scanDouble('v');
      jSONReaderScanner0.resetStringPosition();
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = 'v';
      charArray0[4] = '}';
      charArray0[5] = 'v';
      charArray0[6] = '}';
      charArray0[7] = 'v';
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", 134);
      jSONScanner0.np = (-2260);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = '%';
      charArray0[2] = 'g';
      charArray0[3] = '}';
      charArray0[4] = '1';
      charArray0[5] = 'l';
      charArray0[6] = '=';
      charArray0[7] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(0, int0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "3V<n_w2S*KA", 36, 0, 36, 0, 0, 0, 28, (-1785));
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      jSONReaderScanner0.subString(173, 113);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanString('Q');
      jSONScanner0.scanDecimal('A');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('A', 'A', 'A');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 64);
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('b');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match b - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ", (-2686));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('.');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match . - ,, info : pos 0, json : , 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("p7&");
      char[] charArray0 = new char[3];
      jSONScanner0.resetStringPosition();
      charArray0[0] = 'a';
      SymbolTable symbolTable0 = new SymbolTable(44);
      symbolTable0.addSymbol(charArray0, 0, 0);
      jSONScanner0.scanFieldStringArray(charArray0, 44, symbolTable0);
      jSONScanner0.scanDouble('6');
      charArray0[1] = '>';
      charArray0[2] = '1';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      int int0 = 91;
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - p, info : pos 0, json : p7&
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'r');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0nco7'j");
      jSONScanner0.close();
      jSONScanner0.getCalendar();
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(801);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'I');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = 'v';
      charArray0[2] = '/';
      charArray0[3] = '@';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit", 75);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'v');
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 6, (-1));
      JSONScanner jSONScanner1 = new JSONScanner("unclosed.str.lit", (-3116));
      jSONScanner1.scanFieldString(charArray0);
      jSONScanner1.scanInt('v');
      jSONScanner1.scanUUID('@');
      assertEquals((-3116), jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("495-Ye+_");
      jSONScanner0.scanUUID('!');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.scanDecimal('D');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = ';';
      charArray0[2] = 'X';
      JSONScanner.charArrayCompare("SupportArrayToBean", 0, charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N,@6_+Fl%@qKF", 0);
      jSONReaderScanner0.scanDecimal('I');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VE");
      SymbolTable symbolTable0 = new SymbolTable(45);
      jSONScanner0.scanSymbol(symbolTable0);
      long long0 = jSONScanner0.longValue();
      assertTrue(jSONScanner0.isEOF());
      assertEquals(401L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fx=+a{AJh<J:", (-30));
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      jSONReaderScanner0.sp = 11;
      charArray0[1] = 'I';
      charArray0[2] = ':';
      charArray0[3] = 'R';
      charArray0[4] = '[';
      charArray0[5] = 'f';
      charArray0[6] = ' ';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      charArray0[7] = 'G';
      charArray0[8] = ')';
      jSONReaderScanner0.scanFieldInt(charArray0);
      int int0 = 0;
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.isEnabled(0, 0);
      jSONReaderScanner0.isBlankInput();
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // fx=+a{AJh<J
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9x^]+p");
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0018';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner1.nextToken(0);
      jSONScanner0.getTimeZone();
      boolean boolean0 = jSONScanner1.isEnabled((int) '\u0018', 0);
      assertEquals(20, jSONScanner1.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanTrue();
      boolean boolean0 = jSONScanner0.isEnabled(117, 691);
      assertTrue(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 64);
      char[] charArray1 = new char[2];
      charArray1[0] = '~';
      charArray1[1] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 64, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('b');
      boolean boolean0 = jSONScanner0.isEnabled(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      jSONScanner0.nextIdent();
      jSONScanner0.scanDecimal('C');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = (-963);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u-@[L<M:VkIjGFPu/_", (-963));
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.nextIdent();
      JSONScanner jSONScanner0 = new JSONScanner("u-@[L<M:VkIjGFPu/_");
      jSONReaderScanner0.eofPos = 0;
      jSONScanner0.isEOF();
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VE");
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      jSONScanner0.scanIdent();
      jSONScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = '$';
      charArray0[2] = 'B';
      charArray0[3] = '7';
      charArray0[4] = 'n';
      charArray0[5] = '{';
      jSONScanner0.scanFieldDouble(charArray0);
      char char0 = '`';
      jSONScanner0.scanStringArray((Collection<String>) null, '`');
      jSONScanner0.hasSpecial = true;
      jSONScanner0.scanLong('l');
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 3, json : \":\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g!5`");
      jSONScanner0.isBlankInput();
      jSONScanner0.scanSymbol((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"g\", pos 1, json : g!5`
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanTrue();
      jSONScanner0.nextToken(123);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("#p");
      jSONScanner0.close();
      int int0 = jSONScanner0.scanType("#p");
      assertEquals((-2), int0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Y&", (-1937));
      HashSet<String> hashSet0 = new HashSet<String>();
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      hashSet0.toArray(integerArray0);
      jSONScanner0.scanDouble('6');
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('6', 'H', '6');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g!5`");
      jSONScanner0.isBlankInput();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'z';
      charArray0[2] = 'b';
      charArray0[3] = 'G';
      charArray0[4] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26, 68);
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      SymbolTable symbolTable0 = new SymbolTable(45);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 9pos 0, json : 9Ax^]+,p
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vk\"]^u!>@mKL");
      JSONScanner jSONScanner0 = new JSONScanner("/t)BM?DA=xi=YwL.(");
      SymbolTable symbolTable0 = new SymbolTable(99);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : /pos 0, json : /t)BM?DA=xi=YwL.(
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner(", ", (-1914));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ,, info : pos 0, json : , 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanDecimal(';');
      assertEquals('A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^|!o$#>_I/");
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = '4';
      jSONScanner0.matchField(charArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JSONScanner jSONScanner1 = new JSONScanner("", (-2686));
      // Undeclared exception!
      try { 
        jSONScanner1.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertFalse(boolean0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 14);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('D');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = '.';
      charArray0[2] = 'w';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.nextToken();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 98, 2144);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83, (-2030));
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.info();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Eef{{>vH{73");
      char char0 = '^';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('^');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ^ - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fg5`");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'q');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g!5`");
      SymbolTable symbolTable0 = new SymbolTable(4096);
      JSONScanner jSONScanner1 = new JSONScanner("g!5`");
      jSONScanner1.scanSymbolUnQuoted(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner1.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VE");
      SymbolTable symbolTable0 = new SymbolTable(45);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", 44);
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16, 16);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONScanner jSONScanner0 = new JSONScanner("TreeSt");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("not match ", (-803));
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanType("I");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanType("true");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t0nk9coC'j");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      Locale locale0 = Locale.ENGLISH;
      jSONScanner0.scanIdent();
      jSONScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", 134);
      jSONScanner0.scanFloat('\"');
      jSONScanner0.np = (-172);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VE");
      jSONScanner0.scanFloat('.');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 272);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.indexOf('\u0000', 272);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.features = 272;
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanBoolean('5');
      jSONReaderScanner0.scanDouble('5');
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("QD^r@p%r&!)^~al3|f", 68);
      jSONReaderScanner0.scanDouble('^');
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = '^';
      charArray0[5] = '8';
      charArray0[6] = '^';
      charArray0[7] = '^';
      int int0 = 97;
      linkedList0.removeFirstOccurrence((Object) null);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1e?k8a5KZLlPdU*");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = 'E';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'E';
      charArray0[7] = 'R';
      charArray0[8] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 21, 21);
      jSONReaderScanner0.scanNumber();
      assertEquals('R', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      char[] charArray0 = new char[2];
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charArray0;
      objectArray0[1] = (Object) charArray0;
      jSONScanner0.lexError("scan new error", objectArray0);
      charArray0[0] = '!';
      charArray0[1] = '!';
      jSONScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      SymbolTable symbolTable0 = new SymbolTable(96);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'o');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0nk9coC'j");
      Feature feature0 = Feature.OrderedField;
      jSONScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("u");
      char char0 = ';';
      jSONScanner0.scanDecimal(';');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b.NFIrP%,=ra");
      jSONScanner0.getCalendar();
      jSONScanner0.calendar = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")");
      jSONScanner0.scanDecimal('=');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41, (-23));
      jSONReaderScanner0.longValue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.skipWhitespace();
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+sW%_&1{a_gNK");
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0nk9coC'j");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal(';');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("u");
      jSONScanner0.setToken(110);
      char char0 = ';';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0nk9co7'j");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      SymbolTable symbolTable0 = new SymbolTable(1297);
      jSONScanner0.scanEnum(class0, symbolTable0, 'C');
      float float0 = jSONScanner0.scanFloat('G');
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanTrue();
      jSONScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-121));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6-Oz9<[<OI", 875);
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = '&';
      charArray0[2] = ']';
      charArray0[3] = '=';
      charArray0[4] = '\'';
      charArray0[5] = 'E';
      charArray0[6] = '5';
      charArray0[7] = '7';
      charArray0[8] = 'J';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.pos();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g!5`");
      jSONScanner0.nextIdent();
      jSONScanner0.eofPos = 125;
      jSONScanner0.isBlankInput();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      JSONScanner jSONScanner1 = new JSONScanner("true", (-360));
      jSONScanner1.scanTrue();
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = '_';
      charArray0[2] = 'J';
      jSONScanner0.nextToken();
      charArray0[3] = 'S';
      charArray0[4] = 'j';
      // Undeclared exception!
      try { 
        jSONScanner1.arrayCopy(0, charArray0, (-360), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VE");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-25);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONScanner jSONScanner0 = new JSONScanner("illegal identifier : ", 101);
      jSONScanner0.nextToken();
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      SymbolTable symbolTable0 = new SymbolTable(123);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ue", 125);
      jSONReaderScanner0.scanString('I');
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "M(KiP'_Jq$";
      int int0 = (-3732);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M(KiP'_Jq$", (-3732));
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("495-Ye+_");
      jSONScanner0.scanString('Z');
      jSONScanner0.scanDecimal('Z');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('Z', 'Z', 'K');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      jSONScanner0.scanFloat('F');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VE");
      SymbolTable symbolTable0 = new SymbolTable(45);
      jSONScanner0.scanSymbol(symbolTable0);
      int int0 = jSONScanner0.intValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(401, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONScanner jSONScanner0 = new JSONScanner("VE");
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      jSONScanner0.scanIdent();
      jSONScanner0.scanFieldFloat(charArray0);
      int int0 = jSONScanner0.intValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(401, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanIdent();
      JSONScanner jSONScanner1 = new JSONScanner("true");
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldFloat(charArray0);
      JSONScanner jSONScanner2 = new JSONScanner(", property ", 0);
      // Undeclared exception!
      try { 
        jSONScanner2.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_x{Yv7~CtU*pk");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_x{Yv7~CtU*pk");
      jSONScanner0.nextToken((-1790434374));
      assertEquals('x', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanType("null");
      jSONScanner0.scanDecimal('E');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = '(';
      charArray0[2] = '';
      SymbolTable symbolTable0 = new SymbolTable(13);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanDecimal('2');
      jSONScanner0.close();
      jSONScanner0.scanNumber();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.close();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      jSONScanner0.nextIdent();
      assertEquals('A', jSONScanner0.getCurrent());
      
      jSONScanner0.floatValue();
      Number number0 = jSONScanner0.integerValue();
      assertEquals(9, number0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fx=+a{AJh<J:", (-30));
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      jSONReaderScanner0.sp = 11;
      charArray0[1] = 'I';
      charArray0[2] = ':';
      charArray0[3] = 'R';
      charArray0[4] = '[';
      charArray0[5] = 'f';
      charArray0[6] = ' ';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      char char0 = 'G';
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken(3);
      jSONScanner0.scanType("-'");
      jSONScanner0.scanString('d');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString('\'');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u");
      jSONScanner0.skipWhitespace();
      int int0 = jSONScanner0.token();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "TreeSt";
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16, 16);
      jSONReaderScanner0.scanLong(' ');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONScanner jSONScanner0 = new JSONScanner("TreeSt", (-1));
      jSONScanner0.bytesValue();
      JSONScanner jSONScanner1 = new JSONScanner("VE");
      char[] charArray1 = new char[7];
      charArray1[0] = '/';
      charArray1[1] = 'G';
      charArray1[2] = ' ';
      charArray1[3] = ' ';
      charArray1[4] = '/';
      charArray1[5] = '|';
      charArray1[6] = '\"';
      // Undeclared exception!
      try { 
        jSONScanner1.arrayCopy(83, charArray1, (-871), 83);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      jSONScanner0.scanDate('|');
      jSONScanner0.close();
      jSONScanner0.scanFloat('>');
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      jSONScanner0.scanDate('I');
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('\'');
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("l", 114);
      jSONReaderScanner0.scanInt('f');
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      SymbolTable symbolTable0 = new SymbolTable(37);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'f');
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'f';
      charArray1[1] = 'f';
      charArray1[2] = 'd';
      charArray1[3] = 'f';
      charArray1[4] = 'f';
      jSONReaderScanner0.scanFieldDate(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = 'P';
      charArray0[2] = '!';
      charArray0[3] = '~';
      charArray0[4] = 'v';
      charArray0[5] = '~';
      charArray0[6] = '!';
      charArray0[7] = '<';
      charArray0[8] = 't';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}e3V0", 116);
      jSONReaderScanner0.scanDate('k');
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Tjk;-$d`TdR\"W");
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = ' ';
      charArray0[2] = 'x';
      charArray0[3] = 'V';
      charArray0[4] = '1';
      charArray0[5] = 'X';
      charArray0[6] = 'H';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 118, 118);
      jSONReaderScanner0.scanInt('k');
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanDate('4');
      jSONReaderScanner0.subString(118, 118);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed jsonArray");
      jSONScanner0.nextToken(2745);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanTrue();
      int int0 = jSONScanner0.getFeatures();
      assertEquals(989, int0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      jSONScanner0.nextToken(19);
      SymbolTable symbolTable0 = new SymbolTable(45);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('y');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('9');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      jSONScanner0.intValue();
      jSONScanner0.isRef();
      Feature feature0 = Feature.SupportArrayToBean;
      jSONScanner0.eofPos = 0;
      jSONScanner0.isEnabled(feature0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}89WiBtF} s1T");
      jSONScanner0.nextToken(65);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0nco7'j");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'z';
      charArray0[2] = 'b';
      charArray0[3] = 'G';
      charArray0[4] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26, 68);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanNumber();
      char char0 = jSONReaderScanner0.charAt(18);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0nk9co7'j");
      jSONScanner0.nextToken();
      float float0 = jSONScanner0.scanFloat('G');
      assertEquals(2, jSONScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.nextToken();
      jSONScanner0.token = 84;
      jSONScanner0.scanFloat('G');
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hyq!sk1.M");
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONScanner jSONScanner1 = new JSONScanner(" -> ", 0);
      boolean boolean0 = jSONScanner1.isBlankInput();
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{;D");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("CqFGJ65[)l1`~");
      jSONScanner0.isBlankInput();
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.nextToken(2217);
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '&';
      charArray0[2] = '$';
      charArray0[3] = 'R';
      charArray0[4] = 'y';
      charArray0[5] = 'A';
      charArray0[6] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 813);
      SymbolTable symbolTable0 = new SymbolTable(4999);
      jSONReaderScanner0.scanSymbol(symbolTable0, '&');
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '$');
      assertEquals('$', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("u}d0V((c.{OdKDs");
      jSONScanner0.skipWhitespace();
      jSONScanner0.isRef();
      int int0 = Calendar.DATE;
      SymbolTable symbolTable0 = new SymbolTable(3721);
      jSONScanner0.scanSymbol(symbolTable0, 'D');
      boolean boolean0 = jSONScanner0.isEnabled(5);
      assertEquals('s', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}d0V((c.{[dKDs");
      jSONScanner0.isRef();
      jSONScanner0.nextToken(14);
      boolean boolean0 = jSONScanner0.isEnabled(117, 123);
      assertEquals(13, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      String string0 = jSONScanner0.tokenName();
      assertEquals("Unknown", string0);
      
      String string1 = jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertNull(string1);
      
      jSONScanner0.scanDecimal('\'');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      jSONScanner0.scanNumber();
      jSONScanner0.intValue();
      boolean boolean0 = jSONScanner0.scanBoolean('.');
      assertEquals(2, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      char[] charArray0 = new char[0];
      jSONScanner0.isRef();
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      char[] charArray0 = new char[0];
      jSONScanner0.isRef();
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFloat('c');
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("not match ", (-803));
      jSONScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'z');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.sp = 2624;
      SymbolTable symbolTable0 = new SymbolTable(139);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'N');
      int int0 = (-1098);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 65);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 101);
      jSONScanner0.longValue();
      jSONScanner0.setToken(56320);
      jSONScanner0.scanTrue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.next();
      jSONScanner0.isEnabled(1752, 1384);
      // Undeclared exception!
      jSONScanner0.nextToken(1752);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(&>");
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("not match ", (-803));
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.charAt(0);
      int int0 = jSONReaderScanner0.scanType("not match ");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("not match ", (-803));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      jSONReaderScanner0.scanDouble('F');
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0nk9co7'j");
      JSONScanner jSONScanner1 = new JSONScanner("0nk9co7'j");
      JSONScanner jSONScanner2 = new JSONScanner("Z{|s#?F", 1849);
      jSONScanner2.isBlankInput();
      JSONScanner jSONScanner3 = new JSONScanner("E");
      jSONScanner3.scanNumber();
      int int0 = jSONScanner3.intValue();
      assertEquals(3, jSONScanner3.token());
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      jSONScanner0.matchField2(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(10);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'c');
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONScanner0.scanSymbol((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(&>");
      jSONScanner0.isBlankInput();
      jSONScanner0.nextToken((-3144));
      assertEquals(10, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ", (-803));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '$';
      charArray0[2] = 'K';
      charArray0[3] = '+';
      charArray0[4] = '3';
      charArray0[5] = '?';
      charArray0[6] = 'Q';
      charArray0[7] = 'c';
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '3');
      char char0 = 'F';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2389));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9A1^]+,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanUUID('1');
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "9Ax^]+,p";
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      char[] charArray0 = new char[0];
      jSONScanner0.isRef();
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9Ax^]+,p", (-1));
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1871));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("cI.FI?X2QhlIYwaPF");
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = '[';
      charArray0[2] = 'y';
      charArray0[3] = 't';
      charArray0[4] = 'G';
      charArray0[5] = 'J';
      charArray0[6] = 'u';
      charArray0[7] = 't';
      jSONScanner0.matchField2(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(83);
      JSONScanner jSONScanner1 = new JSONScanner("toJSON error");
      jSONScanner1.scanSymbolWithSeperator(symbolTable0, 'h');
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONScanner1.scanSymbol((SymbolTable) null);
      jSONScanner1.nextToken(59);
      assertEquals('r', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[3];
      StringReader stringReader0 = new StringReader("wve");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("j");
      JSONScanner jSONScanner1 = new JSONScanner(")}/B", 0);
      jSONScanner1.scanUUID('C');
      jSONScanner1.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ", (-803));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.skip(647L);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner1.scanDouble('F');
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      char[] charArray1 = new char[2];
      charArray1[0] = '\'';
      charArray1[1] = '\'';
      int int0 = (-3026);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" IlJG>OVD(P`P", (-3026));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - I, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(&>");
      JSONScanner jSONScanner0 = new JSONScanner(" RRIYKN");
      jSONScanner0.isBlankInput();
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.nextToken(9);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      char[] charArray0 = new char[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9Ax^]+,p", (-1));
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      char[] charArray1 = new char[2];
      charArray1[0] = '-';
      charArray1[1] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 0, 47);
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      jSONReaderScanner0.scanFieldUUID(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONScanner0.token = (-2);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '-');
      jSONReaderScanner0.scanInt('Z');
      assertEquals(47, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.nextToken(512);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONScanner0.scanFloat('|');
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)5;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)57;
      int int0 = jSONScanner0.intValue();
      assertEquals(22, jSONScanner0.token());
      assertEquals(43183, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ", (-803));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      JSONScanner jSONScanner1 = new JSONScanner("not match ", (-43130));
      jSONScanner0.scanUUID('t');
      jSONScanner1.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nul");
      jSONScanner0.tokenName();
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      jSONScanner0.matchField2(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(10);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanFloat('I');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1e?k8a5KZLlPdU*");
      jSONScanner0.isBlankInput();
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'j';
      charArray0[2] = 'e';
      charArray0[3] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'e', 125);
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^8>Ec,_O");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("mWV+O");
      StringReader stringReader0 = new StringReader("syntax");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0, 2603);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONReaderScanner1.scanEnum(class0, (SymbolTable) null, '4');
      stringReader0.ready();
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = '4';
      charArray0[2] = '=';
      charArray0[3] = 'I';
      charArray0[4] = '=';
      charArray0[5] = 'I';
      charArray0[6] = '=';
      charArray0[7] = '4';
      charArray0[8] = 'I';
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 123, (-1143));
      jSONReaderScanner3.scanInt('n');
      jSONReaderScanner1.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner2.charArrayCompare(charArray0);
      assertEquals(2603, jSONReaderScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("InternFieldNames");
      JSONScanner jSONScanner1 = new JSONScanner("0nk9co7'j", 1882);
      JSONScanner jSONScanner2 = new JSONScanner("0nk9co7'j", 0);
      jSONScanner2.scanUUID('r');
      jSONScanner1.nextIdent();
      assertEquals('n', jSONScanner1.getCurrent());
      
      jSONScanner1.floatValue();
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n+LND", (-1218));
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("n+LND", 1668);
      char char0 = '\\';
      jSONScanner0.scanString('S');
      JSONScanner jSONScanner1 = new JSONScanner("hKCjI");
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - h, info : pos 0, json : hKCjI
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ");
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47, 69);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanInt('\u0000');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(&>");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2192, 2192);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str", (-1));
      jSONScanner0.scanString('\\');
      JSONScanner jSONScanner1 = new JSONScanner("VK1S+PQ+mGswEo");
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - V, info : pos 0, json : VK1S+PQ+mGswEo
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("B^8-");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-52);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.isRef();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (byte)12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9A1^]+,");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
      assertEquals('A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = 'f';
      charArray0[2] = '|';
      charArray0[3] = 't';
      charArray0[4] = 'k';
      charArray0[5] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 127);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate(',');
      assertEquals(127, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1e?k8a5KZLlPdU*");
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFloat('G');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1e?k8a5KZLlPdU*");
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFloat('#');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VE");
      SymbolTable symbolTable0 = new SymbolTable(45);
      jSONScanner0.scanSymbol(symbolTable0);
      int int0 = Calendar.NARROW_FORMAT;
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'R';
      charArray0[2] = '<';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner1.scanSymbolWithSeperator(symbolTable0, 'l');
      jSONScanner1.nextToken(20);
      jSONScanner0.getTimeZone();
      jSONScanner1.isEnabled(4, 20);
      jSONScanner1.scanDecimal('6');
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("XqiNWqXSSWa'SHh*3Xx");
      jSONScanner0.scanLong('~');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NaN");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.subString(48, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VE");
      SymbolTable symbolTable0 = new SymbolTable(45);
      jSONScanner0.scanSymbol(symbolTable0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 45);
      jSONReaderScanner0.scanInt('P');
      JSONScanner jSONScanner1 = new JSONScanner("=/", 5465);
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '{';
      char char0 = 'J';
      charArray0[2] = 'J';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 98, 98);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 98);
      char[] charArray1 = new char[4];
      charArray1[0] = '-';
      // Undeclared exception!
      try { 
        jSONReaderScanner1.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fx=+a{AJh<J:", (-30));
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 11, 1280);
      StringReader stringReader0 = new StringReader("fx=+a{AJh<J:");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0, 0);
      jSONReaderScanner1.scanDate('N');
      JSONScanner jSONScanner0 = new JSONScanner("fx=+a{AJh<J:", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nll");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nll");
      jSONScanner0.bp = 16;
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      JSONScanner jSONScanner1 = new JSONScanner("9Ax^]+,p", (-1138));
      jSONScanner1.scanIdent();
      jSONScanner1.next();
      jSONScanner1.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("CqFGJ65[)l1`~");
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.isRef();
      JSONScanner jSONScanner0 = new JSONScanner("B^8-", 78);
      char[] charArray1 = new char[4];
      charArray1[0] = '^';
      charArray1[1] = '^';
      charArray1[2] = '^';
      charArray1[3] = '^';
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VE");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1445, 0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanDate('\'');
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.isEnabled(1301);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VE");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1445, 0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanDate('\'');
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n`ll");
      JSONScanner jSONScanner1 = new JSONScanner("n`ll");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'Bhi.v$(zU");
      jSONScanner1.next();
      jSONScanner1.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(97);
      jSONScanner1.scanSymbol(symbolTable0);
      jSONScanner1.intValue();
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '`';
      charArray0[7] = '`';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("mxV/&+erh");
      jSONScanner0.scanFloat('+');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mxV/&+erh", 114);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.putChar('+');
      JSONScanner jSONScanner1 = new JSONScanner(":(]O-.fdI:aSJl:N");
      char[] charArray1 = new char[8];
      charArray1[0] = '+';
      charArray1[1] = '+';
      charArray1[2] = '.';
      charArray1[3] = 'm';
      charArray1[4] = '+';
      charArray1[5] = '+';
      charArray1[6] = '+';
      charArray1[7] = '+';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(114, charArray1, (-956), 110);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 350, 350);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m");
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("m", 350);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner1.scanFieldDate(charArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^8>Ec,_O");
      JSONScanner jSONScanner0 = new JSONScanner("NyhG:g*`uam*W;yX");
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = '{';
      charArray0[2] = '^';
      charArray0[3] = 'Q';
      charArray0[4] = '!';
      charArray0[5] = 'S';
      charArray0[6] = '7';
      charArray0[7] = 'x';
      charArray0[8] = 'x';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-3971));
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken((-3971));
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mWV+O");
      StringReader stringReader0 = new StringReader("syntax");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("VE", 3228);
      char[] charArray0 = new char[0];
      jSONReaderScanner2.scanFieldBigInteger(charArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      JSONScanner jSONScanner1 = new JSONScanner("9Ax^]+,p", (-1138));
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0);
      jSONScanner2.nextToken(15);
      jSONScanner1.nextToken(4);
      jSONScanner0.getTimeZone();
      jSONScanner1.isEnabled(0, 0);
      jSONScanner0.next();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      JSONScanner jSONScanner1 = new JSONScanner("9Ax^]+,p", (-1138));
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[2] = 'H';
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0);
      jSONScanner2.nextToken(15);
      jSONScanner1.nextToken((int) 'H');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFieldFloatArray(charArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      JSONLexerBase.readString(charArray0, 2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",\u0000", (-584));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONScanner jSONScanner0 = new JSONScanner("+#Qm}zA4 Bdt?", (-2552));
      jSONScanner0.nextToken(2343);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!dn`ll");
      JSONScanner jSONScanner1 = new JSONScanner("el", (-3326));
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      charArray0[1] = 'R';
      charArray0[2] = '|';
      charArray0[3] = ';';
      charArray0[4] = 'G';
      charArray0[5] = 'E';
      charArray0[6] = 'U';
      charArray0[7] = 'w';
      charArray0[8] = 'Y';
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0);
      jSONScanner0.nextToken(10);
      jSONScanner1.getTimeZone();
      jSONScanner2.isEnabled(15, (-3326));
      JSONScanner jSONScanner3 = null;
      try {
        jSONScanner3 = new JSONScanner((String) null, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g!5`");
      JSONScanner jSONScanner1 = new JSONScanner("g!5`");
      jSONScanner1.scanBoolean('.');
      jSONScanner1.nextToken(0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '.';
      jSONScanner1.scanFieldInt(charArray0);
      jSONScanner1.isBlankInput();
      jSONScanner1.scanNumber();
      jSONScanner1.integerValue();
      char[] charArray1 = new char[6];
      charArray1[0] = '.';
      charArray1[1] = '.';
      charArray1[2] = '.';
      charArray1[3] = '.';
      charArray1[4] = '.';
      charArray1[5] = '.';
      jSONScanner1.scanFieldDouble(charArray1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1e?k8a5KZLlPdU*");
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = ']';
      charArray0[2] = 'U';
      charArray0[3] = 'Q';
      charArray0[4] = '+';
      charArray0[5] = 'F';
      charArray0[6] = 'S';
      charArray0[7] = '-';
      JSONLexerBase.readString(charArray0, 2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1e?k8a5KZLlPdU*", 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONScanner jSONScanner1 = new JSONScanner("nwm", 2);
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken(8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Y&", (-1937));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y&");
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'R';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 2);
      char char0 = JSONLexer.EOI;
      jSONScanner1.nextIdent();
      jSONScanner1.intValue();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NonStringKeyAsString");
      JSONScanner jSONScanner0 = new JSONScanner("9Ax^]+,p");
      char[] charArray0 = new char[0];
      jSONScanner0.isRef();
      jSONScanner0.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("9Ax^]+,p");
      jSONScanner0.scanFloat('a');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner1.scanFieldFloatArray(charArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*4Dj&/[Y~");
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(17);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 4pos 0, json : *4Dj&/[Y~
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1e?k8a5KZLlPdU*");
      JSONScanner jSONScanner1 = new JSONScanner("1e?k8a5KZLlPdU*", 0);
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '#';
      charArray0[2] = 'U';
      charArray0[3] = 'o';
      charArray0[4] = '(';
      charArray0[5] = 'q';
      charArray0[6] = 'v';
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0);
      jSONScanner1.nextToken(0);
      jSONScanner1.nextToken(4);
      JSONScanner jSONScanner3 = new JSONScanner("1e?k8a5KZLlPdU*", 0);
      jSONScanner3.scanFieldIntArray(charArray0);
      jSONScanner1.scanFieldFloatArray(charArray0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      jSONScanner3.scanStringArray(list0, 'j');
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.");
      JSONScanner jSONScanner1 = new JSONScanner("*+N", 87);
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      charArray0[6] = 'H';
      charArray0[7] = 'H';
      charArray0[8] = 'H';
      JSONScanner jSONScanner2 = new JSONScanner("java.awt.");
      jSONScanner0.nextToken(4);
      jSONScanner0.nextToken(0);
      jSONScanner2.scanFieldIntArray(charArray0);
      jSONScanner1.scanFieldFloatArray(charArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      JSONScanner jSONScanner1 = new JSONScanner("false");
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'g';
      charArray0[4] = 'U';
      charArray0[5] = '7';
      charArray0[6] = 'z';
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0);
      jSONScanner1.bytesValue();
      jSONScanner2.nextToken(62);
      jSONScanner1.nextToken(0);
      jSONScanner1.getTimeZone();
      int int0 = Calendar.DST_OFFSET;
      jSONScanner1.getCalendar();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '{';
      int int0 = (-2588);
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ");
      JSONScanner jSONScanner1 = new JSONScanner("float overflow : ", 58);
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken((-2588));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ");
      jSONReaderScanner0.scanInt('\'');
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Set<String> set0 = charset0.aliases();
      jSONReaderScanner0.scanStringArray(set0, '\'');
      jSONReaderScanner0.scanDate('n');
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.indexOf('z', 2005);
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = '=';
      charArray0[2] = '\\';
      charArray0[3] = '\"';
      charArray0[4] = 'T';
      charArray0[5] = 'K';
      charArray0[6] = 'X';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanDate('T');
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONScanner0.longValue();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1e?k8a5KZLlPdU*");
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1e?k8a5KZLlPdU*");
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanDate('6');
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("1e?k8a5KZLlPdU*", 0);
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^8>Ec,_O");
      JSONScanner jSONScanner0 = new JSONScanner("NyhG:g*`uam*W;yX");
      char[] charArray0 = new char[9];
      jSONScanner0.nextToken((-3271));
      jSONScanner0.isBlankInput();
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFieldFloatArray(charArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1e?k8a5KZLlPdU*");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1e?k8a5KZLlPdU*");
      jSONReaderScanner0.scanLong('H');
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1e?k8a5KZLlPdU*");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1e?k8a5KZLlPdU*");
      jSONScanner0.skipWhitespace();
      JSONScanner jSONScanner1 = new JSONScanner("1e?k8a5KZLlPdU*");
      char char0 = '~';
      // Undeclared exception!
      try { 
        jSONScanner1.scanDecimal('~');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mlk{Hj};o");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n0}n4j$.T>28");
      jSONReaderScanner0.scanLong('|');
      int int0 = (-501);
      char[] charArray0 = new char[4];
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = '|';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",:Y");
      jSONScanner0.nextToken((-1008));
      char[] charArray0 = new char[6];
      charArray0[1] = 't';
      charArray0[2] = 'k';
      charArray0[3] = 'L';
      charArray0[4] = '{';
      charArray0[5] = 'L';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.info();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("J+;`uX!e $R`Ug,bE9");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = '?';
      charArray0[2] = '5';
      charArray0[3] = '1';
      charArray0[4] = ',';
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, 'a');
      char char0 = File.separatorChar;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONScanner jSONScanner0 = new JSONScanner("h`", 0);
      jSONScanner0.nextIdent();
      jSONReaderScanner0.scanFieldString(charArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", (-2588));
      jSONScanner0.nextToken((-2588));
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '%';
      jSONScanner0.scanFieldLong(charArray0);
      charArray0[2] = 'L';
      charArray0[3] = '-';
      charArray0[4] = 'm';
      charArray0[5] = 'j';
      charArray0[6] = '_';
      charArray0[7] = 'Q';
      jSONScanner0.scanFieldDate(charArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken((-2588));
      jSONScanner0.setToken(1660);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("[", 65);
      jSONScanner0.scanFieldFloatArray(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(18);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("[", 65);
      jSONScanner0.scanFieldFloatArray(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("h");
      jSONScanner1.scanDecimal('T');
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFloat('R');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.nextToken(2624);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFloat('R');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanDecimal('V');
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*<8yRoyA5(MgH%w$c8");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("java");
      jSONScanner0.nextToken(2);
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1503));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.tokenName();
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      jSONScanner0.nextToken(2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 2);
      jSONReaderScanner0.stringVal();
      jSONScanner0.charAt(2);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[Q{K`7O>Jfhz+{");
      SymbolTable symbolTable0 = null;
      char char0 = '&';
      char char1 = '#';
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '#');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("nulcol");
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFloat('R');
      JSONScanner.checkDate('a', 'a', 'l', 'a', '\'', 'Q', (-1), 716);
      jSONScanner0.nextIdent();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rror");
      char char0 = File.separatorChar;
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(47);
      JSONScanner jSONScanner1 = new JSONScanner("rror", 47);
      jSONScanner0.scanNumber();
      JSONScanner jSONScanner2 = new JSONScanner("P&68t J]$S~My|Z.B", 47);
      jSONScanner2.nextToken(12);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "java.util.OptionalDouble";
      JSONScanner jSONScanner0 = new JSONScanner("java.util.OptionalDouble");
      char char0 = File.separatorChar;
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(10);
      JSONScanner jSONScanner1 = new JSONScanner("java.util.OptionalDouble", 0);
      jSONScanner0.scanNumber();
      int int0 = 1541;
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '/';
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 350, 350);
      jSONReaderScanner0.next();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.alibaba.fastjson.util.UTF8Decoder", (-921));
      jSONReaderScanner0.scanBoolean('y');
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      jSONReaderScanner1.scanFieldInt(charArray0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",:Y");
      jSONScanner0.nextToken((-1008));
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 't';
      charArray0[2] = 'k';
      charArray0[3] = 'L';
      charArray0[4] = '{';
      charArray0[5] = 'L';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.info();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanFieldUUID(charArray0);
      char char0 = 'R';
      jSONScanner0.scanFloat('R');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(10);
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFloat('R');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("&^}3jG[lY4S{");
      jSONScanner1.info();
      char[] charArray1 = new char[5];
      charArray1[0] = 'R';
      charArray1[1] = 'R';
      charArray1[2] = 'R';
      charArray1[3] = 'R';
      charArray1[4] = 'R';
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray1, 1580);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "false");
      JSONScanner jSONScanner0 = new JSONScanner("\";s]");
      jSONScanner0.getCurrent();
      char[] charArray0 = new char[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UseObjectArray");
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'q';
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.nextToken(16);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = 63;
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = '';
      charArray0[2] = 'U';
      charArray0[3] = '\\';
      charArray0[4] = '}';
      charArray0[5] = 'z';
      charArray0[6] = 'X';
      charArray0[7] = '7';
      charArray0[8] = 'R';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
