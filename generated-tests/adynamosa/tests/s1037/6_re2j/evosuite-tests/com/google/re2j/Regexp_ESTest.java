/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 12:59:16 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "W*8^z-s+8'&q`TP6|t+";
      regexp0.equals(regexp_Op0);
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int[] intArray0 = new int[0];
      regexpArray0[3].runes = intArray0;
      regexpArray0[4].max = 92;
      regexpArray0[6] = regexp0;
      regexp0.max = 15;
      regexpArray0[7] = regexp0;
      regexpArray0[7].name = "";
      regexpArray0[0].cap = 42;
      regexpArray0[7].flags = 42;
      regexp0.subs = regexpArray0;
      regexp0.op = regexp_Op0;
      regexp0.reinit();
      Regexp.Op.values();
      regexpArray0[3].max = 92;
      boolean boolean0 = regexp_Op0.isPseudo();
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean1 = regexp0.equals(regexp1);
      assertFalse(boolean1 == boolean0);
      
      Regexp regexp2 = new Regexp(regexp0.op);
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 1765;
      boolean boolean0 = regexp0.equals(regexp0);
      assertTrue(boolean0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.flags = 120119;
      String string0 = regexp0.name;
      boolean boolean0 = regexp0.equals(regexp1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2366;
      intArray0[1] = 68147;
      intArray0[2] = (-1925);
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      String string0 = regexp1.toString();
      assertEquals("[invalid char class]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.max = (-13);
      boolean boolean0 = regexp1.equals(regexp0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = 8;
      intArray0[2] = (-1165);
      regexp0.runes = intArray0;
      regexp0.cap = 21;
      regexp0.min = 2;
      boolean boolean0 = regexp0.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[1];
      regexp0.runes = intArray0;
      regexp0.toString();
      String string0 = regexp0.toString();
      assertEquals("\\x00", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = (-2010);
      regexp0.flags = (-2010);
      int int0 = regexp0.maxCap();
      assertEquals((-2010), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 2;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp1.flags = (-209);
      regexp1.equals(regexp0);
      int int0 = regexp1.maxCap();
      assertFalse(regexp1.equals((Object)regexp0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 11;
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 2;
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
      
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
      
      String string0 = regexp1.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[11];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp[] regexpArray1 = new Regexp[0];
      Regexp.Op.values();
      regexpArray0[2].subs = regexpArray1;
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      Regexp.Op.values();
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("com.google.re2j.UnicodeTables");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.com.google.re2j.UnicodeTables
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexp1.subs = regexpArray0;
      Regexp regexp3 = new Regexp(regexp0);
      Object object0 = new Object();
      regexp3.equals(object0);
      regexp3.maxCap();
      regexp0.maxCap();
      regexp3.equals(object0);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp0.reinit();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      Regexp regexp1 = new Regexp(regexp0);
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp0.maxCap();
      int int0 = regexp0.cap;
      regexpArray0[1].max = 7;
      Regexp.Op.values();
      Regexp regexp2 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp2.equals(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp0.equals(regexp_Op0);
      assertFalse(boolean0);
      
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[8] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.equals(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string0 = regexp0.toString();
      assertEquals("([^\\x00-\\x{10FFFF}])", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[8];
      intArray0[0] = 3458;
      intArray0[1] = 256;
      intArray0[2] = 2223;
      intArray0[3] = 1443;
      intArray0[4] = (-2266);
      intArray0[5] = (-1616);
      intArray0[6] = 431;
      intArray0[7] = 435;
      regexp1.runes = intArray0;
      regexp1.equals(regexp0);
      regexp1.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("MEIz<mpC`j6>ta/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.MEIz<mpC`j6>ta/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 15;
      regexp1.min = 41;
      boolean boolean0 = regexp1.equals(regexp0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int[] intArray0 = new int[0];
      regexpArray0[3].runes = intArray0;
      regexpArray0[4].max = 92;
      regexpArray0[6] = regexp0;
      regexp0.max = 15;
      regexpArray0[7] = regexp0;
      regexpArray0[7].name = "";
      regexpArray0[0].cap = 42;
      regexp0.subs = regexpArray0;
      regexp0.op = regexp_Op0;
      regexp0.reinit();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      boolean boolean0 = regexp_Op0.isPseudo();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      regexp0.maxCap();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertNotSame(regexp_OpArray1, regexp_OpArray0);
      
      boolean boolean1 = regexp0.equals(regexp0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("\"BB/6}_u>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.\"BB/6}_u>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp.Op.values();
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = (-1128);
      regexp0.cap = (-1128);
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp.Op.values();
      String string0 = regexp0.toString();
      assertEquals("(?-m:$)", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp2 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 5;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      regexp0.min = 6000;
      regexp0.flags = 6000;
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      regexp0.equals((Object) null);
      regexp0.toString();
      regexp0.equals("B");
      Regexp.Op.values();
      regexp0.toString();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      regexp1.toString();
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      regexp0.toString();
      regexp0.maxCap();
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertNotSame(regexp_OpArray1, regexp_OpArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      regexp1.toString();
      Regexp regexp2 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp2);
      assertTrue(boolean0);
      
      Regexp.Op.values();
      regexp0.toString();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.maxCap();
      regexp1.name = "";
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp0.equals(regexp1);
      regexp2.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[^x00-x{10FFFF}]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[^x00-x{10FFFF}]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Object object0 = new Object();
      regexp3.equals(object0);
      Regexp.Op.values();
      boolean boolean0 = regexp0.equals("{1K8~/>iR|[GS");
      assertFalse(boolean0);
      
      Object object1 = new Object();
      regexp0.equals(regexp2);
      regexp0.toString();
      regexp1.toString();
      regexp2.reinit();
      boolean boolean1 = regexp_Op0.isPseudo();
      regexp0.toString();
      Object object2 = new Object();
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR;
      Regexp regexp4 = new Regexp(regexp_Op2);
      Regexp regexp5 = new Regexp(regexp4);
      regexp0.equals(regexp5);
      Object object3 = new Object();
      boolean boolean2 = regexp0.equals(regexp3);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int[] intArray0 = new int[0];
      regexpArray0[3].runes = intArray0;
      regexpArray0[4].max = 92;
      regexpArray0[6] = regexp0;
      regexp0.max = 15;
      regexpArray0[7] = regexp0;
      regexpArray0[7].name = "";
      regexpArray0[0].cap = 42;
      regexp0.subs = regexpArray0;
      regexp0.op = regexp_Op0;
      regexp0.reinit();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp0.op = regexp_Op1;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp.Op regexp_Op2 = Regexp.Op.LEFT_PAREN;
      Regexp regexp3 = new Regexp(regexp_Op2);
      regexp2.reinit();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp0.equals("X@9{y\"x<o%d,&,");
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.toString();
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertNotSame(regexp_OpArray1, regexp_OpArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.equals(regexp0);
      Regexp.Op.values();
      regexp0.equals(regexp2);
      regexp0.reinit();
      regexp1.equals(regexp_Op0);
      regexp1.toString();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      regexp2.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp0.toString();
      regexp2.reinit();
      Regexp.Op regexp_Op2 = Regexp.Op.WORD_BOUNDARY;
      boolean boolean0 = regexp_Op2.isPseudo();
      regexp0.toString();
      Object object0 = new Object();
      regexp0.equals(regexp2);
      Regexp regexp3 = new Regexp(regexp_Op2);
      Regexp regexp4 = new Regexp(regexp0);
      boolean boolean1 = regexp3.equals("l");
      assertTrue(boolean1 == boolean0);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      Regexp.Op.values();
      regexp0.maxCap();
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      boolean boolean0 = regexp_Op1.isPseudo();
      Regexp.Op regexp_Op2 = Regexp.Op.CONCAT;
      Regexp.Op regexp_Op3 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op3);
      Regexp regexp3 = new Regexp(regexp1);
      boolean boolean1 = regexp2.equals(regexp_Op2);
      assertTrue(boolean1 == boolean0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 2458;
      regexp0.cap = 2458;
      int int0 = regexp0.maxCap();
      assertEquals(2458, int0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op1);
      boolean boolean0 = regexp1.equals(regexp_Op0);
      assertFalse(boolean0);
      
      regexp0.equals(regexp1);
      Regexp.Op.values();
      String string0 = regexp1.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexp0.maxCap();
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp2.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 2458;
      regexp0.cap = 2458;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int[] intArray0 = new int[0];
      regexpArray0[3].runes = intArray0;
      regexpArray0[4].max = 92;
      regexpArray0[6] = regexp0;
      regexp0.equals((Object) null);
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp1 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.maxCap();
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.equals(regexp1);
      Object object0 = new Object();
      regexp2.equals(object0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp0.op = regexp_Op1;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.subs = null;
      Object object0 = new Object();
      regexp1.equals(object0);
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Glagolitic");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Glagolitic
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[5];
      regexp1.runes = intArray0;
      intArray0[0] = 0;
      intArray0[1] = (-260);
      intArray0[2] = 19;
      intArray0[3] = 8318;
      intArray0[4] = 6;
      regexp1.runes = intArray0;
      regexp1.toString();
      Regexp.Op.values();
      regexp1.min = 6;
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp1.op = regexp_Op1;
      Regexp.Op.values();
      regexp0.equals("(?s:.)");
      regexp1.maxCap();
      regexp1.equals(regexp_Op0);
      String string0 = regexp0.toString();
      assertEquals("(?s:.)", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp2.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      int[] intArray0 = new int[5];
      regexp0.min = 686;
      intArray0[0] = 686;
      regexp0.name = "VERTICAL_BAR";
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      intArray0[1] = 2381;
      regexp0.op.isPseudo();
      intArray0[2] = 1515;
      boolean boolean0 = regexp0.op.isPseudo();
      regexp0.op.isPseudo();
      intArray0[3] = 0;
      intArray0[4] = 0;
      regexp0.runes = intArray0;
      regexp0.maxCap();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      regexp0.op.isPseudo();
      Object object0 = new Object();
      boolean boolean1 = regexp0.equals(object0);
      assertTrue(boolean1 == boolean0);
      
      regexp0.reinit();
      int int1 = regexp0.maxCap();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      regexpArray0[2].runes = null;
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[7] = regexp2;
      regexp0.subs = regexpArray0;
      regexp0.reinit();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op.values();
      regexp0.max = (-71);
      regexp_Op0.isPseudo();
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      regexp0.reinit();
      regexp_Op0.isPseudo();
      regexp0.maxCap();
      String string0 = regexp0.toString();
      assertEquals("LEFT_PAREN", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      boolean boolean0 = regexp_Op0.isPseudo();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      regexp0.min = 6000;
      regexp0.name = "!fwQ9tuyYNTXN#;b";
      regexp0.flags = 44;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 2458;
      regexp0.cap = 2458;
      regexp0.maxCap();
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.equals(regexp_Op0);
      regexp0.equals(regexp1);
      regexp1.equals(regexp_Op1);
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertNotSame(regexp_OpArray1, regexp_OpArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp1.subs = regexpArray0;
      regexp1.equals("");
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 797;
      intArray0[4] = 2073;
      regexp1.runes = intArray0;
      regexp1.maxCap();
      regexp1.cap = 0;
      regexp1.max = 0;
      regexp1.equals(regexp_Op0);
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp1.equals("z");
      regexp0.cap = (-1128);
      boolean boolean0 = regexp1.equals(regexp_Op0);
      assertFalse(boolean0);
      
      Regexp.Op.values();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      regexp1.maxCap();
      boolean boolean1 = regexp_Op0.isPseudo();
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp regexp3 = new Regexp(regexp2);
      boolean boolean2 = regexp1.equals(regexp3);
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.subs = null;
      regexp0.min = (-2230);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = null;
      regexp1.runes = null;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 41;
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[4];
      regexp1.runes = intArray0;
      regexp1.equals(regexp_Op0);
      regexp1.reinit();
      intArray0[0] = 3891;
      regexp0.reinit();
      intArray0[1] = 0;
      regexp1.max = 3891;
      Object object0 = new Object();
      regexp0.equals(object0);
      intArray0[2] = 0;
      intArray0[3] = 0;
      regexp0.cap = 0;
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      regexp0.op = regexp_Op1;
      regexp0.runes = intArray0;
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?-s:.)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?-s:.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[0] = 2312;
      intArray0[1] = 1932;
      intArray0[2] = 616;
      intArray0[3] = (-2484);
      intArray0[4] = (-617);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-2072);
      regexp0.runes = intArray0;
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = (-3092);
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.toString();
      Regexp[] regexpArray0 = new Regexp[0];
      regexp2.subs = regexpArray0;
      regexp1.equals(regexp2);
      regexp_Op0.isPseudo();
      regexp2.equals("$");
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp2.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("B7|>pRGjjV)$J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.B7|>pRGjjV)$J
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Regexp regexp0 = null;
      try {
        regexp0 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }
}
