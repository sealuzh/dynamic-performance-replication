/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 15:39:45 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", 9);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = JSONObject.valueToString(jSONObject0, 9, 3);
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong(" ;9/)q4r.C6{GFt$");
      assertEquals(0L, long0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~=Csb!#{78vaDGorQd$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~=Csb!#{78vaDGorQd$
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put((String) null, (String) null);
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = JSONObject.valueToString(hashMap0);
      assertNull(string1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("{}", (Object) jSONArray0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONArray jSONArray1 = (JSONArray)jSONObject0.remove("{}");
      assertNotNull(jSONArray1);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONArray1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      assertNotNull(jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.optString("A JSONObject text must begin with '{'", (String) null);
      assertNull(string0);
      assertEquals(5, stringArray0.length);
      assertFalse(linkedList0.contains("A JSONObject text must begin with '{'"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", 7);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      long long0 = jSONObject1.optLong("");
      assertEquals(7L, long0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", 46);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      int int0 = jSONObject1.optInt("");
      assertEquals(46, int0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@0000000003", (double) (short) (-15557));
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      int int0 = jSONObject1.optInt("java.lang.Short@0000000003");
      assertEquals((-15557), int0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", 2565.4873);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      double double0 = jSONObject1.optDouble("");
      assertEquals(2565.4873, double0, 0.01);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject1 = jSONObject0.put(">Z,9ocOp-ngwqataYe", (Collection) linkedList0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt(">Z,9ocOp-ngwqataYe");
      assertNotNull(jSONArray0);
      assertFalse(linkedList0.contains(jSONArray0));
      assertEquals(1, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, jSONArray0.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Double double0 = new Double(7.263260629921023);
      assertNotNull(double0);
      assertEquals(7.263260629921023, (double)double0, 0.01);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.length();
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("getnames", 16);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject1.has("getnames");
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", 9);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject1.getString("");
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (-5741L));
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      long long0 = jSONObject0.getLong("] is not a JSONArray.");
      assertEquals((-5741L), long0);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("EV~b*[=E*F>T{)_", jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.getJSONObject("EV~b*[=E*F>T{)_");
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject1 = jSONObject0.put(" ;9/)q4r.C6{GFt$", (Collection) linkedList0);
      assertNotNull(jSONObject1);
      assertFalse(linkedList0.contains(" ;9/)q4r.C6{GFt$"));
      assertEquals(1, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.getJSONArray(" ;9/)q4r.C6{GFt$");
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@0000000004", (double) (short) (-15557));
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      int int0 = jSONObject1.getInt("java.lang.Short@0000000004");
      assertEquals((-15557), int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("zSkdwq0NJIY5}v\bBy+", 0.0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      double double0 = jSONObject0.getDouble("zSkdwq0NJIY5}v\bBy+");
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", 9);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      double double0 = jSONObject1.getDouble("");
      assertEquals(9.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate(".", (Object) null);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0, 0, 0);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.toString(69, 0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is notha JSONObIcz.");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = jSONObject0.toString((-504));
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      Object object0 = jSONObject0.remove("\"`f~uBsq>mCMa[4");
      assertNull(object0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("getsplit", object0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject1.optBoolean("");
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Byte byte0 = new Byte((byte)43);
      assertNotNull(byte0);
      assertEquals((byte)43, (byte)byte0);
      
      Object object0 = hashMap0.put(byte0, jSONObject0);
      assertNull(object0);
      assertEquals(0, jSONObject0.length());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("kOp%j!Lq}x", (Map) hashMap0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONObject jSONObject1 = jSONObject0.put("isreplaceAll", object0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ")^wU2uF3ne/VvHy");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put(")^wU2uF3ne/VvHy", (-1446L));
      assertNotNull(jSONObject1);
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      double double0 = jSONObject0.optDouble(")^wU2uF3ne/VvHy");
      assertEquals((-1446.0), double0, 0.01);
      assertEquals(4, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      long long0 = jSONObject1.getLong("");
      assertEquals(0L, long0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.optString((String) null, "gettoHexString");
      assertNotNull(string0);
      assertEquals("gettoHexString", string0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = jSONObject0.optString("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.optString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong((String) null, 0L);
      assertEquals(0L, long0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong("", (-667L));
      assertEquals((-667L), long0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("GHI", (-10400458));
      assertEquals((-10400458), int0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Byte byte0 = new Byte((byte)90);
      assertNotNull(byte0);
      assertEquals((byte)90, (byte)byte0);
      
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.optInt((String) null, (int) (byte)90);
      assertEquals(5, stringArray0.length);
      assertEquals(90, int0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("", 91);
      assertEquals(91, int0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("getnames", (double) 16);
      assertEquals(16.0, double0, 0.01);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("", (double) (-989));
      assertEquals((-989.0), double0, 0.01);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.optBoolean("3T? bb?L", false);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Object object0 = jSONObject0.opt(">Z,9ocOp-ngwqataYe");
      assertNull(object0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.isNull("/P|_?p!pTo");
      assertTrue(boolean0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("java.lang.Float@0000000001", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.has("");
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getString("vH&r@lOx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vH&r@lOx\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("KaxDavdw)7#cW", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "f@9}QG\"Jnp#=qpX^D4");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("T dZl", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = JSONObject.doubleToString(94.3475273977);
      assertNotNull(string0);
      assertEquals("94.3475273977", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject1 = jSONObject0.append("5}d`DoD;N2t!_3<@=", object0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("[", object0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      try { 
        JSONObject.valueToString(double0, 34, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("p^bLR8ym8", (Collection) linkedList0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.put("On$,CJwp[KQj", (Collection) linkedList0);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONObject2.length());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 1945, 8448);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      assertNotNull(float0);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      try { 
        jSONObject0.putOpt("0", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
      
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.put((String) null, 2028L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.put((String) null, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(118);
      assertNotNull(integer0);
      assertEquals(118, (int)integer0);
      
      Integer integer1 = hashMap0.put(object0, integer0);
      assertNull(integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "(N");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = jSONObject0.toString(1668);
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
      
      // Undeclared exception!
      jSONObject0.getJSONArray(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double double0 = new Double(14.042981974078826);
      assertNotNull(double0);
      assertEquals(14.042981974078826, (double)double0, 0.01);
      
      JSONObject jSONObject0 = new JSONObject(double0);
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = jSONObject0.toString(8, 8);
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("gee}pt", jSONObject0);
      jSONObject0.toString((-309), (-309));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-989), 3);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(662, 4834);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = JSONObject.quote("] is not a Boolean.");
      assertEquals("\"] is not a Boolean.\"", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "] is not a number.");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("istoString", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("java.lang.Short@0000000004", (double) (short) (-15557));
      String string0 = jSONObject0.optString("java.lang.Short@0000000004", (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Float float0 = new Float((double) (-1718));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer integer0 = new Integer((-2835));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("JSONObject[", "JSONObject[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONException", jSONObject0);
      JSONObject jSONObject2 = (JSONObject)jSONObject1.get("wheel.json.JSONException");
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("java.lang.Double@0000000001", stringArray0);
      int int0 = jSONObject0.optInt("java.lang.Double@0000000001", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double double0 = new Double(7.263260629921023);
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("f@9}QG\"Jnp#=qpX^D4", (long) 62714);
      assertEquals(62714L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer((-1338));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.remove((String) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "B'1l%");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      jSONObject1.put("] is not a Boolean.", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = JSONObject.valueToString(linkedList0, 66, 66);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = JSONObject.valueToString(hashMap0, 24, 583);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 1323, 1323);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "istoOctlGString");
      // Undeclared exception!
      jSONObject0.toString(1556);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put(">Z,9ocOp-ngwqataYe", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("] is not a JSONArray.", jSONArray0);
      String string0 = JSONObject.valueToString(jSONObject0, (-54582745), (-54582745));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ">l. q&HQA:v%6Nuz");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Float float0 = Float.valueOf((float) 120);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.quote(")^wU2uF3ne/VvHy");
      assertEquals("\")^wU2uF3ne/VvHy\"", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = JSONObject.quote("\"$GL.HSY</_n#]g-T");
      assertEquals("\"\\\"$GL.HSY<\\/_n#]g-T\"", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JSONObject.quote("\f");
      assertEquals("\"\\f\"", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      String string0 = jSONObject1.optString("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      jSONObject0.put("gee}pt", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("gee}pt");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("DK0fo9kD8QjZ-?@9aB<");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("null", 1L);
      double double0 = jSONObject1.optDouble("null", (-1839.0));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Double double0 = new Double((-923.28383209418));
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("On$,CJwp[KQj", (Collection) linkedList0);
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0, 1, (-54582745));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject0.append("-909.42031", jSONArray0);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("-909.42031");
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 2928.67);
      long long0 = jSONObject1.getLong("");
      assertEquals(2928L, long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("\"h", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("\"h");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("EV~b*[=E*F>T{)_", 1408);
      try { 
        jSONObject0.getJSONObject("EV~b*[=E*F>T{)_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"EV~b*[=E*F>T{)_\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("5}d`DoD;N2t!_3<@=", jSONObject0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("5}d`DoD;N2t!_3<@=");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("5}d`DoD;N2t!_3<@=", "5}d`DoD;N2t!_3<@=");
      try { 
        jSONObject0.getJSONArray("5}d`DoD;N2t!_3<@=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5}d`DoD;N2t!_3<@=\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 9);
      int int0 = jSONObject1.getInt("");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put(">Z,9o4cOp-ngwOataYe", (Collection) linkedList0);
      try { 
        jSONObject1.getInt(">Z,9o4cOp-ngwOataYe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">Z,9o4cOp-ngwOataYe\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("true", "true");
      boolean boolean0 = jSONObject0.getBoolean("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[", true);
      boolean boolean0 = jSONObject0.getBoolean("[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("false", "false");
      boolean boolean0 = jSONObject0.getBoolean("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.putOpt("' and instead saw '", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.getBoolean("' and instead saw '");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("wheel.json.JSONArray", "isformat");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-909.42031));
      assertEquals("-909.42031", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-54582745));
      assertEquals("-5.4582745E7", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 9);
      Long long0 = new Long(9);
      try { 
        jSONObject0.append("", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("0", "0");
      jSONObject0.accumulate("0", "0");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-39.99890966597733));
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      JSONObject jSONObject1 = jSONObject0.accumulate("3[B", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(70);
      JSONObject jSONObject1 = jSONObject0.accumulate("[", integer0);
      try { 
        jSONObject1.getBoolean("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("5}d`DoD;N2t!_3<@=", jSONObject0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      jSONObject1.accumulate("5}d`DoD;N2t!_3<@=", jSONArray0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("\" of \"", stringArray0);
      String string0 = jSONObject0.toString(0, (-575));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      JSONObject jSONObject1 = jSONObject0.put("0", (Collection) null);
      jSONObject1.optJSONArray("0");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n            \"java.lang.String@0000000004\": java.lang.Integer@0000000005,\n            \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n   }");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{cG$3Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {cG$3Z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 9);
      boolean boolean0 = jSONObject1.isNull("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("vW", (-734));
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("vW");
      assertEquals((-734.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("*5Qzbp]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("L&mijS<");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Boolean.", (Map) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"!#<K3+CwP>fd=Zg", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put(">Z,9o4cOp-ngwqataYe", (Collection) linkedList0);
      jSONObject1.append(">Z,9o4cOp-ngwqataYe", ">Z,9o4cOp-ngwqataYe");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }
}
