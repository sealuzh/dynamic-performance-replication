/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:28:28 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CheckClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.misc.InputMappedClassifier;
import weka.clusterers.SimpleKMeans;
import weka.core.Capabilities;
import weka.core.CheckScheme;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.Utils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckClassifier_ESTest extends CheckClassifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleOnlyClass(true, true, true, false, false, 87);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '87' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, true, true, true, true, true, 120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '120' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(true, true, true, true, true, true, 128);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '128' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(false, true, false, false, false, false, (-72));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-72' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(true, false, false, true, false, false, 10, 10);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '10' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(true, true, true, true, false, false, 122);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '122' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, true, true, false, true, false, 10);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '10' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, true, true, true, false, true, 62);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '62' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(false, false, false, true, false, true, (-78), 65);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-78' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(false, false, false, false, true, false, 10, false, false, 10);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '10' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 103;
      boolean boolean0 = true;
      boolean boolean1 = true;
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean2 = false;
      boolean boolean3 = true;
      boolean boolean4 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(false, true, true, true, true, true, 103, false, true, 103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '103' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor((-3620.76));
      checkClassifier0.setClassifier(multiClassClassifierUpdateable0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(true, true, false, false, true, true, 27, false, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '27' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor((-36.25309576556496));
      checkClassifier0.setClassifier(multiClassClassifierUpdateable0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      CheckClassifier checkClassifier2 = new CheckClassifier();
      checkClassifier1.getOptions();
      boolean[] booleanArray0 = checkClassifier1.declaresSerialVersionUID();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(true, true, true, true, false, true, 0, 557);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Index: 557, Size: 5
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, true, true, true, true, true, 3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getRevision();
      BayesNet bayesNet0 = new BayesNet();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, true, true, true, true, true, 1164);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1164' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.testToString();
      checkClassifier0.testToString();
      Utils.SMALL = 0.0;
      checkClassifier0.canHandleNClasses(false, false, true, false, false, true, 34);
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.getRevision();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AbstractClassifier.makeCopy(adaBoostM1_0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(false, false, true, true, false, true, 23);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '23' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, true, false, false, true, 1687, true, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1687' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor((-3620.76));
      checkClassifier0.setClassifier(multiClassClassifierUpdateable0);
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(true, false, false, true, true, true, 0, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, false, false, true, false, 10, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '10' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ewm6Mrb1|Q6O[@wTTX";
      stringArray0[1] = "\tThe file to store the output in, instead of outputting it on stdout.\n\tGets ignored if the supplied path is a directory.\n\t(default: .)";
      stringArray0[2] = "AmA-V]";
      stringArray0[3] = "";
      stringArray0[4] = ".ng";
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, false, false, true, true, true, 125);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '125' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, false, true, true, false, false, 10);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '10' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, true, false, false, false, false, 10);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '10' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.updateableClassifier();
      checkClassifier0.setNumInstances((-446));
      checkClassifier0.setNumString((-216));
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, false, false, false, false, (-216), true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-216' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      checkClassifier0.setPostProcessor((CheckScheme.PostProcessor) null);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(false, true, true, true, false, true, 75);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '75' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor((-3620.76));
      checkClassifier0.setClassifier(multiClassClassifierUpdateable0);
      checkClassifier0.datasetIntegrity(false, false, false, false, false, false, 1, false, false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(0.0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      checkClassifier0.setClassifier((Classifier) null);
      multiClassClassifierUpdateable0.toString();
      multiClassClassifierUpdateable0.setDebug(false);
      checkClassifier0.testToString();
      checkClassifier1.weightedInstancesHandler();
      checkClassifier1.getRevision();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleNClasses(false, false, false, false, false, true, 387);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getRevision();
      checkClassifier0.canHandleNClasses(true, true, true, false, false, false, 30);
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.getRevision();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AbstractClassifier.makeCopy(adaBoostM1_0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String string0 = CostMatrix.FILE_EXTENSION;
      BayesNet bayesNet0 = new BayesNet();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, true, false, false, true, 1164);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1164' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, true, false, true, true, false, (-1255));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1255' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, false, true, false, true, true, 1495, true, false, 1495);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1495' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CheckClassifier checkClassifier0 = new CheckClassifier();
          String[] stringArray0 = new String[1];
          stringArray0[0] = "";
          checkClassifier0.setOptions(stringArray0);
          boolean boolean0 = false;
          // Undeclared exception!
          try { 
            checkClassifier0.canHandleMissing(false, true, false, false, false, true, 2362, true, true, 24);
            fail("Expecting exception: Error");
          
          } catch(Error e) {
             //
             // Error setting up for tests: Attribute type '2362' unknown!
             //
             verifyException("weka.classifiers.CheckClassifier", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = false;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "W5;^1zC";
      checkClassifier0.weightedInstancesHandler();
      stringArray0[2] = "NrdO:2[oZi#4";
      stringArray0[3] = "iOX<sTxC-xL&";
      CheckClassifier.main(stringArray0);
      int int0 = 114;
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, false, false, false, false, false, 114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '114' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      String[] stringArray0 = checkClassifier1.getOptions();
      checkClassifier0.setOptions(stringArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CheckClassifier checkClassifier0 = new CheckClassifier();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "@xey22yo6`t";
      stringArray0[2] = "I";
      stringArray0[3] = "+Ib\"O?g6fJS:7";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      inputMappedClassifier0.setOptions(stringArray0);
      checkClassifier0.setClassifier(inputMappedClassifier0);
      checkClassifier0.setNumNumeric((-3815));
      String[] stringArray1 = checkClassifier0.getOptions();
      checkClassifier0.setOptions(stringArray1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, false, false, true, true, true, 120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '120' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor((-720.553309));
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.datasetIntegrity(false, true, true, true, true, false, 3, false, false);
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.weightedInstancesHandler();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(0.0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      multiClassClassifierUpdateable0.setDebug(false);
      checkClassifier1.datasetIntegrity(true, true, true, false, false, false, 1, false, false);
      checkClassifier1.listOptions();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      checkClassifier0.setOptions(stringArray0);
      checkClassifier0.canHandleNClasses(true, false, false, false, false, false, 3261);
      checkClassifier0.updatingEquality(false, false, false, false, true, true, 3);
      checkClassifier0.declaresSerialVersionUID();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(0.0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.setClassifier(multiClassClassifierUpdateable0);
      checkClassifier0.datasetIntegrity(true, true, false, true, true, false, 3, true, true);
      checkClassifier1.canHandleNClasses(true, true, true, true, false, false, 3);
      checkClassifier0.getOptions();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckClassifier.main((String[]) null);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.canHandleMissing(false, true, true, true, false, false, 3, false, false, 3);
      checkClassifier1.getOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, false, false, false, true, false, 10);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '10' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumNumeric(120);
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, true, true, true, false, true, 120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '120' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      checkClassifier0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, false, false, true, false, 120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '120' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, true, true, false, true, true, 3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(0.0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.updatingEquality(true, true, true, false, false, false, 1);
      checkClassifier0.setClassifier(multiClassClassifierUpdateable0);
      CheckClassifier checkClassifier2 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable1.setDebug(true);
      checkClassifier1.listOptions();
      checkClassifier2.testToString();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      checkClassifier0.setClassifier((Classifier) null);
      checkClassifier0.testToString();
      checkClassifier0.listOptions();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canHandleZeroTraining(false, false, false, false, false, false, 0);
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.setNumNumeric(0);
      checkClassifier0.updateableClassifier();
      checkClassifier0.canTakeOptions();
      checkClassifier0.getOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, true, false, true, true, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumDate((-240));
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.canTakeOptions();
      CheckClassifier checkClassifier2 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier2.correctBuildInitialisation(false, true, true, true, false, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, false, true, false, false, true, 3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, true, false, false, true, 3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.correctBuildInitialisation(false, true, false, false, false, true, 3);
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.weightedInstancesHandler();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(0.0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.setClassifier(multiClassClassifierUpdateable0);
      checkClassifier1.datasetIntegrity(true, true, true, true, false, false, 2, true, false);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable1.setDebug(true);
      checkClassifier0.testToString();
      checkClassifier0.listOptions();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumDate((-240));
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.canTakeOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(false, true, false, false, false, true, 4, 1752);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Index: 1752, Size: 1
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      int int0 = 3;
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, true, false, true, false, true, 3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, false, false, false, true, true, 359);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '359' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(0.0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = true;
      int int0 = 44;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, false, true, true, true, true, 44);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '44' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 3;
      CheckClassifier checkClassifier1 = new CheckClassifier();
      int int1 = 92;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        checkClassifier1.instanceWeights(true, true, false, true, false, true, 92);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '92' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(0.0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.setClassifier(multiClassClassifierUpdateable0);
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        checkClassifier1.instanceWeights(true, true, true, true, false, false, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Base classifier must be updateable!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.setClassifier((Classifier) null);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.toString();
      multiClassClassifierUpdateable0.setDebug(false);
      checkClassifier0.testToString();
      checkClassifier1.weightedInstancesHandler();
      checkClassifier0.getRevision();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleNClasses(false, false, true, false, false, false, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: / by zero
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(2);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.updatingEquality(true, true, true, true, false, false, 1);
      checkClassifier0.setClassifier(multiClassClassifierUpdateable0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      try { 
        checkClassifier1.makeTestDataset(2, (-1959), 3, (-185), 2, 0, 0, 0, 3, 1474, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -179
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(0.0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.canTakeOptions();
      checkClassifier0.instanceWeights(false, true, true, false, false, false, 0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      CheckClassifier checkClassifier2 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      checkClassifier0.listOptions();
      checkClassifier1.testToString();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(0.0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.setClassifier(multiClassClassifierUpdateable0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      CheckClassifier checkClassifier2 = new CheckClassifier();
      checkClassifier2.setNumDate(1);
      CheckClassifier checkClassifier3 = new CheckClassifier();
      checkClassifier3.getRevision();
      checkClassifier0.declaresSerialVersionUID();
      CheckClassifier checkClassifier4 = new CheckClassifier();
      checkClassifier4.instanceWeights(false, true, false, false, false, true, 1);
      checkClassifier4.canTakeOptions();
      CheckClassifier checkClassifier5 = new CheckClassifier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&F");
      checkClassifier5.canHandleClassAsNthAttribute(true, true, true, false, false, false, 2, 0);
      checkClassifier1.canTakeOptions();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(0.0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      checkClassifier0.setClassifier((Classifier) null);
      multiClassClassifierUpdateable0.toString();
      multiClassClassifierUpdateable0.setDebug(false);
      checkClassifier0.testToString();
      checkClassifier1.weightedInstancesHandler();
      checkClassifier1.getRevision();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, false, true, false, true, false, 2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: No model classifier set
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(0.0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.canTakeOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      checkClassifier0.datasetIntegrity(true, false, true, true, true, false, 3, true, true);
      multiClassClassifierUpdateable0.setDebug(false);
      checkClassifier1.listOptions();
      checkClassifier1.getOptions();
      checkClassifier0.doTests();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte) (-47);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      boolean boolean0 = false;
      checkClassifier0.canHandleZeroTraining(false, false, false, false, false, false, 0);
      checkClassifier0.declaresSerialVersionUID();
      int int0 = 0;
      checkClassifier0.setNumNumeric(0);
      checkClassifier0.updateableClassifier();
      checkClassifier0.canTakeOptions();
      checkClassifier0.getOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, false, false, false, false, false, 2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: weka.classifiers.rules.ZeroR: Cannot handle string class!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      checkClassifier0.setClassifier((Classifier) null);
      multiClassClassifierUpdateable0.toString();
      checkClassifier0.getOptions();
      multiClassClassifierUpdateable0.setDebug(false);
      checkClassifier0.testToString();
      checkClassifier1.weightedInstancesHandler();
      checkClassifier1.getRevision();
      checkClassifier1.doesntUseTestClassVal(false, false, true, true, false, false, 0);
      try { 
        checkClassifier1.makeTestDataset(31, 17, 0, (-1113), 0, 31, 17, 1299, 3699, 3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1064
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
