/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 23:29:56 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import org.apache.derby.iapi.sql.depend.ProviderList;
import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
import org.apache.derby.iapi.store.access.Qualifier;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.GenerationClauseNode;
import org.apache.derby.impl.sql.compile.InsertNode;
import org.apache.derby.impl.sql.execute.BaseActivation;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.commons.ErrorHandler;
import org.databene.commons.Level;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.DBExecutionResult;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.databene.jdbacl.model.TableContainerSupport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBArray;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBPreparedStatement;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.command.dml.RunScriptCommand;
import org.h2.engine.ConnectionInfo;
import org.h2.engine.Database;
import org.h2.engine.Session;
import org.h2.engine.SessionRemote;
import org.h2.engine.User;
import org.h2.jdbc.JdbcConnection;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.jdbc.jdbcResultSet;
import org.hsqldb.jdbc.jdbcStatement;
import org.hsqldb.jdbcDriver;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.postgresql.jdbc4.Jdbc4Connection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "b8450018-0103-0e39-b8e7-00000010f010";
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("b8450018-0103-0e39-b8e7-00000010f010", false, true, false, false, "b8450018-0103-0e39-b8e7-00000010f010", false, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'b8450018-0103-0e39-b8e7-00000010f010.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(64);
      String string0 = "}BSJH9TJI8H!\\'~GB7";
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("Using driver ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'Using driver .env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/databene/.>=lZ54!xnk|9AGl.env.properties");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-81);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string0 = "x(P/ fS ;<3T;]inmC";
      DBUtil.available(".>=lZ54!xnk|9AGl", ".>=lZ54!xnk|9AGl", "x(P/ fS ;<3T;]inmC", ".>=lZ54!xnk|9AGl");
      // Undeclared exception!
      try { 
        DBUtil.connect(".>=lZ54!xnk|9AGl", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBUtil.available("F", "s/1&|V", "s/1&|V", "s/1&|V");
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("F", "s/1&|V", "s/1&|V", "s/1&|V");
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting s/1&|V failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "O!*6";
      DBUtil.existsEnvironment("O!*6");
      RunScriptCommand runScriptCommand0 = null;
      try {
        runScriptCommand0 = new RunScriptCommand((Session) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.command.Prepared", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "=>ElL]I%G9iXo)=]";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=>ElL]I%G9iXo)=]");
      TableContainer tableContainer0 = new TableContainer("Connecting the database failed silently - probably due to wrong driver (", defaultDBTable0);
      tableContainer0.getSchema();
      defaultDBTable0.setSchema((DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getTargetVTI();
      // Undeclared exception!
      try { 
        DBUtil.getStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBUtil.available(".>=lZ54!xnk|9AGl", ".>=lZ54!xnk|9AGl", "x(P/ fS ;<3T;]inmC", ".>=lZ54!xnk|9AGl");
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet((long) 1041, 1041);
      DBUtil.close((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBUtil.getOpenResultSetCount();
      String string0 = "Connected to ";
      Class<DBUtil> class0 = DBUtil.class;
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("Connected to ", class0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<jdbcStatement> class0 = jdbcStatement.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      ErrorHandler errorHandler1 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript("AAy,;yS2Qm@i", (Connection) null, true, errorHandler1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "Database query failed: ";
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      Level level0 = Level.error;
      ErrorHandler.setDefaultLevel(level0);
      Level level1 = Level.fatal;
      ErrorHandler.setDefaultLevel(level1);
      Level level2 = Level.error;
      ErrorHandler.setDefaultLevel(level2);
      // Undeclared exception!
      try { 
        DBUtil.runScript("Database query failed: ", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBUtil.resetMonitors();
      String string0 = null;
      try { 
        DBUtil.connect((String) null, "updateNClob(int, NClob)", (String) null, "", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBUtil.available(".>=lZ54!xnk|9AGl", ".>=lZ54!xnk|9AGl", ".>=lZ54!xnk|9AGl", ".>=lZ54!xnk|9AGl");
      DBUtil.checkReadOnly(".>=lZ54!xnk|9AGl", false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      GenerationClauseNode generationClauseNode0 = new GenerationClauseNode();
      generationClauseNode0.getAuxiliaryProviderList();
      fBArray0.getResultSet((-1L), 1, (Map) null);
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileUtil.getDefaultInstance();
      String string0 = "--wUj=$uLfUw3^ZPM%";
      FKConstraintDefinitionNode fKConstraintDefinitionNode0 = new FKConstraintDefinitionNode();
      fKConstraintDefinitionNode0.getProperties();
      jdbcDriver.getConnection("--wUj=$uLfUw3^ZPM%", (Properties) null);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "--wUj=$uLfUw3^ZPM%", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: --wUj=$uLfUw3^ZPM%
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Connection connection0 = null;
      String string0 = "RT<i&_$tX#";
      boolean boolean0 = false;
      String string1 = null;
      try { 
        DBUtil.getMetaData((Connection) null, "RT<i&_$tX#", "RT<i&_$tX#", true, true, false, false, (String) null, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Connection connection0 = null;
      boolean boolean0 = true;
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      DBUtil.close((Statement) null);
      String string0 = "XSAS1.S";
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      String string1 = "";
      // Undeclared exception!
      try { 
        errorHandler0.handleError("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.databene.commons.ErrorHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "CA";
      DBUtil.escape("CA");
      Class<DBSchema> class0 = DBSchema.class;
      int int0 = 0;
      InsertNode insertNode0 = new InsertNode();
      IndexRowGenerator[] indexRowGeneratorArray0 = new IndexRowGenerator[1];
      boolean boolean0 = false;
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 3;
      intArray0[6] = 0;
      insertNode0.indicesToMaintain = indexRowGeneratorArray0;
      intArray0[7] = 1;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      IndexRowGenerator indexRowGenerator0 = new IndexRowGenerator("CA", false, false, intArray0, booleanArray0, 1);
      indexRowGeneratorArray0[0] = indexRowGenerator0;
      insertNode0.getSPSName();
      insertNode0.indicesToMaintain = indexRowGeneratorArray0;
      Properties properties0 = insertNode0.targetProperties;
      Jdbc4Connection jdbc4Connection0 = null;
      try {
        jdbc4Connection0 = new Jdbc4Connection("qL@", 0, "CA", "qL@", (Properties) null, "qL@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.postgresql.jdbc2.AbstractJdbc2Connection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      FileUtil.getDefaultInstance();
      jdbcDriver.getConnection("--Database query failed:", (Properties) null);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "--Database query failed:", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      Level level0 = Level.error;
      ErrorHandler.setDefaultLevel(level0);
      Level level1 = Level.fatal;
      ErrorHandler.setDefaultLevel(level1);
      Level level2 = Level.error;
      ErrorHandler.setDefaultLevel(level2);
      DBUtil.runScript("--", (Connection) null, true, errorHandler0);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("--", (DBTable) null, (DBDataType) null, integer0);
      Integer.sum(0, 203);
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<DBForeignKeyConstraint> class0 = DBForeignKeyConstraint.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("--e> DVwr5^D<TA", (Connection) null, true, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultSet resultSet0 = null;
      // Undeclared exception!
      try { 
        DBUtil.currentLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<jdbcResultSet> class0 = jdbcResultSet.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("Error closing connection", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorHandler errorHandler0 = new ErrorHandler("org.databene.jdbacl.DBUtil");
      // Undeclared exception!
      try { 
        DBUtil.runScript("bN", "bN", (Connection) null, true, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: bN
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = true;
      DBUtil.assertAllDbResourcesClosed(true);
      String string0 = "select count(*) from ";
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.query("select count(*) from ", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow(" statement(s)", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "Xoj:50t_j.wj !3 Y~f";
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("Xoj:50t_j.wj !3 Y~f", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl/bN");
      DBUtil.close((Connection) null);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".main");
      // Undeclared exception!
      try { 
        DBUtil.parseResultSet((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<DBForeignKeyConstraint> class0 = DBForeignKeyConstraint.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      List<Object[]> list0 = DBUtil.parseResultSet(simpleResultSet0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBUtil.available(".>=lZ54!xnk|9AGl", ".>=lZ54!xnk|9AGl", ".>=lZ54!xnk|9AGl", ".>=lZ54!xnk|9AGl");
      DBCatalog dBCatalog0 = new DBCatalog(".>=lZ54!xnk|9AGl");
      DBSchema dBSchema0 = new DBSchema(".>=lZ54!xnk|9AGl", dBCatalog0);
      List<DBTable> list0 = DBUtil.dependencyOrderedTables(dBSchema0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ProviderList providerList0 = new ProviderList();
      FBArray fBArray0 = new FBArray();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Object[] objectArray0 = DBUtil.nextLine(simpleResultSet0);
      assertNull(objectArray0);
  }
}
