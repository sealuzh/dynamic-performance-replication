/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 14:17:56 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.net.URI;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.iapi.types.XML;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.value.Value;
import org.h2.value.ValueArray;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("o%[2|_No!4awj#", (String[]) null, "o%[2|_No!4awj#", "o%[2|_No!4awj#", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ", ";
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", ";
      stringArray0[1] = ", ";
      stringArray0[2] = ", ";
      stringArray0[3] = ", ";
      stringArray0[4] = ", ";
      SQLUtil.join(", ", ", ", stringArray0, ", ", ", ", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ", ");
      int int0 = 605;
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = ',';
      charArray0[2] = 'Y';
      charArray0[3] = 'k';
      charArray0[4] = ']';
      charArray0[5] = 'C';
      charArray0[6] = '6';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(605, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 605
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
      
      String string1 = SQLUtil.join("%N$", "%N$", stringArray0, "2e+-%{AQ\"|3{r2%d$9Q", "2e+-%{AQ\"|3{r2%d$9Q", stringArray0);
      assertEquals("%N$ join 2e+-%{AQ\"|3{r2%d$9Q as 2e+-%{AQ\"|3{r2%d$9Q on %N$.null = 2e+-%{AQ\"|3{r2%d$9Q.null", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("f", true);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("f");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.removeComments(".gph t@icnh]=~l");
      stringArray0[0] = ".gph t@icnh]=~l";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(".gph t@icnh]=~l = '.gph t@icnh]=~l'", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      // Undeclared exception!
      try { 
        dBSchema0.getDatabase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBSchema", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XML xML0 = new XML();
      xML0.returnStream();
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string1 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("-s7#Z-^9i?Fd", "-s7#Z-^9i?Fd", (VersionNumber) null);
      defaultDatabase0.getTable("-s7#Z-^9i?Fd", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-s7#Z-^9i?Fd", (DBTable) null, (-29), "-s7#Z-^9i?Fd");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("-S7#Z-^9I?FD", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("l<8yvYz$m");
      DBCatalog dBCatalog0 = new DBCatalog("org.databene.jdbacl.SQLUtil");
      DBSchema dBSchema0 = new DBSchema("l<8yvYz$m", dBCatalog0);
      dBSchema0.getDatabase();
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.databene.jdbacl.SQLUtil", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "l<8yvYz$m";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[5] = "l<8yvYz$m";
      stringArray0[6] = "l<8yvYz$m";
      stringArray0[7] = "org.databene.jdbacl.SQLUtil";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("CONSTRAINT   and null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("renamedb_close_on_exit");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("renamedb_close_on_exit", false, defaultDBTable0, "renamedb_close_on_exit");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK renamedb_close_on_exit", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("TS/gpw~Mq503&j", false, defaultDBTable0, "exc");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT TS/gpw~Mq503&j ", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "/8_,i[l");
      SQLUtil.addOptionalCondition("/8_,i[l", stringBuilder0);
      assertEquals("/8_,i[l or /8_,i[l", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.removeComments(" NULL");
      assertEquals(" NULL", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("oJ:Dwp,'OwY1;W");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 105, "P{It2`g");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null P{IT2`G NULL", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "lk";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      SQLUtil.innerJoin((String) null, stringArray0, "resultSetConcurrency", "wPn(Z8", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(" AND ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray0[1], dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("into", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.isQuery("u:3");
      SQLUtil.isDDL("u:3");
      SQLUtil.mutatesStructure("u:3");
      String string0 = "AUTOCOMMIT";
      TableContainer tableContainer0 = new TableContainer("u:3");
      tableContainer0.getTable("jk}GE6W_fC");
      // Undeclared exception!
      try { 
        DBDataType.getInstance(9, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.normalize("callfinal", false);
      assertEquals("callfinal", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("rename");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isQuery(")/BQqI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("rename");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("execute43y07.u");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(" d,3XY");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("selectexects/gpw~mq503&j");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^pEp m6p}L5;Jn";
      stringArray0[1] = "43Y07.U";
      stringArray0[2] = "^pEp m6p}L5;Jn";
      stringArray0[3] = "^pEp m6p}L5;Jn";
      SQLUtil.join("^pEp m6p}L5;Jn", "43Y07.U", stringArray0, (String) null, "43Y07.U", stringArray0);
      SQLUtil.isProcedureCall("43Y07.U");
      DBSchema dBSchema0 = new DBSchema("Z!0W1#[");
      dBSchema0.getTable((String) null);
      DBCatalog dBCatalog0 = new DBCatalog("");
      dBSchema0.setCatalog(dBCatalog0);
      dBSchema0.getSequences(true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("43Y07.U", dBSchema0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.mutatesStructure("^pEp m6p}L5;Jn");
      SQLUtil.typeAndName(dBCatalog0);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "[");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM 43Y07.U WHERE ^pEp m6p}L5;Jn = '^pEp m6p}L5;Jn' AND 43Y07.U = '43Y07.U' AND ^pEp m6p}L5;Jn = '^pEp m6p}L5;Jn' AND ^pEp m6p}L5;Jn = '^pEp m6p}L5;Jn'", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      stringBuilder0.append('p');
      SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("p and ", stringBuilder0.toString());
      
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("", (DBSchema) null);
      dBUniqueConstraint0.setTable(defaultDBTable1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      stringBuilder0.chars();
      SQLUtil.addRequiredCondition("54004", stringBuilder0);
      assertEquals("54004", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("mszwY}=OIfxU.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("mszwY}=OIfxU.", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("mszwY}=OIfxU.", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("eyI$#p~fU~W=~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("mszwY}=OIfxU.", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType.getInstance(95, "nK,x5L3OD>J7kw,(;XY");
      SQLUtil.removeComments("nK,x5L3OD>J7kw,(;XY");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "nK,x5L3OD>J7kw,(;XY");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String[] stringArray1 = new String[2];
      stringArray1[0] = null;
      stringArray1[1] = null;
      SQLUtil.join((String) null, stringArray0[0], stringArray1, (String) null, (String) null, stringArray0);
      SQLUtil.isProcedureCall("null as null on null.null = null.null and null.null = null.null");
      String string0 = "Z!0W1#[";
      DBSchema dBSchema0 = new DBSchema(stringArray1[1]);
      dBSchema0.getTable((String) null);
      DBCatalog dBCatalog0 = new DBCatalog(stringArray1[0]);
      dBSchema0.setCatalog(dBCatalog0);
      dBSchema0.getSequences(true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("final", (DBSchema) null);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.mutatesStructure("final");
      SQLUtil.typeAndName(dBCatalog0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance((-793), stringArray1[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^pEp m6p}L5;Jn";
      stringArray0[1] = "43Y07.U";
      stringArray0[2] = "^pEp m6p}L5;Jn";
      stringArray0[3] = "^pEp m6p}L5;Jn";
      String string0 = SQLUtil.join("^pEp m6p}L5;Jn", "43Y07.U", stringArray0, (String) null, "43Y07.U", stringArray0);
      assertEquals("^pEp m6p}L5;Jn join null as 43Y07.U on 43Y07.U.^pEp m6p}L5;Jn = 43Y07.U.^pEp m6p}L5;Jn and 43Y07.U.43Y07.U = 43Y07.U.43Y07.U and 43Y07.U.^pEp m6p}L5;Jn = 43Y07.U.^pEp m6p}L5;Jn and 43Y07.U.^pEp m6p}L5;Jn = 43Y07.U.^pEp m6p}L5;Jn", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("43Y07.U");
      DBSchema dBSchema0 = new DBSchema("Z!0W1#[");
      dBSchema0.getTable((String) null);
      DBCatalog dBCatalog0 = new DBCatalog("");
      dBSchema0.setCatalog(dBCatalog0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBSchema0.getSequences(true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("43Y07.U", dBSchema0);
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM 43Y07.U WHERE ^pEp m6p}L5;Jn = '^pEp m6p}L5;Jn' AND 43Y07.U = '43Y07.U' AND ^pEp m6p}L5;Jn = '^pEp m6p}L5;Jn' AND ^pEp m6p}L5;Jn = '^pEp m6p}L5;Jn'", string1);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("^pEp m6p}L5;Jn");
      assertTrue(boolean1.equals((Object)boolean0));
      
      String string2 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog ", string2);
      
      String[] stringArray1 = new String[2];
      stringArray1[0] = "^pEp m6p}L5;Jn join null as 43Y07.U on 43Y07.U.^pEp m6p}L5;Jn = 43Y07.U.^pEp m6p}L5;Jn and 43Y07.U.43Y07.U = 43Y07.U.43Y07.U and 43Y07.U.^pEp m6p}L5;Jn = 43Y07.U.^pEp m6p}L5;Jn and 43Y07.U.^pEp m6p}L5;Jn = 43Y07.U.^pEp m6p}L5;Jn";
      stringArray1[1] = "catalog ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XSRS4.S", true, stringArray1);
      dBPrimaryKeyConstraint0.setOwner((CompositeDBObject<?>) null);
      dBPrimaryKeyConstraint0.setDoc("catalog ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string3 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT XSRS4.S UNIQUE (^pEp m6p}L5;Jn join null as 43Y07.U on 43Y07.U.^pEp m6p}L5;Jn = 43Y07.U.^pEp m6p}L5;Jn and 43Y07.U.43Y07.U = 43Y07.U.43Y07.U and 43Y07.U.^pEp m6p}L5;Jn = 43Y07.U.^pEp m6p}L5;Jn and 43Y07.U.^pEp m6p}L5;Jn = 43Y07.U.^pEp m6p}L5;Jn, catalog )", string3);
      
      boolean boolean2 = SQLUtil.isDML("43Y07.U");
      assertFalse(boolean2);
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string4 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT XSRS4.S PRIMARY KEY (^pEp m6p}L5;Jn join null as 43Y07.U on 43Y07.U.^pEp m6p}L5;Jn = 43Y07.U.^pEp m6p}L5;Jn and 43Y07.U.43Y07.U = 43Y07.U.43Y07.U and 43Y07.U.^pEp m6p}L5;Jn = 43Y07.U.^pEp m6p}L5;Jn and 43Y07.U.^pEp m6p}L5;Jn = 43Y07.U.^pEp m6p}L5;Jn, catalog )", string4);
      
      String string5 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("XSRS4.S", string5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "f", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("CONSTRAINT f  and nullCONSTRAINT f ", stringBuilder1.toString());
      assertEquals("CONSTRAINT f  and nullCONSTRAINT f ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "^pEp\\ m6p}L5;Jn";
      String string1 = "43Y07.U";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^pEp m6p}L5;Jn";
      stringArray0[1] = "43Y07.U";
      SQLUtil.normalize("43Y07.U", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "43Y07.U");
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-1912153283));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "yC+*5\"DA47");
      dBSequence0.getIncrementIfNotDefault();
      Long long0 = new Long(0L);
      Long.divideUnsigned(967L, 2764L);
      dBSequence0.setCache(long0);
      SQLUtil.ownerDotComponent(dBSequence0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("fS:Q-B1", dBCatalog0);
      SQLUtil.substituteMarkers("(6M'gG<uF|jR", "(6M'gG<uF|jR", dBSchema0);
      String string0 = SQLUtil.normalize("q4-;'H_A4r]SdzSNuP", false);
      assertEquals("q4 - ; 'H_A4r]SdzSNuP'", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("q(|ZC4u(yP>:M@;");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 4, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance(4, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("br^", defaultDBTable0, dBDataType0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("calla -fnm*o!axw", defaultDBTable0, 366, "renameinserte=g{s)a\u0004d");
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("calla -fnm*o!axw", defaultDBTable0, dBDataType0, (Integer) null, integer1);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn("q(|ZC4u(yP>:M@;", defaultDBTable0, dBDataType0);
      dBColumnArray0[5] = (DBColumn) defaultDBColumn5;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", , br^, calla -fnm*o!axw, calla -fnm*o!axw, q(|ZC4u(yP>:M@;", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema("4O' VL%UO9):k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "'^^n*Xm{hpu";
      stringArray0[1] = "4O' VL%UO9):k";
      stringArray0[2] = "4O' VL%UO9):k";
      stringArray0[3] = null;
      stringArray0[4] = "v5[i:(#gpdYg";
      stringArray0[5] = "4O' VL%UO9):k";
      stringArray0[6] = null;
      stringArray0[7] = "4O' VL%UO9):k";
      stringArray0[8] = "4O' VL%UO9):k";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      String string0 = "create materialized viewms950";
      String string1 = ";.\\T;!1iYgMKuwh(6k";
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(";.T;!1iYgMKuwh(6k", "create materialized viewms950", versionNumber0);
      String string2 = "mruQqn!Ua";
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("mruQqn!Ua");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ';.T;!1iYgMKuwh(6k'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a[6X,{3NCy";
      stringArray0[1] = "create materialized viewv&";
      stringArray0[2] = "c?sAk*r!QaG /}d6on";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("a[6X,{3NCy = 'a[6X,{3NCy' AND create materialized viewv& = 'create materialized viewv&' AND c?sAk*r!QaG /}d6on = 'c?sAk*r!QaG /}d6on'", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(a[6X,{3NCy, create materialized viewv&, c?sAk*r!QaG /}d6on)", string1);
      
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("a[6X,{3NCy", compositeDBObject0);
      tableContainer0.getTable("a[6X,{3NCy");
      DBDataType dBDataType0 = DBDataType.getInstance(41, "!U#{J0");
      Integer integer0 = new Integer(2094);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("a[6X,{3NCy", (DBTable) null, dBDataType0, integer0);
      String string2 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("!U#{J0(2094)", string2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executefinal");
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "ULL";
      stringArray0[5] = "executefinal";
      stringArray0[6] = null;
      stringArray0[7] = "ULL";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("SELECT * FROM ", true);
      assertEquals("SELECT * FROM", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.removeComments(" NULL");
      SQLUtil.normalize("inserte=g{s)a\u0004d", true);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      DBDataType.getInstance(597, " NULL");
      SQLUtil.removeComments("");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "drop materialized viewinserte=g{s)a\u0004d", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("create materialized viewinserte=g{s)a\u0004d", defaultDatabase0);
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("Mdhx\"$,1As'", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'Mdhx\"$,1As''
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.removeComments(" NULL");
      SQLUtil.mutatesDataOrStructure("select into");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = " NULL";
      String string1 = TypeId.NATIONAL_VARCHAR_NAME;
      SQLUtil.normalize("Pg/,XL@9B$)+KJRd", false);
      TableContainer tableContainer0 = new TableContainer("a");
      DBDataType.getInstance(65, "Pg/,XL@9B$)+KJRd");
      DBUniqueIndex dBUniqueIndex0 = null;
      try {
        dBUniqueIndex0 = new DBUniqueIndex((String) null, true, (DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(90127, "");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULL");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NULL", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NULL", false, defaultDBTable0, "exec");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("rename@sl(a/u[6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: rename@sl(a/u[6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = SQLUtil.normalize("q4-;'H_A4r]SdzSNuP", false);
      assertEquals("q4 - ; 'H_A4r]SdzSNuP'", string0);
      
      String string1 = SQLUtil.normalize("s/Z&=4A2O(XV{\"", false);
      assertEquals("s / Z & = 4A2O (XV { \"\"", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Value[] valueArray0 = new Value[0];
      ValueArray valueArray1 = ValueArray.get(valueArray0);
      valueArray1.checkPrecision((-1701L));
      Reader reader0 = valueArray1.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.ttype = 18;
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize("o*+", false);
      assertEquals("o * +", string0);
      
      SQLUtil.removeComments(" o * +");
      String string1 = SQLUtil.normalize("--", false);
      assertEquals("--", string1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter indexwh0le0n k");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "alter indexwh0le0n k";
      stringArray0[4] = null;
      stringArray0[5] = "alter indexwh0le0n k";
      stringArray0[6] = "alter indexwh0le0n k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1940357468), "org.hsqldb.CompiledStatement");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.hsqldb.CompiledStatement", defaultDBTable0, dBDataType0);
      linkedList0.addLast(defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("org.hsqldb.CompiledStatement", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Value[] valueArray0 = new Value[0];
      ValueArray valueArray1 = ValueArray.get(valueArray0);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      Reader reader0 = valueArray1.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("T#^$0(#ar)Y`K\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#ar\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.normalize("boot trace", true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "boot trace";
      stringArray0[1] = "boot trace";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderValue("boot trace");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(boot trace, boot trace)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"boot trace\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
