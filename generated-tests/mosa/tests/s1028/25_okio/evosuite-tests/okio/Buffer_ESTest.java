/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 18:59:09 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Segment segment0 = new Segment();
      realBufferedSource0.buffer.write((Source) buffer_UnsafeCursor0.buffer, (long) (-1));
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.buffer();
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      buffer0.writableSegment(30);
      realBufferedSource0.buffer.hashCode();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer0.writeByte((-1));
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = new ByteString((byte[]) null);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong(42L);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(gzipSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(0);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(0);
      buffer0.readUtf8Line();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.sha256(buffer2);
      hashingSink0.hash();
      try { 
        buffer1.skip(71776119061217284L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      // Undeclared exception!
      try { 
        realBufferedSource1.buffer.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(21L);
      buffer1.readUtf8();
      ByteString[] byteStringArray0 = new ByteString[3];
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[1] = byteString0;
      byte[] byteArray0 = new byte[7];
      buffer1.read(byteArray0);
      try { 
        buffer1.skip(71776119061217284L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.size();
      realBufferedSink0.buffer.skip(0L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.writableSegment(4791);
      realBufferedSource0.buffer.readByteString();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer0 = realBufferedSink0.buffer();
      buffer0.indexOf((byte)81, 100000000L);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Buffer buffer0 = realBufferedSource0.buffer();
      pipe0.sinkClosed = false;
      buffer0.indexOf((byte)0, (long) 1, 100000000000000L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.indexOf((byte)69);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("thread interrupted");
      Buffer buffer1 = buffer0.writeString("thread interrupted", charset0);
      buffer1.readAndWriteUnsafe();
      HashingSink.md5(buffer1);
      buffer_UnsafeCursor0.buffer.readByte();
      buffer0.close();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1069L);
      Buffer buffer1 = pipe0.buffer;
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      buffer1.readFrom((InputStream) sequenceInputStream0);
      Buffer buffer2 = pipe0.buffer;
      try { 
        buffer0.skip(32L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = 429L;
      Pipe pipe0 = new Pipe(429L);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      String string0 = "byteCount < 0: ";
      // Undeclared exception!
      try { 
        buffer1.writeString("byteCount < 0: ", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe((-1L));
      buffer1.readLongLe();
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteString((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Pipe pipe0 = new Pipe(11L);
      Buffer buffer0 = pipe0.buffer;
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.outputStream();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Pipe pipe0 = new Pipe(796L);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      realBufferedSink0.buffer.completeSegmentByteCount();
      try { 
        buffer0.readUtf8Line(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.hashCode();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Pipe pipe0 = new Pipe(65536L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.writableSegment(4791);
      realBufferedSource0.buffer.hashCode();
      Buffer buffer0 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)1, (long) 4791, 68L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=4791 toIndex=68
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(0);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(0);
      buffer0.readUtf8Line();
      ByteString byteString0 = buffer0.readByteString((long) 0);
      buffer1.writeShortLe(0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString[] byteStringArray1 = new ByteString[1];
      byteStringArray1[0] = byteString0;
      Options options0 = Options.of(byteStringArray1);
      buffer3.select(options0);
      buffer1.close();
      Buffer buffer4 = realBufferedSource0.buffer;
      long long0 = new Integer(0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000005L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeByte((-1));
      buffer2.segmentSizes();
      Charset.defaultCharset();
      Buffer buffer3 = buffer0.writeDecimalLong(0L);
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        buffer3.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.readAll(buffer_UnsafeCursor0.buffer);
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readFully(realBufferedSource0.buffer, 1743L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.write(realBufferedSink0.buffer, (-1631L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      buffer0.writeUtf8CodePoint(2198);
      SegmentPool.byteCount = (long) 2198;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer_UnsafeCursor0.buffer, (-2199L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.writeIntLe(737);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.completeSegmentByteCount();
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = new Buffer();
      realBufferedSource0.buffer.readByteString(0L);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8CodePoint(65536);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)13;
      buffer1.write(byteArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.completeSegmentByteCount();
      ByteString byteString0 = hashingSource0.hash();
      buffer0.write(byteString0);
      Charset.defaultCharset();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Pipe pipe0 = new Pipe(1784L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeUtf8CodePoint((-2839));
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.exhausted();
      // Undeclared exception!
      try { 
        buffer1.readByteArray((long) (-2839));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2839
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      ByteString[] byteStringArray0 = new ByteString[3];
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[1] = byteString0;
      byte[] byteArray0 = new byte[7];
      buffer0.read(byteArray0);
      try { 
        buffer0.skip(71776119061217284L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer_UnsafeCursor0.next();
      Buffer buffer2 = buffer0.writeByte(0);
      Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.writeByte(0);
      Integer integer0 = new Integer(1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer1.skip(0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int0 = 524;
      Buffer buffer1 = buffer0.writeByte(524);
      buffer_UnsafeCursor0.next();
      buffer0.writeByte(0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.writeString("size < ", 1, 524, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 524 > 7
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Pipe pipe0 = new Pipe(231L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      int int0 = 737;
      realBufferedSink0.writeIntLe(737);
      HashingSink.md5(realBufferedSource0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      buffer0.completeSegmentByteCount();
      try { 
        realBufferedSource0.readByteString((long) 737);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Pipe pipe0 = new Pipe(840L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte byte0 = (byte)96;
      byte byte1 = (byte)4;
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer1.segmentSizes();
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-833));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = new Buffer();
      realBufferedSink0.writeShortLe(193);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
      realBufferedSink0.buffer.readAll(buffer1);
      realBufferedSink0.writeLong(852L);
      HashingSink.sha512(realBufferedSink0);
      Integer integer0 = new Integer(1610612736);
      // Undeclared exception!
      try { 
        buffer1.getByte(1610612736);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=1610612736 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.writableSegment(4791);
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      realBufferedSource0.buffer.clear();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.writeLongLe((-1L));
      // Undeclared exception!
      try { 
        buffer0.writeAll(buffer_UnsafeCursor0.buffer);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer0.writeByte((-1));
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8(474L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer0.writeByte((-1));
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource0.readByteString();
      ByteString byteString0 = new ByteString((byte[]) null);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      buffer_UnsafeCursor0.resizeBuffer(10000000000L);
      realBufferedSource0.buffer.read(buffer_UnsafeCursor0.data);
      long long0 = 2131L;
      buffer_UnsafeCursor0.buffer.skip(long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = 922L;
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      buffer0.rangeEquals(939L, byteString0);
      byte byte0 = (byte) (-82);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteString(922L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-869));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      buffer1.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8Line(409L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=408 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Pipe pipe0 = new Pipe(429L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.segmentSizes();
      Charset.defaultCharset();
      buffer0.skip((-938L));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      buffer0.read(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.request(9223372036854775807L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer2 = realBufferedSource1.buffer;
      realBufferedSource0.buffer.writeUtf8CodePoint(171);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer0.writeByte((-1));
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeUtf8("Lx/T@]tH2Fmsja@I(");
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = new ByteString((byte[]) null);
      Buffer buffer2 = realBufferedSink0.buffer;
      realBufferedSource0.buffer.writeDecimalLong((-1));
      buffer1.writeUtf8CodePoint((-1));
      buffer1.skip((-1));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      buffer0.writeUtf8CodePoint(2198);
      SegmentPool.byteCount = (-3504L);
      buffer0.close();
      buffer0.size();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer1.segmentSizes();
      Charset.defaultCharset();
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer0.hmacSha1(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      boolean boolean0 = pipe0.sourceClosed;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      MockPrintStream mockPrintStream0 = new MockPrintStream("B-gMWQMXb~64jM");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream2;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) gzipSink0;
      objectArray0[6] = (Object) mockPrintStream2;
      objectArray0[7] = (Object) pipe0;
      objectArray0[8] = (Object) realBufferedSource0;
      PrintStream printStream0 = mockPrintStream2.format("B-gMWQMXb~64jM", objectArray0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      Buffer buffer1 = realBufferedSource0.buffer.copyTo((OutputStream) objectOutputStream0);
      realBufferedSource0.readByteString();
      realBufferedSink0.buffer.writeLongLe(852L);
      realBufferedSink0.buffer();
      try { 
        buffer1.skip(852L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B-gMWQMXb~64jM");
      realBufferedSink0.buffer.writeLongLe(852L);
      long long0 = 10000000000000L;
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeLongLe(10000000000000L);
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1000000L);
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null, 10000000000000L, 1000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.indexOf((byte)69);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("thread interrupted");
      Buffer buffer1 = buffer0.writeString("thread interrupted", charset0);
      buffer1.readAndWriteUnsafe();
      HashingSink.md5(buffer1);
      buffer_UnsafeCursor0.buffer.readByte();
      buffer_UnsafeCursor0.buffer.buffer();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(0);
      buffer0.readUtf8Line();
      ByteString byteString0 = buffer0.readByteString((long) 0);
      buffer0.writeShortLe(0);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[3] = byteString0;
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = new Buffer();
      ByteString[] byteStringArray1 = new ByteString[1];
      byteStringArray1[0] = byteString0;
      Options options0 = Options.of(byteStringArray1);
      buffer2.select(options0);
      buffer0.close();
      Buffer buffer3 = new Buffer();
      buffer3.snapshot();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSource0.buffer.indexOf(byteString0, 2131L);
      MockFile mockFile0 = new MockFile("", "%s: actual 0x%08x != expected 0x%08x");
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.copyTo(realBufferedSource0.buffer, (-2401L), (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-2401 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Pipe pipe0 = new Pipe(429L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.hmacSha1(byteString0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      buffer0.writeUtf8CodePoint(305);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8CodePoint(65536);
      try { 
        buffer1.skip(852L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.writeDecimalLong(16711680L);
      buffer_UnsafeCursor0.close();
      short short0 = ObjectStreamConstants.STREAM_VERSION;
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.writeDecimalLong(852L);
      buffer1.close();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      buffer0.read(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.request(9223372036854775807L);
      realBufferedSource0.buffer.segmentSizes();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      buffer_UnsafeCursor0.seek((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-327L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-327 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeString("]i", 248, 100, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 100 < 248
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Segment segment0 = new Segment();
      try { 
        realBufferedSource0.buffer.write((Source) buffer0, 255L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.indexOf((byte)69);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("thread interrupted");
      Buffer buffer1 = buffer0.writeString("thread interrupted", charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((-1L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x74
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.indexOfElement(byteString0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint(1673);
      realBufferedSink0.writeByte((-379));
      Buffer buffer1 = realBufferedSink0.buffer;
      Segment segment0 = new Segment();
      SegmentPool.next = segment0;
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)11, (-2005L), 2422L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=3 fromIndex=-2005 toIndex=2422
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Pipe pipe0 = new Pipe(65536L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.toString();
      Buffer buffer2 = new Buffer();
      buffer2.flush();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(2020L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer0.writeByte((-1));
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOfElement((ByteString) null, (-116L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = new Buffer();
      try { 
        buffer2.require(60L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.writeByte((-1));
      int int0 = new Integer((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(100000000000L);
      buffer1.writeLongLe(100000000000L);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((-1L));
      buffer2.readLongLe();
      buffer1.toString();
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = new Buffer();
      // Undeclared exception!
      try { 
        buffer2.readByteString(100L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=24 offset=0 byteCount=100
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer1.segmentSizes();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-2000L));
      buffer_UnsafeCursor0.close();
      buffer0.readShort();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000005L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      buffer0.writeTo((OutputStream) bufferedOutputStream0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer1.size();
      // Undeclared exception!
      try { 
        buffer1.readByteString(1000000000000005L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1000000000000005
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer1);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer2 = buffer0.writeDecimalLong(65280L);
      // Undeclared exception!
      try { 
        buffer2.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-19);
      int int0 = ObjectStreamConstants.baseWireHandle;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer0 = realBufferedSink0.buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(3635L);
      HashingSink.md5(buffer1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer1.readFrom((InputStream) byteArrayInputStream0);
      Buffer buffer2 = pipe0.buffer;
      try { 
        buffer2.readFrom((InputStream) byteArrayInputStream0, 1000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f.ai&ndamK).s");
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.writeDecimalLong(65280L);
      buffer0.readDecimalLong();
      buffer0.md5();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.hmacSha1(byteString0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.request((-550L));
      buffer1.segmentSizes();
      buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0, (-370L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Pipe pipe0 = new Pipe(65536L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeUtf8("XMs", (-1), (-3487));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".)4lArRd)k1RE%:@");
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.completeSegmentByteCount();
      Charset.defaultCharset();
      realBufferedSource0.buffer.writeUtf8(".)4lArRd)k1RE%:@", 10, 10);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".)4lArRd)k1RE%:@");
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.completeSegmentByteCount();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8(".)4lArRd)k1RE%:@", 10, 2688);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2688 > 16
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer0.writeByte((-1));
      Charset.defaultCharset();
      Buffer buffer2 = buffer0.clone();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      buffer3.md5();
      buffer2.writableSegment(97);
      buffer1.hashCode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B-gMWQMXb~64jM");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.readByteString();
      realBufferedSource0.buffer.writeLongLe((-123L));
      realBufferedSource0.buffer.writeLongLe(10000000000000L);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(852L);
      buffer1.writeLong(10000000000000L);
      buffer2.readDecimalLong();
      long long0 = 541L;
      try { 
        realBufferedSink0.buffer.skip(354L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(0);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(0);
      Buffer buffer3 = buffer1.writeShortLe(0);
      buffer3.readIntLe();
      HashingSink.md5(buffer0);
      // Undeclared exception!
      try { 
        buffer2.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      Buffer buffer2 = buffer0.writeUtf8(".fD@A;QRM");
      buffer_UnsafeCursor0.next();
      buffer2.writeByte(10);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readByteString();
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-56321));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f.ai&ndamK).s");
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer0.writeDecimalLong(65280L);
      HashingSink hashingSink0 = HashingSink.sha256(buffer3);
      hashingSink0.hash();
      buffer3.read(byteArray0);
      realBufferedSink0.buffer.skip((-35L));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f.ai&ndamK).s");
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer2 = buffer0.writeDecimalLong(65280L);
      try { 
        buffer2.skip(9223372036854775807L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      buffer0.read(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.request(32L);
      buffer0.segmentSizes();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      realBufferedSource0.indexOfElement((ByteString) null, 1000000000000000000L);
      buffer1.writeShort((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(32L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=32 > size=2
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(0);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(0);
      ByteString byteString0 = buffer0.readByteString((long) 0);
      Buffer buffer3 = buffer1.writeShortLe(0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer3.require(0);
      realBufferedSource0.buffer.skip(0);
      buffer2.rangeEquals(1000000000000000L, byteString0, 8192, (-2657));
      buffer4.readUtf8Line();
      buffer4.flush();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.end;
      buffer0.writeInt((-1));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-869));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      HashingSource.sha256(buffer0);
      buffer1.require((-1L));
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readByteString((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000005L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8CodePoint(0);
      buffer0.writeUtf8CodePoint(0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      long long0 = (-117L);
      Buffer buffer1 = realBufferedSource0.buffer.writeLongLe(3814L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.writeLongLe(10000000000000L);
      realBufferedSink0.buffer();
      Buffer buffer3 = realBufferedSink0.buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer3.selectPrefix(options0);
      try { 
        realBufferedSource0.readFully(buffer3, 9918178304L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(18L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer0.writeUtf8CodePoint(1209);
      buffer0.writeUtf8CodePoint(1209);
      Buffer buffer3 = buffer2.writeShortLe(1209);
      buffer2.readIntLe();
      HashingSink.md5(buffer3);
      buffer3.readByte();
      buffer2.close();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B-gMWQMXb~64jM");
      realBufferedSink0.buffer.writeLongLe(852L);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeLongLe(10000000000000L);
      Buffer buffer2 = realBufferedSink0.buffer();
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1000000L);
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x54
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(2552L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.sha256();
      // Undeclared exception!
      try { 
        buffer1.readUtf8(8L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=8
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.writableSegment(4791);
      Buffer buffer0 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong(2566L);
      HashingSink.md5(realBufferedSource0.buffer);
      buffer0.md5();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      int int0 = 2145680555;
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2145680555);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7fe47cab
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      long long0 = 100000000000L;
      Buffer buffer1 = buffer0.writeLongLe(1190L);
      buffer0.readLongLe();
      Buffer buffer2 = new Buffer();
      buffer1.inputStream();
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f.ai&ndamK).s");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.completeSegmentByteCount();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8(".)4lArRd)k1RE%:@", 2688, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 10 < 2688
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-100);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4791, (byte)124);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (byte)124);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer0 = pipe0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, 10L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(852L);
      buffer0.writeLongLe(2192L);
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      buffer1.indexOf(byteString1, 2258L);
      buffer0.writeDecimalLong(42L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.close();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer0.writeByte((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readUtf8(8192L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer0.writeByte((-1));
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer2 = realBufferedSource2.buffer;
      buffer_UnsafeCursor0.resizeBuffer(8192);
      Buffer buffer3 = realBufferedSource1.buffer;
      buffer3.read(buffer_UnsafeCursor0.data);
      buffer1.skip((-3402L));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer1);
      Buffer buffer2 = buffer1.writeUtf8CodePoint(0);
      buffer0.writeUtf8CodePoint(0);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        buffer2.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Segment segment0 = new Segment();
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.timeout();
      byte byte0 = (byte)118;
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf(byteString0, (long) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.writeByte((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer1 = realBufferedSource2.buffer;
      HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeByte((-1));
      buffer0.readByte();
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.close();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.segmentSizes();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeDecimalLong(1000000000000000L);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.readShort();
      // Undeclared exception!
      try { 
        buffer0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Pipe pipe0 = new Pipe(398L);
      Buffer buffer0 = pipe0.buffer;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)36;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-43);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong(71776118979559424L);
      buffer1.skip((-1340L));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999999999988L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(33);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(33);
      byte byte0 = (byte)74;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.request(1882L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Segment segment0 = buffer1.writableSegment(2);
      realBufferedSource0.buffer.head = segment0;
      Pipe pipe1 = new Pipe(2);
      buffer1.readUnsafe();
      segment0.unsharedCopy();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement((ByteString) null, 60L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      byte byte0 = (byte)26;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf(byteString0, (-1056L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-87);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(pipe_PipeSource0, byteString0);
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.emitCompleteSegments();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(100000000000L);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((-1L));
      Buffer buffer3 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer4 = pipe0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      Buffer buffer5 = realBufferedSource1.buffer;
      buffer1.skip(10L);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals((-3767L), byteString0, (-2602), (-2602));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.writeByte((-1));
      buffer_UnsafeCursor0.next();
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict((long) 1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=ff\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      buffer0.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f.ai&ndamK).s");
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-65);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.writeDecimalLong(100000000000000000L);
      buffer0.readDecimalLong();
      buffer0.md5();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe(729L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HmacSHA256");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("$S:{@!:tryvr");
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = new ByteString((byte[]) null);
      bufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong((-1152921504606846976L));
      Pipe pipe0 = new Pipe(729L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink.md5(pipe_PipeSink0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer3 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readByteString((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=32 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Pipe pipe0 = new Pipe(115L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLongLe(806L);
      buffer0.close();
      buffer0.sha1();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      buffer1.readUtf8(0L);
      buffer1.readUtf8();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writableSegment((byte)12);
      buffer0.hashCode();
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString1;
      byteStringArray0[6] = byteString1;
      byteStringArray0[7] = byteString1;
      byteStringArray0[8] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-72);
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Pipe pipe0 = new Pipe(255L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(0);
      buffer0.writeUtf8CodePoint(65280);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
      Buffer buffer2 = pipe0.buffer;
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, 280375465082880L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.writeUtf8CodePoint((-1));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer_UnsafeCursor0.buffer.segmentSizes();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.writeDecimalLong((-1));
      buffer_UnsafeCursor0.close();
      realBufferedSource0.buffer.readShort();
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null, (-1401), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe(729L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eyIB8u2 f,");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "endIndex > length(");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("$S:{@!:tryvr");
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = new ByteString((byte[]) null);
      Buffer buffer2 = bufferedSink0.buffer();
      realBufferedSink0.buffer.writeDecimalLong((-1152921504606846976L));
      Pipe pipe0 = new Pipe(729L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink.md5(pipe_PipeSink0);
      realBufferedSink0.buffer();
      Buffer buffer3 = pipe0.buffer;
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer2.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer0.writeByte((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      // Undeclared exception!
      try { 
        realBufferedSource1.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = new Integer((-1));
      buffer0.writeByte((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readByteString();
      ByteString byteString0 = new ByteString((byte[]) null);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.resizeBuffer(2259L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource2.buffer.readByteString(100L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=100
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(100000000000L);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((-1L));
      Buffer buffer3 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      ByteString byteString0 = realBufferedSource0.readByteString();
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      ByteString byteString1 = new ByteString((byte[]) null);
      ByteString byteString2 = new ByteString((byte[]) null);
      realBufferedSink0.buffer();
      buffer0.writeDecimalLong(100000000000L);
      HashingSink hashingSink1 = HashingSink.md5(realBufferedSource0.buffer);
      HashingSink.md5(hashingSink1);
      // Undeclared exception!
      try { 
        buffer3.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe(729L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eyIB8u2 f,");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HmacSHA256");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeUtf8("$S:{@!:tryvr");
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = new ByteString((byte[]) null);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("87c ZsSzh$=XmR");
      ByteString byteString2 = new ByteString((byte[]) null);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Buffer buffer2 = realBufferedSink1.buffer();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      HashingSink.md5(realBufferedSink1);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      realBufferedSink0.writeDecimalLong((-2135212311));
      Buffer buffer3 = realBufferedSink2.buffer();
      buffer3.readUtf8();
      buffer1.skip((-1));
      // Undeclared exception!
      try { 
        buffer3.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000005L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1);
      buffer0.writeUtf8CodePoint(1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      Buffer buffer4 = buffer3.writeLongLe(10000000000000L);
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer4.equals(buffer1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      int int0 = 97;
      realBufferedSource0.buffer.writableSegment(97);
      realBufferedSource0.buffer.hashCode();
      Buffer buffer0 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = 852L;
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      Buffer buffer0 = pipe0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, (long) (byte) (-100));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -100
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer_UnsafeCursor0.resizeBuffer(100L);
      buffer_UnsafeCursor0.buffer.segmentSizes();
      Charset.defaultCharset();
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      ByteString byteString1 = new ByteString(buffer_UnsafeCursor0.data);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.buffer();
      MockFile mockFile0 = new MockFile("?", "");
      Buffer buffer3 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      realBufferedSource0.buffer();
      Charset.defaultCharset();
      Integer integer0 = new Integer(1073741824);
      realBufferedSource0.buffer.equals(byteString0);
      buffer3.hmacSha256(byteString0);
      buffer1.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer_UnsafeCursor0.resizeBuffer(100L);
      buffer_UnsafeCursor0.buffer.segmentSizes();
      Charset.defaultCharset();
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      ByteString byteString1 = new ByteString(buffer_UnsafeCursor0.data);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Charset.defaultCharset();
      realBufferedSource0.buffer.writeHexadecimalUnsignedLong(0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSource1.buffer;
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      Buffer buffer5 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource1.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(852L);
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(100000000000000L);
      Buffer buffer3 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      HashingSink.hmacSha1(buffer1, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeUtf8(" < ");
      byte[] byteArray0 = null;
      ByteString byteString1 = new ByteString((byte[]) null);
      ByteString byteString2 = new ByteString((byte[]) null);
      Buffer buffer4 = realBufferedSink0.buffer();
      buffer2.writeDecimalLong(100000000000000L);
      HashingSink.md5(buffer4);
      realBufferedSink0.writeByte((-2635));
      realBufferedSink0.emitCompleteSegments();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.buffer();
      try { 
        realBufferedSink0.buffer.skip(100000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer_UnsafeCursor0.buffer.segmentSizes();
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.writeDecimalLong((-1));
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer2.skip((-1));
      // Undeclared exception!
      try { 
        buffer1.writeString("", (-491), (-1514), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -491
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(852L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(852L);
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(100000000000000L);
      Buffer buffer3 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      HashingSink.hmacSha1(buffer1, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      MockFile mockFile0 = new MockFile("", "?");
      Buffer buffer4 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      Buffer buffer5 = realBufferedSource0.buffer();
      buffer5.indexOfElement(byteString0, 100000000000000L);
      Charset.defaultCharset();
      Integer integer0 = new Integer((-1));
      Buffer buffer6 = realBufferedSink0.buffer();
      buffer0.equals(buffer6);
      realBufferedSource1.buffer.hmacSha256(byteString0);
      realBufferedSource0.buffer.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(0);
      buffer0.writeUtf8CodePoint(0);
      Buffer buffer2 = buffer1.writeShortLe(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-98);
      Segment segment0 = new Segment(byteArray0, (byte) (-98), (-2147483623), true, true);
      buffer2.head = segment0;
      // Undeclared exception!
      try { 
        buffer2.readIntLe();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -98
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer_UnsafeCursor0.resizeBuffer(100L);
      Buffer buffer2 = buffer1.writeLongLe(1320L);
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      buffer1.indexOf(byteString0, 55L);
      Buffer buffer3 = buffer2.writeDecimalLong(0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      Buffer buffer4 = realBufferedSink0.buffer();
      buffer4.readUnsafe();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        buffer0.snapshot((-16777216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=109 offset=0 byteCount=-16777216
         //
         verifyException("okio.Util", e);
      }
  }
}
