/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 16:30:53 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp0.subs = regexpArray0;
      regexp0.max = 4;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[17];
      regexp0.min = 1;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotSame(regexp0, regexp1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertSame(regexp1, regexp0);
      assertNotNull(regexp1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexp0.max = (-2608);
      regexp0.min = (-2608);
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      Regexp[] regexpArray1 = new Regexp[1];
      regexp0.subs = regexpArray1;
      regexp0.max = 1;
      regexp0.min = 1;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNull(regexp1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp.Op regexp_Op2 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op2;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[0] = regexp1;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotNull(regexp2);
      assertSame(regexp2, regexp0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[15];
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      regexp0.min = 1;
      regexp0.max = 127280;
      regexp0.subs = regexpArray0;
      regexp0.flags = 7;
      regexp0.max = 3;
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[15];
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      regexp0.max = 127280;
      regexp0.subs = regexpArray0;
      regexp0.max = 3;
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp2);
      regexp3.subs = regexp0.subs;
      Regexp[] regexpArray1 = new Regexp[3];
      regexpArray1[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray1[2] = regexp4;
      regexp2.subs = regexpArray1;
      Regexp regexp5 = Simplify.simplify(regexp3);
      assertNotSame(regexp3, regexp5);
      
      Regexp regexp6 = Simplify.simplify(regexp2);
      assertNotSame(regexp2, regexp6);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[15];
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      regexp0.max = 127280;
      regexp0.subs = regexpArray0;
      regexp0.max = 3;
      regexpArray0[1] = regexp0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp1);
      Regexp regexp4 = new Regexp(regexp2);
      regexp4.subs = regexp0.subs;
      Regexp[] regexpArray1 = new Regexp[3];
      regexpArray1[0] = regexp0;
      regexpArray1[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      regexp2.flags = 127280;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray1[2] = regexp5;
      regexp2.subs = regexpArray1;
      Regexp regexp6 = Simplify.simplify(regexp4);
      assertTrue(regexp6.equals((Object)regexp3));
      
      Regexp regexp7 = Simplify.simplify(regexp2);
      Regexp regexp8 = Simplify.simplify(regexp0);
      Regexp regexp9 = Simplify.simplify(regexp8);
      Simplify.simplify(regexp0);
      Regexp regexp10 = Simplify.simplify(regexp7);
      assertNotSame(regexp10, regexp2);
      assertSame(regexp10, regexp7);
      assertFalse(regexp10.equals((Object)regexp9));
  }
}
