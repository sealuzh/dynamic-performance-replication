/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 04:28:07 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.PMGClass;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("\t\t<");
      assertEquals("L<;", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "boolean";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName("2#HdPW", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.signatureToString("Byte code error: ");
      assertEquals("byte", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature("qE=Vz`jKsPfvkf}/2[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("Invalid signature: ");
      assertEquals("int", string0);
      
      String string1 = Utility.accessToString(86);
      assertEquals("private protected final volatile", string1);
      
      String string2 = Utility.getSignature("int");
      assertEquals("I", string2);
      
      short short0 = Utility.searchOpcode("9d#");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[0] = (byte)23;
      byteArray0[2] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-20);
      byteArray0[4] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-20));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("jsr\t\t#3721", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.classOrInterface(2766);
      Utility.format(2766, (-1113), false, '7');
      Utility.fillup("2766", 2766, false, 'Y');
      Utility.accessToString((-1113), true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte)40;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "~1uqt[w]mj^)";
      stringArray0[1] = "~1uqt[w]mj^)";
      stringArray0[2] = "~1uqt[w]mj^)";
      stringArray0[3] = "~1uqt[w]mj^)";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifgt\t\t#30175", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.compactClassName("void");
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "void";
      objectArray0[1] = (Object) (byte)26;
      objectArray0[2] = (Object) byteSequence1;
      objectArray0[3] = (Object) byteSequence1;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.signatureToString("ZMj0:?i(&]f0aHK", false);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      Utility.isJavaIdentifierPart('\"');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      boolean boolean0 = true;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-94);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)58;
      byteArray0[0] = (byte)5;
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[0];
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-21), (-709));
      // Undeclared exception!
      try { 
        Utility.signatureToString("K$=35!g~V/+@f((q!-2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K$=35!g~V/+@f((q!-2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.replace("2#HdPW;h(V2rU", "2#HdPW;h(V2rU", "2#HdPW;h(V2rU");
      // Undeclared exception!
      try { 
        Utility.signatureToString("2#HdPW;h(V2rU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2#HdPW;h(V2rU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.setBit((-1352), (-1352));
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.methodTypeToSignature("StackMap", (String[]) null);
      Utility.convertString("G$)Jtw/9@");
      // Undeclared exception!
      try { 
        Utility.signatureToString("H'tlXT1!fyCk<A-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'tlXT1!fyCk<A-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("HD3C1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HD3C1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = Utility.isSet(134, 134);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface(134);
      assertEquals("class", string0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte byte0 = Utility.typeOfSignature("FhRX55Zv-^/x");
      assertEquals((byte)6, byte0);
      
      String string1 = Utility.convertString("$?8a;3#eve 3U[Q");
      assertEquals("$?8a;3#eve 3U[Q", string1);
      
      int int0 = Utility.clearBit(278, (byte)6);
      assertEquals(278, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Utility.typeOfSignature("N,=m}^/\"%-%uAQa2/,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N,=m}^/\"%-%uAQa2/,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-95);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)80;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte) (-112);
      byteArray1[3] = (byte)30;
      String string0 = "8@BS6_87k!CRyj|";
      try { 
        Utility.typeOfSignature("8@BS6_87k!CRyj|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8@BS6_87k!CRyj|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Utility.getSignature("RWUt)\"RIJ=R\"M");
      assertEquals("LRWUt)\"RIJ=R\"M;", string0);
      
      short short0 = Utility.searchOpcode("short");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.convertString("\\");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("ifeq\t\t#-19456", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Utility.replace("Rs[W[1i2&_JLVV6H*oS", "Rs[W[1i2&_JLVV6H*oS", "75g%rQE$Sk");
      assertEquals("75g%rQE$Sk", string0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) "75g%rQE$Sk";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), 209);
      assertEquals("0:    newarray\t\t<<illegal type>>\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.accessToString(185);
      assertEquals("public static final synchronized transient", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oVdcc@$~H9`IN[@w2.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("Invalid signature: ", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = "&-";
      try { 
        Utility.typeOfMethodSignature("&-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-77);
      Utility.encode(byteArray0, true);
      Utility.convertString("<illegal opcode>");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 101, (int) (byte) (-40), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = Utility.replace("Rs[W[1i2&_JLVV6H*oS", "Rs[W[1i2&_JLVV6H*oS", "75g%rQE$Sk");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "75g%rQE$Sk";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = Utility.isSet(0, 11);
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString(0, false);
      String string1 = Utility.fillup("EM}u", 0, false, 'r');
      String string2 = Utility.compactClassName("EM}u", false);
      assertTrue(string2.equals((Object)string1));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)2;
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("47 10 10 10 10 47 47 02 02", string3);
      
      ConstantString constantString0 = new ConstantString(1866);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Ueh0%U.UaBvG2~");
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string4 = Utility.codeToString(byteArray0, constantPool1, 7, 255);
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.skipBytes(290);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(64, (byte) (-61));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence3, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence3, constantPool0, true);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.getSignature("${}glV");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[3] = (byte)48;
      byteArray0[2] = (byte)48;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("WE.w@n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WE.w@n'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = "78sh|_>+(X+x&JoXv";
      boolean boolean0 = false;
      Utility.fillup("78sh|_>+(X+x&JoXv", 49, false, '$');
      try { 
        Utility.typeOfSignature("78sh|_>+(X+x&JoXv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 78sh|_>+(X+x&JoXv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-11);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-63);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(49);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantPool constantPool1 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.replace("monitor9exit", "monitor9exit", "monitor9exit");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)14;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)19;
      Utility.encode(byteArray0, true);
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("lconst_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lconst_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.replace("invokeinterface", "invokeinterface", "invokeinterface");
      Utility.clearBit(9982, 213);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "invokeinterface";
      objectArray0[1] = (Object) "invokeinterface";
      objectArray0[2] = (Object) "invokeinterface";
      objectArray0[3] = (Object) "invokeinterface";
      objectArray0[4] = (Object) "invokeinterface";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "invokeinterface";
      String string0 = Utility.printArray(objectArray0, true);
      String string1 = Utility.printArray(objectArray0, false, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte byte0 = (byte)56;
      byte byte1 = (byte) (-94);
      byte byte2 = (byte) (-78);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), 102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpge\t\t#-5469", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("7 t;sN-3+|B1c>b_z");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      String string0 = ":";
      Utility.convertString(":");
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.fillup("3_46X#q+", (-105), true, '}');
      assertEquals("3_46X#q+", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "CONSTANT_Fieldref";
      Utility.typeOfSignature("CONSTANT_Fieldref");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("CONSTANT_Fieldref", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CONSTANT_Fieldref
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte)85;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)77;
      Utility.isJavaIdentifierPart('\"');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)45;
      byteSequence0.readUnsignedByte();
      String string0 = Utility.signatureToString("V", true);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-69);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte)64;
      byteArray1[4] = (byte)85;
      byteArray1[5] = (byte)7;
      byteArray1[5] = (byte)103;
      byteArray1[7] = (byte)84;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence2.reset();
      String string0 = Utility.compactClassName("nop", "nop", true);
      assertEquals("", string0);
      
      byte byte0 = Utility.typeOfSignature("[yNyL");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "java.lang.Gi_3{^yn:H1_c)\\b=P\"";
      try { 
        Utility.typeOfSignature("X)8Y=8kk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X)8Y=8kk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)72;
      byteArray0[4] = (byte) (-75);
      byteArray0[4] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = Utility.replace("monitor9exit", "monitor9exit", "monitor9exit");
      assertEquals("monitor9exit", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_acmpne\t\t#26624", string1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(3157);
      byteSequence1.close();
      byteSequence1.skipBytes((byte)82);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String string0 = Utility.classOrInterface((byte)42);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-18);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Utility.classOrInterface(1249);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('f');
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("new");
      assertEquals("new", string1);
      
      int int0 = Utility.clearBit(65, 214);
      assertEquals(65, int0);
      
      String string2 = Utility.convertString("null");
      assertEquals("null", string2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 15;
      Utility.clearBit(356, 15);
      String string0 = "C";
      boolean boolean0 = true;
      Method method0 = null;
      try {
        method0 = new Method((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      Utility.searchOpcode(" [1");
      Utility.convertString("|]%a.U{+");
      // Undeclared exception!
      try { 
        Utility.getSignature(" [1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type:  [1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureToString("Z;Sl31?,o>:w", "areturn", "Invalid method signature: ", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z;Sl31?,o>:w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.typeOfSignature("S^Gq;*5m");
      String string0 = "invokeVirtual";
      Utility.searchOpcode("invokeVirtual");
      String string1 = "HM)@QrFTGFRr{{]#pj";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("invokeVirtual", "HM)@QrFTGFRr{{]#pj");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // HM)@QrFTGFRr{{]#pj
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.compactClassName("Y/", "Y/", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(2429);
      constantArray0[0] = (Constant) constantString0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(60, 238);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-115));
      constantArray0[2] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-10));
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.compactClassName("\tdefault = ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-38);
      byteArray0[8] = (byte) (-72);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('r');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), (int) (byte) (-72));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "monitor9exit";
      Utility.replace("monitor9exit", "monitor9exit", "monitor9exit");
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skipBytes((-1076));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)117;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[1] = (byte) (-31);
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte)45;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      byteSequence3.read();
      byteSequence3.readUnsignedByte();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence3, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.convertString("45y:Z!KEmuXdL");
      try { 
        Utility.typeOfSignature("45y:Z!KEmuXdL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 45y:Z!KEmuXdL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.convertString("VGsGa6Ws*0|LCa%:");
      assertEquals("VGsGa6Ws*0|LCa%:", string0);
      
      byte byte0 = Utility.typeOfSignature("VGsGa6Ws*0|LCa%:");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.compactClassName("Gi_3{^yn:H1_c)\b=P\"");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Gi_3{^yn:H1_c)\b=P\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gi_3{^yn:H1_c)\b=P\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iflt\t\t#26931", string0);
      
      int int0 = Utility.clearBit(174, 180);
      assertEquals(174, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#-11678", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)72;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 83, 350, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.replace("monitor9exit", "monitor9exit", "monitor9exit");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byte byte0 = (byte)14;
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte) (-90);
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte) (-10);
      byteArray1[5] = (byte) (-90);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("anewarray", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: anewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u0082');
      String string0 = "l";
      try { 
        Utility.decode("l", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.compactClassName("Y/", "Y/", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)90;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Y.", "iho~WTCF9g?I!qht");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"iho~WTCF9g?I!qht\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)94;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("At");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: At
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.compactClassName("void");
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("anewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anewarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.compactClassName("Y/", "Y/", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-115);
      Utility.convertString("zn}q)&HC");
      try { 
        Utility.typeOfSignature("Y/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)45;
      try { 
        Utility.typeOfSignature("%iB5h'VHb5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %iB5h'VHb5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte)22;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)22;
      byteArray1[5] = (byte)22;
      byteArray1[6] = (byte)22;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lload\t\t%22", string0);
      
      String string1 = Utility.convertString("fadd");
      assertEquals("fadd", string1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-81);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.setBit(93, 102);
      assertEquals(93, int0);
      
      int int1 = Utility.clearBit((-416), 16);
      assertEquals((-65952), int1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("", string0);
      
      Utility.convertString("");
      Utility.accessToString(4);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "protected";
      objectArray0[2] = (Object) "protected";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '8';
      charArray0[2] = 'd';
      charArray0[3] = 'v';
      charArray0[4] = '^';
      charArray0[5] = '|';
      charArrayWriter0.write(charArray0);
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) charArrayWriter0;
      objectArray0[8] = (Object) charArrayWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 176, 13, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.compactClassName("void");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte) (-121);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), 4569, false);
      Utility.compactClassName("void", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Uxv\"=\"QIT", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Uxv\"=\"QIT'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("7 t;sN-3+|B1c>b_z");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)3;
      Utility.convertString("7 t;sN-3+|B1c>b_z");
      try { 
        Utility.typeOfSignature("='%+^s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ='%+^s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2812), (-2812));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref((-2812), 3903);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 52, 173);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-44);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "<illegal opcode>";
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)121;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFully(byteArray0);
      byteSequence0.read();
      try { 
        byteSequence0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte) (-112);
      byteArray1[3] = (byte) (-112);
      byteArray1[1] = (byte) (-112);
      byteArray1[5] = (byte) (-112);
      byteArray1[6] = (byte) (-112);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      try { 
        Utility.typeOfSignature("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('x');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)92;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)40;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$y$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.isSet(134, 134);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)34;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("TgU2$5e$40$bb$H$o", string0);
      
      byte[] byteArray1 = Utility.decode("TgU2$5e$40$bb$H$o", false);
      assertArrayEquals(new byte[] {(byte)84, (byte)103, (byte)85, (byte)50, (byte)94, (byte)64, (byte) (-69), (byte)7, (byte)34}, byteArray1);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Utility.getSignature("Byte code error: ");
      assertEquals("LByte;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)47;
      byteArray0[2] = (byte)21;
      String string1 = Utility.signatureToString("LByte;", true);
      assertEquals("Byte", string1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("Dont call getValueByte() on a non BYTE ElementValue");
      try { 
        Utility.decode("Dont call getValueByte() on a non BYTE ElementValue", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P>cS86.5s.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P>cS86.5s.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.getSignature("${}glV");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[3] = (byte)48;
      byteArray0[2] = (byte)21;
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.isSet(874, 874);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-66);
      byte byte0 = (byte)0;
      byteArray0[7] = (byte) (-18);
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[5];
      Utility.isJavaIdentifierPart('>');
      Utility.setBit((byte)0, (byte) (-25));
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(2611L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass((ConstantClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.compactClassName("void");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-97);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1624), (int) (byte)115, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-126);
      byteArray1[1] = (byte) (-119);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jsr_w");
      byteArray1[2] = (byte)54;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("ixor", "goto_w", "ixor");
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-73);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-69);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)96;
      byteArray0[8] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_acmpeq\t\t#10172", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore\t\t%5", string0);
      
      String string1 = Utility.convertString("float");
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.isSet(134, 134);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = Utility.getSignature("$}glV");
      assertEquals("L$}glV;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpne\t\t#9935", string1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-73);
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      boolean boolean1 = Utility.isJavaIdentifierPart('A');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1320, 1809);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.compactClassName("", true);
      Constant[] constantArray0 = new Constant[8];
      ConstantClass constantClass0 = new ConstantClass((byte) (-58));
      constantArray0[0] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger(21);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(21, (byte) (-58));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)61;
      byteArray0[0] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-65);
      byteArray2[4] = (byte) (-63);
      byteArray2[2] = (byte) (-70);
      byteArray2[3] = (byte) (-65);
      byteArray2[4] = (byte) (-70);
      ByteSequence byteSequence2 = new ByteSequence(byteArray2);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.readBoolean();
      ByteSequence byteSequence4 = new ByteSequence(byteArray2);
      Utility.codeToString(byteSequence4, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence3, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature(".C6BWF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .C6BWF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)20;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)5;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.reset();
      Utility.compactClassName("monitorexit", "land", true);
      try { 
        Utility.typeOfSignature("land");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: land
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Illegal type: ", "", "2i\"aN'U89Dm'?NCT$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Illegal type: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("r45_Ruks|DMzE=", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `r45_Ruks|DMzE='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte) (-71);
      byteArray1[4] = (byte) (-71);
      byteArray1[5] = (byte)123;
      byteArray1[6] = (byte)90;
      byteArray1[7] = (byte) (-71);
      byteArray1[8] = (byte) (-71);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("invokestatic");
      assertEquals("Linvokestatic;", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.isJavaIdentifierPart('[');
      Utility.isJavaIdentifierPart('[');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit((-1069), 78);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[4] = (byte)17;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ireturn");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)77;
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$80M$A$A$A$A$A$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.signatureToString("CONSTANT_Long");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)72;
      byteArray0[4] = (byte) (-75);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.getSignature("g{hh");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "Lg{hh;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.isSet(134, 134);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("AnnotationDefault");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)22;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 675, 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, true, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.methodSignatureReturnType("DA/", true);
      Utility.convertString("goto");
      Utility.methodSignatureReturnType("[IH:>TI;oBiZ");
      Utility.replace("int[]", "org.apache.bcel.classfile.Synthetic", "double");
      int int0 = 475;
      Utility.accessToString(475);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)77;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("80 4d 00 00 00 00 00 00", string0);
      
      ConstantString constantString0 = new ConstantString(187);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("DcR[x");
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      int int0 = Utility.clearBit((byte) (-90), (byte) (-128));
      assertEquals((-90), int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.setBit((-1352), (-1352));
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.classOrInterface((-1352));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Utility.getSignature("Byte code error: ");
      assertEquals("LByte;", string0);
      
      String string1 = Utility.accessToString(100);
      assertEquals("protected synchronized volatile", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-71);
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$q0$V$b9", string2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)58;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-21);
      // Undeclared exception!
      try { 
        Utility.signatureToString("G=`v{<,rcE", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G=`v{<,rcE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = ".zip";
      Utility.compactClassName(".zip", false);
      String string1 = "gdA6`{(c,R~;c@>f";
      try { 
        Utility.methodSignatureArgumentTypes("gdA6`{(c,R~;c@>f", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: gdA6`{(c,R~;c@>f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)71;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("50 00 00 00 02 10 47", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature("50 00 00 00 02 10 47");
      assertEquals("L50;", string1);
      
      String string2 = Utility.getSignature("L50;");
      assertEquals("LL50;;", string2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.printArray((Object[]) null, false);
      String string0 = Utility.printArray((Object[]) null, false, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-82);
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte) (-79);
      byteArray1[3] = (byte) (-87);
      byteArray1[4] = (byte) (-85);
      byteArray1[5] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.getSignature("<Wo+F1");
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<Wo+F1;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<Wo+F1;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("IY3|KBj}-G;P|&bmvu");
      Utility.getSignature(" vtR");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, ">", "Y/", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte)85;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)7;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<illegal opcode>";
      Utility.methodTypeToSignature("<illegal opcode>", stringArray0);
      Utility.replace("yZ,=EXbWiUAn", "yZ,=EXbWiUAn", "Rs[W[1i2&_JLVV6H*oS");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "<illegal opcode>";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "yZ,=EXbWiUAn";
      objectArray0[3] = (Object) "<illegal opcode>";
      objectArray0[4] = (Object) "yZ,=EXbWiUAn";
      objectArray0[5] = (Object) "<illegal opcode>";
      objectArray0[6] = (Object) "yZ,=EXbWiUAn";
      objectArray0[7] = (Object) "Rs[W[1i2&_JLVV6H*oS";
      Object object1 = new Object();
      objectArray0[8] = object1;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Rs[W[1i2&_JLVV6H*oS", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rs[W[1i2&_JLVV6H*oS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)85;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 3322);
      assertEquals("0:    nop\n1:    iadd\n2:    castore\n", string0);
      
      String string1 = Utility.convertString("0:    nop\n1:    iadd\n2:    castore\n");
      assertEquals("0:    nop\\n1:    iadd\\n2:    castore\\n", string1);
      
      String string2 = Utility.compactClassName("byte");
      assertEquals("byte", string2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)90;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)119;
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte)12;
      byteArray1[7] = (byte)90;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, false);
      byte[] byteArray2 = Utility.decode("|ud2HFW:78C[e:q^{", false);
      assertEquals(17, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.compactClassName("Y/", "Y/", true);
      Utility.signatureToString("J!a", true);
      try { 
        Utility.typeOfMethodSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(11, 11, byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureToString("x", "x", "x", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[0] = (byte)23;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)11;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-11), 1603);
      assertEquals("0:    fload\t\t%0\n2:    dstore_0\n3:    <illegal opcode>\n4:    fconst_0\n", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'";
      stringArray0[1] = "0:    fload\t\t%0\n2:    dstore_0\n3:    <illegal opcode>\n4:    fconst_0\n";
      String string1 = Utility.printArray((Object[]) stringArray0, true, true);
      assertEquals("{\"'\", \"0:    fload\t\t%0\n2:    dstore_0\n3:    <illegal opcode>\n4:    fconst_0\n\", null}", string1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2, (int) (byte) (-121), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.encode(byteArray0, true);
      String string0 = "arraylength";
      try { 
        Utility.methodSignatureToString("arraylength", "", "", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte byte0 = (byte) (-90);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte)65;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("5Gc^T%Kk_<PebERM", "", "");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "EV]6E{m>R";
      try { 
        Utility.typeOfSignature("EV]6E{m>R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EV]6E{m>R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("", "", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "C>iyux";
      stringArray0[4] = "";
      stringArray0[5] = "C>iyux";
      stringArray0[6] = "C>iyux";
      Utility.methodTypeToSignature("C>iyux", stringArray0);
      Utility.searchOpcode("");
      Utility.isSet((short) (-1), (short) (-1));
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("7 t;sN-3+|B1c>b_z");
      Constant[] constantArray0 = new Constant[2];
      Constant.setComparator((BCELComparator) null);
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-81);
      byteArray0[6] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = Utility.setBit((byte)50, 150);
      int int1 = Utility.clearBit(4194354, (-276));
      assertTrue(int1 == int0);
      
      String string0 = Utility.convertString("7 t;sN-3+|B1c>b_z");
      assertEquals("7 t;sN-3+|B1c>b_z", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      Utility.fillup(",ZX^fUClz Mnr-]!J9", (byte)91, true, 'U');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte) (-119);
      byteArray1[2] = (byte) (-44);
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte) (-88);
      byteArray1[5] = (byte) (-119);
      byteArray1[6] = (byte) (-119);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Utility.replace("RWUt)\"RIJ=R\"M", "array", "(Oc@_a9`.(\"n9`K T");
      assertEquals("RWUt)\"RIJ=R\"M", string0);
      
      int int0 = Utility.setBit(911, 10);
      assertEquals(1935, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "The list of suffixes must not be null";
      Utility.convertString("The list of suffixes must not be null");
      Utility.typeOfSignature("The list of suffixes must not be null");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte) (-21);
      byteArray1[3] = (byte)21;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)97;
      byteArray1[6] = (byte)21;
      byteArray1[7] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)21, 164);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      byteSequence3.reset();
      Utility.compactClassName("... (truncated)", "ZE#>J@([uP*", true);
      try { 
        Utility.typeOfSignature("aFejjDz eP=YCW=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aFejjDz eP=YCW=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#AXOeXZXH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #AXOeXZXH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "Qw.(j";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Qw.(j");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("Qw.(j", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qw.(j'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("U>e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U>e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)44;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte byte0 = Utility.typeOfSignature("ZrTT");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Types");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Types
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = Utility.compactClassName("void");
      assertEquals("void", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-121);
      String string1 = Utility.signatureToString("CF?s2>49}g", false);
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      short short0 = Utility.searchOpcode("(");
      assertEquals((short) (-1), short0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('C');
      assertTrue(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.getSignature("4:D{EK>Bl^!");
      assertEquals("L4:D{EK>Bl^!;", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = Utility.convertString("(");
      assertEquals("(", string1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte byte0 = (byte)19;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Utility.compactClassName("f7,TV9lX|$@");
      assertEquals("f7,TV9lX|$@", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.convertString("istore_1");
      assertEquals("istore_1", string1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ifnull", "ifnull");
      mockFile0.delete();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.format(303, 41, false, 'N');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-28);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-28), (byte)8);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("ifnull");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(9, (byte) (-116));
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-116), (int) (byte) (-116), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1252. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "McW%?N2n";
      stringArray0[1] = "astore_0";
      stringArray0[2] = "McW%?N2n";
      stringArray0[3] = "McW%?N2n";
      stringArray0[4] = "McW%?N2n";
      stringArray0[5] = "McW%?N2n";
      stringArray0[6] = "McW%?N2n";
      Utility.methodTypeToSignature("McW%?N2n", stringArray0);
      try { 
        Utility.typeOfSignature("McW%?N2n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: McW%?N2n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.replace("monitor9exit", "monitor9exit", "monitor9exit");
      byte[] byteArray0 = new byte[7];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1246), (-1246));
      String string0 = "RuntimeVisibleAnnotations";
      try { 
        Utility.typeOfSignature("RuntimeVisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-58);
      byteArray0[4] = (byte) (-119);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.getSignature("${}glV");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[3] = (byte)48;
      byteArray0[2] = (byte)21;
      try { 
        Utility.typeOfSignature("${}glV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ${}glV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)36;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature(";NBrK\"x>fc:!|Pi)ht");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;NBrK\"x>fc:!|Pi)ht
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-772), (int) (byte)20, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("Invalid signature: ");
      try { 
        Utility.decode("int", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.accessToString(65536);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.getSignature("${}glV");
      byte[] byteArray0 = new byte[4];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)65;
      byteArray0[4] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      short short0 = Utility.searchOpcode(" (");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = Utility.isSet(134, 134);
      assertFalse(boolean0);
      
      Utility.signatureToString("FZhRX55Zv-^/x", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte)0;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$82$5ba$a0$82$ef$d8$A", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)24;
      byteArray0[2] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)85;
      Utility.encode(byteArray0, false);
      Utility.convertString("TgU$A$A$A$A$A$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("k}{1aJ=5DZa:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `k}{1aJ=5DZa:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-80);
      byteArray0[7] = (byte)104;
      Utility.encode(byteArray0, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-55), (-1893));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)79;
      Utility.isSet(41, 240);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Types", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Types
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.compactClassName("java.lang.Gi_3{^yn:H1_c)\b=P\"");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skipBytes((byte) (-61));
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence4, (ConstantPool) null, true);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)103;
      byte byte0 = (byte)85;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)94;
      String string0 = "9q4{";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "9q4{";
      stringArray0[1] = "9q4{";
      stringArray0[2] = "9q4{";
      stringArray0[3] = "9q4{";
      stringArray0[4] = "9q4{";
      stringArray0[5] = "mq!BH)gh*?|g_,9<L0i";
      Utility.methodTypeToSignature("9q4{", stringArray0);
      try { 
        Utility.typeOfSignature("9q4{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9q4{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.getSignature("${}glV");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.bcel.classfile.LineNumberTable";
      stringArray0[1] = "${}glV";
      stringArray0[2] = "if_acmpne";
      stringArray0[3] = "L${}glV;";
      stringArray0[4] = null;
      stringArray0[5] = "${}glV";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.typeOfSignature("BbDU?mbv.[C");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("goto", stringArray0);
      StringWriter stringWriter0 = new StringWriter((byte)8);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("BbDU?mbv.[C", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.classOrInterface(4342);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byte byte0 = (byte)11;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)73;
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((-4058));
      Utility.isJavaIdentifierPart(':');
      String string0 = "TfiLCI`";
      try { 
        Utility.methodSignatureArgumentTypes("TfiLCI`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: TfiLCI`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = Utility.replace("Rs[W[1i2&_JLVV6H*oS", "Rs[W[1i2&_JLVV6H*oS", "75g%rQE$Sk");
      assertEquals("75g%rQE$Sk", string0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("dload_1", false);
      assertEquals("dload_1", string1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]9\u0002S~N");
      String string0 = Utility.replace("Warning: Padding byte != 0 in ;)vG*4}J;*jm>`5hj43", "Warning: Padding byte != 0 in ;)vG*4}J;*jm>`5hj43", "Warning: Padding byte != 0 in ;)vG*4}J;*jm>`5hj43");
      assertEquals("Warning: Padding byte != 0 in ;)vG*4}J;*jm>`5hj43", string0);
      
      String string1 = Utility.fillup("Mw`]G<1D", 83, false, 'a');
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMw`]G<1D", string1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ifgt");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)0;
      String string0 = Utility.methodTypeToSignature("Dont call getValueByte() on a non BYTE ElementValue", (String[]) null);
      assertEquals("()LDont;", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifgt\t\t#-26541", string0);
      
      String string1 = Utility.convertString("double");
      assertEquals("double", string1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore\t\t%219", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte) (-64);
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte) (-86);
      byteArray1[7] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.convertString("VGsGa6Ws*0|LCa%:");
      assertEquals("VGsGa6Ws*0|LCa%:", string0);
      
      byte[] byteArray0 = Utility.decode("VGsGa6Ws*0|LCa%:", false);
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = (-1673);
      Utility.format((-1673), (-1673), true, 'U');
      Utility.setBit((-1673), (-1673));
      Utility.printArray((Object[]) null, true, false);
      String string0 = null;
      String string1 = "z_9:O+\"";
      boolean boolean0 = true;
      int int1 = (-2511);
      Attribute[] attributeArray0 = new Attribute[7];
      int int2 = 403;
      ConstantPool constantPool0 = null;
      PMGClass pMGClass0 = new PMGClass((-1673), 403, (-2511), 266, (ConstantPool) null);
      attributeArray0[0] = (Attribute) pMGClass0;
      int int3 = 65;
      File file0 = MockFile.createTempFile("z_9:O+\"", ".L=Fze;");
      MockFile mockFile0 = new MockFile(file0, "Clone Not Supported");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "ez5|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"ez5|\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("geJ6=Opp;N^Z?IlHp'u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: geJ6=Opp;N^Z?IlHp'u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iinc\t\t%132\t41", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = Utility.compactClassName("monitor9exit");
      assertEquals("monitor9exit", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)14;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte)81;
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.convertString("fastore");
      assertEquals("fastore", string1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((-2130));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2130), 47, (LocalVariable[]) null, constantPool1);
      try { 
        Utility.methodSignatureToString("Constant pool at index ", "freturn", "freturn", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Constant pool at index 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.compactClassName("void");
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1624), (int) (byte)102, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iflt\t\t#20158", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte byte0 = (byte) (-78);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-78);
      byteArray0[8] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("PV7kae", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", "?(~=K");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("7 t;sN-3+|B1c>b_z");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.accessToString((int) (byte)62, true);
      assertEquals("private protected static final", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.skip((-1673L));
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) null;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("i2l", "float", "i2l", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("/qO4o*z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /qO4o*z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_acmpne\t\t#26624", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.setBit((-1352), (-1352));
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.accessToString((-1352));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "checkcast";
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.Constants", stringArray0);
      assertEquals("(Lcheckcast;)Lorg/apache/bcel/Constants;", string0);
      
      Utility.methodSignatureArgumentTypes("(Lcheckcast;)Lorg/apache/bcel/Constants;", false);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lcheckcast;)Lorg/apache/bcel/Constants;", true);
      assertEquals(1, stringArray1.length);
      
      String string1 = Utility.fillup("nop", 196, false, 'O');
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOnop", string1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("istore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `istore_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "dP,`rOA R@Pr%F%p";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "dP,`rOA R@Pr%F%p";
      stringArray0[1] = "dP,`rOA R@Pr%F%p";
      stringArray0[2] = "dP,`rOA R@Pr%F%p";
      stringArray0[3] = "dP,`rOA R@Pr%F%p";
      stringArray0[4] = "dP,`rOA R@Pr%F%p";
      stringArray0[5] = "dP,`rOA R@Pr%F%p";
      stringArray0[6] = "dP,`rOA R@Pr%F%p";
      stringArray0[7] = "dP,`rOA R@Pr%F%p";
      stringArray0[8] = "dP,`rOA R@Pr%F%p";
      Utility.methodTypeToSignature("dP,`rOA R@Pr%F%p", stringArray0);
      Utility.printArray((Object[]) stringArray0, true, true);
      Utility.format(371, 0, true, 'D');
      try { 
        Utility.methodSignatureReturnType("dP,`rOA R@Pr%F%p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dP,`rOA R@Pr%F%p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)11;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-11), (int) (byte)23);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.signatureToString("McW%?N2n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `McW%?N2n'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)71;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("<ldF$kH6:|yR", stringArray0);
      Utility.printArray((Object[]) stringArray0, false);
      Utility.convertString("<ldF$kH6:|yR");
      Utility.isSet((-2390), 219);
      Utility.compactClassName(">pj0E$(d:\u0000,`sm7i", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Clone Not Supported", "lxor", "V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Clone Not Supported
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      Utility.accessToString(145, false);
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byte byte0 = (byte)11;
      byteArray0[1] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.replace("Rs[W[1i2&_JLVV6H*oS", "Rs[W[1i2&_JLVV6H*oS", "75g%rQE$Sk");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) "75g%rQE$Sk";
      Utility.printArray(objectArray0, true, true);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-68);
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "(";
      try { 
        Utility.methodSignatureArgumentTypes("(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("iload\t\t%0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iload\t\t%0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)9;
      byteArray0[6] = (byte)88;
      String string0 = Utility.encode(byteArray0, false);
      String string1 = Utility.convertString("$J$fdD$J$A$AX$A$A");
      assertTrue(string1.equals((Object)string0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.accessToString(25);
      assertEquals("public static final", string2);
      
      String string3 = Utility.getSignature("org.apache.bcel.classfile.Utility$1");
      assertEquals("Lorg/apache/bcel/classfile/Utility$1;", string3);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "Byte code error: ";
      Utility.signatureToString("Byte code error: ", true);
      String string1 = "SYSTEM";
      MockFile mockFile0 = new MockFile("SYSTEM");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "SYSTEM");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // SYSTEM
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-80);
      String string0 = Utility.encode(byteArray0, false);
      String string1 = Utility.convertString("X$b0$c7$b0$b0");
      assertTrue(string1.equals((Object)string0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifnonnull\t\t#-20302", string2);
      
      String string3 = Utility.accessToString(47);
      assertEquals("public private protected static synchronized", string3);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)120;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1216.926542821343));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = Utility.decode("fw|$$dXq!7qT4fiugD", false);
      assertEquals(17, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      // Undeclared exception!
      try { 
        Utility.signatureToString("No`Mx=Tl", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `No`Mx=Tl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-95);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, (int) (byte)30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = Utility.setBit((byte) (-18), (byte) (-18));
      assertEquals((-18), int0);
      
      int int1 = Utility.clearBit(167, 93);
      assertEquals(167, int1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = " arg";
      // Undeclared exception!
      try { 
        Utility.signatureToString(" arg", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` arg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      int int0 = Utility.setBit((byte)0, (-2312));
      assertEquals(16777216, int0);
      
      int int1 = Utility.clearBit(216, 16);
      assertEquals(216, int1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("E#v\"'dLC:6<8Wa");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "E#v\"'dLC:6<8Wa";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "E#v\"'dLC:6<8Wa";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "E#v\"'dLC:6<8Wa";
      objectArray0[5] = (Object) mockPrintStream0;
      mockPrintStream0.format("E#v\"'dLC:6<8Wa", objectArray0);
      mockPrintStream0.println(0.0);
      mockPrintStream0.println(true);
      Object[] objectArray1 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray1);
      Utility.classOrInterface(103);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E#v\"'dLC:6<8Wa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E#v\"'dLC:6<8Wa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)2;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte)53);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "0:    if_icmpge\t\t#-32350\n3:    lor\n4:    lor\n5:    iconst_m1\n6:    nop\n7:    nop\n8:    nop\n";
      objectArray0[2] = (Object) (byte) (-127);
      objectArray0[3] = (Object) (byte)2;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (-1104));
      Utility.getSignature("0:    if_icmpge\t\t#-32350\n3:    lor\n4:    lor\n5:    iconst_m1\n6:    nop\n7:    nop\n8:    nop\n");
      try { 
        Utility.methodSignatureArgumentTypes("L0:;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L0:;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.replace("[=Z", "[=Z", "float");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2094), (int) (byte)36, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.equals(byteArray0, byteArray0);
      Utility.convertString("'");
      Utility.searchOpcode("'");
      Utility.isJavaIdentifierPart('\"');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte)11;
      byteArray1[4] = (byte)11;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.compactClassName("'", "monitorexit", true);
      Utility.accessToString(82, true);
      try { 
        Utility.typeOfMethodSignature(",RdP-Ud4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,RdP-Ud4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip((byte)80);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readBoolean();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-95);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte) (-95);
      byteArray1[2] = (byte) (-81);
      byteArray1[3] = (byte)112;
      byteArray1[4] = (byte) (-95);
      byteArray1[5] = (byte)112;
      byteArray1[6] = (byte) (-95);
      byteArray1[7] = (byte)120;
      byteArray1[8] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 41391. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)104;
      byteArray0[8] = (byte)104;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)104, 140);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|z>|JZVkv");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifne\t\t#14923", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("invokestatic");
      assertEquals("invokestatic", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      Utility.searchOpcode("nop");
      Utility.searchOpcode("nop");
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.setBit((byte) (-103), (byte)99);
      assertEquals((-103), int0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)1);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      try { 
        constantPool0.getConstant(23, (byte)117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Utility.replace("monitor9exit", "monitor9exit", "monitor9exit");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.skipBytes(95);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString(">oJ0n]]?VQ,WOF#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>oJ0n]]?VQ,WOF#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.clearBit(1124, 1124);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = Utility.convertString("f<lat");
      assertEquals("f<lat", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-59);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("_$c5", string1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.convertString("? extends ");
      Utility.getSignature("? extends ");
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(160, (-2129));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifeq\t\t#-19303", string0);
      
      String string1 = Utility.accessToString(56, true);
      assertEquals("static final", string1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("VGsGa6Ws*0|LCa:");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 0, 171);
      assertEquals("0:    nop\n1:    aconst_null\n2:    lneg\n3:    lrem\n", string0);
      
      String string1 = Utility.classOrInterface((byte)0);
      assertEquals("class", string1);
      
      int int0 = Utility.clearBit((byte)0, (byte)117);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = "[6=Z";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[6=Z", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `6=Z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
      Utility.encode(byteArray0, true);
      Utility.convertString("float");
      try { 
        Utility.typeOfSignature("1Wkt)[RIJfCRN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1Wkt)[RIJfCRN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[2] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool1, (-291), (-1470), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-44);
      byteArray1[1] = (byte)107;
      byteArray1[2] = (byte)106;
      byteArray1[3] = (byte) (-72);
      byteArray1[4] = (byte) (-23);
      byteArray1[5] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      byteSequence1.mark((byte)107);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Utility.replace("1Wkt)[RIJfC=R\"M", "1Wkt)[RIJfC=R\"M", "1Wkt)[RIJfC=R\"M");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)90;
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte)90);
      // Undeclared exception!
      try { 
        Utility.getSignature("1Wkt)[RIJfC=R\"M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[RIJfC=R\"M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-121);
      try { 
        Utility.typeOfSignature("+.4{=8C#OLd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .4{=8C#OLd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_icmplt");
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 3, 97);
      assertEquals("3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      boolean boolean0 = Utility.isSet(134, 134);
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("FZhRX55Zv-^/x", false);
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte)0;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Utility.compactClassName("f7,TV9lX|$@");
      byte[] byteArray0 = Utility.decode("f7,TV9lX|$@", false);
      Utility.compactClassName("f7,TV9lX|$@");
      MockPrintStream mockPrintStream0 = new MockPrintStream("double");
      mockPrintStream0.println(false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "f7,TV9lX|$@";
      objectArray0[1] = (Object) "double";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.accessToString(197, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 197, 2305, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)58;
      byteArray0[0] = (byte)5;
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[0];
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-21), (-709));
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Utility.getSignature("2#HdPW;h(V2rU");
      Utility.signatureToString("L2#HdPW;h(V2rU;");
      Utility.compactClassName("compiled from\t\t", ", npairs = ", true);
      int int0 = 0;
      Utility.format(0, 255, true, '[');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "L2#HdPW;h(V2rU;";
      objectArray0[1] = (Object) "compiled from\t\t";
      objectArray0[2] = (Object) ", npairs = ";
      objectArray0[3] = (Object) "2#HdPW";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Utility.printArray(objectArray0, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(", npairs = ", "Ctb|ksf6P");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Ctb|ksf6P
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Utility.printArray(objectArray0);
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null, null}", string0);
      
      String string1 = Utility.compactClassName("{null, null, null, null}", "{null, null, null, null}", true);
      assertEquals("", string1);
      
      String string2 = Utility.getSignature("{null, null, null, null}");
      assertEquals("L{null,;", string2);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)71;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(255);
      constantArray0[0] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("5b 00 00 00 02 10 47");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 47, (-1548));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.setBit((byte)99, 60);
      assertEquals(268435555, int0);
      
      String string0 = Utility.classOrInterface(47);
      assertEquals("class", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("63", string1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Utility.getSignature("Byte code error: ");
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LByte;", "Byte code error: ", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("N,=m}^/\"%-%uAQa2/,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N,=m}^/\"%-%uAQa2/,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byte byte0 = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.format(3613, 3613, false, 'e');
      Utility.compactClassName(string0);
      String string1 = "VUG2p!@kGVC\"0a:z";
      int int0 = 36;
      DataInput dataInput0 = null;
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Utility.replace("Rs[W[1i2&_JLVV6H*oS", "Rs[W[1i2&_JLVV6H*oS", "75g%rQE$Sk");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object1;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("McW%?N2n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `McW%?N2n'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-41);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-41), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[2] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      Utility.convertString("Visiting non-standard PMGClass object");
      try { 
        Utility.typeOfSignature("3VX5=OPj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3VX5=OPj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Utility.isJavaIdentifierPart('T');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Utility.replace("HD3C1", "HD3C1", "HD3C1");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dneg", "float", "HD3C1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dneg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Utility.searchOpcode("5Ww\"H");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "5Ww\"H";
      objectArray0[1] = (Object) "5Ww\"H";
      objectArray0[2] = (Object) "5Ww\"H";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "5Ww\"H";
      objectArray0[5] = (Object) "5Ww\"H";
      objectArray0[6] = (Object) "5Ww\"H";
      objectArray0[7] = (Object) "5Ww\"H";
      Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "81ql#1";
      stringArray0[1] = "5Ww\"H";
      Utility.methodTypeToSignature("{5Ww\"H, 5Ww\"H, 5Ww\"H, java.lang.Object@685d1b12, 5Ww\"H, 5Ww\"H, 5Ww\"H, 5Ww\"H}", stringArray0);
      Utility.printArray((Object[]) stringArray0, true);
      Utility.convertString("81ql#1");
      int int0 = 116;
      Utility.isSet((short) (-1), 116);
      Utility.compactClassName("81ql#1", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("81ql#1", "(descriptor_index = ", "V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 81ql#1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.decode("nop", false);
      try { 
        Utility.methodSignatureReturnType("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Utility.replace("Rs[W[1i2&_JLVV6H*oS", "Rs[W[1i2&_JLVV6H*oS", "75g%rQE$Sk");
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)93;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)113);
      assertEquals("0:    nop\n1:    aconst_null\n2:    dup2_x1\n3:    nop\n", string0);
      
      int int0 = Utility.clearBit(80, (byte)0);
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("RWUt)\"RIJ=R\"M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RWUt)\"RIJ=R\"M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Utility.convertString("The list of suffixes must not be null");
      Utility.typeOfSignature("The list of suffixes must not be null");
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of suffixes must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = Utility.setBit((byte)0, (byte)0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)25;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte)25;
      byteArray1[2] = (byte)25;
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte)25;
      byteArray1[5] = (byte)25;
      byteArray1[6] = (byte)25;
      byteArray1[7] = (byte)25;
      byteArray1[8] = (byte)25;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readBoolean();
      // Undeclared exception!
      try { 
        byteSequence1.read(byteArray1, 90, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-71);
      byteArray0[1] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.accessToString(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = Utility.fillup("[>1W]xRBGnumVpRJg^", (-2760), false, '2');
      assertEquals("[>1W]xRBGnumVpRJg^", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Utility.isSet(0, 11);
      Utility.accessToString(0, false);
      String string0 = "EM}u";
      Utility.fillup("EM}u", 0, false, 'r');
      Utility.compactClassName("EM}u", false);
      Utility.isSet(1711, 0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lload_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)118;
      byteArray1[1] = (byte) (-74);
      byteArray1[2] = (byte) (-95);
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte)80;
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("v$b6$a1$_P$A$A$A", string0);
      
      byte[] byteArray2 = Utility.decode("v$b6$a1$_P$A$A$A", false);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-74), (byte) (-95), (byte)47, (byte)80, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(8, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      int int0 = 2585;
      Utility.classOrInterface(2585);
      String string0 = "iyb";
      // Undeclared exception!
      try { 
        Utility.signatureToString("iyb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iyb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      ConstantString constantString0 = new ConstantString((byte)33);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_icmple");
      String string0 = Utility.getSignature("byte");
      assertEquals("B", string0);
      
      short short0 = Utility.searchOpcode("if_icmple");
      assertEquals((short)164, short0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Utility.setBit((-1352), (-1352));
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)25;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureToString("$y$Z", "$y$Z", "The wildcard array must not be null", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $y$Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("1Wkt)[RIJfC=R\"M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RIJfC=R\"M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LSn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LSn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte)85;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)64;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)64;
      byteArray1[2] = (byte)114;
      byteArray1[3] = (byte)84;
      byteArray1[4] = (byte)84;
      byteArray1[5] = (byte)84;
      byteArray1[6] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, 0, 171);
      assertEquals("0:    nop\n1:    aconst_null\n2:    lneg\n3:    lrem\n", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[eBPy)B", "[eBPy)B", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Utility.replace("1Wkt)[RIJfC=R\"M", "1Wkt)[RIJfC=R\"M", "1Wkt)[RIJfC=R\"M");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-18);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)1, false);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("E/qLP]JS>MWTJk", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E/qLP]JS>MWTJk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)103;
      byteArray0[6] = (byte)88;
      Utility.encode(byteArray0, false);
      Utility.convertString("$J$fdDg$A$AX$A$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byte byte0 = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Utility.setBit((-1352), (-1352));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-18);
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, 241);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = Utility.convertString("ifnonnull");
      assertEquals("ifnonnull", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "ifnonnull";
      objectArray0[1] = (Object) "ifnonnull";
      objectArray0[2] = (Object) "ifnonnull";
      objectArray0[3] = (Object) "ifnonnull";
      objectArray0[4] = (Object) "ifnonnull";
      objectArray0[5] = (Object) "ifnonnull";
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("ifnonnull, ifnonnull, ifnonnull, ifnonnull, ifnonnull, ifnonnull", string1);
      
      MockFile mockFile0 = new MockFile("ifnonnull, ifnonnull, ifnonnull, ifnonnull, ifnonnull, ifnonnull", "ifnonnull");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(67L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[0] = (byte)23;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)11;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte) (-128);
      byteArray1[3] = (byte) (-11);
      byteArray1[4] = (byte)23;
      byteArray1[5] = (byte) (-11);
      byteArray1[6] = (byte) (-128);
      byteArray1[7] = (byte) (-69);
      byteArray1[8] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload\t\t%23", string0);
      
      Utility.codeToString(byteSequence0, constantPool0, false);
      int int0 = Utility.setBit((-4113), 3484);
      assertEquals((-4113), int0);
      
      int int1 = Utility.clearBit((byte)23, 192);
      assertEquals(22, int1);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.replace("monitor9exit", "monitor9exit", "monitor9exit");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)14;
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", "fastore", "static", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = "5k?dV(q>( ?O^z[o{J";
      try { 
        Utility.typeOfSignature("5k?dV(q>( ?O^z[o{J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5k?dV(q>( ?O^z[o{J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)56;
      boolean boolean0 = false;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 14, 1468, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = Utility.getSignature("RWUt)\"RIJ=R\"M");
      assertEquals("LRWUt)\"RIJ=R\"M;", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-219), 1750);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "rRrc`4&8s|", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Utility.compactClassName("Y/", "Y/", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-10);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Y/";
      stringArray0[1] = "Y.";
      stringArray0[2] = "Y.";
      stringArray0[3] = "Y.";
      stringArray0[4] = "3\"rw\"eiq";
      stringArray0[5] = "Y.";
      Utility.methodTypeToSignature("", stringArray0);
      try { 
        Utility.typeOfSignature("WXF_P=sH},Po\"(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WXF_P=sH},Po\"(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-235), 76);
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("F3chRX55Zp-l/x", true);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Utility.compactClassName("java.lang.Gi_3{^yn:H1_c)\b=P\"");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-99);
      byte byte0 = (byte) (-67);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)58;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[3] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = "";
      Utility.replace("\t\t#", "\t\t#", "");
      Utility.getSignature("");
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$Z$97P$d5$O", string0);
      
      byte[] byteArray1 = Utility.decode("$Z$97P$d5$O", false);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-105), (byte)80, (byte) (-43), (byte)14}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      byte byte0 = (byte) (-94);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)20;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte)53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("Y/", "Y/", true);
      assertEquals("Y.", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.accessToString((int) (byte) (-104), true);
      assertEquals("static final transient native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)68;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$J$fdD$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$J$fdD$A$A$A$A$A$A", false);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-3), (byte)68, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("${}glV");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[3] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = Utility.replace("Rs[W[1i2&_JLVV6H*oS", "Rs[W[1i2&_JLVV6H*oS", "75g%rQE$Sk");
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.convertString("75g%rQE$Sk");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Utility.setBit((-1352), (-1352));
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)44;
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)25;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)25, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-29);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)68;
      Utility.isJavaIdentifierPart('Z');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("z\"", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode("if_acmpne");
      // Undeclared exception!
      try { 
        Utility.decode("/?-u$2t~VBIST", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2t\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("lsub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lsub'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-14), (-427));
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte) (-49);
      byteArray1[2] = (byte) (-49);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.typeOfSignature("1Wkt)[RIJfC=R\"M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1Wkt)[RIJfC=R\"M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = Utility.getSignature("Byte code error: ");
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)36;
      String string1 = Utility.convertString("LByte;");
      assertTrue(string1.equals((Object)string0));
      
      byte byte0 = Utility.typeOfSignature("LByte;");
      assertEquals((byte)14, byte0);
      
      String string2 = Utility.signatureToString("LByte;", true);
      assertEquals("Byte", string2);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Utility.compactClassName("java.lang.Gi_3{^yn:H1_c)\b=P\"");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-99);
      byte byte0 = (byte) (-67);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifle\t\t#-13938", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = "DB<i";
      boolean boolean0 = true;
      Utility.signatureToString("DB<i", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-72);
      Utility.equals(byteArray0, byteArray0);
      int int0 = 89;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, "(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"(\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)77;
      Utility.isJavaIdentifierPart('\"');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[16];
      byteArray1[2] = (byte) (-128);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.typeOfSignature("JOuOZ{;~J}^J+C*O");
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".m!OOr";
      stringArray0[1] = "B";
      stringArray0[2] = ".m!OOr";
      Utility.methodTypeToSignature(".m!OOr", stringArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(".m!OOr", "", ".m!OOr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .m!OOr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]9\u0002S~N");
      int int0 = 83;
      Utility.fillup("Mw`]G<1D", 83, false, 'a');
      Utility.decode("", false);
      try { 
        Utility.methodSignatureArgumentTypes("if_icmpne");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = Utility.getSignature("java.lang.Gi_3{^yn:H1_c)\b=P\"");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.format((-2844), (byte)5, true, 'f');
      assertEquals("-2844", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = Utility.convertString("VGsGa6Ws*0|LCa%:");
      assertEquals("VGsGa6Ws*0|LCa%:", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, 0, (-1015), false);
      assertEquals("0:    nop\n1:    nop\n2:    bipush\t\t63\n", string1);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName(")\t", ")\t", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("freturn", "freturn", ">\t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Utility.compactClassName("java.lang.Gi_3{^yn:H1_c)\bP\"");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)51);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "java.lang.Gi_3{^yn:H1_c)\bP\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.append('b');
      Utility.printArray(printWriter0, (Object[]) constantArray0);
      assertEquals(31, charArrayWriter1.size());
      assertEquals(31, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-41);
      Utility.searchOpcode("");
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte)80;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-9), 896);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(=", "(=", "(=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1952));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8895. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ireturn");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.typeOfSignature("Deprecated");
      String string0 = "";
      URI uRI0 = MockURI.create("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Utility.compactClassName("void");
      String string0 = Utility.getSignature("org.apache.bcel.classfile.ElementValuePair");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jar:file:";
      stringArray0[1] = "boolean";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("*mJB.i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mJB.i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "LCONSTANT_NameAndType;V";
      stringArray0[1] = "K<RpX";
      stringArray0[2] = "";
      stringArray0[3] = "LCONSTANT_NameAndType;V";
      stringArray0[4] = "K<RpX";
      stringArray0[5] = "java.lang.Gi_3{^yn:H1_c)\b=P\"";
      stringArray0[6] = "LCONSTANT_NameAndType;V";
      Utility.methodTypeToSignature("long", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)61;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "LCONSTANT_NameAndType;V", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)105;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_icmple");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.convertString("`'4'C-n,eul VrDOC5");
      assertEquals("`\\'4\\'C-n,eul VrDOC5", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)120;
      Utility.equals(byteArray0, byteArray0);
      Utility.convertString("4:D{EK>Bl^!");
      Utility.searchOpcode("4:D{EK>Bl^!");
      Utility.isJavaIdentifierPart('T');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("OLM=ZmDs#J1w", "Ll;9", true);
      Utility.accessToString(1272, true);
      try { 
        Utility.typeOfMethodSignature("ishl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ishl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Utility.isSet(194, 240);
      // Undeclared exception!
      try { 
        Utility.signatureToString("float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = "q";
      Utility.replace("java.lang.java.lng.Gi_3{^yn:H1_c)\bP\"", "q", "java.lang.");
      boolean boolean0 = false;
      Utility.compactClassName("q", "java.lang.", false);
      Utility.compactClassName("java.lang.java.lng.Gi_3{^yn:H1_c)\bP\"");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.java.lng.Gi_3{^yn:H1_c)\bP\"", "q", "HxgpK^oZEZ7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.java.lng.Gi_3{^yn:H1_c)\bP\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Utility.compactClassName("Y/Y.");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.skipBytes(64);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence4, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = Utility.compactClassName("R6p.zk`DC7k");
      assertEquals("R6p.zk`DC7k", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.accessToString(987, true);
      assertEquals("public private static final volatile transient native", string1);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.accessToString(2309);
      assertEquals("public protected native strictfp", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Utility.convertString("monitorexit");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitorexit", "monitorexit", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)11;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-11), 1603);
      assertEquals("0:    ior\n1:    fload\t\t%71\n3:    <illegal opcode>\n4:    fconst_0\n", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'";
      stringArray0[1] = "0:    ior\n1:    fload\t\t%71\n3:    <illegal opcode>\n4:    fconst_0\n";
      stringArray0[2] = "0:    ior\n1:    fload\t\t%71\n3:    <illegal opcode>\n4:    fconst_0\n";
      String string1 = Utility.methodTypeToSignature("0:    ior\n1:    fload\t\t%71\n3:    <illegal opcode>\n4:    fconst_0\n", stringArray0);
      assertEquals("(L';L0:;L0:;)L0:;", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("80 17 47 f5 0b", string2);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5T9hTCErQAFm");
      Utility.printArray(objectArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      Utility.convertString("float");
      try { 
        Utility.methodSignatureToString("float", (String) null, "(K.zHf&<3/)X(:S8F1", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Utility.isSet(0, 11);
      Utility.accessToString(0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Utility.toHexString(byteArray0);
      ConstantString constantString0 = new ConstantString((-898));
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("10 10 00 00");
      Constant[] constantArray0 = new Constant[3];
      MockPrintStream mockPrintStream0 = new MockPrintStream("impdep1");
      Locale locale0 = Locale.CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "h fPcbQ`", (Object[]) constantArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      constantString0.dump(dataOutputStream0);
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      Utility.codeToString(byteArray0, constantPool1, (-898), 2427);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 505, false, ':');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Utility.replace("J)GlrRx?mbE", "S]Yyj", "\t<");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)59;
      byte byte0 = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "',Dvi@";
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      Utility.replace("B", "B", "B");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("long", "array", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)77;
      String string0 = Utility.encode(byteArray0, false);
      Utility.compactClassName("$80M$A$A$A$A$A$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.replace("$80M$A$A$A$A$A$A", "$80M$A$A$A$A$A$A", "$80M$A$A$A$A$A$A");
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("7 t;sN-3+|B1c>b_z");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.convertString("`'4'C-n,eul VrDOC5");
      assertEquals("`\\'4\\'C-n,eul VrDOC5", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "~1uqt[w]mj^)";
      stringArray0[1] = "~1uqt[w]mj^)";
      stringArray0[2] = "~1uqt[w]mj^)";
      stringArray0[3] = "~1uqt[w]mj^)";
      stringArray0[4] = "~1uqt[w]mj^)";
      Utility.methodTypeToSignature("~1uqt[w]mj^)", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("~1uqt[w]mj^)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~1uqt[w]mj^)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = " JPp`o_";
      Utility.convertString(" JPp`o_");
      try { 
        Utility.typeOfSignature("&[7aW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &[7aW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureToString(")", ">\t", "$Z$Z$y$y", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)59);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)59;
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence3, constantPool0, false);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = Utility.compactClassName("J4F i}/0", "J4F i}/0", true);
      assertEquals("J4F i}.0", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "*}OQ9A| 3285";
      stringArray0[3] = "*}OQ9A| 3285";
      stringArray0[4] = "";
      stringArray0[5] = "*}OQ9A| 3285";
      stringArray0[6] = "*}OQ9A| 3285";
      String string1 = Utility.methodTypeToSignature("*}OQ9A| 3285", stringArray0);
      assertEquals("(L;L;L*}OQ9A|;L*}OQ9A|;L;L*}OQ9A|;L*}OQ9A|;)L*}OQ9A|;", string1);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Utility.replace("monitor9exit", "monitor9exit", "monitor9exit");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)19;
      Utility.encode(byteArray0, true);
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      try { 
        Utility.typeOfSignature("UX.$)y~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UX.$)y~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)93;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)113);
      assertEquals("0:    nop\n1:    iload_1\n2:    dup2_x1\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = Utility.replace("Rs[W[1i2&_JLVV6H*oS", "Rs[W[1i2&_JLVV6H*oS", "75g%rQE$Sk");
      assertEquals("75g%rQE$Sk", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-63);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)96;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$A$E$c19BEO$60", string1);
      
      short short0 = Utility.searchOpcode("Kpt c");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Utility.methodSignatureReturnType("CONSTANT_InvokeDynamic", true);
      Utility.isSet(874, (-1477));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-18);
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)5;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Utility.signatureToString("Byte code error: ");
      Utility.getSignature("java.lang.");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)2;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-43);
      byteArray1[1] = (byte) (-65);
      byteArray1[2] = (byte) (-43);
      byteArray1[3] = (byte) (-43);
      byteArray1[4] = (byte) (-43);
      byteArray1[5] = (byte) (-43);
      byteArray1[6] = (byte)123;
      byteArray1[7] = (byte)123;
      byteArray1[8] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = "X)8Y=8kk";
      // Undeclared exception!
      try { 
        Utility.signatureToString("X)8Y=8kk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X)8Y=8kk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = "Illegal type: ";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Utility.compactClassName("", "", false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      Object object0 = new Object();
      objectArray0[6] = object0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)118;
      byteArray1[1] = (byte) (-74);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1624), (-1159164748), false);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_icmple");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      Utility.convertString("if_icmple");
      try { 
        Utility.typeOfSignature("-Y5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -Y5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpge\t\t#3", string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte)85;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[13];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, false);
      MockFile mockFile0 = new MockFile("f2i");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "f2i");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // f2i
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-29), 191, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = "*5]{z{\"";
      Utility.convertString("*5]{z{\"");
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte)85;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[18];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)7;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byteSequence1.reset();
      Utility.compactClassName("iconst_4", "ZE#>J@([uP*", true);
      try { 
        Utility.typeOfSignature("Qc_[HL@^:k\"Xw;wU'|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qc_[HL@^:k\"Xw;wU'|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.available();
      byteSequence0.read();
      byteSequence1.mark(1382);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("astore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)91;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, ")", "instanceof", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("checkcast", stringArray0);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()Lcheckcast;", false);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.fillup("dup_x1", (byte)90, true, '(');
      assertEquals("dup_x1((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((", string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)116;
      byteArray1[2] = (byte) (-52);
      byteArray1[3] = (byte)92;
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte) (-58);
      byteArray1[6] = (byte) (-52);
      byteArray1[7] = (byte)116;
      byteArray1[8] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      byteSequence0.skipBytes((byte) (-52));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ifnull", "ifnull");
      mockFile0.delete();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.format(303, 41, false, 'N');
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)8;
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)119;
      byteArray0[8] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte)28, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-161), 356);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-106);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-106);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)97;
      byte byte0 = (byte)5;
      byteArray0[2] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)97, (byte) (-58));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger((ConstantInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = "invokestatic";
      try { 
        Utility.typeOfSignature("invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = "O#zxK#yt<l).";
      String string1 = "abstract";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C#*Z!sR");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "abstract");
      // Undeclared exception!
      try { 
        Utility.signatureToString("O#zxK#yt<l).", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O#zxK#yt<l).'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte) (-40);
      Constant[] constantArray0 = new Constant[7];
      ConstantInteger constantInteger0 = new ConstantInteger(84);
      constantArray0[0] = (Constant) constantInteger0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[4] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[5] = (Constant) constantString1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[6] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-40), 105, true);
      assertEquals("0:    castore\n1:    caload\n2:    fload_0\n3:    astore_0\n4:    fconst_0\n5:    fconst_2\n6:    <illegal opcode>\n7:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("S*Ie7W/O{WheGTRo-");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("_nC6K4:Z@55wc8`y>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_nC6K4:Z@55wc8`y>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1Wkt)[RIJfC=R\"M");
      Utility.convertString("1Wkt)[RIJfC=R\"M");
      Utility.format(43, 43, true, 'T');
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Utility.isJavaIdentifierPart('t');
      String string0 = "l";
      try { 
        Utility.decode("l", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-73);
      String string0 = Utility.getSignature("w/u,jA");
      assertEquals("Lw/u,jA;", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$A$b7", string1);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(11, 58);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(=", "(=", "(=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)77;
      Utility.isJavaIdentifierPart('\"');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-128);
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)45;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.compactClassName("ior", "monitorexit", false);
      Utility.accessToString(559, false);
      try { 
        Utility.typeOfMethodSignature("KTf/Nx9a~b37uD;&;q]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KTf/Nx9a~b37uD;&;q]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_icmple");
      Utility.getSignature("if_icmple");
      Utility.searchOpcode("WsCvhH;BKY0(C6XMG");
      Utility.methodTypeToSignature("is(1ub", (String[]) null);
      try { 
        Utility.typeOfSignature("()Lis(1ub;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()Lis(1ub;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = Utility.replace("1Wkt)[RIJfC=R\"M", "1Wkt)[RIJfC=R\"M", "1Wkt)[RIJfC=R\"M");
      assertEquals("1Wkt)[RIJfC=R\"M", string0);
      
      String string1 = Utility.format((-1764), 84, true, 'A');
      assertEquals("-1764AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string1);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Utility.getSignature("Byte code error: ");
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes(95);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-60);
      byteArray1[2] = (byte)74;
      byteArray1[3] = (byte)84;
      byteArray1[4] = (byte) (-78);
      byteArray1[5] = (byte)109;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence1.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence4, (ConstantPool) null, true);
      Utility.accessToString(39, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)109, 2108, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = "Y/";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1603, 129);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lxor", "float", "lxor", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lxor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("monitorexit");
      assertEquals((short)195, short0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Utility.signatureToString("VU3<20T93rku\":Xv");
      String string0 = Utility.accessToString(2651, true);
      assertEquals("public private static final volatile strictfp", string0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t<");
      assertEquals("L<;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("lstore\t\t%217", string1);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("bastore", string2);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.convertString("iload_3");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.fillup("iload_3", (byte)70, false, '5');
      assertEquals("555555555555555555555555555555555555555555555555555555555555555iload_3", string2);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byteSequence2.mark(2);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.Gi_3{^yn:H1_c)\b=P\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Gi_3{^yn:H1_c)\b=P\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = Utility.compactClassName("goto_w", true);
      assertEquals("goto_w", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      short short0 = Utility.searchOpcode("goto_w");
      assertEquals((short)200, short0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      Utility.typeOfSignature("IYeRlC6b");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-71);
      byteArray0[2] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("EV]6E{m>R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EV]6E{m>R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.skipBytes(95);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)80;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence0.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString(">oJ0n]]?VQ,WOF#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>oJ0n]]?VQ,WOF#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = Utility.convertString("f<lat");
      assertEquals("f<lat", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_0", string1);
      
      short short0 = Utility.searchOpcode("f<lat");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("O-Xqio&pL1cd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O-Xqio&pL1cd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readBoolean();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      int int0 = (-1352);
      Utility.setBit((-1352), (-1352));
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)45;
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)25;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dadd", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("c", string1);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-161), 356);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = "r[~onpp=\\~[";
      // Undeclared exception!
      try { 
        Utility.signatureToString("r[~onpp=~[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `r[~onpp=~['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)120;
      Utility.equals(byteArray0, byteArray0);
      Utility.convertString("4:D{EK>Bl^!");
      Utility.searchOpcode("4:D{EK>Bl^!");
      Utility.isJavaIdentifierPart('T');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.getSignature("static");
      Utility.searchOpcode("impdep2");
      Utility.methodTypeToSignature("static", (String[]) null);
      try { 
        Utility.typeOfSignature("HN'l<Re;)q:%e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HN'l<Re;)q:%e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Utility.compactClassName("java.lang.Gi_3{^yn:H1_c)\b=P\"");
      // Undeclared exception!
      try { 
        Utility.signatureToString("YB<i", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YB<i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte) (-40);
      byteArray1[2] = (byte)16;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("=r*Q8>7", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=r*Q8>7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      boolean boolean0 = false;
      Utility.fillup("", 66, false, 'E');
      ByteSequence byteSequence0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = Utility.classOrInterface(1249);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('f');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      String string1 = Utility.accessToString(1304);
      assertEquals("static final native abstract", string1);
      
      String string2 = Utility.getSignature("new");
      assertEquals("Lnew;", string2);
      
      int int0 = Utility.clearBit((-1767), 12);
      assertEquals((-5863), int0);
      
      int int1 = Utility.setBit(8192, 150);
      assertEquals(4202496, int1);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = Utility.replace("1=Z", "1=Z", "float");
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("JavaClass.debug");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iconst_1", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature("wide", stringArray0);
      assertEquals("()Lwide;", string2);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PEYZe,.IndhY|ve: i");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-74);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "$Qp$a1p$b6$a1$b6";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte) (-95);
      objectArray0[3] = (Object) (byte) (-95);
      Object object1 = new Object();
      objectArray0[4] = object1;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      String string0 = "64Fb2\"pudwcx";
      try { 
        Utility.typeOfSignature("64Fb2\"pudwcx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 64Fb2\"pudwcx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)114;
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte) (-5);
      byteArray1[3] = (byte) (-16);
      byteArray1[4] = (byte)79;
      byteArray1[5] = (byte) (-76);
      byteArray1[6] = (byte)42;
      byteArray1[7] = (byte)88;
      byteArray1[8] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)38, 250);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("istore\t\t%94", string0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("d2f", "float", "d2f", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Utility.compactClassName("java.lang.Gi_3{^yn:H1_c)\b=P\"");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)59;
      try { 
        Utility.typeOfSignature("Gi_3{^yn:H1_c)\b=P\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gi_3{^yn:H1_c)\b=P\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("nop", string0);
      
      int int0 = Utility.setBit(95, 65);
      assertEquals(95, int0);
      
      int int1 = Utility.clearBit((byte)105, (byte)37);
      assertEquals(73, int1);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Utility.compactClassName("goto_w", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 123, (int) (byte) (-58), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteSequence0.skipBytes(95);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      String string0 = Utility.accessToString((int) (byte)31, true);
      assertEquals("public private protected static final", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-202), (-202), false);
      assertEquals("0:    lload_1\n1:    lastore\n2:    lastore\n3:    nop\n4:    nop\n5:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)5;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.reset();
      byteSequence0.readChar();
      Utility.compactClassName("monitorexit", "ladd", true);
      try { 
        Utility.typeOfSignature("ladd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ladd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-536));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      constantArray0[2] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 191. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[2] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("7 t;sN-3+|B1c>b_z");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)57;
      try { 
        Utility.typeOfSignature(" ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureToString("", "breakpoint", "eO<5<jB2ujjWo]0V", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)77;
      Utility.isJavaIdentifierPart('\"');
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("faload");
      Utility.getSignature("? extends ");
      Utility.searchOpcode("int");
      Utility.methodTypeToSignature("int", (String[]) null);
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.convertString("The list of suffixes must not be null");
      Utility.typeOfSignature("The list of suffixes must not be null");
      Utility.convertString("zn}q)&HC");
      try { 
        Utility.typeOfSignature("KaJvD95l\th>O(&S7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KaJvD95l\th>O(&S7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)104);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility$1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = Utility.accessToString(169);
      assertEquals("public static synchronized transient", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dload_2", string1);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.convertString("aload\t\t%0");
      try { 
        Utility.methodSignatureArgumentTypes("'=^Jse:<7", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '=^Jse:<7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byte byte0 = Utility.typeOfSignature("IYeRlC6b");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.convertString("IYeRlC6b");
      assertEquals("IYeRlC6b", string0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)17;
      byteArray0[0] = (byte) (-46);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Utility.compactClassName("goto_w", true);
      byte[] byteArray0 = new byte[1];
      Utility.compactClassName("goto_w", "goto_w", true);
      Utility.classOrInterface((-676));
      Utility.isJavaIdentifierPart('1');
      try { 
        Utility.methodSignatureArgumentTypes("byte", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("-@TKDG8e?TPw.A\"zl=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -@TKDG8e?TPw.A\"zl=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ifnull");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      mockPrintWriter0.println();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) pipedWriter0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Utility.isSet(0, 0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)106;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Utility.replace("monitor9exit", "monitor9exit", "monitor9exit");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)14;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = "? super ";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)43;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("@hyw3i9b41-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @hyw3i9b41-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.clearBit((byte) (-65), (byte) (-65));
      try { 
        Utility.methodSignatureReturnType("Ps|E~#6rLr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ps|E~#6rLr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("monitorexit", "ladd", true);
      Utility.accessToString((int) (byte)5, false);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)120;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte)120;
      byteArray1[4] = (byte)105;
      byteArray1[5] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("7 t;sN-3+|B1c>b_z");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-98);
      byteArray0[4] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("7 t;sN-3+|B1c>b_z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7 t;sN-3+|B1c>b_z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("dstore_1", "dstore_1", true);
      Utility.accessToString(129, true);
      try { 
        Utility.typeOfMethodSignature("OLM=ZmDs#J1w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OLM=ZmDs#J1w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Utility.isSet(134, 134);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-52);
      boolean boolean0 = true;
      Utility.setBit((byte) (-70), (byte) (-52));
      String string0 = "";
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("U", string0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)11;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 12, 1603);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-17);
      byteArray0[8] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance(" methods:\n");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      assertEquals(1, byteSequence0.getIndex());
      
      boolean boolean0 = Utility.isJavaIdentifierPart('x');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 174, (-1092));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      Utility.encode(byteArray0, false);
      Utility.convertString("MM}(r~B6g{!");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)85;
      byteArray1[4] = (byte)85;
      byteArray1[5] = (byte)85;
      byteArray1[6] = (byte)85;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      byteArray0[3] = (byte)83;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ireturn");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_icmple");
      Utility.getSignature("byte");
      short short0 = Utility.searchOpcode("if_icmple");
      assertEquals((short)164, short0);
      
      String string0 = Utility.methodTypeToSignature("monitorenter", (String[]) null);
      assertEquals("()Lmonitorenter;", string0);
      
      byte byte0 = Utility.typeOfSignature("B");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      String string0 = "[=Z";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, ";W;@${[WvwF%ZE;", "ny 5aX)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
